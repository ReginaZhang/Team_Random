As discussed in our previous report, were are using a microservices architecture, with different components communicating by JSON over HTTP. This facilitates modularity, decoupling, and robustness, and allows clear distribution of responsibility. The technologies used in our services are as follows.

For hosting the Health Manager service, we are using the Java language, backed by the lightweight yet battle-tested Jetty server. The Java Virtual Machine has received hundreds of thousands of man hours of development effort, and is generally much more performent than the runtimes of dynamically typed languages like Ruby and Python, allowing it to better handle the cpu demands of our recommendation system. For our health manager REST API we make use of the Spark microframework, which rests atop Jetty and allows endpoints to be expressed extremely concisely via Java 8 lamdas.

For setting up the API connection microservices such as the product nutrition information service, Python is used. The language allows rapid development and iteration, and as the problem is mostly IO bound (waiting on the network or the database), Python's lesser performance than Java is not an issue. The CherryPy lightweight REST framework is used, allowing rapid and concise development of internal API endpoints without the bloat or learning curve of a larger framework like Django.

For the forum backend, we are using the Clojure language. It runs atop the JVM, allowing excellent interop with our Java code and the JVM library ecosystem, while its dynamic, lisp-inspired nature allow for rapid development and iteration, and its focus on pure functions and immutability encourages robust code with fewer bugs. Using the Ring http framework, it can run atop the performant Jetty server, the same as our Java health manager backend.

For the forum frontend, we're using the Clojurescript language. Not only does this allow code sharing with the Clojure backend and taking advantage of the language's focus on immutability/pure functions, but it also allows use of the revolutionary Reagent framework. Reagent is built atop Facebook's React, but abstracts away the details of React and the underlying platform entirely, presenting an extremely simple interface to the user in the form of reagent/atom. A Reagent atom is identical in functionality to a normal Clojure[script] atom, except that Reagent keeps track of all references and dereferences of it, and automatically updates all code that references it when the atom is updated. This allows specifying of UI elements completely declaratively, massively simplifying development of the forum's complex dynamic functionality.

As an example, the following code will produce a div that will display "atom is True" if the myAtom contains true, and "atom is False" otherwise. MyAtom can be passed around between functions or even Clojurescript's pseudo threads, and whenever it is updated the contents of mydiv will be updated to match.

[:div.mydiv
  (if @myAtom "atom Is True" "atom Is False) ]

Clojurescript's focus on immutability also allows Reagent to make optimisations not possible in standard React, potentially making it faster in some cases.

For the about page and carousel, we are using standard Javascript augmented by the open source Microsoft Typescript Compiler. Typescript allows optional type annotations, increasing the ease with which Javascript can be developed and debugged, and is particularly well suited to handling the finicky details of implementing the carousel. As annotations are optional and the code generated is readable, standard Javascript, interop with other Javascript libraries is easy.

For our database, we're using MariaDB. MariaDB is fully backwards compatible with MySql, allowing the team to take advantage of their knowledge of MySql syntax and tooling, such as MySql Workbench and the MySql command line interface. It also however delivers better performance than MySql for many wordloads (https://mariadb.com/blog/mariadb-53-optimizer-benchmark), and is gaining traction in the industry as a MySql replacement: Wikipedia and Google have migrated to it, and it has now replaced MySql as the default in Red Hat 7 (https://mariadb.com/blog/why-should-you-migrate-mysql-mariadb).

For our server, we're using Arch Linux hosted on a Linode VPS. Using Arch Linux allows keeping up-to-date with the latest versions of software, as its repositories are updated quite regularly, which prevents the use of old, insecure versions. This also improves development tooling, for instance allowing use of Java 8, which offers a superior programming experience to Java 7 due to features such as lambdas and parameter annotations. It is also the distribution that the team's devops manager is most familiar with, and its simple, minimal core makes it easy to address and debug any issues that arise. Being a fast-moving distribution, there is greater risk of breakage than with a slower-moving distro, but this can be mitigated by backups (Linode offers automatic backup facilities) and familiarity with the distribution, as described in the risk section of this document
