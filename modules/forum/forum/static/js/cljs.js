if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

/**
 * React v0.12.2
 */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.React=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var ReactChildren = _dereq_("./ReactChildren");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactDOM = _dereq_("./ReactDOM");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDefaultInjection = _dereq_("./ReactDefaultInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTypes = _dereq_("./ReactPropTypes");
var ReactServerRendering = _dereq_("./ReactServerRendering");
var ReactTextComponent = _dereq_("./ReactTextComponent");

var assign = _dereq_("./Object.assign");
var deprecated = _dereq_("./deprecated");
var onlyChild = _dereq_("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;

if ("production" !== "development") {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
}

// TODO: Drop legacy elements once classes no longer export these factories
createElement = ReactLegacyElement.wrapCreateElement(
  createElement
);
createFactory = ReactLegacyElement.wrapCreateFactory(
  createFactory
);

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactCompositeComponent.createClass,
  createElement: createElement,
  createFactory: createFactory,
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidClass: ReactLegacyElement.isValidClass,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign,

  // Deprecations (remove for 0.13)
  renderComponent: deprecated(
    'React',
    'renderComponent',
    'render',
    this,
    render
  ),
  renderComponentToString: deprecated(
    'React',
    'renderComponentToString',
    'renderToString',
    this,
    ReactServerRendering.renderToString
  ),
  renderComponentToStaticMarkup: deprecated(
    'React',
    'renderComponentToStaticMarkup',
    'renderToStaticMarkup',
    this,
    ReactServerRendering.renderToStaticMarkup
  ),
  isValidComponent: deprecated(
    'React',
    'isValidComponent',
    'isValidElement',
    this,
    ReactElement.isValidElement
  )
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    Component: ReactComponent,
    CurrentOwner: ReactCurrentOwner,
    DOMComponent: ReactDOMComponent,
    DOMPropertyOperations: DOMPropertyOperations,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    MultiChild: ReactMultiChild,
    TextComponent: ReactTextComponent
  });
}

if ("production" !== "development") {
  var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'http://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'http://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

// Version exists only in the open-source version of React, not in Facebook's
// internal version.
React.version = '0.12.2';

module.exports = React;

},{"./DOMPropertyOperations":12,"./EventPluginUtils":20,"./ExecutionEnvironment":22,"./Object.assign":27,"./ReactChildren":31,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactDOM":37,"./ReactDOMComponent":39,"./ReactDefaultInjection":49,"./ReactElement":52,"./ReactElementValidator":53,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./ReactPropTypes":72,"./ReactServerRendering":76,"./ReactTextComponent":78,"./deprecated":106,"./onlyChild":137}],2:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

"use strict";

var focusNode = _dereq_("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":111}],3:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var SyntheticInputEvent = _dereq_("./SyntheticInputEvent");

var keyOf = _dereq_("./keyOf");

var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !('documentMode' in document || isPresto())
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  }
};

// Track characters inserted via keypress and composition events.
var fallbackChars = null;

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var chars;

    if (canUseTextInputEvent) {
      switch (topLevelType) {
        case topLevelTypes.topKeyPress:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return;
          }

          hasSpaceKeypress = true;
          chars = SPACEBAR_CHAR;
          break;

        case topLevelTypes.topTextInput:
          // Record the characters to be added to the DOM.
          chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to blacklist it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return;
          }

          // Otherwise, carry on.
          break;

        default:
          // For other native event types, do nothing.
          return;
      }
    } else {
      switch (topLevelType) {
        case topLevelTypes.topPaste:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          fallbackChars = null;
          break;
        case topLevelTypes.topKeyPress:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
            fallbackChars = String.fromCharCode(nativeEvent.which);
          }
          break;
        case topLevelTypes.topCompositionEnd:
          fallbackChars = nativeEvent.data;
          break;
      }

      // If no changes have occurred to the fallback string, no relevant
      // event has fired and we're done.
      if (fallbackChars === null) {
        return;
      }

      chars = fallbackChars;
    }

    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return;
    }

    var event = SyntheticInputEvent.getPooled(
      eventTypes.beforeInput,
      topLevelTargetID,
      nativeEvent
    );

    event.data = chars;
    fallbackChars = null;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./SyntheticInputEvent":89,"./keyOf":133}],4:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

"use strict";

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeOpacity: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],5:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var camelizeStyleName = _dereq_("./camelizeStyleName");
var dangerousStyleValue = _dereq_("./dangerousStyleValue");
var hyphenateStyleName = _dereq_("./hyphenateStyleName");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== "development") {
  var warnedStyleNames = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== "development" ? warning(
      false,
      'Unsupported style property ' + name + '. Did you mean ' +
      camelizeStyleName(name) + '?'
    ) : null);
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

},{"./CSSProperty":4,"./ExecutionEnvironment":22,"./camelizeStyleName":100,"./dangerousStyleValue":105,"./hyphenateStyleName":124,"./memoizeStringOnly":135,"./warning":145}],6:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== "development" ? invariant(
        callbacks.length === contexts.length,
        "Mismatched list of contexts in callback queue"
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

},{"./Object.assign":27,"./PooledClass":28,"./invariant":126}],7:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactUpdates = _dereq_("./ReactUpdates");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var isEventSupported = _dereq_("./isEventSupported");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    !('documentMode' in document) || document.documentMode > 8
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    !('documentMode' in document) || document.documentMode > 9
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactUpdates":79,"./SyntheticEvent":87,"./isEventSupported":127,"./isTextInputElement":129,"./keyOf":133}],8:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

"use strict";

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],9:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CompositionEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticCompositionEvent = _dereq_("./SyntheticCompositionEvent");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var keyOf = _dereq_("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var useCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. In Korean, for example,
// the compositionend event contains only one character regardless of
// how many characters have been composed since compositionstart.
// We therefore use the fallback data while still using the native
// events as triggers.
var useFallbackData = (
  !useCompositionEvent ||
  (
    'documentMode' in document &&
    document.documentMode > 8 &&
    document.documentMode <= 11
  )
);

var topLevelTypes = EventConstants.topLevelTypes;
var currentComposition = null;

// Events and their corresponding property names.
var eventTypes = {
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Helper class stores information about selection and document state
 * so we can figure out what changed at a later date.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this.root = root;
  this.startSelection = ReactInputSelection.getSelection(root);
  this.startValue = this.getText();
}

/**
 * Get current text of input.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getText = function() {
  return this.root.value || this.root[getTextContentAccessor()];
};

/**
 * Text that has changed since the start of composition.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getData = function() {
  var endValue = this.getText();
  var prefixLength = this.startSelection.start;
  var suffixLength = this.startValue.length - this.startSelection.end;

  return endValue.substr(
    prefixLength,
    endValue.length - suffixLength - prefixLength
  );
};

/**
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
 * `onCompositionEnd` events on inputs, textareas and contentEditable
 * nodes.
 */
var CompositionEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var eventType;
    var data;

    if (useCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (useFallbackData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = new FallbackCompositionState(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          data = currentComposition.getData();
          currentComposition = null;
        }
      }
    }

    if (eventType) {
      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );
      if (data) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = data;
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
  }
};

module.exports = CompositionEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactInputSelection":59,"./SyntheticCompositionEvent":85,"./getTextContentAccessor":121,"./keyOf":133}],10:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

"use strict";

var Danger = _dereq_("./Danger");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var invariant = _dereq_("./invariant");

/**
 * The DOM property to use when setting text content.
 *
 * @type {string}
 * @private
 */
var textContentAccessor = getTextContentAccessor();

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

var updateTextContent;
if (textContentAccessor === 'textContent') {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    node.textContent = text;
  };
} else {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    // In order to preserve newlines correctly, we can't use .innerText to set
    // the contents (see #1080), so we empty the element then append a text node
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    if (text) {
      var doc = node.ownerDocument || document;
      node.appendChild(doc.createTextNode(text));
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: updateTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; update = updates[i]; i++) {
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== "development" ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; update = updates[k]; k++) {
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          updateTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

},{"./Danger":13,"./ReactMultiChildUpdateTypes":65,"./getTextContentAccessor":121,"./invariant":126}],11:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

"use strict";

var invariant = _dereq_("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== "development" ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== "development" ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== "development" ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== "development" ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

},{"./invariant":126}],12:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
  return escapeTextForBrowser(name) + '="';
});

if ("production" !== "development") {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== "development" ? warning(
      standardName == null,
      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
      escapeTextForBrowser(id) + '"';
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return escapeTextForBrowser(attributeName);
      }
      return processAttributeNameAndPrefix(attributeName) +
        escapeTextForBrowser(value) + '"';
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return processAttributeNameAndPrefix(name) +
        escapeTextForBrowser(value) + '"';
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

},{"./DOMProperty":11,"./escapeTextForBrowser":109,"./memoizeStringOnly":135,"./warning":145}],13:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createNodesFromMarkup = _dereq_("./createNodesFromMarkup");
var emptyFunction = _dereq_("./emptyFunction");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== "development" ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      for (var resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (i = 0; i < renderNodes.length; ++i) {
        var renderNode = renderNodes[i];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== "development" ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== "development") {
          console.error(
            "Danger: Discarding unexpected node:",
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== "development" ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== "development" ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== "development" ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== "development" ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See renderComponentToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

},{"./ExecutionEnvironment":22,"./createNodesFromMarkup":104,"./emptyFunction":107,"./getMarkupWrap":118,"./invariant":126}],14:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

"use strict";

 var keyOf = _dereq_("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({CompositionEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":133}],15:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

var ReactMount = _dereq_("./ReactMount");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactMount":63,"./SyntheticMouseEvent":91,"./keyOf":133}],16:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":132}],17:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== "development") {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

},{"./emptyFunction":107}],18:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

"use strict";

var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var EventPluginUtils = _dereq_("./EventPluginUtils");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var invalid = !InstanceHandle||
    !InstanceHandle.traverseTwoPhase ||
    !InstanceHandle.traverseEnterLeave;
  if (invalid) {
    throw new Error('InstanceHandle not injected before use!');
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== "development") {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== "development") {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== "development" ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== "development" ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

},{"./EventPluginRegistry":19,"./EventPluginUtils":20,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],19:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== "development" ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== "development" ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== "development" ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== "development" ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== "development" ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

},{"./invariant":126}],20:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var invariant = _dereq_("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== "development") {
      ("production" !== "development" ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== "development") {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== "development" ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, executeDispatch) {
  forEachEventDispatch(event, executeDispatch);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== "development" ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

},{"./EventConstants":16,"./invariant":126}],21:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== "development") {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

},{"./EventConstants":16,"./EventPluginHub":18,"./accumulateInto":97,"./forEachAccumulated":112}],22:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  typeof window !== 'undefined' &&
  window.document &&
  window.document.createElement
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],23:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    property: null // Supports OG in meta tags
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    encType: 'enctype',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":11,"./ExecutionEnvironment":22}],24:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

"use strict";

var ReactPropTypes = _dereq_("./ReactPropTypes");

var invariant = _dereq_("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== "development" ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

},{"./ReactPropTypes":72,"./invariant":126}],25:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

"use strict";

var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== "development" ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      this.getDOMNode()
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

},{"./ReactBrowserEventEmitter":30,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],26:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var emptyFunction = _dereq_("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":16,"./emptyFunction":107}],27:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
};

module.exports = assign;

},{}],28:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== "development" ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

},{"./invariant":126}],29:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

"use strict";

var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactMount = _dereq_("./ReactMount");

var invariant = _dereq_("./invariant");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    ("production" !== "development" ? invariant(
      this.isMounted(),
      'getDOMNode(): A component must be mounted to have a DOM node.'
    ) : invariant(this.isMounted()));
    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
      return null;
    }
    return ReactMount.getNode(this._rootNodeID);
  }
};

module.exports = ReactBrowserComponentMixin;

},{"./ReactEmptyComponent":54,"./ReactMount":63,"./invariant":126}],30:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var ReactEventEmitterMixin = _dereq_("./ReactEventEmitterMixin");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var assign = _dereq_("./Object.assign");
var isEventSupported = _dereq_("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      ReactBrowserEventEmitter.ReactEventListener &&
      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            isListening.hasOwnProperty(dependency) &&
            isListening[dependency]
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function(){
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPluginRegistry":19,"./Object.assign":27,"./ReactEventEmitterMixin":56,"./ViewportMetrics":96,"./isEventSupported":127}],31:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'ReactChildren.map(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return mapResult;
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

},{"./PooledClass":28,"./traverseAllChildren":144,"./warning":145}],32:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");

/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null,
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null
});

var injected = false;

/**
 * Optionally injectable environment dependent cleanup hook. (server vs.
 * browser etc). Example: A browser system caches DOM nodes based on component
 * ID and must remove that cache entry when this instance is unmounted.
 *
 * @private
 */
var unmountIDFromEnvironment = null;

/**
 * The "image" of a component tree, is the platform specific (typically
 * serialized) data that represents a tree of lower level UI building blocks.
 * On the web, this "image" is HTML markup which describes a construction of
 * low level `div` and `span` nodes. Other platforms may have different
 * encoding of this "image". This must be injected.
 *
 * @private
 */
var mountImageIntoNode = null;

/**
 * Components are the basic units of composition in React.
 *
 * Every component accepts a set of keyed input parameters known as "props" that
 * are initialized by the constructor. Once a component is mounted, the props
 * can be mutated using `setProps` or `replaceProps`.
 *
 * Every component is capable of the following operations:
 *
 *   `mountComponent`
 *     Initializes the component, renders markup, and registers event listeners.
 *
 *   `receiveComponent`
 *     Updates the rendered DOM nodes to match the given component.
 *
 *   `unmountComponent`
 *     Releases any resources allocated by this component.
 *
 * Components can also be "owned" by other components. Being owned by another
 * component means being constructed by that component. This is different from
 * being the child of a component, which means having a DOM representation that
 * is a child of the DOM representation of that component.
 *
 * @class ReactComponent
 */
var ReactComponent = {

  injection: {
    injectEnvironment: function(ReactComponentEnvironment) {
      ("production" !== "development" ? invariant(
        !injected,
        'ReactComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
      unmountIDFromEnvironment =
        ReactComponentEnvironment.unmountIDFromEnvironment;
      ReactComponent.BackendIDOperations =
        ReactComponentEnvironment.BackendIDOperations;
      injected = true;
    }
  },

  /**
   * @internal
   */
  LifeCycle: ComponentLifeCycle,

  /**
   * Injected module that provides ability to mutate individual properties.
   * Injected into the base class because many different subclasses need access
   * to this.
   *
   * @internal
   */
  BackendIDOperations: null,

  /**
   * Base functionality for every ReactComponent constructor. Mixed into the
   * `ReactComponent` prototype, but exposed statically for easy access.
   *
   * @lends {ReactComponent.prototype}
   */
  Mixin: {

    /**
     * Checks whether or not this component is mounted.
     *
     * @return {boolean} True if mounted, false otherwise.
     * @final
     * @protected
     */
    isMounted: function() {
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    setProps: function(partialProps, callback) {
      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var element = this._pendingElement || this._currentElement;
      this.replaceProps(
        assign({}, element.props, partialProps),
        callback
      );
    },

    /**
     * Replaces all of the props.
     *
     * @param {object} props New props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    replaceProps: function(props, callback) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'replaceProps(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      ("production" !== "development" ? invariant(
        this._mountDepth === 0,
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(this._mountDepth === 0));
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        this._pendingElement || this._currentElement,
        props
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Schedule a partial update to the props. Only used for internal testing.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @internal
     */
    _setPropsInternal: function(partialProps, callback) {
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      var element = this._pendingElement || this._currentElement;
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        element,
        assign({}, element.props, partialProps)
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Base constructor for all React components.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.construct.call(this, ...)`.
     *
     * @param {ReactElement} element
     * @internal
     */
    construct: function(element) {
      // This is the public exposed props object after it has been processed
      // with default props. The element's props represents the true internal
      // state of the props.
      this.props = element.props;
      // Record the component responsible for creating this component.
      // This is accessible through the element but we maintain an extra
      // field for compatibility with devtools and as a way to make an
      // incremental update. TODO: Consider deprecating this field.
      this._owner = element._owner;

      // All components start unmounted.
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

      // See ReactUpdates.
      this._pendingCallbacks = null;

      // We keep the old element and a reference to the pending element
      // to track updates.
      this._currentElement = element;
      this._pendingElement = null;
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * NOTE: This does not insert any nodes into the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {number} mountDepth number of components in the owner hierarchy.
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @internal
     */
    mountComponent: function(rootID, transaction, mountDepth) {
      ("production" !== "development" ? invariant(
        !this.isMounted(),
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
        'Make sure to avoid storing components between renders or reusing a ' +
        'single component instance in multiple places.',
        rootID
      ) : invariant(!this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        var owner = this._currentElement._owner;
        ReactOwner.addComponentAsRefTo(this, ref, owner);
      }
      this._rootNodeID = rootID;
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
      this._mountDepth = mountDepth;
      // Effectively: return '';
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * NOTE: This does not remove any nodes from the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.unmountComponent.call(this)`.
     *
     * @internal
     */
    unmountComponent: function() {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'unmountComponent(): Can only unmount a mounted component.'
      ) : invariant(this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        ReactOwner.removeComponentAsRefFrom(this, ref, this._owner);
      }
      unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
    },

    /**
     * Given a new instance of this component, updates the rendered DOM nodes
     * as if that instance was rendered instead.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
     *
     * @param {object} nextComponent Next set of properties.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextElement, transaction) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'receiveComponent(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      this._pendingElement = nextElement;
      this.performUpdateIfNecessary(transaction);
    },

    /**
     * If `_pendingElement` is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function(transaction) {
      if (this._pendingElement == null) {
        return;
      }
      var prevElement = this._currentElement;
      var nextElement = this._pendingElement;
      this._currentElement = nextElement;
      this.props = nextElement.props;
      this._owner = nextElement._owner;
      this._pendingElement = null;
      this.updateComponent(transaction, prevElement);
    },

    /**
     * Updates the component's currently mounted representation.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {object} prevElement
     * @internal
     */
    updateComponent: function(transaction, prevElement) {
      var nextElement = this._currentElement;

      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`. We use the element instead
      // of the public this.props because the post processing cannot determine
      // a ref. The ref conceptually lives on the element.

      // TODO: Should this even be possible? The owner cannot change because
      // it's forbidden by shouldUpdateReactComponent. The ref can change
      // if you swap the keys of but not the refs. Reconsider where this check
      // is made. It probably belongs where the key checking and
      // instantiateReactComponent is done.

      if (nextElement._owner !== prevElement._owner ||
          nextElement.ref !== prevElement.ref) {
        if (prevElement.ref != null) {
          ReactOwner.removeComponentAsRefFrom(
            this, prevElement.ref, prevElement._owner
          );
        }
        // Correct, even if the owner is the same, and only the ref has changed.
        if (nextElement.ref != null) {
          ReactOwner.addComponentAsRefTo(
            this,
            nextElement.ref,
            nextElement._owner
          );
        }
      }
    },

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @internal
     * @see {ReactMount.render}
     */
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
      transaction.perform(
        this._mountComponentIntoNode,
        this,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactUpdates.ReactReconcileTransaction.release(transaction);
    },

    /**
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @private
     */
    _mountComponentIntoNode: function(
        rootID,
        container,
        transaction,
        shouldReuseMarkup) {
      var markup = this.mountComponent(rootID, transaction, 0);
      mountImageIntoNode(markup, container, shouldReuseMarkup);
    },

    /**
     * Checks if this component is owned by the supplied `owner` component.
     *
     * @param {ReactComponent} owner Component to check.
     * @return {boolean} True if `owners` owns this component.
     * @final
     * @internal
     */
    isOwnedBy: function(owner) {
      return this._owner === owner;
    },

    /**
     * Gets another component, that shares the same owner as this one, by ref.
     *
     * @param {string} ref of a sibling Component.
     * @return {?ReactComponent} the actual sibling Component.
     * @final
     * @internal
     */
    getSiblingByRef: function(ref) {
      var owner = this._owner;
      if (!owner || !owner.refs) {
        return null;
      }
      return owner.refs[ref];
    }
  }
};

module.exports = ReactComponent;

},{"./Object.assign":27,"./ReactElement":52,"./ReactOwner":67,"./ReactUpdates":79,"./invariant":126,"./keyMirror":132}],33:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

"use strict";

var ReactDOMIDOperations = _dereq_("./ReactDOMIDOperations");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");
var ReactReconcileTransaction = _dereq_("./ReactReconcileTransaction");

var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");


var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;


/**
 * Abstracts away all functionality of `ReactComponent` requires knowledge of
 * the browser context.
 */
var ReactComponentBrowserEnvironment = {
  ReactReconcileTransaction: ReactReconcileTransaction,

  BackendIDOperations: ReactDOMIDOperations,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  },

  /**
   * @param {string} markup Markup string to place into the DOM Element.
   * @param {DOMElement} container DOM Element to insert markup into.
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
   * container if possible.
   */
  mountImageIntoNode: ReactPerf.measure(
    'ReactComponentBrowserEnvironment',
    'mountImageIntoNode',
    function(markup, container, shouldReuseMarkup) {
      ("production" !== "development" ? invariant(
        container && (
          container.nodeType === ELEMENT_NODE_TYPE ||
            container.nodeType === DOC_NODE_TYPE
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
          container.nodeType === DOC_NODE_TYPE
      )));

      if (shouldReuseMarkup) {
        if (ReactMarkupChecksum.canReuseMarkup(
          markup,
          getReactRootElementInContainer(container))) {
          return;
        } else {
          ("production" !== "development" ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side.'
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== "development") {
            console.warn(
              'React attempted to use reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected ' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server.'
            );
          }
        }
      }

      ("production" !== "development" ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See renderComponentToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      setInnerHTML(container, markup);
    }
  )
};

module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":41,"./ReactMarkupChecksum":62,"./ReactMount":63,"./ReactPerf":68,"./ReactReconcileTransaction":74,"./getReactRootElementInContainer":120,"./invariant":126,"./setInnerHTML":140}],34:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactErrorUtils = _dereq_("./ReactErrorUtils");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTransferer = _dereq_("./ReactPropTransferer");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var mapObject = _dereq_("./mapObject");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactCompositeComponentInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base ReactCompositeComponent class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactCompositeComponent`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactCompositeComponentInterface
 * @internal
 */
var ReactCompositeComponentInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    validateTypeDef(
      Constructor,
      childContextTypes,
      ReactPropTypeLocations.childContext
    );
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    validateTypeDef(
      Constructor,
      contextTypes,
      ReactPropTypeLocations.context
    );
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    validateTypeDef(
      Constructor,
      propTypes,
      ReactPropTypeLocations.prop
    );
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function getDeclarationErrorAddendum(component) {
  var owner = component._owner || null;
  if (owner && owner.constructor && owner.constructor.displayName) {
    return ' Check the render method of `' + owner.constructor.displayName +
      '`.';
  }
  return '';
}

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      ("production" !== "development" ? invariant(
        typeof typeDef[propName] == 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactCompositeComponent',
        ReactPropTypeLocationNames[location],
        propName
      ) : invariant(typeof typeDef[propName] == 'function'));
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
    ReactCompositeComponentInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactCompositeComponentInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactCompositeComponentInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

function validateLifeCycleOnReplaceState(instance) {
  var compositeLifeCycleState = instance._compositeLifeCycleState;
  ("production" !== "development" ? invariant(
    instance.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
    'replaceState(...): Can only update a mounted or mounting component.'
  ) : invariant(instance.isMounted() ||
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
  ("production" !== "development" ? invariant(
    ReactCurrentOwner.current == null,
    'replaceState(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.'
  ) : invariant(ReactCurrentOwner.current == null));
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
    'replaceState(...): Cannot update while unmounting component. This ' +
    'usually means you called setState() on an unmounted component.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building `ReactCompositeComponent` classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== "development" ? invariant(
    !ReactLegacyElement.isValidFactory(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));
  ("production" !== "development" ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactCompositeComponent methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isCompositeComponentMethod =
        ReactCompositeComponentInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isCompositeComponentMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactCompositeComponentInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== "development" ? invariant(
            isCompositeComponentMethod && (
              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
              specPolicy === SpecPolicy.DEFINE_MANY
            ),
            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isCompositeComponentMethod && (
            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
            specPolicy === SpecPolicy.DEFINE_MANY
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== "development") {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== "development" ? invariant(
      !isReserved,
      'ReactCompositeComponent: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== "development" ? invariant(
      !isInherited,
      'ReactCompositeComponent: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeObjectsWithNoDuplicateKeys(one, two) {
  ("production" !== "development" ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  mapObject(two, function(value, key) {
    ("production" !== "development" ? invariant(
      one[key] === undefined,
      'mergeObjectsWithNoDuplicateKeys(): ' +
      'Tried to merge two objects with the same key: `%s`. This conflict ' +
      'may be due to a mixin; in particular, this may be caused by two ' +
      'getInitialState() or getDefaultProps() methods returning objects ' +
      'with clashing keys.',
      key
    ) : invariant(one[key] === undefined));
    one[key] = value;
  });
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    return mergeObjectsWithNoDuplicateKeys(a, b);
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
 * `this._compositeLifeCycleState` (which can be null).
 *
 * This is different from the life cycle state maintained by `ReactComponent` in
 * `this._lifeCycleState`. The following diagram shows how the states overlap in
 * time. There are times when the CompositeLifeCycle is null - at those times it
 * is only meaningful to look at ComponentLifeCycle alone.
 *
 * Top Row: ReactComponent.ComponentLifeCycle
 * Low Row: ReactComponent.CompositeLifeCycle
 *
 * +-------+---------------------------------+--------+
 * |  UN   |             MOUNTED             |   UN   |
 * |MOUNTED|                                 | MOUNTED|
 * +-------+---------------------------------+--------+
 * |       ^--------+   +-------+   +--------^        |
 * |       |        |   |       |   |        |        |
 * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |
 * |       |        |   |PROPS  |   |MOUNTING|        |
 * |       |        |   |       |   |        |        |
 * |       |        |   |       |   |        |        |
 * |       +--------+   +-------+   +--------+        |
 * |       |                                 |        |
 * +-------+---------------------------------+--------+
 */
var CompositeLifeCycle = keyMirror({
  /**
   * Components in the process of being mounted respond to state changes
   * differently.
   */
  MOUNTING: null,
  /**
   * Components in the process of being unmounted are guarded against state
   * changes.
   */
  UNMOUNTING: null,
  /**
   * Components that are mounted and receiving new props respond to state
   * changes differently.
   */
  RECEIVING_PROPS: null
});

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    // Children can be either an array or more than one argument
    ReactComponent.Mixin.construct.apply(this, arguments);
    ReactOwner.Mixin.construct.apply(this, arguments);

    this.state = null;
    this._pendingState = null;

    // This is the public post-processed context. The real context and pending
    // context lives on the element.
    this.context = null;

    this._compositeLifeCycleState = null;
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    return ReactComponent.Mixin.isMounted.call(this) &&
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

      if (this.__reactAutoBindMap) {
        this._bindAutoBindMethods();
      }

      this.context = this._processContext(this._currentElement._context);
      this.props = this._processProps(this.props);

      this.state = this.getInitialState ? this.getInitialState() : null;
      ("production" !== "development" ? invariant(
        typeof this.state === 'object' && !Array.isArray(this.state),
        '%s.getInitialState(): must return an object or null',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

      this._pendingState = null;
      this._pendingForceUpdate = false;

      if (this.componentWillMount) {
        this.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingState` without triggering a re-render.
        if (this._pendingState) {
          this.state = this._pendingState;
          this._pendingState = null;
        }
      }

      this._renderedComponent = instantiateReactComponent(
        this._renderValidatedComponent(),
        this._currentElement.type // The wrapping type
      );

      // Done with mounting, `setState` will now trigger UI changes.
      this._compositeLifeCycleState = null;
      var markup = this._renderedComponent.mountComponent(
        rootID,
        transaction,
        mountDepth + 1
      );
      if (this.componentDidMount) {
        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
      }
      return markup;
    }
  ),

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
    if (this.componentWillUnmount) {
      this.componentWillUnmount();
    }
    this._compositeLifeCycleState = null;

    this._renderedComponent.unmountComponent();
    this._renderedComponent = null;

    ReactComponent.Mixin.unmountComponent.call(this);

    // Some existing components rely on this.props even after they've been
    // destroyed (in event handlers).
    // TODO: this.props = null;
    // TODO: this.state = null;
  },

  /**
   * Sets a subset of the state. Always use this or `replaceState` to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  setState: function(partialState, callback) {
    ("production" !== "development" ? invariant(
      typeof partialState === 'object' || partialState == null,
      'setState(...): takes an object of state variables to update.'
    ) : invariant(typeof partialState === 'object' || partialState == null));
    if ("production" !== "development"){
      ("production" !== "development" ? warning(
        partialState != null,
        'setState(...): You passed an undefined or null state object; ' +
        'instead, use forceUpdate().'
      ) : null);
    }
    // Merge with `_pendingState` if it exists, otherwise with existing state.
    this.replaceState(
      assign({}, this._pendingState || this.state, partialState),
      callback
    );
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {object} completeState Next state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  replaceState: function(completeState, callback) {
    validateLifeCycleOnReplaceState(this);
    this._pendingState = completeState;
    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
      // If we're in a componentWillMount handler, don't enqueue a rerender
      // because ReactUpdates assumes we're in a browser context (which is wrong
      // for server rendering) and we're about to do a render anyway.
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState.
      ReactUpdates.enqueueUpdate(this, callback);
    }
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = null;
    var contextTypes = this.constructor.contextTypes;
    if (contextTypes) {
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      if ("production" !== "development") {
        this._checkPropTypes(
          contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function(currentContext) {
    var childContext = this.getChildContext && this.getChildContext();
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
    if (childContext) {
      ("production" !== "development" ? invariant(
        typeof this.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        displayName
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
      if ("production" !== "development") {
        this._checkPropTypes(
          this.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== "development" ? invariant(
          name in this.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          displayName,
          name
        ) : invariant(name in this.constructor.childContextTypes));
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== "development") {
      var propTypes = this.constructor.propTypes;
      if (propTypes) {
        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.constructor.displayName;
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error =
          propTypes[propName](props, propName, componentName, location);
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // renderComponent calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);
          ("production" !== "development" ? warning(false, error.message + addendum) : null);
        }
      }
    }
  },

  /**
   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    // Do not trigger a state transition if we are in the middle of mounting or
    // receiving props because both of those will already be doing this.
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
      return;
    }

    if (this._pendingElement == null &&
        this._pendingState == null &&
        !this._pendingForceUpdate) {
      return;
    }

    var nextContext = this.context;
    var nextProps = this.props;
    var nextElement = this._currentElement;
    if (this._pendingElement != null) {
      nextElement = this._pendingElement;
      nextContext = this._processContext(nextElement._context);
      nextProps = this._processProps(nextElement.props);
      this._pendingElement = null;

      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
      if (this.componentWillReceiveProps) {
        this.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    this._compositeLifeCycleState = null;

    var nextState = this._pendingState || this.state;
    this._pendingState = null;

    var shouldUpdate =
      this._pendingForceUpdate ||
      !this.shouldComponentUpdate ||
      this.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== "development") {
      if (typeof shouldUpdate === "undefined") {
        console.warn(
          (this.constructor.displayName || 'ReactCompositeComponent') +
          '.shouldComponentUpdate(): Returned undefined instead of a ' +
          'boolean value. Make sure to return true or false.'
        );
      }
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextElement,
        nextProps,
        nextState,
        nextContext,
        transaction
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state.
      this._currentElement = nextElement;
      this.props = nextProps;
      this.state = nextState;
      this.context = nextContext;

      // Owner cannot change because shouldUpdateReactComponent doesn't allow
      // it. TODO: Remove this._owner completely.
      this._owner = nextElement._owner;
    }
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction
  ) {
    var prevElement = this._currentElement;
    var prevProps = this.props;
    var prevState = this.state;
    var prevContext = this.context;

    if (this.componentWillUpdate) {
      this.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this.props = nextProps;
    this.state = nextState;
    this.context = nextContext;

    // Owner cannot change because shouldUpdateReactComponent doesn't allow
    // it. TODO: Remove this._owner completely.
    this._owner = nextElement._owner;

    this.updateComponent(
      transaction,
      prevElement
    );

    if (this.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
        this
      );
    }
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'updateComponent',
    function(transaction, prevParentElement) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevParentElement
      );

      var prevComponentInstance = this._renderedComponent;
      var prevElement = prevComponentInstance._currentElement;
      var nextElement = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        prevComponentInstance.receiveComponent(nextElement, transaction);
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        prevComponentInstance.unmountComponent();
        this._renderedComponent = instantiateReactComponent(
          nextElement,
          this._currentElement.type
        );
        var nextMarkup = this._renderedComponent.mountComponent(
          thisID,
          transaction,
          this._mountDepth + 1
        );
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      }
    }
  ),

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  forceUpdate: function(callback) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    ("production" !== "development" ? invariant(
      this.isMounted() ||
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
      'forceUpdate(...): Can only force an update on mounted or mounting ' +
        'components.'
    ) : invariant(this.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
    ("production" !== "development" ? invariant(
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
      ReactCurrentOwner.current == null,
      'forceUpdate(...): Cannot force an update while unmounting component ' +
      'or within a `render` function.'
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
    ReactCurrentOwner.current == null));
    this._pendingForceUpdate = true;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * @private
   */
  _renderValidatedComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    '_renderValidatedComponent',
    function() {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._processChildContext(
        this._currentElement._context
      );
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this.render();
        if (renderedComponent === null || renderedComponent === false) {
          renderedComponent = ReactEmptyComponent.getEmptyComponent();
          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
        } else {
          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
        }
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== "development" ? invariant(
        ReactElement.isValidElement(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned undefined, an array or some other invalid object.',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(ReactElement.isValidElement(renderedComponent)));
      return renderedComponent;
    }
  ),

  /**
   * @private
   */
  _bindAutoBindMethods: function() {
    for (var autoBindKey in this.__reactAutoBindMap) {
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        continue;
      }
      var method = this.__reactAutoBindMap[autoBindKey];
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
        method,
        this.constructor.displayName + '.' + autoBindKey
      ));
    }
  },

  /**
   * Binds a method to the component.
   *
   * @param {function} method Method to be bound.
   * @private
   */
  _bindAutoBindMethod: function(method) {
    var component = this;
    var boundMethod = method.bind(component);
    if ("production" !== "development") {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): React component methods may only be bound to the ' +
            'component instance. See ' + componentName
          );
        } else if (!args.length) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See ' + componentName
          );
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
};

var ReactCompositeComponentBase = function() {};
assign(
  ReactCompositeComponentBase.prototype,
  ReactComponent.Mixin,
  ReactOwner.Mixin,
  ReactPropTransferer.Mixin,
  ReactCompositeComponentMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactCompositeComponent
 * @extends ReactComponent
 * @extends ReactOwner
 * @extends ReactPropTransferer
 */
var ReactCompositeComponent = {

  LifeCycle: CompositeLifeCycle,

  Base: ReactCompositeComponentBase,

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted. This will later be used
      // by the stand-alone class implementation.
    };
    Constructor.prototype = new ReactCompositeComponentBase();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    ("production" !== "development" ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== "development") {
      if (Constructor.prototype.componentShouldUpdate) {
        monitorCodeUse(
          'react_component_should_update_warning',
          { component: spec.displayName }
        );
        console.warn(
          (spec.displayName || 'A component') + ' has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.'
         );
      }
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactCompositeComponentInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    if ("production" !== "development") {
      return ReactLegacyElement.wrapFactory(
        ReactElementValidator.createFactory(Constructor)
      );
    }
    return ReactLegacyElement.wrapFactory(
      ReactElement.createFactory(Constructor)
    );
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }
};

module.exports = ReactCompositeComponent;

},{"./Object.assign":27,"./ReactComponent":32,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactElementValidator":53,"./ReactEmptyComponent":54,"./ReactErrorUtils":55,"./ReactLegacyElement":61,"./ReactOwner":67,"./ReactPerf":68,"./ReactPropTransferer":69,"./ReactPropTypeLocationNames":70,"./ReactPropTypeLocations":71,"./ReactUpdates":79,"./instantiateReactComponent":125,"./invariant":126,"./keyMirror":132,"./keyOf":133,"./mapObject":134,"./monitorCodeUse":136,"./shouldUpdateReactComponent":142,"./warning":145}],35:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

"use strict";

var assign = _dereq_("./Object.assign");

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: {},

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"./Object.assign":27}],36:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

"use strict";

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],37:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");

var mapObject = _dereq_("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== "development") {
    return ReactLegacyElement.markNonLegacyFactory(
      ReactElementValidator.createFactory(tag)
    );
  }
  return ReactLegacyElement.markNonLegacyFactory(
    ReactElement.createFactory(tag)
  );
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

},{"./ReactElement":52,"./ReactElementValidator":53,"./ReactLegacyElement":61,"./mapObject":134}],38:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var keyMirror = _dereq_("./keyMirror");

// Store a reference to the <button> `ReactDOMComponent`. TODO: use string
var button = ReactElement.createFactory(ReactDOM.button.type);

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMButton',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":2,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./keyMirror":132}],39:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMProperty = _dereq_("./DOMProperty");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponent = _dereq_("./ReactComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var invariant = _dereq_("./invariant");
var isEventSupported = _dereq_("./isEventSupported");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  ("production" !== "development" ? invariant(
    props.children == null || props.dangerouslySetInnerHTML == null,
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
  if ("production" !== "development") {
    if (props.contentEditable && props.children != null) {
      console.warn(
        'A component is `contentEditable` and contains `children` managed by ' +
        'React. It is now your responsibility to guarantee that none of those '+
        'nodes are unexpectedly modified or duplicated. This is probably not ' +
        'intentional.'
      );
    }
  }
  ("production" !== "development" ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== "development") {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    if (registrationName === 'onScroll' &&
        !isEventSupported('scroll', true)) {
      monitorCodeUse('react_no_scroll_event');
      console.warn('This browser doesn\'t support the `onScroll` event');
    }
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== "development" ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this.tagName = tag.toUpperCase();
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} The computed markup.
   */
  mountComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      assertValidProps(this.props);
      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction) +
        closeTag
      );
    }
  ),

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = props.style = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = this.props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
      var childrenToUse = contentToUse != null ? null : this.props.children;
      if (contentToUse != null) {
        return escapeTextForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction
        );
        return mountImages.join('');
      }
    }
    return '';
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'updateComponent',
    function(transaction, prevElement) {
      assertValidProps(this._currentElement.props);
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevElement
      );
      this._updateDOMProperties(prevElement.props, transaction);
      this._updateDOMChildren(prevElement.props, transaction);
    }
  ),

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = nextProps.style = assign({}, nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      ReactComponent.BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction) {
    var nextProps = this.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponent.Mixin.unmountComponent.call(this);
  }

};

assign(
  ReactDOMComponent.prototype,
  ReactComponent.Mixin,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin,
  ReactBrowserComponentMixin
);

module.exports = ReactDOMComponent;

},{"./CSSPropertyOperations":5,"./DOMProperty":11,"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./escapeTextForBrowser":109,"./invariant":126,"./isEventSupported":127,"./keyOf":133,"./monitorCodeUse":136}],40:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <form> `ReactDOMComponent`. TODO: use string
var form = ReactElement.createFactory(ReactDOM.form.type);

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMForm',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],41:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMChildrenOperations = _dereq_("./DOMChildrenOperations");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updatePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    }
  ),

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'deletePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    }
  ),

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateStylesByID',
    function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    }
  ),

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateInnerHTMLByID',
    function(id, html) {
      var node = ReactMount.getNode(id);
      setInnerHTML(node, html);
    }
  ),

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateTextContentByID',
    function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    }
  ),

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyReplaceNodeWithMarkupByID',
    function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    }
  ),

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyProcessChildrenUpdates',
    function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  )
};

module.exports = ReactDOMIDOperations;

},{"./CSSPropertyOperations":5,"./DOMChildrenOperations":10,"./DOMPropertyOperations":12,"./ReactMount":63,"./ReactPerf":68,"./invariant":126,"./setInnerHTML":140}],42:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <img> `ReactDOMComponent`. TODO: use string
var img = ReactElement.createFactory(ReactDOM.img.type);

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],43:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

// Store a reference to the <input> `ReactDOMComponent`. TODO: use string
var input = ReactElement.createFactory(ReactDOM.input.type);

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMInput',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== "development" ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== "development" ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactMount":63,"./ReactUpdates":79,"./invariant":126}],44:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

"use strict";

var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var warning = _dereq_("./warning");

// Store a reference to the <option> `ReactDOMComponent`. TODO: use string
var option = ReactElement.createFactory(ReactDOM.option.type);

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMOption',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

},{"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./warning":145}],45:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");

// Store a reference to the <select> `ReactDOMComponent`. TODO: use string
var select = ReactElement.createFactory(ReactDOM.select.type);

function updateWithPendingValueIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.setState({value: this._pendingValue});
    this._pendingValue = 0;
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * If `value` is supplied, updates <option> elements on mount and update.
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {?*} propValue For uncontrolled components, null/undefined. For
 * controlled components, a string (or with `multiple`, a list of strings).
 * @private
 */
function updateOptions(component, propValue) {
  var multiple = component.props.multiple;
  var value = propValue != null ? propValue : component.state.value;
  var options = component.getDOMNode().options;
  var selectedValue, i, l;
  if (multiple) {
    selectedValue = {};
    for (i = 0, l = value.length; i < l; ++i) {
      selectedValue['' + value[i]] = true;
    }
  } else {
    selectedValue = '' + value;
  }
  for (i = 0, l = options.length; i < l; i++) {
    var selected = multiple ?
      selectedValue.hasOwnProperty(options[i].value) :
      options[i].value === selectedValue;

    if (selected !== options[i].selected) {
      options[i].selected = selected;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * string. If `multiple` is true, the prop must be an array of strings.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMSelect',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  getInitialState: function() {
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
  },

  componentWillMount: function() {
    this._pendingValue = null;
  },

  componentWillReceiveProps: function(nextProps) {
    if (!this.props.multiple && nextProps.multiple) {
      this.setState({value: [this.state.value]});
    } else if (this.props.multiple && !nextProps.multiple) {
      this.setState({value: this.state.value[0]});
    }
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentDidMount: function() {
    updateOptions(this, LinkedValueUtils.getValue(this));
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    var prevMultiple = !!prevProps.multiple;
    var multiple = !!this.props.multiple;
    if (value != null || prevMultiple !== multiple) {
      updateOptions(this, value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    var selectedValue;
    if (this.props.multiple) {
      selectedValue = [];
      var options = event.target.options;
      for (var i = 0, l = options.length; i < l; i++) {
        if (options[i].selected) {
          selectedValue.push(options[i].value);
        }
      }
    } else {
      selectedValue = event.target.value;
    }

    this._pendingValue = selectedValue;
    ReactUpdates.asap(updateWithPendingValueIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":2,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79}],46:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var getNodeForCharacterOffset = _dereq_("./getNodeForCharacterOffset");
var getTextContentAccessor = _dereq_("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":22,"./getNodeForCharacterOffset":119,"./getTextContentAccessor":121}],47:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var warning = _dereq_("./warning");

// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string
var textarea = ReactElement.createFactory(ReactDOM.textarea.type);

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMTextarea',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== "development" ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== "development" ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== "development" ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79,"./invariant":126,"./warning":145}],48:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

"use strict";

var ReactUpdates = _dereq_("./ReactUpdates");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b);
    } else {
      transaction.perform(callback, null, a, b);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":27,"./ReactUpdates":79,"./Transaction":95,"./emptyFunction":107}],49:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

"use strict";

var BeforeInputEventPlugin = _dereq_("./BeforeInputEventPlugin");
var ChangeEventPlugin = _dereq_("./ChangeEventPlugin");
var ClientReactRootIndex = _dereq_("./ClientReactRootIndex");
var CompositionEventPlugin = _dereq_("./CompositionEventPlugin");
var DefaultEventPluginOrder = _dereq_("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = _dereq_("./EnterLeaveEventPlugin");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = _dereq_("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = _dereq_("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponentBrowserEnvironment =
  _dereq_("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = _dereq_("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDOMButton = _dereq_("./ReactDOMButton");
var ReactDOMForm = _dereq_("./ReactDOMForm");
var ReactDOMImg = _dereq_("./ReactDOMImg");
var ReactDOMInput = _dereq_("./ReactDOMInput");
var ReactDOMOption = _dereq_("./ReactDOMOption");
var ReactDOMSelect = _dereq_("./ReactDOMSelect");
var ReactDOMTextarea = _dereq_("./ReactDOMTextarea");
var ReactEventListener = _dereq_("./ReactEventListener");
var ReactInjection = _dereq_("./ReactInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var SelectEventPlugin = _dereq_("./SelectEventPlugin");
var ServerReactRootIndex = _dereq_("./ServerReactRootIndex");
var SimpleEventPlugin = _dereq_("./SimpleEventPlugin");
var SVGDOMPropertyConfig = _dereq_("./SVGDOMPropertyConfig");

var createFullPageComponent = _dereq_("./createFullPageComponent");

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    CompositionEventPlugin: CompositionEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  // This needs to happen after createFullPageComponent() otherwise the mixin
  // gets double injected.
  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactComponentBrowserEnvironment.ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if ("production" !== "development") {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = _dereq_("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

},{"./BeforeInputEventPlugin":3,"./ChangeEventPlugin":7,"./ClientReactRootIndex":8,"./CompositionEventPlugin":9,"./DefaultEventPluginOrder":14,"./EnterLeaveEventPlugin":15,"./ExecutionEnvironment":22,"./HTMLDOMPropertyConfig":23,"./MobileSafariClickEventPlugin":26,"./ReactBrowserComponentMixin":29,"./ReactComponentBrowserEnvironment":33,"./ReactDOMButton":38,"./ReactDOMComponent":39,"./ReactDOMForm":40,"./ReactDOMImg":42,"./ReactDOMInput":43,"./ReactDOMOption":44,"./ReactDOMSelect":45,"./ReactDOMTextarea":47,"./ReactDefaultBatchingStrategy":48,"./ReactDefaultPerf":50,"./ReactEventListener":57,"./ReactInjection":58,"./ReactInstanceHandles":60,"./ReactMount":63,"./SVGDOMPropertyConfig":80,"./SelectEventPlugin":81,"./ServerReactRootIndex":82,"./SimpleEventPlugin":83,"./createFullPageComponent":103}],50:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactDefaultPerfAnalysis = _dereq_("./ReactDefaultPerfAnalysis");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var performanceNow = _dereq_("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (moduleName === 'ReactDOMIDOperations' ||
        moduleName === 'ReactComponentBrowserEnvironment') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === 'mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        fnName === 'mountComponent' ||
        fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.constructor.displayName,
          owner: this._owner ? this._owner.constructor.displayName : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":11,"./ReactDefaultPerfAnalysis":51,"./ReactMount":63,"./ReactPerf":68,"./performanceNow":139}],51:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = _dereq_("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  'mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":27}],52:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

"use strict";

var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var warning = _dereq_("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== "development" ? warning(
        false,
        'Don\'t set the ' + key + ' property of the component. ' +
        'Mutate the existing props object instead.'
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== "development") {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = { validated: false, props: props };

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== "development") {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        config.key !== null,
        'createElement(...): Encountered component with a `key` of null. In ' +
        'a future version, this will be treated as equivalent to the string ' +
        '\'null\'; instead, provide an explicit key or use undefined.'
      ) : null);
    }
    // TODO: Change this back to `config.key === undefined`
    key = config.key == null ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== "development") {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

},{"./ReactContext":35,"./ReactCurrentOwner":36,"./warning":145}],53:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {
  'react_key_warning': {},
  'react_numeric_key_warning': {}
};
var ownerHasMonitoredObjectMap = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return current && current.constructor.displayName || undefined;
}

/**
 * Warn if the component doesn't have an explicit key assigned to it.
 * This component is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validateExplicitKey(component, parentType) {
  if (component._store.validated || component.key != null) {
    return;
  }
  component._store.validated = true;

  warnAndMonitorForKeyUse(
    'react_key_warning',
    'Each child in an array should have a unique "key" prop.',
    component,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validatePropertyKey(name, component, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'react_numeric_key_warning',
    'Child objects should have non-numeric keys so ordering is preserved.',
    component,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} warningID The id used when logging.
 * @param {string} message The base warning that gets output.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = parentType.displayName;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[warningID];
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  message += ownerName ?
    (" Check the render method of " + ownerName + ".") :
    (" Check the renderComponent call using <" + parentName + ">.");

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerName = null;
  if (component._owner && component._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    childOwnerName = component._owner.constructor.displayName;

    message += (" It was passed a child from " + childOwnerName + ".");
  }

  message += ' See http://fb.me/react-warning-keys for more information.';
  monitorCodeUse(warningID, {
    component: useName,
    componentOwner: childOwnerName
  });
  console.warn(message);
}

/**
 * Log that we're using an object map. We're considering deprecating this
 * feature and replace it with proper Map and ImmutableMap data structures.
 *
 * @internal
 */
function monitorUseOfObjectMap() {
  var currentName = getCurrentOwnerDisplayName() || '';
  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
    return;
  }
  ownerHasMonitoredObjectMap[currentName] = true;
  monitorCodeUse('react_object_map_children');
}

/**
 * Ensure that every component either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {*} component Statically passed child of any type.
 * @param {*} parentType component's parent's type.
 * @return {boolean}
 */
function validateChildKeys(component, parentType) {
  if (Array.isArray(component)) {
    for (var i = 0; i < component.length; i++) {
      var child = component[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(component)) {
    // This component was passed in a valid location.
    component._store.validated = true;
  } else if (component && typeof component === 'object') {
    monitorUseOfObjectMap();
    for (var name in component) {
      validatePropertyKey(name, component[name], parentType);
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;
        // This will soon use the warning module
        monitorCodeUse(
          'react_failed_descriptor_type_check',
          { message: error.message }
        );
      }
    }
  }
}

var ReactElementValidator = {

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== "development" ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    if (type) {
      var name = type.displayName;
      if (type.propTypes) {
        checkPropTypes(
          name,
          type.propTypes,
          element.props,
          ReactPropTypeLocations.prop
        );
      }
      if (type.contextTypes) {
        checkPropTypes(
          name,
          type.contextTypes,
          element._context,
          ReactPropTypeLocations.context
        );
      }
    }
    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    validatedFactory.type = type;
    return validatedFactory;
  }

};

module.exports = ReactElementValidator;

},{"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactPropTypeLocations":71,"./monitorCodeUse":136,"./warning":145}],54:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIdsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

/**
 * @return {ReactComponent} component The injected empty component.
 */
function getEmptyComponent() {
  ("production" !== "development" ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIdsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIdsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return nullComponentIdsRegistry[id];
}

var ReactEmptyComponent = {
  deregisterNullComponentID: deregisterNullComponentID,
  getEmptyComponent: getEmptyComponent,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID
};

module.exports = ReactEmptyComponent;

},{"./ReactElement":52,"./invariant":126}],55:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],56:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

"use strict";

var EventPluginHub = _dereq_("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":18}],57:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

"use strict";

var EventListener = _dereq_("./EventListener");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var PooledClass = _dereq_("./PooledClass");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var getEventTarget = _dereq_("./getEventTarget");
var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
    EventListener.listen(window, 'resize', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":17,"./ExecutionEnvironment":22,"./Object.assign":27,"./PooledClass":28,"./ReactInstanceHandles":60,"./ReactMount":63,"./ReactUpdates":79,"./getEventTarget":117,"./getUnboundedScrollPosition":122}],58:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var EventPluginHub = _dereq_("./EventPluginHub");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactPerf = _dereq_("./ReactPerf");
var ReactRootIndex = _dereq_("./ReactRootIndex");
var ReactUpdates = _dereq_("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponent.injection,
  CompositeComponent: ReactCompositeComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":11,"./EventPluginHub":18,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactEmptyComponent":54,"./ReactNativeComponent":66,"./ReactPerf":68,"./ReactRootIndex":75,"./ReactUpdates":79}],59:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

"use strict";

var ReactDOMSelection = _dereq_("./ReactDOMSelection");

var containsNode = _dereq_("./containsNode");
var focusNode = _dereq_("./focusNode");
var getActiveElement = _dereq_("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' ||
      elem.contentEditable === 'true'
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":46,"./containsNode":101,"./focusNode":111,"./getActiveElement":113}],60:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

"use strict";

var ReactRootIndex = _dereq_("./ReactRootIndex");

var invariant = _dereq_("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== "development" ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== "development" ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  for (var i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== "development" ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== "development" ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== "development" ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== "development" ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

},{"./ReactRootIndex":75,"./invariant":126}],61:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLegacyElement
 */

"use strict";

var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var invariant = _dereq_("./invariant");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

var legacyFactoryLogs = {};
function warnForLegacyFactoryCall() {
  if (!ReactLegacyElementFactory._isLegacyCallWarningEnabled) {
    return;
  }
  var owner = ReactCurrentOwner.current;
  var name = owner && owner.constructor ? owner.constructor.displayName : '';
  if (!name) {
    name = 'Something';
  }
  if (legacyFactoryLogs.hasOwnProperty(name)) {
    return;
  }
  legacyFactoryLogs[name] = true;
  ("production" !== "development" ? warning(
    false,
    name + ' is calling a React component directly. ' +
    'Use a factory or JSX instead. See: http://fb.me/react-legacyfactory'
  ) : null);
  monitorCodeUse('react_legacy_factory_call', { version: 3, name: name });
}

function warnForPlainFunctionType(type) {
  var isReactClass =
    type.prototype &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function';
  if (isReactClass) {
    ("production" !== "development" ? warning(
      false,
      'Did not expect to get a React class here. Use `Component` instead ' +
      'of `Component.type` or `this.constructor`.'
    ) : null);
  } else {
    if (!type._reactWarnedForThisType) {
      try {
        type._reactWarnedForThisType = true;
      } catch (x) {
        // just incase this is a frozen object or some special object
      }
      monitorCodeUse(
        'react_non_component_in_jsx',
        { version: 3, name: type.name }
      );
    }
    ("production" !== "development" ? warning(
      false,
      'This JSX uses a plain function. Only React components are ' +
      'valid in React\'s JSX transform.'
    ) : null);
  }
}

function warnForNonLegacyFactory(type) {
  ("production" !== "development" ? warning(
    false,
    'Do not pass React.DOM.' + type.type + ' to JSX or createFactory. ' +
    'Use the string "' + type.type + '" instead.'
  ) : null);
}

/**
 * Transfer static properties from the source to the target. Functions are
 * rebound to have this reflect the original source.
 */
function proxyStaticMethods(target, source) {
  if (typeof source !== 'function') {
    return;
  }
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      var value = source[key];
      if (typeof value === 'function') {
        var bound = value.bind(source);
        // Copy any properties defined on the function, such as `isRequired` on
        // a PropTypes validator.
        for (var k in value) {
          if (value.hasOwnProperty(k)) {
            bound[k] = value[k];
          }
        }
        target[key] = bound;
      } else {
        target[key] = value;
      }
    }
  }
}

// We use an object instead of a boolean because booleans are ignored by our
// mocking libraries when these factories gets mocked.
var LEGACY_MARKER = {};
var NON_LEGACY_MARKER = {};

var ReactLegacyElementFactory = {};

ReactLegacyElementFactory.wrapCreateFactory = function(createFactory) {
  var legacyCreateFactory = function(type) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createFactory(type);
    }

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      return createFactory(type.type);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      return createFactory(type.type);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // Unless it's a legacy factory, then this is probably a plain function,
    // that is expecting to be invoked by JSX. We can just return it as is.
    return type;
  };
  return legacyCreateFactory;
};

ReactLegacyElementFactory.wrapCreateElement = function(createElement) {
  var legacyCreateElement = function(type, props, children) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createElement.apply(this, arguments);
    }

    var args;

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      if (type._isMockFunction) {
        // If this is a mock function, people will expect it to be called. We
        // will actually call the original mock factory function instead. This
        // future proofs unit testing that assume that these are classes.
        type.type._mockedReactClassConstructor = type;
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // This is being called with a plain function we should invoke it
    // immediately as if this was used with legacy JSX.
    return type.apply(null, Array.prototype.slice.call(arguments, 1));
  };
  return legacyCreateElement;
};

ReactLegacyElementFactory.wrapFactory = function(factory) {
  ("production" !== "development" ? invariant(
    typeof factory === 'function',
    'This is suppose to accept a element factory'
  ) : invariant(typeof factory === 'function'));
  var legacyElementFactory = function(config, children) {
    // This factory should not be called when JSX is used. Use JSX instead.
    if ("production" !== "development") {
      warnForLegacyFactoryCall();
    }
    return factory.apply(this, arguments);
  };
  proxyStaticMethods(legacyElementFactory, factory.type);
  legacyElementFactory.isReactLegacyFactory = LEGACY_MARKER;
  legacyElementFactory.type = factory.type;
  return legacyElementFactory;
};

// This is used to mark a factory that will remain. E.g. we're allowed to call
// it as a function. However, you're not suppose to pass it to createElement
// or createFactory, so it will warn you if you do.
ReactLegacyElementFactory.markNonLegacyFactory = function(factory) {
  factory.isReactNonLegacyFactory = NON_LEGACY_MARKER;
  return factory;
};

// Checks if a factory function is actually a legacy factory pretending to
// be a class.
ReactLegacyElementFactory.isValidFactory = function(factory) {
  // TODO: This will be removed and moved into a class validator or something.
  return typeof factory === 'function' &&
    factory.isReactLegacyFactory === LEGACY_MARKER;
};

ReactLegacyElementFactory.isValidClass = function(factory) {
  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      false,
      'isValidClass is deprecated and will be removed in a future release. ' +
      'Use a more specific validator instead.'
    ) : null);
  }
  return ReactLegacyElementFactory.isValidFactory(factory);
};

ReactLegacyElementFactory._isLegacyCallWarningEnabled = true;

module.exports = ReactLegacyElementFactory;

},{"./ReactCurrentOwner":36,"./invariant":126,"./monitorCodeUse":136,"./warning":145}],62:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

"use strict";

var adler32 = _dereq_("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":98}],63:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactPerf = _dereq_("./ReactPerf");

var containsNode = _dereq_("./containsNode");
var deprecated = _dereq_("./deprecated");
var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var createElement = ReactLegacyElement.wrapCreateElement(
  ReactElement.createElement
);

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== "development") {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== "development" ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== "development" ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounting is the process of initializing a React component by creatings its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextComponent,
      container,
      callback) {
    var nextProps = nextComponent.props;
    ReactMount.scrollMonitor(container, function() {
      prevComponent.replaceProps(nextProps, callback);
    });

    if ("production" !== "development") {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== "development" ? invariant(
      container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
        container.nodeType === DOC_NODE_TYPE
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      container.nodeType === ELEMENT_NODE_TYPE ||
      container.nodeType === DOC_NODE_TYPE
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: ReactPerf.measure(
    'ReactMount',
    '_renderNewRootComponent',
    function(
        nextComponent,
        container,
        shouldReuseMarkup) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      ("production" !== "development" ? warning(
        ReactCurrentOwner.current == null,
        '_renderNewRootComponent(): Render methods should be a pure function ' +
        'of props and state; triggering nested component updates from ' +
        'render is not allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      var componentInstance = instantiateReactComponent(nextComponent, null);
      var reactRootID = ReactMount._registerComponent(
        componentInstance,
        container
      );
      componentInstance.mountComponentIntoNode(
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== "development") {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return componentInstance;
    }
  ),

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== "development" ? invariant(
      ReactElement.isValidElement(nextElement),
      'renderComponent(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        ReactLegacyElement.isValidFactory(nextElement) ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like a element
        typeof nextElement.props !== "undefined" ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        );
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    );
    callback && callback.call(component);
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== "development" ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== "development" ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== "development") {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    instance.unmountComponent();

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== "development") {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== "development" ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          console.warn(
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          );
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== "development" ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },


  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  purgeID: purgeID
};

// Deprecations (remove for 0.13)
ReactMount.renderComponent = deprecated(
  'ReactMount',
  'renderComponent',
  'render',
  this,
  ReactMount.render
);

module.exports = ReactMount;

},{"./DOMProperty":11,"./ReactBrowserEventEmitter":30,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactPerf":68,"./containsNode":101,"./deprecated":106,"./getReactRootElementInContainer":120,"./instantiateReactComponent":125,"./invariant":126,"./shouldUpdateReactComponent":142,"./warning":145}],64:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var flattenChildren = _dereq_("./flattenChildren");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction) {
      var children = flattenChildren(nestedChildren);
      var mountImages = [];
      var index = 0;
      this._renderedChildren = children;
      for (var name in children) {
        var child = children[name];
        if (children.hasOwnProperty(name)) {
          // The rendered children must be turned into instances as they're
          // mounted.
          var childInstance = instantiateReactComponent(child, null);
          children[name] = childInstance;
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = childInstance.mountComponent(
            rootID,
            transaction,
            this._mountDepth + 1
          );
          childInstance._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction) {
      var nextChildren = flattenChildren(nextNestedChildren);
      var prevChildren = this._renderedChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild.receiveComponent(nextElement, transaction);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(
            nextElement,
            null
          );
          this._mountChildByNameAtIndex(
            nextChildInstance, name, nextIndex, transaction
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren[name])) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        // TODO: When is this not true?
        if (renderedChild.unmountComponent) {
          renderedChild.unmountComponent();
        }
      }
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(child, name, index, transaction) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = child.mountComponent(
        rootID,
        transaction,
        this._mountDepth + 1
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
      this._renderedChildren = this._renderedChildren || {};
      this._renderedChildren[name] = child;
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
      child.unmountComponent();
      delete this._renderedChildren[name];
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactComponent":32,"./ReactMultiChildUpdateTypes":65,"./flattenChildren":110,"./instantiateReactComponent":125,"./shouldUpdateReactComponent":142}],65:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":132}],66:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

"use strict";

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Create an internal class for a specific tag.
 *
 * @param {string} tag The tag for which to create an internal instance.
 * @param {any} props The props passed to the instance constructor.
 * @return {ReactComponent} component The injected empty component.
 */
function createInstanceForTag(tag, props, parentType) {
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  if (parentType === tag) {
    // Avoid recursion
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  // Unwrap legacy factories
  return new componentClass.type(props);
}

var ReactNativeComponent = {
  createInstanceForTag: createInstanceForTag,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

},{"./Object.assign":27,"./invariant":126}],67:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

"use strict";

var emptyObject = _dereq_("./emptyObject");
var invariant = _dereq_("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      object &&
      typeof object.attachRef === 'function' &&
      typeof object.detachRef === 'function'
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.refs[ref] === component) {
      owner.detachRef(ref);
    }
  },

  /**
   * A ReactComponent must mix this in to have refs.
   *
   * @lends {ReactOwner.prototype}
   */
  Mixin: {

    construct: function() {
      this.refs = emptyObject;
    },

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      ("production" !== "development" ? invariant(
        component.isOwnedBy(this),
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
        ref
      ) : invariant(component.isOwnedBy(this)));
      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
      refs[ref] = component;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      delete this.refs[ref];
    }

  }

};

module.exports = ReactOwner;

},{"./emptyObject":108,"./invariant":126}],68:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

"use strict";

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== "development") {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

},{}],69:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTransferer
 */

"use strict";

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var invariant = _dereq_("./invariant");
var joinClasses = _dereq_("./joinClasses");
var warning = _dereq_("./warning");

var didWarn = false;

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  TransferStrategies: TransferStrategies,

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    return transferInto(assign({}, oldProps), newProps);
  },

  /**
   * @lends {ReactPropTransferer.prototype}
   */
  Mixin: {

    /**
     * Transfer props from this component to a target component.
     *
     * Props that do not have an explicit transfer strategy will be transferred
     * only if the target component does not already have the prop set.
     *
     * This is usually used to pass down props to a returned root component.
     *
     * @param {ReactElement} element Component receiving the properties.
     * @return {ReactElement} The supplied `component`.
     * @final
     * @protected
     */
    transferPropsTo: function(element) {
      ("production" !== "development" ? invariant(
        element._owner === this,
        '%s: You can\'t call transferPropsTo() on a component that you ' +
        'don\'t own, %s. This usually means you are calling ' +
        'transferPropsTo() on a component passed in as props or children.',
        this.constructor.displayName,
        typeof element.type === 'string' ?
        element.type :
        element.type.displayName
      ) : invariant(element._owner === this));

      if ("production" !== "development") {
        if (!didWarn) {
          didWarn = true;
          ("production" !== "development" ? warning(
            false,
            'transferPropsTo is deprecated. ' +
            'See http://fb.me/react-transferpropsto for more information.'
          ) : null);
        }
      }

      // Because elements are immutable we have to merge into the existing
      // props object rather than clone it.
      transferInto(element.props, this.props);

      return element;
    }

  }
};

module.exports = ReactPropTransferer;

},{"./Object.assign":27,"./emptyFunction":107,"./invariant":126,"./joinClasses":131,"./warning":145}],70:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

"use strict";

var ReactPropTypeLocationNames = {};

if ("production" !== "development") {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

},{}],71:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":132}],72:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");

var deprecated = _dereq_("./deprecated");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker,

  component: deprecated(
    'React.PropTypes',
    'component',
    'element',
    this,
    elementTypeChecker
  ),
  renderable: deprecated(
    'React.PropTypes',
    'renderable',
    'node',
    this,
    nodeTypeChecker
  )
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ")+
          ("`" + componentName + "`.")
        );
      }
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns());
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate, 'expected `object`');
}

function isNode(propValue) {
  switch(typeof propValue) {
    case 'number':
    case 'string':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (ReactElement.isValidElement(propValue)) {
        return true;
      }
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":52,"./ReactPropTypeLocationNames":70,"./deprecated":106,"./emptyFunction":107}],73:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var assign = _dereq_("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30}],74:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30,"./ReactInputSelection":59,"./ReactPutListenerQueue":73,"./Transaction":95}],75:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

"use strict";

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],76:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  _dereq_("./ReactServerRenderingTransaction");

var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, 0);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, 0);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactMarkupChecksum":62,"./ReactServerRenderingTransaction":77,"./instantiateReactComponent":125,"./invariant":126}],77:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var CallbackQueue = _dereq_("./CallbackQueue");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactPutListenerQueue":73,"./Transaction":95,"./emptyFunction":107}],78:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTextComponent
 * @typechecks static-only
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactComponent = _dereq_("./ReactComponent");
var ReactElement = _dereq_("./ReactElement");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactTextComponent = function(props) {
  // This constructor and it's argument is currently used by mocks.
};

assign(ReactTextComponent.prototype, ReactComponent.Mixin, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, mountDepth) {
    ReactComponent.Mixin.mountComponent.call(
      this,
      rootID,
      transaction,
      mountDepth
    );

    var escapedText = escapeTextForBrowser(this.props);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {object} nextComponent Contains the next text content.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextComponent, transaction) {
    var nextProps = nextComponent.props;
    if (nextProps !== this.props) {
      this.props = nextProps;
      ReactComponent.BackendIDOperations.updateTextContentByID(
        this._rootNodeID,
        nextProps
      );
    }
  }

});

var ReactTextComponentFactory = function(text) {
  // Bypass validation and configuration
  return new ReactElement(ReactTextComponent, null, null, null, null, text);
};

ReactTextComponentFactory.type = ReactTextComponent;

module.exports = ReactTextComponentFactory;

},{"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactComponent":32,"./ReactElement":52,"./escapeTextForBrowser":109}],79:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactPerf = _dereq_("./ReactPerf");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var warning = _dereq_("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== "development" ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b);
}

/**
 * Array comparator for ReactComponents by owner depth
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountDepthComparator(c1, c2) {
  return c1._mountDepth - c2._mountDepth;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== "development" ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountDepthComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, ignore them
    // TODO: Queue unmounts in the same list to avoid this happening at all
    var component = dirtyComponents[i];
    if (component.isMounted()) {
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      component.performUpdateIfNecessary(transaction.reconcileTransaction);

      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(
            callbacks[j],
            component
          );
        }
      }
    }
  }
}

var flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  function() {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }

      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }
  }
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component, callback) {
  ("production" !== "development" ? invariant(
    !callback || typeof callback === "function",
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
    'isn\'t callable.'
  ) : invariant(!callback || typeof callback === "function"));
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== "development" ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
    return;
  }

  dirtyComponents.push(component);

  if (callback) {
    if (component._pendingCallbacks) {
      component._pendingCallbacks.push(callback);
    } else {
      component._pendingCallbacks = [callback];
    }
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== "development" ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== "development" ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== "development" ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactCurrentOwner":36,"./ReactPerf":68,"./Transaction":95,"./invariant":126,"./warning":145}],80:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":11}],81:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var getActiveElement = _dereq_("./getActiveElement");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");
var shallowEqual = _dereq_("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement != getActiveElement()) {
    return;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactInputSelection":59,"./SyntheticEvent":87,"./getActiveElement":113,"./isTextInputElement":129,"./keyOf":133,"./shallowEqual":141}],82:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

"use strict";

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],83:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticClipboardEvent = _dereq_("./SyntheticClipboardEvent");
var SyntheticEvent = _dereq_("./SyntheticEvent");
var SyntheticFocusEvent = _dereq_("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = _dereq_("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");
var SyntheticDragEvent = _dereq_("./SyntheticDragEvent");
var SyntheticTouchEvent = _dereq_("./SyntheticTouchEvent");
var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var SyntheticWheelEvent = _dereq_("./SyntheticWheelEvent");

var getEventCharCode = _dereq_("./getEventCharCode");

var invariant = _dereq_("./invariant");
var keyOf = _dereq_("./keyOf");
var warning = _dereq_("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var topLevelType in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== "development" ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== "development" ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

},{"./EventConstants":16,"./EventPluginUtils":20,"./EventPropagators":21,"./SyntheticClipboardEvent":84,"./SyntheticDragEvent":86,"./SyntheticEvent":87,"./SyntheticFocusEvent":88,"./SyntheticKeyboardEvent":90,"./SyntheticMouseEvent":91,"./SyntheticTouchEvent":92,"./SyntheticUIEvent":93,"./SyntheticWheelEvent":94,"./getEventCharCode":114,"./invariant":126,"./keyOf":133,"./warning":145}],84:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;


},{"./SyntheticEvent":87}],85:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;


},{"./SyntheticEvent":87}],86:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":91}],87:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    event.preventDefault ? event.preventDefault() : event.returnValue = false;
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":27,"./PooledClass":28,"./emptyFunction":107,"./getEventTarget":117}],88:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":93}],89:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;


},{"./SyntheticEvent":87}],90:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventCharCode = _dereq_("./getEventCharCode");
var getEventKey = _dereq_("./getEventKey");
var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":93,"./getEventCharCode":114,"./getEventKey":115,"./getEventModifierState":116}],91:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      event.fromElement === event.srcElement ?
        event.toElement :
        event.fromElement
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":93,"./ViewportMetrics":96,"./getEventModifierState":116}],92:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":93,"./getEventModifierState":116}],93:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":87,"./getEventTarget":117}],94:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":91}],95:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM upates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== "development" ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== "development" ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR) {
          wrapper.close && wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

},{"./invariant":126}],96:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

"use strict";

var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function() {
    var scrollPosition = getUnboundedScrollPosition(window);
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{"./getUnboundedScrollPosition":122}],97:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== "development" ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

},{"./invariant":126}],98:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

"use strict";

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],99:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],100:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = _dereq_("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":99}],101:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = _dereq_("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":130}],102:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFrom
 * @typechecks
 */

var toArray = _dereq_("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFrom = require('createArrayFrom');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFrom(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFrom(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFrom;

},{"./toArray":143}],103:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

"use strict";

// Defeat circular references by requiring this directly.
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactCompositeComponent.createClass({
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== "development" ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

},{"./ReactCompositeComponent":34,"./ReactElement":52,"./invariant":126}],104:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createArrayFrom = _dereq_("./createArrayFrom");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== "development" ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== "development" ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFrom(scripts).forEach(handleScript);
  }

  var nodes = createArrayFrom(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

},{"./ExecutionEnvironment":22,"./createArrayFrom":102,"./getMarkupWrap":118,"./invariant":126}],105:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":4}],106:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

var assign = _dereq_("./Object.assign");
var warning = _dereq_("./warning");

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} namespace The namespace of the call, eg 'React'
 * @param {string} oldName The old function name, eg 'renderComponent'
 * @param {string} newName The new function name, eg 'render'
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {*} Will be the value as returned from `fn`
 */
function deprecated(namespace, oldName, newName, ctx, fn) {
  var warned = false;
  if ("production" !== "development") {
    var newFn = function() {
      ("production" !== "development" ? warning(
        warned,
        (namespace + "." + oldName + " will be deprecated in a future version. ") +
        ("Use " + namespace + "." + newName + " instead.")
      ) : null);
      warned = true;
      return fn.apply(ctx, arguments);
    };
    newFn.displayName = (namespace + "_" + oldName);
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;

},{"./Object.assign":27,"./warning":145}],107:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],108:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== "development") {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

},{}],109:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextForBrowser
 * @typechecks static-only
 */

"use strict";

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextForBrowser;

},{}],110:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

"use strict";

var ReactTextComponent = _dereq_("./ReactTextComponent");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'flattenChildren(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);
  if (keyUnique && child != null) {
    var type = typeof child;
    var normalizedValue;

    if (type === 'string') {
      normalizedValue = ReactTextComponent(child);
    } else if (type === 'number') {
      normalizedValue = ReactTextComponent('' + child);
    } else {
      normalizedValue = child;
    }

    result[name] = normalizedValue;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

},{"./ReactTextComponent":78,"./traverseAllChildren":144,"./warning":145}],111:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],112:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

"use strict";

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],113:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],114:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

"use strict";

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],115:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

"use strict";

var getEventCharCode = _dereq_("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":114}],116:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

"use strict";

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],117:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

"use strict";

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],118:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var invariant = _dereq_("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== "development" ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

},{"./ExecutionEnvironment":22,"./invariant":126}],119:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

"use strict";

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType == 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],120:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

"use strict";

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],121:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":22}],122:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],123:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],124:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = _dereq_("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":123}],125:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

"use strict";

var warning = _dereq_("./warning");

var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");

/**
 * Given an `element` create an instance that will actually be mounted.
 *
 * @param {object} element
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(element, parentCompositeType) {
  var instance;

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      element && (typeof element.type === 'function' ||
                     typeof element.type === 'string'),
      'Only functions or strings can be mounted as React components.'
    ) : null);

    // Resolve mock instances
    if (element.type._mockedReactClassConstructor) {
      // If this is a mocked class, we treat the legacy factory as if it was the
      // class constructor for future proofing unit tests. Because this might
      // be mocked as a legacy factory, we ignore any warnings triggerd by
      // this temporary hack.
      ReactLegacyElement._isLegacyCallWarningEnabled = false;
      try {
        instance = new element.type._mockedReactClassConstructor(
          element.props
        );
      } finally {
        ReactLegacyElement._isLegacyCallWarningEnabled = true;
      }

      // If the mock implementation was a legacy factory, then it returns a
      // element. We need to turn this into a real component instance.
      if (ReactElement.isValidElement(instance)) {
        instance = new instance.type(instance.props);
      }

      var render = instance.render;
      if (!render) {
        // For auto-mocked factories, the prototype isn't shimmed and therefore
        // there is no render function on the instance. We replace the whole
        // component with an empty component instance instead.
        element = ReactEmptyComponent.getEmptyComponent();
      } else {
        if (render._isMockFunction && !render._getMockImplementation()) {
          // Auto-mocked components may have a prototype with a mocked render
          // function. For those, we'll need to mock the result of the render
          // since we consider undefined to be invalid results from render.
          render.mockImplementation(
            ReactEmptyComponent.getEmptyComponent
          );
        }
        instance.construct(element);
        return instance;
      }
    }
  }

  // Special case string values
  if (typeof element.type === 'string') {
    instance = ReactNativeComponent.createInstanceForTag(
      element.type,
      element.props,
      parentCompositeType
    );
  } else {
    // Normal case for non-mocks and non-strings
    instance = new element.type(element.props);
  }

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // This actually sets up the internal instance. This will become decoupled
  // from the public instance in a future diff.
  instance.construct(element);

  return instance;
}

module.exports = instantiateReactComponent;

},{"./ReactElement":52,"./ReactEmptyComponent":54,"./ReactLegacyElement":61,"./ReactNativeComponent":66,"./warning":145}],126:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== "development") {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

},{}],127:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":22}],128:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    typeof Node === 'function' ? object instanceof Node :
      typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'
  ));
}

module.exports = isNode;

},{}],129:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

"use strict";

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
    elem.nodeName === 'TEXTAREA'
  );
}

module.exports = isTextInputElement;

},{}],130:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = _dereq_("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":128}],131:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],132:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== "development" ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

},{"./invariant":126}],133:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],134:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],135:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

"use strict";

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (cache.hasOwnProperty(string)) {
      return cache[string];
    } else {
      return cache[string] = callback.call(this, string);
    }
  };
}

module.exports = memoizeStringOnly;

},{}],136:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule monitorCodeUse
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Provides open-source compatible instrumentation for monitoring certain API
 * uses before we're ready to issue a warning or refactor. It accepts an event
 * name which may only contain the characters [a-z0-9_] and an optional data
 * object with further information.
 */

function monitorCodeUse(eventName, data) {
  ("production" !== "development" ? invariant(
    eventName && !/[^a-z0-9_]/.test(eventName),
    'You must provide an eventName using only the characters [a-z0-9_]'
  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
}

module.exports = monitorCodeUse;

},{"./invariant":126}],137:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

},{"./ReactElement":52,"./invariant":126}],138:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":22}],139:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = _dereq_("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":138}],140:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":22}],141:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

"use strict";

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],142:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

"use strict";

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement && nextElement &&
      prevElement.type === nextElement.type &&
      prevElement.key === nextElement.key &&
      prevElement._owner === nextElement._owner) {
    return true;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{}],143:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = _dereq_("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFrom.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== "development" ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== "development" ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== "development" ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

},{"./invariant":126}],144:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");

var invariant = _dereq_("./invariant");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that:
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
 * 2. it('should fail when supplied duplicate key', function() {
 * 3. That a single child and an array with one item have the same key pattern.
 * });
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
var traverseAllChildrenImpl =
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
    var nextName, nextIndex;
    var subtreeCount = 0;  // Count of children found in the current subtree.
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        nextName = (
          nameSoFar +
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var type = typeof children;
      var isOnlyChild = nameSoFar === '';
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows
      var storageName =
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
      if (children == null || type === 'boolean') {
        // All of the above are perceived as null.
        callback(traverseContext, null, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'string' || type === 'number' ||
                 ReactElement.isValidElement(children)) {
        callback(traverseContext, children, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'object') {
        ("production" !== "development" ? invariant(
          !children || children.nodeType !== 1,
          'traverseAllChildren(...): Encountered an invalid child; DOM ' +
          'elements are not valid children of React components.'
        ) : invariant(!children || children.nodeType !== 1));
        for (var key in children) {
          if (children.hasOwnProperty(key)) {
            nextName = (
              nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(key) + SUBSEPARATOR +
              getComponentKey(children[key], 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              children[key],
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    }
    return subtreeCount;
  };

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./invariant":126}],145:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== "development") {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (!condition) {
      var argIndex = 0;
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
    }
  };
}

module.exports = warning;

},{"./emptyFunction":107}]},{},[1])(1)
});
var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", 
SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", 
ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", 
COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", 
DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.object");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  this.handler_ = opt_scope;
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture) {
  return this.listen_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenWithScope = function(src, type, fn, capture, scope) {
  return this.listen_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var listenerObj = goog.events.listen(src, type[i], opt_fn || this.handleEvent, opt_capture || false, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture) {
  return this.listenOnce_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function(src, type, fn, capture, scope) {
  return this.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce_(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt) {
  return this.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(src, wrapper, listener, capture, scope) {
  return this.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.listen(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (listener) {
      goog.events.unlistenByKey(listener);
      delete this.keys_[listener.key];
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.unlisten(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return{"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return!!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception, goog.debug.Logger.prototype.log));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception, opt_fnStackContext) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    var context;
    if (goog.STRICT_MODE_COMPATIBLE) {
      context = opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord;
    } else {
      context = opt_fnStackContext || arguments.callee.caller;
    }
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = false;
    var location = goog.global["location"];
    if (location) {
      var href = location["href"];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location["hostname"]) {
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmpty(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.structs.Queue");
goog.require("goog.array");
goog.structs.Queue = function() {
  this.front_ = [];
  this.back_ = [];
};
goog.structs.Queue.prototype.maybeFlip_ = function() {
  if (goog.array.isEmpty(this.front_)) {
    this.front_ = this.back_;
    this.front_.reverse();
    this.back_ = [];
  }
};
goog.structs.Queue.prototype.enqueue = function(element) {
  this.back_.push(element);
};
goog.structs.Queue.prototype.dequeue = function() {
  this.maybeFlip_();
  return this.front_.pop();
};
goog.structs.Queue.prototype.peek = function() {
  this.maybeFlip_();
  return goog.array.peek(this.front_);
};
goog.structs.Queue.prototype.getCount = function() {
  return this.front_.length + this.back_.length;
};
goog.structs.Queue.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.front_) && goog.array.isEmpty(this.back_);
};
goog.structs.Queue.prototype.clear = function() {
  this.front_ = [];
  this.back_ = [];
};
goog.structs.Queue.prototype.contains = function(obj) {
  return goog.array.contains(this.front_, obj) || goog.array.contains(this.back_, obj);
};
goog.structs.Queue.prototype.remove = function(obj) {
  var index = goog.array.lastIndexOf(this.front_, obj);
  if (index < 0) {
    return goog.array.remove(this.back_, obj);
  }
  goog.array.removeAt(this.front_, index);
  return true;
};
goog.structs.Queue.prototype.getValues = function() {
  var res = [];
  for (var i = this.front_.length - 1;i >= 0;--i) {
    res.push(this.front_[i]);
  }
  var len = this.back_.length;
  for (var i = 0;i < len;++i) {
    res.push(this.back_[i]);
  }
  return res;
};
goog.provide("goog.structs.Pool");
goog.require("goog.Disposable");
goog.require("goog.structs.Queue");
goog.require("goog.structs.Set");
goog.structs.Pool = function(opt_minCount, opt_maxCount) {
  goog.Disposable.call(this);
  this.minCount_ = opt_minCount || 0;
  this.maxCount_ = opt_maxCount || 10;
  if (this.minCount_ > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.freeQueue_ = new goog.structs.Queue;
  this.inUseSet_ = new goog.structs.Set;
  this.delay = 0;
  this.lastAccess = null;
  this.adjustForMinMax();
  var magicProps = {canBeReused:0};
};
goog.inherits(goog.structs.Pool, goog.Disposable);
goog.structs.Pool.ERROR_MIN_MAX_ = "[goog.structs.Pool] Min can not be greater than max";
goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_ = "[goog.structs.Pool] Objects not released";
goog.structs.Pool.prototype.setMinimumCount = function(min) {
  if (min > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.minCount_ = min;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setMaximumCount = function(max) {
  if (max < this.minCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.maxCount_ = max;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setDelay = function(delay) {
  this.delay = delay;
};
goog.structs.Pool.prototype.getObject = function() {
  var time = goog.now();
  if (goog.isDefAndNotNull(this.lastAccess) && time - this.lastAccess < this.delay) {
    return undefined;
  }
  var obj = this.removeFreeObject_();
  if (obj) {
    this.lastAccess = time;
    this.inUseSet_.add(obj);
  }
  return obj;
};
goog.structs.Pool.prototype.releaseObject = function(obj) {
  if (this.inUseSet_.remove(obj)) {
    this.addFreeObject(obj);
    return true;
  }
  return false;
};
goog.structs.Pool.prototype.removeFreeObject_ = function() {
  var obj;
  while (this.getFreeCount() > 0) {
    obj = this.freeQueue_.dequeue();
    if (!this.objectCanBeReused(obj)) {
      this.adjustForMinMax();
    } else {
      break;
    }
  }
  if (!obj && this.getCount() < this.maxCount_) {
    obj = this.createObject();
  }
  return obj;
};
goog.structs.Pool.prototype.addFreeObject = function(obj) {
  this.inUseSet_.remove(obj);
  if (this.objectCanBeReused(obj) && this.getCount() < this.maxCount_) {
    this.freeQueue_.enqueue(obj);
  } else {
    this.disposeObject(obj);
  }
};
goog.structs.Pool.prototype.adjustForMinMax = function() {
  var freeQueue = this.freeQueue_;
  while (this.getCount() < this.minCount_) {
    freeQueue.enqueue(this.createObject());
  }
  while (this.getCount() > this.maxCount_ && this.getFreeCount() > 0) {
    this.disposeObject(freeQueue.dequeue());
  }
};
goog.structs.Pool.prototype.createObject = function() {
  return{};
};
goog.structs.Pool.prototype.disposeObject = function(obj) {
  if (typeof obj.dispose == "function") {
    obj.dispose();
  } else {
    for (var i in obj) {
      obj[i] = null;
    }
  }
};
goog.structs.Pool.prototype.objectCanBeReused = function(obj) {
  if (typeof obj.canBeReused == "function") {
    return obj.canBeReused();
  }
  return true;
};
goog.structs.Pool.prototype.contains = function(obj) {
  return this.freeQueue_.contains(obj) || this.inUseSet_.contains(obj);
};
goog.structs.Pool.prototype.getCount = function() {
  return this.freeQueue_.getCount() + this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getInUseCount = function() {
  return this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getFreeCount = function() {
  return this.freeQueue_.getCount();
};
goog.structs.Pool.prototype.isEmpty = function() {
  return this.freeQueue_.isEmpty() && this.inUseSet_.isEmpty();
};
goog.structs.Pool.prototype.disposeInternal = function() {
  goog.structs.Pool.superClass_.disposeInternal.call(this);
  if (this.getInUseCount() > 0) {
    throw Error(goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_);
  }
  delete this.inUseSet_;
  var freeQueue = this.freeQueue_;
  while (!freeQueue.isEmpty()) {
    this.disposeObject(freeQueue.dequeue());
  }
  delete this.freeQueue_;
};
goog.provide("goog.structs.Node");
goog.structs.Node = function(key, value) {
  this.key_ = key;
  this.value_ = value;
};
goog.structs.Node.prototype.getKey = function() {
  return this.key_;
};
goog.structs.Node.prototype.getValue = function() {
  return this.value_;
};
goog.structs.Node.prototype.clone = function() {
  return new goog.structs.Node(this.key_, this.value_);
};
goog.provide("goog.structs.Heap");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.structs.Node");
goog.structs.Heap = function(opt_heap) {
  this.nodes_ = [];
  if (opt_heap) {
    this.insertAll(opt_heap);
  }
};
goog.structs.Heap.prototype.insert = function(key, value) {
  var node = new goog.structs.Node(key, value);
  var nodes = this.nodes_;
  nodes.push(node);
  this.moveUp_(nodes.length - 1);
};
goog.structs.Heap.prototype.insertAll = function(heap) {
  var keys, values;
  if (heap instanceof goog.structs.Heap) {
    keys = heap.getKeys();
    values = heap.getValues();
    if (heap.getCount() <= 0) {
      var nodes = this.nodes_;
      for (var i = 0;i < keys.length;i++) {
        nodes.push(new goog.structs.Node(keys[i], values[i]));
      }
      return;
    }
  } else {
    keys = goog.object.getKeys(heap);
    values = goog.object.getValues(heap);
  }
  for (var i = 0;i < keys.length;i++) {
    this.insert(keys[i], values[i]);
  }
};
goog.structs.Heap.prototype.remove = function() {
  var nodes = this.nodes_;
  var count = nodes.length;
  var rootNode = nodes[0];
  if (count <= 0) {
    return undefined;
  } else {
    if (count == 1) {
      goog.array.clear(nodes);
    } else {
      nodes[0] = nodes.pop();
      this.moveDown_(0);
    }
  }
  return rootNode.getValue();
};
goog.structs.Heap.prototype.peek = function() {
  var nodes = this.nodes_;
  if (nodes.length == 0) {
    return undefined;
  }
  return nodes[0].getValue();
};
goog.structs.Heap.prototype.peekKey = function() {
  return this.nodes_[0] && this.nodes_[0].getKey();
};
goog.structs.Heap.prototype.moveDown_ = function(index) {
  var nodes = this.nodes_;
  var count = nodes.length;
  var node = nodes[index];
  while (index < count >> 1) {
    var leftChildIndex = this.getLeftChildIndex_(index);
    var rightChildIndex = this.getRightChildIndex_(index);
    var smallerChildIndex = rightChildIndex < count && nodes[rightChildIndex].getKey() < nodes[leftChildIndex].getKey() ? rightChildIndex : leftChildIndex;
    if (nodes[smallerChildIndex].getKey() > node.getKey()) {
      break;
    }
    nodes[index] = nodes[smallerChildIndex];
    index = smallerChildIndex;
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.moveUp_ = function(index) {
  var nodes = this.nodes_;
  var node = nodes[index];
  while (index > 0) {
    var parentIndex = this.getParentIndex_(index);
    if (nodes[parentIndex].getKey() > node.getKey()) {
      nodes[index] = nodes[parentIndex];
      index = parentIndex;
    } else {
      break;
    }
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.getLeftChildIndex_ = function(index) {
  return index * 2 + 1;
};
goog.structs.Heap.prototype.getRightChildIndex_ = function(index) {
  return index * 2 + 2;
};
goog.structs.Heap.prototype.getParentIndex_ = function(index) {
  return index - 1 >> 1;
};
goog.structs.Heap.prototype.getValues = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getValue());
  }
  return rv;
};
goog.structs.Heap.prototype.getKeys = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getKey());
  }
  return rv;
};
goog.structs.Heap.prototype.containsValue = function(val) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getValue() == val;
  });
};
goog.structs.Heap.prototype.containsKey = function(key) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getKey() == key;
  });
};
goog.structs.Heap.prototype.clone = function() {
  return new goog.structs.Heap(this);
};
goog.structs.Heap.prototype.getCount = function() {
  return this.nodes_.length;
};
goog.structs.Heap.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.nodes_);
};
goog.structs.Heap.prototype.clear = function() {
  goog.array.clear(this.nodes_);
};
goog.provide("goog.structs.PriorityQueue");
goog.require("goog.structs.Heap");
goog.structs.PriorityQueue = function() {
  goog.structs.Heap.call(this);
};
goog.inherits(goog.structs.PriorityQueue, goog.structs.Heap);
goog.structs.PriorityQueue.prototype.enqueue = function(priority, value) {
  this.insert(priority, value);
};
goog.structs.PriorityQueue.prototype.dequeue = function() {
  return this.remove();
};
goog.provide("goog.structs.PriorityPool");
goog.require("goog.structs.Pool");
goog.require("goog.structs.PriorityQueue");
goog.structs.PriorityPool = function(opt_minCount, opt_maxCount) {
  this.delayTimeout_ = undefined;
  this.requestQueue_ = new goog.structs.PriorityQueue;
  goog.structs.Pool.call(this, opt_minCount, opt_maxCount);
};
goog.inherits(goog.structs.PriorityPool, goog.structs.Pool);
goog.structs.PriorityPool.DEFAULT_PRIORITY_ = 100;
goog.structs.PriorityPool.prototype.setDelay = function(delay) {
  goog.structs.PriorityPool.base(this, "setDelay", delay);
  if (!goog.isDefAndNotNull(this.lastAccess)) {
    return;
  }
  goog.global.clearTimeout(this.delayTimeout_);
  this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay + this.lastAccess - goog.now());
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.getObject = function(opt_callback, opt_priority) {
  if (!opt_callback) {
    var result = goog.structs.PriorityPool.base(this, "getObject");
    if (result && this.delay) {
      this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay);
    }
    return result;
  }
  var priority = goog.isDef(opt_priority) ? opt_priority : goog.structs.PriorityPool.DEFAULT_PRIORITY_;
  this.requestQueue_.enqueue(priority, opt_callback);
  this.handleQueueRequests_();
  return undefined;
};
goog.structs.PriorityPool.prototype.handleQueueRequests_ = function() {
  var requestQueue = this.requestQueue_;
  while (requestQueue.getCount() > 0) {
    var obj = this.getObject();
    if (!obj) {
      return;
    } else {
      var requestCallback = requestQueue.dequeue();
      requestCallback.apply(this, [obj]);
    }
  }
};
goog.structs.PriorityPool.prototype.addFreeObject = function(obj) {
  goog.structs.PriorityPool.superClass_.addFreeObject.call(this, obj);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.adjustForMinMax = function() {
  goog.structs.PriorityPool.superClass_.adjustForMinMax.call(this);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.disposeInternal = function() {
  goog.structs.PriorityPool.superClass_.disposeInternal.call(this);
  goog.global.clearTimeout(this.delayTimeout_);
  this.requestQueue_.clear();
  this.requestQueue_ = null;
};
goog.provide("goog.net.XhrIoPool");
goog.require("goog.net.XhrIo");
goog.require("goog.structs.PriorityPool");
goog.net.XhrIoPool = function(opt_headers, opt_minCount, opt_maxCount) {
  goog.structs.PriorityPool.call(this, opt_minCount, opt_maxCount);
  this.headers_ = opt_headers;
};
goog.inherits(goog.net.XhrIoPool, goog.structs.PriorityPool);
goog.net.XhrIoPool.prototype.createObject = function() {
  var xhrIo = new goog.net.XhrIo;
  var headers = this.headers_;
  if (headers) {
    headers.forEach(function(value, key) {
      xhrIo.headers.set(key, value);
    });
  }
  return xhrIo;
};
goog.net.XhrIoPool.prototype.objectCanBeReused = function(obj) {
  var xhr = (obj);
  return!xhr.isDisposed() && !xhr.isActive();
};
goog.provide("goog.net.XhrManager");
goog.provide("goog.net.XhrManager.Event");
goog.provide("goog.net.XhrManager.Request");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIoPool");
goog.require("goog.structs.Map");
goog.net.XhrManager = function(opt_maxRetries, opt_headers, opt_minCount, opt_maxCount, opt_timeoutInterval) {
  goog.net.XhrManager.base(this, "constructor");
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.timeoutInterval_ = goog.isDef(opt_timeoutInterval) ? Math.max(0, opt_timeoutInterval) : 0;
  this.xhrPool_ = new goog.net.XhrIoPool(opt_headers, opt_minCount, opt_maxCount);
  this.requests_ = new goog.structs.Map;
  this.eventHandler_ = new goog.events.EventHandler(this);
};
goog.inherits(goog.net.XhrManager, goog.events.EventTarget);
goog.net.XhrManager.ERROR_ID_IN_USE_ = "[goog.net.XhrManager] ID in use";
goog.net.XhrManager.XHR_EVENT_TYPES_ = [goog.net.EventType.READY, goog.net.EventType.COMPLETE, goog.net.EventType.SUCCESS, goog.net.EventType.ERROR, goog.net.EventType.ABORT, goog.net.EventType.TIMEOUT];
goog.net.XhrManager.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrManager.prototype.getOutstandingCount = function() {
  return this.requests_.getCount();
};
goog.net.XhrManager.prototype.getOutstandingRequestIds = function() {
  return this.requests_.getKeys();
};
goog.net.XhrManager.prototype.send = function(id, url, opt_method, opt_content, opt_headers, opt_priority, opt_callback, opt_maxRetries, opt_responseType) {
  var requests = this.requests_;
  if (requests.get(id)) {
    throw Error(goog.net.XhrManager.ERROR_ID_IN_USE_);
  }
  var request = new goog.net.XhrManager.Request(url, goog.bind(this.handleEvent_, this, id), opt_method, opt_content, opt_headers, opt_callback, goog.isDef(opt_maxRetries) ? opt_maxRetries : this.maxRetries_, opt_responseType);
  this.requests_.set(id, request);
  var callback = goog.bind(this.handleAvailableXhr_, this, id);
  this.xhrPool_.getObject(callback, opt_priority);
  return request;
};
goog.net.XhrManager.prototype.abort = function(id, opt_force) {
  var request = this.requests_.get(id);
  if (request) {
    var xhrIo = request.xhrIo;
    request.setAborted(true);
    if (opt_force) {
      if (xhrIo) {
        this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
        goog.events.listenOnce(xhrIo, goog.net.EventType.READY, function() {
          this.xhrPool_.releaseObject(xhrIo);
        }, false, this);
      }
      this.requests_.remove(id);
    }
    if (xhrIo) {
      xhrIo.abort();
    }
  }
};
goog.net.XhrManager.prototype.handleAvailableXhr_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.xhrIo) {
    this.addXhrListener_(xhrIo, request.getXhrEventCallback());
    xhrIo.setTimeoutInterval(this.timeoutInterval_);
    xhrIo.setResponseType(request.getResponseType());
    request.xhrIo = xhrIo;
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.READY, this, id, xhrIo));
    this.retry_(id, xhrIo);
    if (request.getAborted()) {
      xhrIo.abort();
    }
  } else {
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleEvent_ = function(id, e) {
  var xhrIo = (e.target);
  switch(e.type) {
    case goog.net.EventType.READY:
      this.retry_(id, xhrIo);
      break;
    case goog.net.EventType.COMPLETE:
      return this.handleComplete_(id, xhrIo, e);
    case goog.net.EventType.SUCCESS:
      this.handleSuccess_(id, xhrIo);
      break;
    case goog.net.EventType.TIMEOUT:
    ;
    case goog.net.EventType.ERROR:
      this.handleError_(id, xhrIo);
      break;
    case goog.net.EventType.ABORT:
      this.handleAbort_(id, xhrIo);
      break;
  }
  return null;
};
goog.net.XhrManager.prototype.retry_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.getCompleted() && !request.hasReachedMaxRetries()) {
    request.increaseAttemptCount();
    xhrIo.send(request.getUrl(), request.getMethod(), request.getContent(), request.getHeaders());
  } else {
    if (request) {
      this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
      this.requests_.remove(id);
    }
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleComplete_ = function(id, xhrIo, e) {
  var request = this.requests_.get(id);
  if (xhrIo.getLastErrorCode() == goog.net.ErrorCode.ABORT || xhrIo.isSuccess() || request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.COMPLETE, this, id, xhrIo));
    if (request) {
      request.setCompleted(true);
      if (request.getCompleteCallback()) {
        return request.getCompleteCallback().call(xhrIo, e);
      }
    }
  }
  return null;
};
goog.net.XhrManager.prototype.handleAbort_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ABORT, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleSuccess_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.SUCCESS, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleError_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ERROR, this, id, xhrIo));
  }
};
goog.net.XhrManager.prototype.removeXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.unlisten(xhrIo, types, func);
};
goog.net.XhrManager.prototype.addXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.listen(xhrIo, types, func);
};
goog.net.XhrManager.prototype.disposeInternal = function() {
  goog.net.XhrManager.superClass_.disposeInternal.call(this);
  this.xhrPool_.dispose();
  this.xhrPool_ = null;
  this.eventHandler_.dispose();
  this.eventHandler_ = null;
  this.requests_.clear();
  this.requests_ = null;
};
goog.net.XhrManager.Event = function(type, target, id, xhrIo) {
  goog.events.Event.call(this, type, target);
  this.id = id;
  this.xhrIo = xhrIo;
};
goog.inherits(goog.net.XhrManager.Event, goog.events.Event);
goog.net.XhrManager.Request = function(url, xhrEventCallback, opt_method, opt_content, opt_headers, opt_callback, opt_maxRetries, opt_responseType) {
  this.url_ = url;
  this.method_ = opt_method || "GET";
  this.content_ = opt_content;
  this.headers_ = opt_headers || null;
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.attemptCount_ = 0;
  this.completed_ = false;
  this.aborted_ = false;
  this.xhrEventCallback_ = xhrEventCallback;
  this.completeCallback_ = opt_callback;
  this.responseType_ = opt_responseType || goog.net.XhrIo.ResponseType.DEFAULT;
  this.xhrIo = null;
};
goog.net.XhrManager.Request.prototype.getUrl = function() {
  return this.url_;
};
goog.net.XhrManager.Request.prototype.getMethod = function() {
  return this.method_;
};
goog.net.XhrManager.Request.prototype.getContent = function() {
  return this.content_;
};
goog.net.XhrManager.Request.prototype.getHeaders = function() {
  return this.headers_;
};
goog.net.XhrManager.Request.prototype.getMaxRetries = function() {
  return this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.getAttemptCount = function() {
  return this.attemptCount_;
};
goog.net.XhrManager.Request.prototype.increaseAttemptCount = function() {
  this.attemptCount_++;
};
goog.net.XhrManager.Request.prototype.hasReachedMaxRetries = function() {
  return this.attemptCount_ > this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.setCompleted = function(complete) {
  this.completed_ = complete;
};
goog.net.XhrManager.Request.prototype.getCompleted = function() {
  return this.completed_;
};
goog.net.XhrManager.Request.prototype.setAborted = function(aborted) {
  this.aborted_ = aborted;
};
goog.net.XhrManager.Request.prototype.getAborted = function() {
  return this.aborted_;
};
goog.net.XhrManager.Request.prototype.getXhrEventCallback = function() {
  return this.xhrEventCallback_;
};
goog.net.XhrManager.Request.prototype.getCompleteCallback = function() {
  return this.completeCallback_;
};
goog.net.XhrManager.Request.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-3126";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_target_STAR_ = "default";
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__6120__delegate = function(args) {
      return console.log.apply(console, function() {
        var G__6119 = args;
        return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(G__6119) : cljs.core.into_array.call(null, G__6119);
      }());
    };
    var G__6120 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__6121__i = 0, G__6121__a = new Array(arguments.length - 0);
        while (G__6121__i < G__6121__a.length) {
          G__6121__a[G__6121__i] = arguments[G__6121__i + 0];
          ++G__6121__i;
        }
        args = new cljs.core.IndexedSeq(G__6121__a, 0);
      }
      return G__6120__delegate.call(this, args);
    };
    G__6120.cljs$lang$maxFixedArity = 0;
    G__6120.cljs$lang$applyTo = function(arglist__6122) {
      var args = cljs.core.seq(arglist__6122);
      return G__6120__delegate(args);
    };
    G__6120.cljs$core$IFn$_invoke$arity$variadic = G__6120__delegate;
    return G__6120;
  }();
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  var G__6124 = x;
  return goog.isString(G__6124);
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[function() {
    var G__6126 = x__$1;
    return goog.typeOf(G__6126);
  }()]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__4110__auto__ = ty;
    if (cljs.core.truth_(and__4110__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__4110__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : function() {
    var G__6128 = obj;
    return goog.typeOf(G__6128);
  }();
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && function() {
  var G__6130 = Symbol;
  return goog.typeOf(G__6130);
}() === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.make_array = function() {
  var cljs$core$make_array = null;
  var cljs$core$make_array__1 = function(size) {
    return new Array(size);
  };
  var cljs$core$make_array__2 = function(type, size) {
    return cljs$core$make_array.cljs$core$IFn$_invoke$arity$1(size);
  };
  cljs$core$make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return cljs$core$make_array__1.call(this, type);
      case 2:
        return cljs$core$make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$make_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$make_array__1;
  cljs$core$make_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$make_array__2;
  return cljs$core$make_array;
}();
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__5007__auto___6132 = len;
  var i_6133 = 0;
  while (true) {
    if (i_6133 < n__5007__auto___6132) {
      new_arr[i_6133] = arr[i_6133];
      var G__6134 = i_6133 + 1;
      i_6133 = G__6134;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__6135 = i + 1;
      i = G__6135;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function() {
  var cljs$core$aget = null;
  var cljs$core$aget__2 = function(array, i) {
    return array[i];
  };
  var cljs$core$aget__3 = function() {
    var G__6144__delegate = function(array, i, idxs) {
      var G__6141 = cljs$core$aget;
      var G__6142 = cljs$core$aget.cljs$core$IFn$_invoke$arity$2(array, i);
      var G__6143 = idxs;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__6141, G__6142, G__6143) : cljs.core.apply.call(null, G__6141, G__6142, G__6143);
    };
    var G__6144 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        var G__6145__i = 0, G__6145__a = new Array(arguments.length - 2);
        while (G__6145__i < G__6145__a.length) {
          G__6145__a[G__6145__i] = arguments[G__6145__i + 2];
          ++G__6145__i;
        }
        idxs = new cljs.core.IndexedSeq(G__6145__a, 0);
      }
      return G__6144__delegate.call(this, array, i, idxs);
    };
    G__6144.cljs$lang$maxFixedArity = 2;
    G__6144.cljs$lang$applyTo = function(arglist__6146) {
      var array = cljs.core.first(arglist__6146);
      arglist__6146 = cljs.core.next(arglist__6146);
      var i = cljs.core.first(arglist__6146);
      var idxs = cljs.core.rest(arglist__6146);
      return G__6144__delegate(array, i, idxs);
    };
    G__6144.cljs$core$IFn$_invoke$arity$variadic = G__6144__delegate;
    return G__6144;
  }();
  cljs$core$aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$aget__2.call(this, array, i);
      default:
        var G__6147 = null;
        if (arguments.length > 2) {
          var G__6148__i = 0, G__6148__a = new Array(arguments.length - 2);
          while (G__6148__i < G__6148__a.length) {
            G__6148__a[G__6148__i] = arguments[G__6148__i + 2];
            ++G__6148__i;
          }
          G__6147 = new cljs.core.IndexedSeq(G__6148__a, 0);
        }
        return cljs$core$aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, G__6147);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$aget.cljs$lang$maxFixedArity = 2;
  cljs$core$aget.cljs$lang$applyTo = cljs$core$aget__3.cljs$lang$applyTo;
  cljs$core$aget.cljs$core$IFn$_invoke$arity$2 = cljs$core$aget__2;
  cljs$core$aget.cljs$core$IFn$_invoke$arity$variadic = cljs$core$aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$aget;
}();
cljs.core.aset = function() {
  var cljs$core$aset = null;
  var cljs$core$aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var cljs$core$aset__4 = function() {
    var G__6157__delegate = function(array, idx, idx2, idxv) {
      var G__6153 = cljs$core$aset;
      var G__6154 = array[idx];
      var G__6155 = idx2;
      var G__6156 = idxv;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__6153, G__6154, G__6155, G__6156) : cljs.core.apply.call(null, G__6153, G__6154, G__6155, G__6156);
    };
    var G__6157 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        var G__6158__i = 0, G__6158__a = new Array(arguments.length - 3);
        while (G__6158__i < G__6158__a.length) {
          G__6158__a[G__6158__i] = arguments[G__6158__i + 3];
          ++G__6158__i;
        }
        idxv = new cljs.core.IndexedSeq(G__6158__a, 0);
      }
      return G__6157__delegate.call(this, array, idx, idx2, idxv);
    };
    G__6157.cljs$lang$maxFixedArity = 3;
    G__6157.cljs$lang$applyTo = function(arglist__6159) {
      var array = cljs.core.first(arglist__6159);
      arglist__6159 = cljs.core.next(arglist__6159);
      var idx = cljs.core.first(arglist__6159);
      arglist__6159 = cljs.core.next(arglist__6159);
      var idx2 = cljs.core.first(arglist__6159);
      var idxv = cljs.core.rest(arglist__6159);
      return G__6157__delegate(array, idx, idx2, idxv);
    };
    G__6157.cljs$core$IFn$_invoke$arity$variadic = G__6157__delegate;
    return G__6157;
  }();
  cljs$core$aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$aset__3.call(this, array, idx, idx2);
      default:
        var G__6160 = null;
        if (arguments.length > 3) {
          var G__6161__i = 0, G__6161__a = new Array(arguments.length - 3);
          while (G__6161__i < G__6161__a.length) {
            G__6161__a[G__6161__i] = arguments[G__6161__i + 3];
            ++G__6161__i;
          }
          G__6160 = new cljs.core.IndexedSeq(G__6161__a, 0);
        }
        return cljs$core$aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, G__6160);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$aset.cljs$lang$maxFixedArity = 3;
  cljs$core$aset.cljs$lang$applyTo = cljs$core$aset__4.cljs$lang$applyTo;
  cljs$core$aset.cljs$core$IFn$_invoke$arity$3 = cljs$core$aset__3;
  cljs$core$aset.cljs$core$IFn$_invoke$arity$variadic = cljs$core$aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$aset;
}();
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var cljs$core$into_array = null;
  var cljs$core$into_array__1 = function(aseq) {
    return cljs$core$into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
  };
  var cljs$core$into_array__2 = function(type, aseq) {
    var G__6167 = function(a, x) {
      a.push(x);
      return a;
    };
    var G__6168 = [];
    var G__6169 = aseq;
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__6167, G__6168, G__6169) : cljs.core.reduce.call(null, G__6167, G__6168, G__6169);
  };
  cljs$core$into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$into_array__1.call(this, type);
      case 2:
        return cljs$core$into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$into_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$into_array__1;
  cljs$core$into_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$into_array__2;
  return cljs$core$into_array;
}();
cljs.core.js_invoke = function() {
  var cljs$core$js_invoke__delegate = function(obj, s, args) {
    return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
  };
  var cljs$core$js_invoke = function(obj, s, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__6170__i = 0, G__6170__a = new Array(arguments.length - 2);
      while (G__6170__i < G__6170__a.length) {
        G__6170__a[G__6170__i] = arguments[G__6170__i + 2];
        ++G__6170__i;
      }
      args = new cljs.core.IndexedSeq(G__6170__a, 0);
    }
    return cljs$core$js_invoke__delegate.call(this, obj, s, args);
  };
  cljs$core$js_invoke.cljs$lang$maxFixedArity = 2;
  cljs$core$js_invoke.cljs$lang$applyTo = function(arglist__6171) {
    var obj = cljs.core.first(arglist__6171);
    arglist__6171 = cljs.core.next(arglist__6171);
    var s = cljs.core.first(arglist__6171);
    var args = cljs.core.rest(arglist__6171);
    return cljs$core$js_invoke__delegate(obj, s, args);
  };
  cljs$core$js_invoke.cljs$core$IFn$_invoke$arity$variadic = cljs$core$js_invoke__delegate;
  return cljs$core$js_invoke;
}();
cljs.core.Fn = function() {
  var obj6173 = {};
  return obj6173;
}();
cljs.core.IFn = function() {
  var obj6175 = {};
  return obj6175;
}();
cljs.core._invoke = function() {
  var cljs$core$_invoke = null;
  var cljs$core$_invoke__1 = function(this$) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6221 = x__4758__auto__;
          return goog.typeOf(G__6221);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var cljs$core$_invoke__2 = function(this$, a) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6223 = x__4758__auto__;
          return goog.typeOf(G__6223);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var cljs$core$_invoke__3 = function(this$, a, b) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6225 = x__4758__auto__;
          return goog.typeOf(G__6225);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var cljs$core$_invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6227 = x__4758__auto__;
          return goog.typeOf(G__6227);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var cljs$core$_invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6229 = x__4758__auto__;
          return goog.typeOf(G__6229);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var cljs$core$_invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6231 = x__4758__auto__;
          return goog.typeOf(G__6231);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var cljs$core$_invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6233 = x__4758__auto__;
          return goog.typeOf(G__6233);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var cljs$core$_invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6235 = x__4758__auto__;
          return goog.typeOf(G__6235);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var cljs$core$_invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6237 = x__4758__auto__;
          return goog.typeOf(G__6237);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var cljs$core$_invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6239 = x__4758__auto__;
          return goog.typeOf(G__6239);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var cljs$core$_invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6241 = x__4758__auto__;
          return goog.typeOf(G__6241);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var cljs$core$_invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6243 = x__4758__auto__;
          return goog.typeOf(G__6243);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var cljs$core$_invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6245 = x__4758__auto__;
          return goog.typeOf(G__6245);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var cljs$core$_invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6247 = x__4758__auto__;
          return goog.typeOf(G__6247);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var cljs$core$_invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6249 = x__4758__auto__;
          return goog.typeOf(G__6249);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var cljs$core$_invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6251 = x__4758__auto__;
          return goog.typeOf(G__6251);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var cljs$core$_invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6253 = x__4758__auto__;
          return goog.typeOf(G__6253);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var cljs$core$_invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6255 = x__4758__auto__;
          return goog.typeOf(G__6255);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var cljs$core$_invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6257 = x__4758__auto__;
          return goog.typeOf(G__6257);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var cljs$core$_invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6259 = x__4758__auto__;
          return goog.typeOf(G__6259);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var cljs$core$_invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6261 = x__4758__auto__;
          return goog.typeOf(G__6261);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var cljs$core$_invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__6263 = x__4758__auto__;
          return goog.typeOf(G__6263);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  cljs$core$_invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return cljs$core$_invoke__1.call(this, this$);
      case 2:
        return cljs$core$_invoke__2.call(this, this$, a);
      case 3:
        return cljs$core$_invoke__3.call(this, this$, a, b);
      case 4:
        return cljs$core$_invoke__4.call(this, this$, a, b, c);
      case 5:
        return cljs$core$_invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return cljs$core$_invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return cljs$core$_invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return cljs$core$_invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return cljs$core$_invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return cljs$core$_invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return cljs$core$_invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return cljs$core$_invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return cljs$core$_invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return cljs$core$_invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return cljs$core$_invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return cljs$core$_invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return cljs$core$_invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return cljs$core$_invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return cljs$core$_invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return cljs$core$_invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return cljs$core$_invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return cljs$core$_invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$1 = cljs$core$_invoke__1;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$2 = cljs$core$_invoke__2;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$3 = cljs$core$_invoke__3;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$4 = cljs$core$_invoke__4;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$5 = cljs$core$_invoke__5;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$6 = cljs$core$_invoke__6;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$7 = cljs$core$_invoke__7;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$8 = cljs$core$_invoke__8;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$9 = cljs$core$_invoke__9;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$10 = cljs$core$_invoke__10;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$11 = cljs$core$_invoke__11;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$12 = cljs$core$_invoke__12;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$13 = cljs$core$_invoke__13;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$14 = cljs$core$_invoke__14;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$15 = cljs$core$_invoke__15;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$16 = cljs$core$_invoke__16;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$17 = cljs$core$_invoke__17;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$18 = cljs$core$_invoke__18;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$19 = cljs$core$_invoke__19;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$20 = cljs$core$_invoke__20;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$21 = cljs$core$_invoke__21;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$22 = cljs$core$_invoke__22;
  return cljs$core$_invoke;
}();
cljs.core.ICloneable = function() {
  var obj6265 = {};
  return obj6265;
}();
cljs.core._clone = function cljs$core$_clone(value) {
  if (function() {
    var and__4110__auto__ = value;
    if (and__4110__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4758__auto__ = value == null ? null : value;
    return function() {
      var or__4122__auto__ = cljs.core._clone[function() {
        var G__6269 = x__4758__auto__;
        return goog.typeOf(G__6269);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._clone["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj6271 = {};
  return obj6271;
}();
cljs.core._count = function cljs$core$_count(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._count[function() {
        var G__6275 = x__4758__auto__;
        return goog.typeOf(G__6275);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._count["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj6277 = {};
  return obj6277;
}();
cljs.core._empty = function cljs$core$_empty(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._empty[function() {
        var G__6281 = x__4758__auto__;
        return goog.typeOf(G__6281);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._empty["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj6283 = {};
  return obj6283;
}();
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._conj[function() {
        var G__6287 = x__4758__auto__;
        return goog.typeOf(G__6287);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._conj["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj6289 = {};
  return obj6289;
}();
cljs.core._nth = function() {
  var cljs$core$_nth = null;
  var cljs$core$_nth__2 = function(coll, n) {
    if (function() {
      var and__4110__auto__ = coll;
      if (and__4110__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4758__auto__ = coll == null ? null : coll;
      return function() {
        var or__4122__auto__ = cljs.core._nth[function() {
          var G__6295 = x__4758__auto__;
          return goog.typeOf(G__6295);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._nth["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var cljs$core$_nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__4110__auto__ = coll;
      if (and__4110__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4758__auto__ = coll == null ? null : coll;
      return function() {
        var or__4122__auto__ = cljs.core._nth[function() {
          var G__6297 = x__4758__auto__;
          return goog.typeOf(G__6297);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._nth["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  cljs$core$_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$_nth__2.call(this, coll, n);
      case 3:
        return cljs$core$_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_nth.cljs$core$IFn$_invoke$arity$2 = cljs$core$_nth__2;
  cljs$core$_nth.cljs$core$IFn$_invoke$arity$3 = cljs$core$_nth__3;
  return cljs$core$_nth;
}();
cljs.core.ASeq = function() {
  var obj6299 = {};
  return obj6299;
}();
cljs.core.ISeq = function() {
  var obj6301 = {};
  return obj6301;
}();
cljs.core._first = function cljs$core$_first(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._first[function() {
        var G__6305 = x__4758__auto__;
        return goog.typeOf(G__6305);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._first["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._rest[function() {
        var G__6309 = x__4758__auto__;
        return goog.typeOf(G__6309);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._rest["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj6311 = {};
  return obj6311;
}();
cljs.core._next = function cljs$core$_next(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._next[function() {
        var G__6315 = x__4758__auto__;
        return goog.typeOf(G__6315);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._next["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj6317 = {};
  return obj6317;
}();
cljs.core._lookup = function() {
  var cljs$core$_lookup = null;
  var cljs$core$_lookup__2 = function(o, k) {
    if (function() {
      var and__4110__auto__ = o;
      if (and__4110__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4758__auto__ = o == null ? null : o;
      return function() {
        var or__4122__auto__ = cljs.core._lookup[function() {
          var G__6323 = x__4758__auto__;
          return goog.typeOf(G__6323);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._lookup["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var cljs$core$_lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__4110__auto__ = o;
      if (and__4110__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4758__auto__ = o == null ? null : o;
      return function() {
        var or__4122__auto__ = cljs.core._lookup[function() {
          var G__6325 = x__4758__auto__;
          return goog.typeOf(G__6325);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._lookup["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  cljs$core$_lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$_lookup__2.call(this, o, k);
      case 3:
        return cljs$core$_lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_lookup.cljs$core$IFn$_invoke$arity$2 = cljs$core$_lookup__2;
  cljs$core$_lookup.cljs$core$IFn$_invoke$arity$3 = cljs$core$_lookup__3;
  return cljs$core$_lookup;
}();
cljs.core.IAssociative = function() {
  var obj6327 = {};
  return obj6327;
}();
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._contains_key_QMARK_[function() {
        var G__6331 = x__4758__auto__;
        return goog.typeOf(G__6331);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._assoc[function() {
        var G__6335 = x__4758__auto__;
        return goog.typeOf(G__6335);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._assoc["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj6337 = {};
  return obj6337;
}();
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._dissoc[function() {
        var G__6341 = x__4758__auto__;
        return goog.typeOf(G__6341);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._dissoc["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj6343 = {};
  return obj6343;
}();
cljs.core._key = function cljs$core$_key(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._key[function() {
        var G__6347 = x__4758__auto__;
        return goog.typeOf(G__6347);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._key["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._val[function() {
        var G__6351 = x__4758__auto__;
        return goog.typeOf(G__6351);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._val["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj6353 = {};
  return obj6353;
}();
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._disjoin[function() {
        var G__6357 = x__4758__auto__;
        return goog.typeOf(G__6357);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._disjoin["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj6359 = {};
  return obj6359;
}();
cljs.core._peek = function cljs$core$_peek(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._peek[function() {
        var G__6363 = x__4758__auto__;
        return goog.typeOf(G__6363);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._peek["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._pop[function() {
        var G__6367 = x__4758__auto__;
        return goog.typeOf(G__6367);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._pop["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj6369 = {};
  return obj6369;
}();
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._assoc_n[function() {
        var G__6373 = x__4758__auto__;
        return goog.typeOf(G__6373);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._assoc_n["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj6375 = {};
  return obj6375;
}();
cljs.core._deref = function cljs$core$_deref(o) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._deref[function() {
        var G__6379 = x__4758__auto__;
        return goog.typeOf(G__6379);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._deref["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj6381 = {};
  return obj6381;
}();
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._deref_with_timeout[function() {
        var G__6385 = x__4758__auto__;
        return goog.typeOf(G__6385);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj6387 = {};
  return obj6387;
}();
cljs.core._meta = function cljs$core$_meta(o) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._meta[function() {
        var G__6391 = x__4758__auto__;
        return goog.typeOf(G__6391);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._meta["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj6393 = {};
  return obj6393;
}();
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._with_meta[function() {
        var G__6397 = x__4758__auto__;
        return goog.typeOf(G__6397);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._with_meta["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj6399 = {};
  return obj6399;
}();
cljs.core._reduce = function() {
  var cljs$core$_reduce = null;
  var cljs$core$_reduce__2 = function(coll, f) {
    if (function() {
      var and__4110__auto__ = coll;
      if (and__4110__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4758__auto__ = coll == null ? null : coll;
      return function() {
        var or__4122__auto__ = cljs.core._reduce[function() {
          var G__6405 = x__4758__auto__;
          return goog.typeOf(G__6405);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._reduce["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var cljs$core$_reduce__3 = function(coll, f, start) {
    if (function() {
      var and__4110__auto__ = coll;
      if (and__4110__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4758__auto__ = coll == null ? null : coll;
      return function() {
        var or__4122__auto__ = cljs.core._reduce[function() {
          var G__6407 = x__4758__auto__;
          return goog.typeOf(G__6407);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._reduce["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  cljs$core$_reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return cljs$core$_reduce__2.call(this, coll, f);
      case 3:
        return cljs$core$_reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$_reduce__2;
  cljs$core$_reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$_reduce__3;
  return cljs$core$_reduce;
}();
cljs.core.IKVReduce = function() {
  var obj6409 = {};
  return obj6409;
}();
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._kv_reduce[function() {
        var G__6413 = x__4758__auto__;
        return goog.typeOf(G__6413);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj6415 = {};
  return obj6415;
}();
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._equiv[function() {
        var G__6419 = x__4758__auto__;
        return goog.typeOf(G__6419);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._equiv["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj6421 = {};
  return obj6421;
}();
cljs.core._hash = function cljs$core$_hash(o) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._hash[function() {
        var G__6425 = x__4758__auto__;
        return goog.typeOf(G__6425);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._hash["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj6427 = {};
  return obj6427;
}();
cljs.core._seq = function cljs$core$_seq(o) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._seq[function() {
        var G__6431 = x__4758__auto__;
        return goog.typeOf(G__6431);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._seq["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj6433 = {};
  return obj6433;
}();
cljs.core.IList = function() {
  var obj6435 = {};
  return obj6435;
}();
cljs.core.IRecord = function() {
  var obj6437 = {};
  return obj6437;
}();
cljs.core.IReversible = function() {
  var obj6439 = {};
  return obj6439;
}();
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._rseq[function() {
        var G__6443 = x__4758__auto__;
        return goog.typeOf(G__6443);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._rseq["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj6445 = {};
  return obj6445;
}();
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._sorted_seq[function() {
        var G__6449 = x__4758__auto__;
        return goog.typeOf(G__6449);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._sorted_seq_from[function() {
        var G__6453 = x__4758__auto__;
        return goog.typeOf(G__6453);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._entry_key[function() {
        var G__6457 = x__4758__auto__;
        return goog.typeOf(G__6457);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._entry_key["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._comparator[function() {
        var G__6461 = x__4758__auto__;
        return goog.typeOf(G__6461);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._comparator["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj6463 = {};
  return obj6463;
}();
cljs.core._write = function cljs$core$_write(writer, s) {
  if (function() {
    var and__4110__auto__ = writer;
    if (and__4110__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4758__auto__ = writer == null ? null : writer;
    return function() {
      var or__4122__auto__ = cljs.core._write[function() {
        var G__6467 = x__4758__auto__;
        return goog.typeOf(G__6467);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._write["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (function() {
    var and__4110__auto__ = writer;
    if (and__4110__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4758__auto__ = writer == null ? null : writer;
    return function() {
      var or__4122__auto__ = cljs.core._flush[function() {
        var G__6471 = x__4758__auto__;
        return goog.typeOf(G__6471);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._flush["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj6473 = {};
  return obj6473;
}();
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._pr_writer[function() {
        var G__6477 = x__4758__auto__;
        return goog.typeOf(G__6477);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._pr_writer["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj6479 = {};
  return obj6479;
}();
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(d) {
  if (function() {
    var and__4110__auto__ = d;
    if (and__4110__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4758__auto__ = d == null ? null : d;
    return function() {
      var or__4122__auto__ = cljs.core._realized_QMARK_[function() {
        var G__6483 = x__4758__auto__;
        return goog.typeOf(G__6483);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj6485 = {};
  return obj6485;
}();
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = cljs.core._notify_watches[function() {
        var G__6489 = x__4758__auto__;
        return goog.typeOf(G__6489);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._notify_watches["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = cljs.core._add_watch[function() {
        var G__6493 = x__4758__auto__;
        return goog.typeOf(G__6493);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._add_watch["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = cljs.core._remove_watch[function() {
        var G__6497 = x__4758__auto__;
        return goog.typeOf(G__6497);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._remove_watch["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj6499 = {};
  return obj6499;
}();
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._as_transient[function() {
        var G__6503 = x__4758__auto__;
        return goog.typeOf(G__6503);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._as_transient["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj6505 = {};
  return obj6505;
}();
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._conj_BANG_[function() {
        var G__6509 = x__4758__auto__;
        return goog.typeOf(G__6509);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._persistent_BANG_[function() {
        var G__6513 = x__4758__auto__;
        return goog.typeOf(G__6513);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj6515 = {};
  return obj6515;
}();
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._assoc_BANG_[function() {
        var G__6519 = x__4758__auto__;
        return goog.typeOf(G__6519);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj6521 = {};
  return obj6521;
}();
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._dissoc_BANG_[function() {
        var G__6525 = x__4758__auto__;
        return goog.typeOf(G__6525);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj6527 = {};
  return obj6527;
}();
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._assoc_n_BANG_[function() {
        var G__6531 = x__4758__auto__;
        return goog.typeOf(G__6531);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._pop_BANG_[function() {
        var G__6535 = x__4758__auto__;
        return goog.typeOf(G__6535);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj6537 = {};
  return obj6537;
}();
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._disjoin_BANG_[function() {
        var G__6541 = x__4758__auto__;
        return goog.typeOf(G__6541);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj6543 = {};
  return obj6543;
}();
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = cljs.core._compare[function() {
        var G__6547 = x__4758__auto__;
        return goog.typeOf(G__6547);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._compare["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj6549 = {};
  return obj6549;
}();
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._drop_first[function() {
        var G__6553 = x__4758__auto__;
        return goog.typeOf(G__6553);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._drop_first["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj6555 = {};
  return obj6555;
}();
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._chunked_first[function() {
        var G__6559 = x__4758__auto__;
        return goog.typeOf(G__6559);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._chunked_first["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._chunked_rest[function() {
        var G__6563 = x__4758__auto__;
        return goog.typeOf(G__6563);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj6565 = {};
  return obj6565;
}();
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._chunked_next[function() {
        var G__6569 = x__4758__auto__;
        return goog.typeOf(G__6569);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._chunked_next["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj6571 = {};
  return obj6571;
}();
cljs.core._name = function cljs$core$_name(x) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = cljs.core._name[function() {
        var G__6575 = x__4758__auto__;
        return goog.typeOf(G__6575);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._name["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = cljs.core._namespace[function() {
        var G__6579 = x__4758__auto__;
        return goog.typeOf(G__6579);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._namespace["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj6581 = {};
  return obj6581;
}();
cljs.core.IReset = function() {
  var obj6583 = {};
  return obj6583;
}();
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._reset_BANG_[function() {
        var G__6587 = x__4758__auto__;
        return goog.typeOf(G__6587);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj6589 = {};
  return obj6589;
}();
cljs.core._swap_BANG_ = function() {
  var cljs$core$_swap_BANG_ = null;
  var cljs$core$_swap_BANG___2 = function(o, f) {
    if (function() {
      var and__4110__auto__ = o;
      if (and__4110__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4758__auto__ = o == null ? null : o;
      return function() {
        var or__4122__auto__ = cljs.core._swap_BANG_[function() {
          var G__6599 = x__4758__auto__;
          return goog.typeOf(G__6599);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var cljs$core$_swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__4110__auto__ = o;
      if (and__4110__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4758__auto__ = o == null ? null : o;
      return function() {
        var or__4122__auto__ = cljs.core._swap_BANG_[function() {
          var G__6601 = x__4758__auto__;
          return goog.typeOf(G__6601);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var cljs$core$_swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__4110__auto__ = o;
      if (and__4110__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4758__auto__ = o == null ? null : o;
      return function() {
        var or__4122__auto__ = cljs.core._swap_BANG_[function() {
          var G__6603 = x__4758__auto__;
          return goog.typeOf(G__6603);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var cljs$core$_swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__4110__auto__ = o;
      if (and__4110__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4758__auto__ = o == null ? null : o;
      return function() {
        var or__4122__auto__ = cljs.core._swap_BANG_[function() {
          var G__6605 = x__4758__auto__;
          return goog.typeOf(G__6605);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  cljs$core$_swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return cljs$core$_swap_BANG___2.call(this, o, f);
      case 3:
        return cljs$core$_swap_BANG___3.call(this, o, f, a);
      case 4:
        return cljs$core$_swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return cljs$core$_swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_swap_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_swap_BANG___2;
  cljs$core$_swap_BANG_.cljs$core$IFn$_invoke$arity$3 = cljs$core$_swap_BANG___3;
  cljs$core$_swap_BANG_.cljs$core$IFn$_invoke$arity$4 = cljs$core$_swap_BANG___4;
  cljs$core$_swap_BANG_.cljs$core$IFn$_invoke$arity$5 = cljs$core$_swap_BANG___5;
  return cljs$core$_swap_BANG_;
}();
cljs.core.IVolatile = function() {
  var obj6607 = {};
  return obj6607;
}();
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IVolatile$_vreset_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._vreset_BANG_[function() {
        var G__6611 = x__4758__auto__;
        return goog.typeOf(G__6611);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._vreset_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.IIterable = function() {
  var obj6613 = {};
  return obj6613;
}();
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._iterator[function() {
        var G__6617 = x__4758__auto__;
        return goog.typeOf(G__6617);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._iterator["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return[cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(function() {
  var G__6620 = 4294967295;
  var G__6621 = 5;
  return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__6620, G__6621) : Math.imul.call(null, G__6620, G__6621);
}() === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var G__6624 = a;
    var G__6625 = b;
    return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__6624, G__6625) : Math.imul.call(null, G__6624, G__6625);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__6626 = i + 2;
        var G__6627 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__6626;
        h1 = G__6627;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj6629 = {};
  return obj6629;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__6630 = i + 1;
          var G__6631 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__6630;
          hash = G__6631;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj6635 = {};
      return obj6635;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (function() {
    var G__6638 = o;
    if (G__6638) {
      var bit__4789__auto__ = G__6638.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4789__auto__ || G__6638.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return function() {
        var G__6639 = o;
        return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__6639) : Math.floor.call(null, G__6639);
      }() % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = cljs.core.not(a.ns);
      if (and__4110__auto__) {
        return b.ns;
      } else {
        return and__4110__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__6646 = a.ns;
            var G__6647 = b.ns;
            return goog.array.defaultCompare(G__6646, G__6647);
          }();
          if (0 === nsc) {
            var G__6648 = a.name;
            var G__6649 = b.name;
            return goog.array.defaultCompare(G__6648, G__6649);
          } else {
            return nsc;
          }
        }
      } else {
        var G__6650 = a.name;
        var G__6651 = b.name;
        return goog.array.defaultCompare(G__6650, G__6651);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4538__auto__ = self__._hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__6653 = null;
  var G__6653__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
  };
  var G__6653__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
  };
  G__6653 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6653__2.call(this, self__, coll);
      case 3:
        return G__6653__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6653.cljs$core$IFn$_invoke$arity$2 = G__6653__2;
  G__6653.cljs$core$IFn$_invoke$arity$3 = G__6653__3;
  return G__6653;
}();
cljs.core.Symbol.prototype.apply = function(self__, args6652) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6652)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var cljs$core$symbol = null;
  var cljs$core$symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return cljs$core$symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    }
  };
  var cljs$core$symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  cljs$core$symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return cljs$core$symbol__1.call(this, ns);
      case 2:
        return cljs$core$symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$symbol.cljs$core$IFn$_invoke$arity$1 = cljs$core$symbol__1;
  cljs$core$symbol.cljs$core$IFn$_invoke$arity$2 = cljs$core$symbol__2;
  return cljs$core$symbol;
}();
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 163841;
};
cljs.core.Var.prototype.call = function() {
  var G__6701 = null;
  var G__6701__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null);
  };
  var G__6701__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a);
  };
  var G__6701__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b);
  };
  var G__6701__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c);
  };
  var G__6701__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d);
  };
  var G__6701__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e);
  };
  var G__6701__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f);
  };
  var G__6701__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g);
  };
  var G__6701__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h);
  };
  var G__6701__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__6701__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__6701__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__6701__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__6701__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__6701__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__6701__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__6701__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__6701__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__6701__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__6701__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__6701__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__6701__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6657 = function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }();
    var G__6658 = a;
    var G__6659 = b;
    var G__6660 = c;
    var G__6661 = d;
    var G__6662 = e;
    var G__6663 = f;
    var G__6664 = g;
    var G__6665 = h;
    var G__6666 = i;
    var G__6667 = j;
    var G__6668 = k;
    var G__6669 = l;
    var G__6670 = m;
    var G__6671 = n;
    var G__6672 = o;
    var G__6673 = p;
    var G__6674 = q;
    var G__6675 = r;
    var G__6676 = s;
    var G__6677 = t;
    var G__6678 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__6657, G__6658, G__6659, G__6660, G__6661, G__6662, G__6663, G__6664, G__6665, G__6666, G__6667, G__6668, G__6669, G__6670, G__6671, G__6672, G__6673, G__6674, G__6675, G__6676, G__6677, G__6678) : cljs.core.apply.call(null, G__6657, G__6658, G__6659, G__6660, G__6661, G__6662, G__6663, G__6664, G__6665, G__6666, G__6667, G__6668, G__6669, G__6670, G__6671, G__6672, G__6673, G__6674, G__6675, 
    G__6676, G__6677, G__6678);
  };
  G__6701 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__6701__1.call(this, self__);
      case 2:
        return G__6701__2.call(this, self__, a);
      case 3:
        return G__6701__3.call(this, self__, a, b);
      case 4:
        return G__6701__4.call(this, self__, a, b, c);
      case 5:
        return G__6701__5.call(this, self__, a, b, c, d);
      case 6:
        return G__6701__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__6701__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__6701__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__6701__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__6701__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__6701__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__6701__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__6701__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__6701__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__6701__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__6701__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__6701__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__6701__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__6701__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__6701__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__6701__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__6701__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6701.cljs$core$IFn$_invoke$arity$1 = G__6701__1;
  G__6701.cljs$core$IFn$_invoke$arity$2 = G__6701__2;
  G__6701.cljs$core$IFn$_invoke$arity$3 = G__6701__3;
  G__6701.cljs$core$IFn$_invoke$arity$4 = G__6701__4;
  G__6701.cljs$core$IFn$_invoke$arity$5 = G__6701__5;
  G__6701.cljs$core$IFn$_invoke$arity$6 = G__6701__6;
  G__6701.cljs$core$IFn$_invoke$arity$7 = G__6701__7;
  G__6701.cljs$core$IFn$_invoke$arity$8 = G__6701__8;
  G__6701.cljs$core$IFn$_invoke$arity$9 = G__6701__9;
  G__6701.cljs$core$IFn$_invoke$arity$10 = G__6701__10;
  G__6701.cljs$core$IFn$_invoke$arity$11 = G__6701__11;
  G__6701.cljs$core$IFn$_invoke$arity$12 = G__6701__12;
  G__6701.cljs$core$IFn$_invoke$arity$13 = G__6701__13;
  G__6701.cljs$core$IFn$_invoke$arity$14 = G__6701__14;
  G__6701.cljs$core$IFn$_invoke$arity$15 = G__6701__15;
  G__6701.cljs$core$IFn$_invoke$arity$16 = G__6701__16;
  G__6701.cljs$core$IFn$_invoke$arity$17 = G__6701__17;
  G__6701.cljs$core$IFn$_invoke$arity$18 = G__6701__18;
  G__6701.cljs$core$IFn$_invoke$arity$19 = G__6701__19;
  G__6701.cljs$core$IFn$_invoke$arity$20 = G__6701__20;
  G__6701.cljs$core$IFn$_invoke$arity$21 = G__6701__21;
  G__6701.cljs$core$IFn$_invoke$arity$22 = G__6701__22;
  return G__6701;
}();
cljs.core.Var.prototype.apply = function(self__, args6656) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6656)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__6679 = function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }();
  var G__6680 = a;
  var G__6681 = b;
  var G__6682 = c;
  var G__6683 = d;
  var G__6684 = e;
  var G__6685 = f;
  var G__6686 = g;
  var G__6687 = h;
  var G__6688 = i;
  var G__6689 = j;
  var G__6690 = k;
  var G__6691 = l;
  var G__6692 = m;
  var G__6693 = n;
  var G__6694 = o;
  var G__6695 = p;
  var G__6696 = q;
  var G__6697 = r;
  var G__6698 = s;
  var G__6699 = t;
  var G__6700 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__6679, G__6680, G__6681, G__6682, G__6683, G__6684, G__6685, G__6686, G__6687, G__6688, G__6689, G__6690, G__6691, G__6692, G__6693, G__6694, G__6695, G__6696, G__6697, G__6698, G__6699, G__6700) : cljs.core.apply.call(null, G__6679, G__6680, G__6681, G__6682, G__6683, G__6684, G__6685, G__6686, G__6687, G__6688, G__6689, G__6690, G__6691, G__6692, G__6693, G__6694, G__6695, G__6696, G__6697, 
  G__6698, G__6699, G__6700);
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  var G__6703 = x;
  if (G__6703) {
    var bit__4796__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4122__auto__ = bit__4796__auto__;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return G__6703.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__6703.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__6703);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__6703);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  var G__6705 = value;
  if (G__6705) {
    var bit__4796__auto__ = G__6705.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4796__auto__ || G__6705.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__6705.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__6705);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__6705);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6707 = coll;
      if (G__6707) {
        var bit__4789__auto__ = G__6707.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4789__auto__ || G__6707.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6709 = coll;
      if (G__6709) {
        var bit__4789__auto__ = G__6709.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4789__auto__ || G__6709.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__6711 = coll;
      if (G__6711) {
        var bit__4789__auto__ = G__6711.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4789__auto__ || G__6711.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6713 = coll;
      if (G__6713) {
        var bit__4789__auto__ = G__6713.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4789__auto__ || G__6713.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var cljs$core$_EQ_ = null;
  var cljs$core$_EQ___1 = function(x) {
    return true;
  };
  var cljs$core$_EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv(x, y);
    }
  };
  var cljs$core$_EQ___3 = function() {
    var G__6718__delegate = function(x, y, more) {
      while (true) {
        if (cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__6719 = y;
            var G__6720 = cljs.core.first(more);
            var G__6721 = cljs.core.next(more);
            x = G__6719;
            y = G__6720;
            more = G__6721;
            continue;
          } else {
            return cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6718 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__6722__i = 0, G__6722__a = new Array(arguments.length - 2);
        while (G__6722__i < G__6722__a.length) {
          G__6722__a[G__6722__i] = arguments[G__6722__i + 2];
          ++G__6722__i;
        }
        more = new cljs.core.IndexedSeq(G__6722__a, 0);
      }
      return G__6718__delegate.call(this, x, y, more);
    };
    G__6718.cljs$lang$maxFixedArity = 2;
    G__6718.cljs$lang$applyTo = function(arglist__6723) {
      var x = cljs.core.first(arglist__6723);
      arglist__6723 = cljs.core.next(arglist__6723);
      var y = cljs.core.first(arglist__6723);
      var more = cljs.core.rest(arglist__6723);
      return G__6718__delegate(x, y, more);
    };
    G__6718.cljs$core$IFn$_invoke$arity$variadic = G__6718__delegate;
    return G__6718;
  }();
  cljs$core$_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_EQ___1.call(this, x);
      case 2:
        return cljs$core$_EQ___2.call(this, x, y);
      default:
        var G__6724 = null;
        if (arguments.length > 2) {
          var G__6725__i = 0, G__6725__a = new Array(arguments.length - 2);
          while (G__6725__i < G__6725__a.length) {
            G__6725__a[G__6725__i] = arguments[G__6725__i + 2];
            ++G__6725__i;
          }
          G__6724 = new cljs.core.IndexedSeq(G__6725__a, 0);
        }
        return cljs$core$_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__6724);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$_EQ_.cljs$lang$applyTo = cljs$core$_EQ___3.cljs$lang$applyTo;
  cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_EQ___1;
  cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_EQ___2;
  cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_EQ_;
}();
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = function() {
      var G__6726 = self__.iter;
      return cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(G__6726) : cljs.core.es6_iterator_seq.call(null, G__6726);
    }();
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__6727 = n + 1;
      var G__6728 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__6729 = cljs.core.next(coll__$1);
      n = G__6727;
      hash_code = G__6728;
      coll__$1 = G__6729;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__6730 = n + 1;
      var G__6731 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__6732 = cljs.core.next(coll__$1);
      n = G__6730;
      hash_code = G__6731;
      coll__$1 = G__6732;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IComparable$ = true;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  var G__6733 = this$__$1.valueOf();
  var G__6734 = other.valueOf();
  return goog.array.defaultCompare(G__6733, G__6734);
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  var G__6735 = o;
  return goog.getUid(G__6735);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    var G__6737 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__6737) : cljs.core.deref.call(null, G__6737);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function() {
  var cljs$core$ci_reduce = null;
  var cljs$core$ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count(cicoll);
    if (cnt === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__6744 = val;
            var G__6745 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6744, G__6745) : f.call(null, G__6744, G__6745);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__6750 = nval;
            var G__6751 = n + 1;
            val = G__6750;
            n = G__6751;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var cljs$core$ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6746 = val__$1;
          var G__6747 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6746, G__6747) : f.call(null, G__6746, G__6747);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6752 = nval;
          var G__6753 = n + 1;
          val__$1 = G__6752;
          n = G__6753;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var cljs$core$ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6748 = val__$1;
          var G__6749 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6748, G__6749) : f.call(null, G__6748, G__6749);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6754 = nval;
          var G__6755 = n + 1;
          val__$1 = G__6754;
          n = G__6755;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  cljs$core$ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return cljs$core$ci_reduce__2.call(this, cicoll, f);
      case 3:
        return cljs$core$ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return cljs$core$ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$ci_reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$ci_reduce__2;
  cljs$core$ci_reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$ci_reduce__3;
  cljs$core$ci_reduce.cljs$core$IFn$_invoke$arity$4 = cljs$core$ci_reduce__4;
  return cljs$core$ci_reduce;
}();
cljs.core.array_reduce = function() {
  var cljs$core$array_reduce = null;
  var cljs$core$array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__6762 = val;
            var G__6763 = arr[n];
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6762, G__6763) : f.call(null, G__6762, G__6763);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__6768 = nval;
            var G__6769 = n + 1;
            val = G__6768;
            n = G__6769;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var cljs$core$array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6764 = val__$1;
          var G__6765 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6764, G__6765) : f.call(null, G__6764, G__6765);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6770 = nval;
          var G__6771 = n + 1;
          val__$1 = G__6770;
          n = G__6771;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var cljs$core$array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6766 = val__$1;
          var G__6767 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6766, G__6767) : f.call(null, G__6766, G__6767);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6772 = nval;
          var G__6773 = n + 1;
          val__$1 = G__6772;
          n = G__6773;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  cljs$core$array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return cljs$core$array_reduce__2.call(this, arr, f);
      case 3:
        return cljs$core$array_reduce__3.call(this, arr, f, val);
      case 4:
        return cljs$core$array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$array_reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$array_reduce__2;
  cljs$core$array_reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$array_reduce__3;
  cljs$core$array_reduce.cljs$core$IFn$_invoke$arity$4 = cljs$core$array_reduce__4;
  return cljs$core$array_reduce;
}();
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  var G__6775 = x;
  if (G__6775) {
    var bit__4796__auto__ = G__6775.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4796__auto__ || G__6775.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__6775.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__6775);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__6775);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  var G__6777 = x;
  if (G__6777) {
    var bit__4796__auto__ = G__6777.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4796__auto__ || G__6777.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__6777.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__6777);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__6777);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__6778 = coll__$1;
  var G__6779 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__6778, G__6779) : cljs.core.equiv_sequential.call(null, G__6778, G__6779);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__6780 = o;
  var G__6781 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__6780, G__6781) : cljs.core.cons.call(null, G__6780, G__6781);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.prim_seq = function() {
  var cljs$core$prim_seq = null;
  var cljs$core$prim_seq__1 = function(prim) {
    return cljs$core$prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
  };
  var cljs$core$prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  cljs$core$prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return cljs$core$prim_seq__1.call(this, prim);
      case 2:
        return cljs$core$prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$prim_seq.cljs$core$IFn$_invoke$arity$1 = cljs$core$prim_seq__1;
  cljs$core$prim_seq.cljs$core$IFn$_invoke$arity$2 = cljs$core$prim_seq__2;
  return cljs$core$prim_seq;
}();
cljs.core.array_seq = function() {
  var cljs$core$array_seq = null;
  var cljs$core$array_seq__1 = function(array) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
  };
  var cljs$core$array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
  };
  cljs$core$array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return cljs$core$array_seq__1.call(this, array);
      case 2:
        return cljs$core$array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$array_seq.cljs$core$IFn$_invoke$arity$1 = cljs$core$array_seq__1;
  cljs$core$array_seq.cljs$core$IFn$_invoke$arity$2 = cljs$core$array_seq__2;
  return cljs$core$array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__6784 = coll__$1;
  var G__6785 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__6784, G__6785) : cljs.core.equiv_sequential.call(null, G__6784, G__6785);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__6786 = cljs.core.List.EMPTY;
  var G__6787 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__6786, G__6787) : cljs.core.with_meta.call(null, G__6786, G__6787);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  var G__6788 = f;
  var G__6789 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(G__6788, G__6789) : cljs.core.seq_reduce.call(null, G__6788, G__6789);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  var G__6790 = f;
  var G__6791 = start;
  var G__6792 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(G__6790, G__6791, G__6792) : cljs.core.seq_reduce.call(null, G__6790, G__6791, G__6792);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__6793 = o;
  var G__6794 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__6793, G__6794) : cljs.core.cons.call(null, G__6793, G__6794);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__6795 = sn;
      s = G__6795;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var cljs$core$conj = null;
  var cljs$core$conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var cljs$core$conj__1 = function(coll) {
    return coll;
  };
  var cljs$core$conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj(coll, x);
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, x);
    }
  };
  var cljs$core$conj__3 = function() {
    var G__6800__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__6801 = cljs$core$conj.cljs$core$IFn$_invoke$arity$2(coll, x);
          var G__6802 = cljs.core.first(xs);
          var G__6803 = cljs.core.next(xs);
          coll = G__6801;
          x = G__6802;
          xs = G__6803;
          continue;
        } else {
          return cljs$core$conj.cljs$core$IFn$_invoke$arity$2(coll, x);
        }
        break;
      }
    };
    var G__6800 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        var G__6804__i = 0, G__6804__a = new Array(arguments.length - 2);
        while (G__6804__i < G__6804__a.length) {
          G__6804__a[G__6804__i] = arguments[G__6804__i + 2];
          ++G__6804__i;
        }
        xs = new cljs.core.IndexedSeq(G__6804__a, 0);
      }
      return G__6800__delegate.call(this, coll, x, xs);
    };
    G__6800.cljs$lang$maxFixedArity = 2;
    G__6800.cljs$lang$applyTo = function(arglist__6805) {
      var coll = cljs.core.first(arglist__6805);
      arglist__6805 = cljs.core.next(arglist__6805);
      var x = cljs.core.first(arglist__6805);
      var xs = cljs.core.rest(arglist__6805);
      return G__6800__delegate(coll, x, xs);
    };
    G__6800.cljs$core$IFn$_invoke$arity$variadic = G__6800__delegate;
    return G__6800;
  }();
  cljs$core$conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$conj__0.call(this);
      case 1:
        return cljs$core$conj__1.call(this, coll);
      case 2:
        return cljs$core$conj__2.call(this, coll, x);
      default:
        var G__6806 = null;
        if (arguments.length > 2) {
          var G__6807__i = 0, G__6807__a = new Array(arguments.length - 2);
          while (G__6807__i < G__6807__a.length) {
            G__6807__a[G__6807__i] = arguments[G__6807__i + 2];
            ++G__6807__i;
          }
          G__6806 = new cljs.core.IndexedSeq(G__6807__a, 0);
        }
        return cljs$core$conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, G__6806);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$conj.cljs$lang$maxFixedArity = 2;
  cljs$core$conj.cljs$lang$applyTo = cljs$core$conj__3.cljs$lang$applyTo;
  cljs$core$conj.cljs$core$IFn$_invoke$arity$0 = cljs$core$conj__0;
  cljs$core$conj.cljs$core$IFn$_invoke$arity$1 = cljs$core$conj__1;
  cljs$core$conj.cljs$core$IFn$_invoke$arity$2 = cljs$core$conj__2;
  cljs$core$conj.cljs$core$IFn$_invoke$arity$variadic = cljs$core$conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$conj;
}();
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__6808 = cljs.core.next(s);
      var G__6809 = acc + 1;
      s = G__6808;
      acc = G__6809;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__6811 = coll;
      if (G__6811) {
        var bit__4789__auto__ = G__6811.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4789__auto__ || G__6811.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, coll)) {
            return cljs.core._count(coll);
          } else {
            return cljs.core.accumulating_seq_count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var cljs$core$linear_traversal_nth = null;
  var cljs$core$linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
          } else {
            if (cljs.core.seq(coll)) {
              var G__6812 = cljs.core.next(coll);
              var G__6813 = n - 1;
              coll = G__6812;
              n = G__6813;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var cljs$core$linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
          } else {
            if (cljs.core.seq(coll)) {
              var G__6814 = cljs.core.next(coll);
              var G__6815 = n - 1;
              var G__6816 = not_found;
              coll = G__6814;
              n = G__6815;
              not_found = G__6816;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  cljs$core$linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return cljs$core$linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = cljs$core$linear_traversal_nth__2;
  cljs$core$linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = cljs$core$linear_traversal_nth__3;
  return cljs$core$linear_traversal_nth;
}();
cljs.core.nth = function() {
  var cljs$core$nth = null;
  var cljs$core$nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__6821 = coll;
          if (G__6821) {
            var bit__4789__auto__ = G__6821.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4789__auto__ || G__6821.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
        } else {
          if (cljs.core.array_QMARK_(coll)) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__6822 = coll;
                  if (G__6822) {
                    var bit__4796__auto__ = G__6822.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4796__auto__ || G__6822.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__6822.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6822);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6822);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  var cljs$core$nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__6823 = coll;
          if (G__6823) {
            var bit__4789__auto__ = G__6823.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4789__auto__ || G__6823.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
        } else {
          if (cljs.core.array_QMARK_(coll)) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__6824 = coll;
                  if (G__6824) {
                    var bit__4796__auto__ = G__6824.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4796__auto__ || G__6824.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__6824.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6824);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6824);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  cljs$core$nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$nth__2.call(this, coll, n);
      case 3:
        return cljs$core$nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$nth.cljs$core$IFn$_invoke$arity$2 = cljs$core$nth__2;
  cljs$core$nth.cljs$core$IFn$_invoke$arity$3 = cljs$core$nth__3;
  return cljs$core$nth;
}();
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__6825 = n__$1 - 1;
      var G__6826 = cljs.core.rest(xs);
      n__$1 = G__6825;
      xs = G__6826;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function() {
  var cljs$core$get = null;
  var cljs$core$get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__6829 = o;
        if (G__6829) {
          var bit__4789__auto__ = G__6829.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4789__auto__ || G__6829.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$2(null, k);
      } else {
        if (cljs.core.array_QMARK_(o)) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var cljs$core$get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__6830 = o;
        if (G__6830) {
          var bit__4789__auto__ = G__6830.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4789__auto__ || G__6830.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
      } else {
        if (cljs.core.array_QMARK_(o)) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  cljs$core$get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$get__2.call(this, o, k);
      case 3:
        return cljs$core$get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$get.cljs$core$IFn$_invoke$arity$2 = cljs$core$get__2;
  cljs$core$get.cljs$core$IFn$_invoke$arity$3 = cljs$core$get__3;
  return cljs$core$get;
}();
cljs.core.assoc = function() {
  var cljs$core$assoc = null;
  var cljs$core$assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc(coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var cljs$core$assoc__4 = function() {
    var G__6834__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = cljs$core$assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__6835 = ret;
          var G__6836 = cljs.core.first(kvs);
          var G__6837 = cljs.core.second(kvs);
          var G__6838 = cljs.core.nnext(kvs);
          coll = G__6835;
          k = G__6836;
          v = G__6837;
          kvs = G__6838;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__6834 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__6839__i = 0, G__6839__a = new Array(arguments.length - 3);
        while (G__6839__i < G__6839__a.length) {
          G__6839__a[G__6839__i] = arguments[G__6839__i + 3];
          ++G__6839__i;
        }
        kvs = new cljs.core.IndexedSeq(G__6839__a, 0);
      }
      return G__6834__delegate.call(this, coll, k, v, kvs);
    };
    G__6834.cljs$lang$maxFixedArity = 3;
    G__6834.cljs$lang$applyTo = function(arglist__6840) {
      var coll = cljs.core.first(arglist__6840);
      arglist__6840 = cljs.core.next(arglist__6840);
      var k = cljs.core.first(arglist__6840);
      arglist__6840 = cljs.core.next(arglist__6840);
      var v = cljs.core.first(arglist__6840);
      var kvs = cljs.core.rest(arglist__6840);
      return G__6834__delegate(coll, k, v, kvs);
    };
    G__6834.cljs$core$IFn$_invoke$arity$variadic = G__6834__delegate;
    return G__6834;
  }();
  cljs$core$assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$assoc__3.call(this, coll, k, v);
      default:
        var G__6841 = null;
        if (arguments.length > 3) {
          var G__6842__i = 0, G__6842__a = new Array(arguments.length - 3);
          while (G__6842__i < G__6842__a.length) {
            G__6842__a[G__6842__i] = arguments[G__6842__i + 3];
            ++G__6842__i;
          }
          G__6841 = new cljs.core.IndexedSeq(G__6842__a, 0);
        }
        return cljs$core$assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, G__6841);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$assoc.cljs$lang$maxFixedArity = 3;
  cljs$core$assoc.cljs$lang$applyTo = cljs$core$assoc__4.cljs$lang$applyTo;
  cljs$core$assoc.cljs$core$IFn$_invoke$arity$3 = cljs$core$assoc__3;
  cljs$core$assoc.cljs$core$IFn$_invoke$arity$variadic = cljs$core$assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$assoc;
}();
cljs.core.dissoc = function() {
  var cljs$core$dissoc = null;
  var cljs$core$dissoc__1 = function(coll) {
    return coll;
  };
  var cljs$core$dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc(coll, k);
    }
  };
  var cljs$core$dissoc__3 = function() {
    var G__6845__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = cljs$core$dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__6846 = ret;
            var G__6847 = cljs.core.first(ks);
            var G__6848 = cljs.core.next(ks);
            coll = G__6846;
            k = G__6847;
            ks = G__6848;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__6845 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__6849__i = 0, G__6849__a = new Array(arguments.length - 2);
        while (G__6849__i < G__6849__a.length) {
          G__6849__a[G__6849__i] = arguments[G__6849__i + 2];
          ++G__6849__i;
        }
        ks = new cljs.core.IndexedSeq(G__6849__a, 0);
      }
      return G__6845__delegate.call(this, coll, k, ks);
    };
    G__6845.cljs$lang$maxFixedArity = 2;
    G__6845.cljs$lang$applyTo = function(arglist__6850) {
      var coll = cljs.core.first(arglist__6850);
      arglist__6850 = cljs.core.next(arglist__6850);
      var k = cljs.core.first(arglist__6850);
      var ks = cljs.core.rest(arglist__6850);
      return G__6845__delegate(coll, k, ks);
    };
    G__6845.cljs$core$IFn$_invoke$arity$variadic = G__6845__delegate;
    return G__6845;
  }();
  cljs$core$dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$dissoc__1.call(this, coll);
      case 2:
        return cljs$core$dissoc__2.call(this, coll, k);
      default:
        var G__6851 = null;
        if (arguments.length > 2) {
          var G__6852__i = 0, G__6852__a = new Array(arguments.length - 2);
          while (G__6852__i < G__6852__a.length) {
            G__6852__a[G__6852__i] = arguments[G__6852__i + 2];
            ++G__6852__i;
          }
          G__6851 = new cljs.core.IndexedSeq(G__6852__a, 0);
        }
        return cljs$core$dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__6851);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$dissoc.cljs$lang$maxFixedArity = 2;
  cljs$core$dissoc.cljs$lang$applyTo = cljs$core$dissoc__3.cljs$lang$applyTo;
  cljs$core$dissoc.cljs$core$IFn$_invoke$arity$1 = cljs$core$dissoc__1;
  cljs$core$dissoc.cljs$core$IFn$_invoke$arity$2 = cljs$core$dissoc__2;
  cljs$core$dissoc.cljs$core$IFn$_invoke$arity$variadic = cljs$core$dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$dissoc;
}();
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__4122__auto__ = function() {
    var G__6857 = f;
    return goog.isFunction(G__6857);
  }();
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    var G__6858 = f;
    if (G__6858) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto____$1 = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto____$1)) {
          return or__4122__auto____$1;
        } else {
          return G__6858.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__6858.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__6858);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__6858);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.prototype.call = function() {
  var G__7324 = null;
  var G__7324__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__7324__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6860 = a;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__6860) : self__.afn.call(null, G__6860);
  };
  var G__7324__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6861 = a;
    var G__6862 = b;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__6861, G__6862) : self__.afn.call(null, G__6861, G__6862);
  };
  var G__7324__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6863 = a;
    var G__6864 = b;
    var G__6865 = c;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__6863, G__6864, G__6865) : self__.afn.call(null, G__6863, G__6864, G__6865);
  };
  var G__7324__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6866 = a;
    var G__6867 = b;
    var G__6868 = c;
    var G__6869 = d;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__6866, G__6867, G__6868, G__6869) : self__.afn.call(null, G__6866, G__6867, G__6868, G__6869);
  };
  var G__7324__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6870 = a;
    var G__6871 = b;
    var G__6872 = c;
    var G__6873 = d;
    var G__6874 = e;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__6870, G__6871, G__6872, G__6873, G__6874) : self__.afn.call(null, G__6870, G__6871, G__6872, G__6873, G__6874);
  };
  var G__7324__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6875 = a;
    var G__6876 = b;
    var G__6877 = c;
    var G__6878 = d;
    var G__6879 = e;
    var G__6880 = f;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__6875, G__6876, G__6877, G__6878, G__6879, G__6880) : self__.afn.call(null, G__6875, G__6876, G__6877, G__6878, G__6879, G__6880);
  };
  var G__7324__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6881 = a;
    var G__6882 = b;
    var G__6883 = c;
    var G__6884 = d;
    var G__6885 = e;
    var G__6886 = f;
    var G__6887 = g;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__6881, G__6882, G__6883, G__6884, G__6885, G__6886, G__6887) : self__.afn.call(null, G__6881, G__6882, G__6883, G__6884, G__6885, G__6886, G__6887);
  };
  var G__7324__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6888 = a;
    var G__6889 = b;
    var G__6890 = c;
    var G__6891 = d;
    var G__6892 = e;
    var G__6893 = f;
    var G__6894 = g;
    var G__6895 = h;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__6888, G__6889, G__6890, G__6891, G__6892, G__6893, G__6894, G__6895) : self__.afn.call(null, G__6888, G__6889, G__6890, G__6891, G__6892, G__6893, G__6894, G__6895);
  };
  var G__7324__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6896 = a;
    var G__6897 = b;
    var G__6898 = c;
    var G__6899 = d;
    var G__6900 = e;
    var G__6901 = f;
    var G__6902 = g;
    var G__6903 = h;
    var G__6904 = i;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__6896, G__6897, G__6898, G__6899, G__6900, G__6901, G__6902, G__6903, G__6904) : self__.afn.call(null, G__6896, G__6897, G__6898, G__6899, G__6900, G__6901, G__6902, G__6903, G__6904);
  };
  var G__7324__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6905 = a;
    var G__6906 = b;
    var G__6907 = c;
    var G__6908 = d;
    var G__6909 = e;
    var G__6910 = f;
    var G__6911 = g;
    var G__6912 = h;
    var G__6913 = i;
    var G__6914 = j;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__6905, G__6906, G__6907, G__6908, G__6909, G__6910, G__6911, G__6912, G__6913, G__6914) : self__.afn.call(null, G__6905, G__6906, G__6907, G__6908, G__6909, G__6910, G__6911, G__6912, G__6913, G__6914);
  };
  var G__7324__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6915 = a;
    var G__6916 = b;
    var G__6917 = c;
    var G__6918 = d;
    var G__6919 = e;
    var G__6920 = f;
    var G__6921 = g;
    var G__6922 = h;
    var G__6923 = i;
    var G__6924 = j;
    var G__6925 = k;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__6915, G__6916, G__6917, G__6918, G__6919, G__6920, G__6921, G__6922, G__6923, G__6924, G__6925) : self__.afn.call(null, G__6915, G__6916, G__6917, G__6918, G__6919, G__6920, G__6921, G__6922, G__6923, G__6924, G__6925);
  };
  var G__7324__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6926 = a;
    var G__6927 = b;
    var G__6928 = c;
    var G__6929 = d;
    var G__6930 = e;
    var G__6931 = f;
    var G__6932 = g;
    var G__6933 = h;
    var G__6934 = i;
    var G__6935 = j;
    var G__6936 = k;
    var G__6937 = l;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__6926, G__6927, G__6928, G__6929, G__6930, G__6931, G__6932, G__6933, G__6934, G__6935, G__6936, G__6937) : self__.afn.call(null, G__6926, G__6927, G__6928, G__6929, G__6930, G__6931, G__6932, G__6933, G__6934, G__6935, G__6936, G__6937);
  };
  var G__7324__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6938 = a;
    var G__6939 = b;
    var G__6940 = c;
    var G__6941 = d;
    var G__6942 = e;
    var G__6943 = f;
    var G__6944 = g;
    var G__6945 = h;
    var G__6946 = i;
    var G__6947 = j;
    var G__6948 = k;
    var G__6949 = l;
    var G__6950 = m;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__6938, G__6939, G__6940, G__6941, G__6942, G__6943, G__6944, G__6945, G__6946, G__6947, G__6948, G__6949, G__6950) : self__.afn.call(null, G__6938, G__6939, G__6940, G__6941, G__6942, G__6943, G__6944, G__6945, G__6946, G__6947, G__6948, G__6949, G__6950);
  };
  var G__7324__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6951 = a;
    var G__6952 = b;
    var G__6953 = c;
    var G__6954 = d;
    var G__6955 = e;
    var G__6956 = f;
    var G__6957 = g;
    var G__6958 = h;
    var G__6959 = i;
    var G__6960 = j;
    var G__6961 = k;
    var G__6962 = l;
    var G__6963 = m;
    var G__6964 = n;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__6951, G__6952, G__6953, G__6954, G__6955, G__6956, G__6957, G__6958, G__6959, G__6960, G__6961, G__6962, G__6963, G__6964) : self__.afn.call(null, G__6951, G__6952, G__6953, G__6954, G__6955, G__6956, G__6957, G__6958, G__6959, G__6960, G__6961, G__6962, G__6963, G__6964);
  };
  var G__7324__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6965 = a;
    var G__6966 = b;
    var G__6967 = c;
    var G__6968 = d;
    var G__6969 = e;
    var G__6970 = f;
    var G__6971 = g;
    var G__6972 = h;
    var G__6973 = i;
    var G__6974 = j;
    var G__6975 = k;
    var G__6976 = l;
    var G__6977 = m;
    var G__6978 = n;
    var G__6979 = o;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__6965, G__6966, G__6967, G__6968, G__6969, G__6970, G__6971, G__6972, G__6973, G__6974, G__6975, G__6976, G__6977, G__6978, G__6979) : self__.afn.call(null, G__6965, G__6966, G__6967, G__6968, G__6969, G__6970, G__6971, G__6972, G__6973, G__6974, G__6975, G__6976, G__6977, G__6978, G__6979);
  };
  var G__7324__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6980 = a;
    var G__6981 = b;
    var G__6982 = c;
    var G__6983 = d;
    var G__6984 = e;
    var G__6985 = f;
    var G__6986 = g;
    var G__6987 = h;
    var G__6988 = i;
    var G__6989 = j;
    var G__6990 = k;
    var G__6991 = l;
    var G__6992 = m;
    var G__6993 = n;
    var G__6994 = o;
    var G__6995 = p;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__6980, G__6981, G__6982, G__6983, G__6984, G__6985, G__6986, G__6987, G__6988, G__6989, G__6990, G__6991, G__6992, G__6993, G__6994, G__6995) : self__.afn.call(null, G__6980, G__6981, G__6982, G__6983, G__6984, G__6985, G__6986, G__6987, G__6988, G__6989, G__6990, G__6991, G__6992, G__6993, G__6994, G__6995);
  };
  var G__7324__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6996 = a;
    var G__6997 = b;
    var G__6998 = c;
    var G__6999 = d;
    var G__7000 = e;
    var G__7001 = f;
    var G__7002 = g;
    var G__7003 = h;
    var G__7004 = i;
    var G__7005 = j;
    var G__7006 = k;
    var G__7007 = l;
    var G__7008 = m;
    var G__7009 = n;
    var G__7010 = o;
    var G__7011 = p;
    var G__7012 = q;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__6996, G__6997, G__6998, G__6999, G__7000, G__7001, G__7002, G__7003, G__7004, G__7005, G__7006, G__7007, G__7008, G__7009, G__7010, G__7011, G__7012) : self__.afn.call(null, G__6996, G__6997, G__6998, G__6999, G__7000, G__7001, G__7002, G__7003, G__7004, G__7005, G__7006, G__7007, G__7008, G__7009, G__7010, G__7011, G__7012);
  };
  var G__7324__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7013 = a;
    var G__7014 = b;
    var G__7015 = c;
    var G__7016 = d;
    var G__7017 = e;
    var G__7018 = f;
    var G__7019 = g;
    var G__7020 = h;
    var G__7021 = i;
    var G__7022 = j;
    var G__7023 = k;
    var G__7024 = l;
    var G__7025 = m;
    var G__7026 = n;
    var G__7027 = o;
    var G__7028 = p;
    var G__7029 = q;
    var G__7030 = r;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__7013, G__7014, G__7015, G__7016, G__7017, G__7018, G__7019, G__7020, G__7021, G__7022, G__7023, G__7024, G__7025, G__7026, G__7027, G__7028, G__7029, G__7030) : self__.afn.call(null, G__7013, G__7014, G__7015, G__7016, G__7017, G__7018, G__7019, G__7020, G__7021, G__7022, G__7023, G__7024, G__7025, G__7026, G__7027, G__7028, G__7029, G__7030);
  };
  var G__7324__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7031 = a;
    var G__7032 = b;
    var G__7033 = c;
    var G__7034 = d;
    var G__7035 = e;
    var G__7036 = f;
    var G__7037 = g;
    var G__7038 = h;
    var G__7039 = i;
    var G__7040 = j;
    var G__7041 = k;
    var G__7042 = l;
    var G__7043 = m;
    var G__7044 = n;
    var G__7045 = o;
    var G__7046 = p;
    var G__7047 = q;
    var G__7048 = r;
    var G__7049 = s;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__7031, G__7032, G__7033, G__7034, G__7035, G__7036, G__7037, G__7038, G__7039, G__7040, G__7041, G__7042, G__7043, G__7044, G__7045, G__7046, G__7047, G__7048, G__7049) : self__.afn.call(null, G__7031, G__7032, G__7033, G__7034, G__7035, G__7036, G__7037, G__7038, G__7039, G__7040, G__7041, G__7042, G__7043, G__7044, G__7045, G__7046, G__7047, G__7048, G__7049);
  };
  var G__7324__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7050 = a;
    var G__7051 = b;
    var G__7052 = c;
    var G__7053 = d;
    var G__7054 = e;
    var G__7055 = f;
    var G__7056 = g;
    var G__7057 = h;
    var G__7058 = i;
    var G__7059 = j;
    var G__7060 = k;
    var G__7061 = l;
    var G__7062 = m;
    var G__7063 = n;
    var G__7064 = o;
    var G__7065 = p;
    var G__7066 = q;
    var G__7067 = r;
    var G__7068 = s;
    var G__7069 = t;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__7050, G__7051, G__7052, G__7053, G__7054, G__7055, G__7056, G__7057, G__7058, G__7059, G__7060, G__7061, G__7062, G__7063, G__7064, G__7065, G__7066, G__7067, G__7068, G__7069) : self__.afn.call(null, G__7050, G__7051, G__7052, G__7053, G__7054, G__7055, G__7056, G__7057, G__7058, G__7059, G__7060, G__7061, G__7062, G__7063, G__7064, G__7065, G__7066, G__7067, G__7068, G__7069);
  };
  var G__7324__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7070 = self__.afn;
    var G__7071 = a;
    var G__7072 = b;
    var G__7073 = c;
    var G__7074 = d;
    var G__7075 = e;
    var G__7076 = f;
    var G__7077 = g;
    var G__7078 = h;
    var G__7079 = i;
    var G__7080 = j;
    var G__7081 = k;
    var G__7082 = l;
    var G__7083 = m;
    var G__7084 = n;
    var G__7085 = o;
    var G__7086 = p;
    var G__7087 = q;
    var G__7088 = r;
    var G__7089 = s;
    var G__7090 = t;
    var G__7091 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__7070, G__7071, G__7072, G__7073, G__7074, G__7075, G__7076, G__7077, G__7078, G__7079, G__7080, G__7081, G__7082, G__7083, G__7084, G__7085, G__7086, G__7087, G__7088, G__7089, G__7090, G__7091) : cljs.core.apply.call(null, G__7070, G__7071, G__7072, G__7073, G__7074, G__7075, G__7076, G__7077, G__7078, G__7079, G__7080, G__7081, G__7082, G__7083, G__7084, G__7085, G__7086, G__7087, G__7088, 
    G__7089, G__7090, G__7091);
  };
  G__7324 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__7324__1.call(this, self__);
      case 2:
        return G__7324__2.call(this, self__, a);
      case 3:
        return G__7324__3.call(this, self__, a, b);
      case 4:
        return G__7324__4.call(this, self__, a, b, c);
      case 5:
        return G__7324__5.call(this, self__, a, b, c, d);
      case 6:
        return G__7324__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__7324__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__7324__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__7324__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__7324__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__7324__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__7324__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__7324__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__7324__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__7324__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__7324__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__7324__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__7324__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__7324__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__7324__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__7324__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__7324__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__7324.cljs$core$IFn$_invoke$arity$1 = G__7324__1;
  G__7324.cljs$core$IFn$_invoke$arity$2 = G__7324__2;
  G__7324.cljs$core$IFn$_invoke$arity$3 = G__7324__3;
  G__7324.cljs$core$IFn$_invoke$arity$4 = G__7324__4;
  G__7324.cljs$core$IFn$_invoke$arity$5 = G__7324__5;
  G__7324.cljs$core$IFn$_invoke$arity$6 = G__7324__6;
  G__7324.cljs$core$IFn$_invoke$arity$7 = G__7324__7;
  G__7324.cljs$core$IFn$_invoke$arity$8 = G__7324__8;
  G__7324.cljs$core$IFn$_invoke$arity$9 = G__7324__9;
  G__7324.cljs$core$IFn$_invoke$arity$10 = G__7324__10;
  G__7324.cljs$core$IFn$_invoke$arity$11 = G__7324__11;
  G__7324.cljs$core$IFn$_invoke$arity$12 = G__7324__12;
  G__7324.cljs$core$IFn$_invoke$arity$13 = G__7324__13;
  G__7324.cljs$core$IFn$_invoke$arity$14 = G__7324__14;
  G__7324.cljs$core$IFn$_invoke$arity$15 = G__7324__15;
  G__7324.cljs$core$IFn$_invoke$arity$16 = G__7324__16;
  G__7324.cljs$core$IFn$_invoke$arity$17 = G__7324__17;
  G__7324.cljs$core$IFn$_invoke$arity$18 = G__7324__18;
  G__7324.cljs$core$IFn$_invoke$arity$19 = G__7324__19;
  G__7324.cljs$core$IFn$_invoke$arity$20 = G__7324__20;
  G__7324.cljs$core$IFn$_invoke$arity$21 = G__7324__21;
  G__7324.cljs$core$IFn$_invoke$arity$22 = G__7324__22;
  return G__7324;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args6859) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6859)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  var G__7092 = a;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__7092) : self__.afn.call(null, G__7092);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  var G__7093 = a;
  var G__7094 = b;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__7093, G__7094) : self__.afn.call(null, G__7093, G__7094);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  var G__7095 = a;
  var G__7096 = b;
  var G__7097 = c;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__7095, G__7096, G__7097) : self__.afn.call(null, G__7095, G__7096, G__7097);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  var G__7098 = a;
  var G__7099 = b;
  var G__7100 = c;
  var G__7101 = d;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__7098, G__7099, G__7100, G__7101) : self__.afn.call(null, G__7098, G__7099, G__7100, G__7101);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  var G__7102 = a;
  var G__7103 = b;
  var G__7104 = c;
  var G__7105 = d;
  var G__7106 = e;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__7102, G__7103, G__7104, G__7105, G__7106) : self__.afn.call(null, G__7102, G__7103, G__7104, G__7105, G__7106);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  var G__7107 = a;
  var G__7108 = b;
  var G__7109 = c;
  var G__7110 = d;
  var G__7111 = e;
  var G__7112 = f;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__7107, G__7108, G__7109, G__7110, G__7111, G__7112) : self__.afn.call(null, G__7107, G__7108, G__7109, G__7110, G__7111, G__7112);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  var G__7113 = a;
  var G__7114 = b;
  var G__7115 = c;
  var G__7116 = d;
  var G__7117 = e;
  var G__7118 = f;
  var G__7119 = g;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__7113, G__7114, G__7115, G__7116, G__7117, G__7118, G__7119) : self__.afn.call(null, G__7113, G__7114, G__7115, G__7116, G__7117, G__7118, G__7119);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  var G__7120 = a;
  var G__7121 = b;
  var G__7122 = c;
  var G__7123 = d;
  var G__7124 = e;
  var G__7125 = f;
  var G__7126 = g;
  var G__7127 = h;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__7120, G__7121, G__7122, G__7123, G__7124, G__7125, G__7126, G__7127) : self__.afn.call(null, G__7120, G__7121, G__7122, G__7123, G__7124, G__7125, G__7126, G__7127);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  var G__7128 = a;
  var G__7129 = b;
  var G__7130 = c;
  var G__7131 = d;
  var G__7132 = e;
  var G__7133 = f;
  var G__7134 = g;
  var G__7135 = h;
  var G__7136 = i;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__7128, G__7129, G__7130, G__7131, G__7132, G__7133, G__7134, G__7135, G__7136) : self__.afn.call(null, G__7128, G__7129, G__7130, G__7131, G__7132, G__7133, G__7134, G__7135, G__7136);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  var G__7137 = a;
  var G__7138 = b;
  var G__7139 = c;
  var G__7140 = d;
  var G__7141 = e;
  var G__7142 = f;
  var G__7143 = g;
  var G__7144 = h;
  var G__7145 = i;
  var G__7146 = j;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__7137, G__7138, G__7139, G__7140, G__7141, G__7142, G__7143, G__7144, G__7145, G__7146) : self__.afn.call(null, G__7137, G__7138, G__7139, G__7140, G__7141, G__7142, G__7143, G__7144, G__7145, G__7146);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  var G__7147 = a;
  var G__7148 = b;
  var G__7149 = c;
  var G__7150 = d;
  var G__7151 = e;
  var G__7152 = f;
  var G__7153 = g;
  var G__7154 = h;
  var G__7155 = i;
  var G__7156 = j;
  var G__7157 = k;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__7147, G__7148, G__7149, G__7150, G__7151, G__7152, G__7153, G__7154, G__7155, G__7156, G__7157) : self__.afn.call(null, G__7147, G__7148, G__7149, G__7150, G__7151, G__7152, G__7153, G__7154, G__7155, G__7156, G__7157);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  var G__7158 = a;
  var G__7159 = b;
  var G__7160 = c;
  var G__7161 = d;
  var G__7162 = e;
  var G__7163 = f;
  var G__7164 = g;
  var G__7165 = h;
  var G__7166 = i;
  var G__7167 = j;
  var G__7168 = k;
  var G__7169 = l;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__7158, G__7159, G__7160, G__7161, G__7162, G__7163, G__7164, G__7165, G__7166, G__7167, G__7168, G__7169) : self__.afn.call(null, G__7158, G__7159, G__7160, G__7161, G__7162, G__7163, G__7164, G__7165, G__7166, G__7167, G__7168, G__7169);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  var G__7170 = a;
  var G__7171 = b;
  var G__7172 = c;
  var G__7173 = d;
  var G__7174 = e;
  var G__7175 = f;
  var G__7176 = g;
  var G__7177 = h;
  var G__7178 = i;
  var G__7179 = j;
  var G__7180 = k;
  var G__7181 = l;
  var G__7182 = m;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__7170, G__7171, G__7172, G__7173, G__7174, G__7175, G__7176, G__7177, G__7178, G__7179, G__7180, G__7181, G__7182) : self__.afn.call(null, G__7170, G__7171, G__7172, G__7173, G__7174, G__7175, G__7176, G__7177, G__7178, G__7179, G__7180, G__7181, G__7182);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  var G__7183 = a;
  var G__7184 = b;
  var G__7185 = c;
  var G__7186 = d;
  var G__7187 = e;
  var G__7188 = f;
  var G__7189 = g;
  var G__7190 = h;
  var G__7191 = i;
  var G__7192 = j;
  var G__7193 = k;
  var G__7194 = l;
  var G__7195 = m;
  var G__7196 = n;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__7183, G__7184, G__7185, G__7186, G__7187, G__7188, G__7189, G__7190, G__7191, G__7192, G__7193, G__7194, G__7195, G__7196) : self__.afn.call(null, G__7183, G__7184, G__7185, G__7186, G__7187, G__7188, G__7189, G__7190, G__7191, G__7192, G__7193, G__7194, G__7195, G__7196);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  var G__7197 = a;
  var G__7198 = b;
  var G__7199 = c;
  var G__7200 = d;
  var G__7201 = e;
  var G__7202 = f;
  var G__7203 = g;
  var G__7204 = h;
  var G__7205 = i;
  var G__7206 = j;
  var G__7207 = k;
  var G__7208 = l;
  var G__7209 = m;
  var G__7210 = n;
  var G__7211 = o;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__7197, G__7198, G__7199, G__7200, G__7201, G__7202, G__7203, G__7204, G__7205, G__7206, G__7207, G__7208, G__7209, G__7210, G__7211) : self__.afn.call(null, G__7197, G__7198, G__7199, G__7200, G__7201, G__7202, G__7203, G__7204, G__7205, G__7206, G__7207, G__7208, G__7209, G__7210, G__7211);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  var G__7212 = a;
  var G__7213 = b;
  var G__7214 = c;
  var G__7215 = d;
  var G__7216 = e;
  var G__7217 = f;
  var G__7218 = g;
  var G__7219 = h;
  var G__7220 = i;
  var G__7221 = j;
  var G__7222 = k;
  var G__7223 = l;
  var G__7224 = m;
  var G__7225 = n;
  var G__7226 = o;
  var G__7227 = p;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__7212, G__7213, G__7214, G__7215, G__7216, G__7217, G__7218, G__7219, G__7220, G__7221, G__7222, G__7223, G__7224, G__7225, G__7226, G__7227) : self__.afn.call(null, G__7212, G__7213, G__7214, G__7215, G__7216, G__7217, G__7218, G__7219, G__7220, G__7221, G__7222, G__7223, G__7224, G__7225, G__7226, G__7227);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  var G__7228 = a;
  var G__7229 = b;
  var G__7230 = c;
  var G__7231 = d;
  var G__7232 = e;
  var G__7233 = f;
  var G__7234 = g;
  var G__7235 = h;
  var G__7236 = i;
  var G__7237 = j;
  var G__7238 = k;
  var G__7239 = l;
  var G__7240 = m;
  var G__7241 = n;
  var G__7242 = o;
  var G__7243 = p;
  var G__7244 = q;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__7228, G__7229, G__7230, G__7231, G__7232, G__7233, G__7234, G__7235, G__7236, G__7237, G__7238, G__7239, G__7240, G__7241, G__7242, G__7243, G__7244) : self__.afn.call(null, G__7228, G__7229, G__7230, G__7231, G__7232, G__7233, G__7234, G__7235, G__7236, G__7237, G__7238, G__7239, G__7240, G__7241, G__7242, G__7243, G__7244);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  var G__7245 = a;
  var G__7246 = b;
  var G__7247 = c;
  var G__7248 = d;
  var G__7249 = e;
  var G__7250 = f;
  var G__7251 = g;
  var G__7252 = h;
  var G__7253 = i;
  var G__7254 = j;
  var G__7255 = k;
  var G__7256 = l;
  var G__7257 = m;
  var G__7258 = n;
  var G__7259 = o;
  var G__7260 = p;
  var G__7261 = q;
  var G__7262 = r;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__7245, G__7246, G__7247, G__7248, G__7249, G__7250, G__7251, G__7252, G__7253, G__7254, G__7255, G__7256, G__7257, G__7258, G__7259, G__7260, G__7261, G__7262) : self__.afn.call(null, G__7245, G__7246, G__7247, G__7248, G__7249, G__7250, G__7251, G__7252, G__7253, G__7254, G__7255, G__7256, G__7257, G__7258, G__7259, G__7260, G__7261, G__7262);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  var G__7263 = a;
  var G__7264 = b;
  var G__7265 = c;
  var G__7266 = d;
  var G__7267 = e;
  var G__7268 = f;
  var G__7269 = g;
  var G__7270 = h;
  var G__7271 = i;
  var G__7272 = j;
  var G__7273 = k;
  var G__7274 = l;
  var G__7275 = m;
  var G__7276 = n;
  var G__7277 = o;
  var G__7278 = p;
  var G__7279 = q;
  var G__7280 = r;
  var G__7281 = s;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__7263, G__7264, G__7265, G__7266, G__7267, G__7268, G__7269, G__7270, G__7271, G__7272, G__7273, G__7274, G__7275, G__7276, G__7277, G__7278, G__7279, G__7280, G__7281) : self__.afn.call(null, G__7263, G__7264, G__7265, G__7266, G__7267, G__7268, G__7269, G__7270, G__7271, G__7272, G__7273, G__7274, G__7275, G__7276, G__7277, G__7278, G__7279, G__7280, G__7281);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  var G__7282 = a;
  var G__7283 = b;
  var G__7284 = c;
  var G__7285 = d;
  var G__7286 = e;
  var G__7287 = f;
  var G__7288 = g;
  var G__7289 = h;
  var G__7290 = i;
  var G__7291 = j;
  var G__7292 = k;
  var G__7293 = l;
  var G__7294 = m;
  var G__7295 = n;
  var G__7296 = o;
  var G__7297 = p;
  var G__7298 = q;
  var G__7299 = r;
  var G__7300 = s;
  var G__7301 = t;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__7282, G__7283, G__7284, G__7285, G__7286, G__7287, G__7288, G__7289, G__7290, G__7291, G__7292, G__7293, G__7294, G__7295, G__7296, G__7297, G__7298, G__7299, G__7300, G__7301) : self__.afn.call(null, G__7282, G__7283, G__7284, G__7285, G__7286, G__7287, G__7288, G__7289, G__7290, G__7291, G__7292, G__7293, G__7294, G__7295, G__7296, G__7297, G__7298, G__7299, G__7300, G__7301);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__7302 = self__.afn;
  var G__7303 = a;
  var G__7304 = b;
  var G__7305 = c;
  var G__7306 = d;
  var G__7307 = e;
  var G__7308 = f;
  var G__7309 = g;
  var G__7310 = h;
  var G__7311 = i;
  var G__7312 = j;
  var G__7313 = k;
  var G__7314 = l;
  var G__7315 = m;
  var G__7316 = n;
  var G__7317 = o;
  var G__7318 = p;
  var G__7319 = q;
  var G__7320 = r;
  var G__7321 = s;
  var G__7322 = t;
  var G__7323 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__7302, G__7303, G__7304, G__7305, G__7306, G__7307, G__7308, G__7309, G__7310, G__7311, G__7312, G__7313, G__7314, G__7315, G__7316, G__7317, G__7318, G__7319, G__7320, G__7321, G__7322, G__7323) : cljs.core.apply.call(null, G__7302, G__7303, G__7304, G__7305, G__7306, G__7307, G__7308, G__7309, G__7310, G__7311, G__7312, G__7313, G__7314, G__7315, G__7316, G__7317, G__7318, G__7319, G__7320, 
  G__7321, G__7322, G__7323);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (cljs.core.fn_QMARK_(o) && !function() {
    var G__7328 = o;
    if (G__7328) {
      var bit__4796__auto__ = G__7328.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4796__auto__ || G__7328.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__7328.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__7328);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__7328);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__4110__auto__ = !(o == null);
    if (and__4110__auto__) {
      var G__7332 = o;
      if (G__7332) {
        var bit__4796__auto__ = G__7332.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4796__auto__ || G__7332.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__7332.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__7332);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__7332);
      }
    } else {
      return and__4110__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function() {
  var cljs$core$disj = null;
  var cljs$core$disj__1 = function(coll) {
    return coll;
  };
  var cljs$core$disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin(coll, k);
    }
  };
  var cljs$core$disj__3 = function() {
    var G__7335__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = cljs$core$disj.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__7336 = ret;
            var G__7337 = cljs.core.first(ks);
            var G__7338 = cljs.core.next(ks);
            coll = G__7336;
            k = G__7337;
            ks = G__7338;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__7335 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__7339__i = 0, G__7339__a = new Array(arguments.length - 2);
        while (G__7339__i < G__7339__a.length) {
          G__7339__a[G__7339__i] = arguments[G__7339__i + 2];
          ++G__7339__i;
        }
        ks = new cljs.core.IndexedSeq(G__7339__a, 0);
      }
      return G__7335__delegate.call(this, coll, k, ks);
    };
    G__7335.cljs$lang$maxFixedArity = 2;
    G__7335.cljs$lang$applyTo = function(arglist__7340) {
      var coll = cljs.core.first(arglist__7340);
      arglist__7340 = cljs.core.next(arglist__7340);
      var k = cljs.core.first(arglist__7340);
      var ks = cljs.core.rest(arglist__7340);
      return G__7335__delegate(coll, k, ks);
    };
    G__7335.cljs$core$IFn$_invoke$arity$variadic = G__7335__delegate;
    return G__7335;
  }();
  cljs$core$disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$disj__1.call(this, coll);
      case 2:
        return cljs$core$disj__2.call(this, coll, k);
      default:
        var G__7341 = null;
        if (arguments.length > 2) {
          var G__7342__i = 0, G__7342__a = new Array(arguments.length - 2);
          while (G__7342__i < G__7342__a.length) {
            G__7342__a[G__7342__i] = arguments[G__7342__i + 2];
            ++G__7342__i;
          }
          G__7341 = new cljs.core.IndexedSeq(G__7342__a, 0);
        }
        return cljs$core$disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__7341);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$disj.cljs$lang$maxFixedArity = 2;
  cljs$core$disj.cljs$lang$applyTo = cljs$core$disj__3.cljs$lang$applyTo;
  cljs$core$disj.cljs$core$IFn$_invoke$arity$1 = cljs$core$disj__1;
  cljs$core$disj.cljs$core$IFn$_invoke$arity$2 = cljs$core$disj__2;
  cljs$core$disj.cljs$core$IFn$_invoke$arity$variadic = cljs$core$disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$disj;
}();
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__7344 = x;
    if (G__7344) {
      var bit__4796__auto__ = G__7344.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4796__auto__ || G__7344.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__7344.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__7344);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__7344);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__7346 = x;
    if (G__7346) {
      var bit__4796__auto__ = G__7346.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4796__auto__ || G__7346.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__7346.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__7346);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__7346);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  var G__7348 = x;
  if (G__7348) {
    var bit__4796__auto__ = G__7348.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4796__auto__ || G__7348.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__7348.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__7348);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__7348);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  var G__7350 = x;
  if (G__7350) {
    var bit__4796__auto__ = G__7350.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4796__auto__ || G__7350.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__7350.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__7350);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__7350);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  var G__7352 = x;
  if (G__7352) {
    var bit__4796__auto__ = G__7352.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4796__auto__ || G__7352.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__7352.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__7352);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__7352);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  var G__7354 = x;
  if (G__7354) {
    var bit__4796__auto__ = G__7354.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4796__auto__ || G__7354.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__7354.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__7354);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__7354);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__7356 = x;
    if (G__7356) {
      var bit__4796__auto__ = G__7356.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4796__auto__ || G__7356.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__7356.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__7356);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__7356);
    }
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  var G__7358 = x;
  if (G__7358) {
    var bit__4796__auto__ = G__7358.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4796__auto__ || G__7358.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__7358.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__7358);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__7358);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  var G__7360 = x;
  if (G__7360) {
    var bit__4789__auto__ = G__7360.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4789__auto__ || G__7360.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var cljs$core$js_obj = null;
  var cljs$core$js_obj__0 = function() {
    var obj7366 = {};
    return obj7366;
  };
  var cljs$core$js_obj__1 = function() {
    var G__7369__delegate = function(keyvals) {
      var G__7367 = goog.object.create;
      var G__7368 = keyvals;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__7367, G__7368) : cljs.core.apply.call(null, G__7367, G__7368);
    };
    var G__7369 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        var G__7370__i = 0, G__7370__a = new Array(arguments.length - 0);
        while (G__7370__i < G__7370__a.length) {
          G__7370__a[G__7370__i] = arguments[G__7370__i + 0];
          ++G__7370__i;
        }
        keyvals = new cljs.core.IndexedSeq(G__7370__a, 0);
      }
      return G__7369__delegate.call(this, keyvals);
    };
    G__7369.cljs$lang$maxFixedArity = 0;
    G__7369.cljs$lang$applyTo = function(arglist__7371) {
      var keyvals = cljs.core.seq(arglist__7371);
      return G__7369__delegate(keyvals);
    };
    G__7369.cljs$core$IFn$_invoke$arity$variadic = G__7369__delegate;
    return G__7369;
  }();
  cljs$core$js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$js_obj__0.call(this);
      default:
        var G__7372 = null;
        if (arguments.length > 0) {
          var G__7373__i = 0, G__7373__a = new Array(arguments.length - 0);
          while (G__7373__i < G__7373__a.length) {
            G__7373__a[G__7373__i] = arguments[G__7373__i + 0];
            ++G__7373__i;
          }
          G__7372 = new cljs.core.IndexedSeq(G__7373__a, 0);
        }
        return cljs$core$js_obj__1.cljs$core$IFn$_invoke$arity$variadic(G__7372);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$js_obj.cljs$lang$maxFixedArity = 0;
  cljs$core$js_obj.cljs$lang$applyTo = cljs$core$js_obj__1.cljs$lang$applyTo;
  cljs$core$js_obj.cljs$core$IFn$_invoke$arity$0 = cljs$core$js_obj__0;
  cljs$core$js_obj.cljs$core$IFn$_invoke$arity$variadic = cljs$core$js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$js_obj;
}();
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__7376_7378 = obj;
  var G__7377_7379 = function(G__7376_7378, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__7376_7378, keys);
  goog.object.forEach(G__7376_7378, G__7377_7379);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__7380 = i__$1 + 1;
      var G__7381 = j__$1 + 1;
      var G__7382 = len__$1 - 1;
      i__$1 = G__7380;
      j__$1 = G__7381;
      len__$1 = G__7382;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__7383 = i__$1 - 1;
      var G__7384 = j__$1 - 1;
      var G__7385 = len__$1 - 1;
      i__$1 = G__7383;
      j__$1 = G__7384;
      len__$1 = G__7385;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj7387 = {};
  return obj7387;
}();
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__7389 = s;
    if (G__7389) {
      var bit__4796__auto__ = G__7389.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4796__auto__ || G__7389.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__7389.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__7389);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__7389);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  var G__7391 = s;
  if (G__7391) {
    var bit__4796__auto__ = G__7391.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4796__auto__ || G__7391.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__7391.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__7391);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__7391);
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__4122__auto__ = cljs.core.fn_QMARK_(f);
  if (or__4122__auto__) {
    return or__4122__auto__;
  } else {
    var G__7395 = f;
    if (G__7395) {
      var bit__4796__auto__ = G__7395.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4796__auto__ || G__7395.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__7395.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__7395);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__7395);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && cljs.core.not(function() {
    var G__7408 = n;
    return isNaN(G__7408);
  }()) && !(n === Infinity) && function() {
    var G__7409 = n;
    return parseFloat(G__7409);
  }() === function() {
    var G__7410 = n;
    var G__7411 = 10;
    return parseInt(G__7410, G__7411);
  }();
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var cljs$core$distinct_QMARK_ = null;
  var cljs$core$distinct_QMARK___1 = function(x) {
    return true;
  };
  var cljs$core$distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var cljs$core$distinct_QMARK___3 = function() {
    var G__7412__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first(xs);
          var etc = cljs.core.next(xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_(s, x__$1)) {
              return false;
            } else {
              var G__7413 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
              var G__7414 = etc;
              s = G__7413;
              xs = G__7414;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__7412 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7415__i = 0, G__7415__a = new Array(arguments.length - 2);
        while (G__7415__i < G__7415__a.length) {
          G__7415__a[G__7415__i] = arguments[G__7415__i + 2];
          ++G__7415__i;
        }
        more = new cljs.core.IndexedSeq(G__7415__a, 0);
      }
      return G__7412__delegate.call(this, x, y, more);
    };
    G__7412.cljs$lang$maxFixedArity = 2;
    G__7412.cljs$lang$applyTo = function(arglist__7416) {
      var x = cljs.core.first(arglist__7416);
      arglist__7416 = cljs.core.next(arglist__7416);
      var y = cljs.core.first(arglist__7416);
      var more = cljs.core.rest(arglist__7416);
      return G__7412__delegate(x, y, more);
    };
    G__7412.cljs$core$IFn$_invoke$arity$variadic = G__7412__delegate;
    return G__7412;
  }();
  cljs$core$distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$distinct_QMARK___1.call(this, x);
      case 2:
        return cljs$core$distinct_QMARK___2.call(this, x, y);
      default:
        var G__7417 = null;
        if (arguments.length > 2) {
          var G__7418__i = 0, G__7418__a = new Array(arguments.length - 2);
          while (G__7418__i < G__7418__a.length) {
            G__7418__a[G__7418__i] = arguments[G__7418__i + 2];
            ++G__7418__i;
          }
          G__7417 = new cljs.core.IndexedSeq(G__7418__a, 0);
        }
        return cljs$core$distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7417);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  cljs$core$distinct_QMARK_.cljs$lang$applyTo = cljs$core$distinct_QMARK___3.cljs$lang$applyTo;
  cljs$core$distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = cljs$core$distinct_QMARK___1;
  cljs$core$distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = cljs$core$distinct_QMARK___2;
  cljs$core$distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$distinct_QMARK_;
}();
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type(x) === cljs.core.type(y)) {
          if (function() {
            var G__7422 = x;
            if (G__7422) {
              var bit__4789__auto__ = G__7422.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4789__auto__ || G__7422.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return x.cljs$core$IComparable$_compare$arity$2(null, y);
          } else {
            var G__7423 = x;
            var G__7424 = y;
            return goog.array.defaultCompare(G__7423, G__7424);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var cljs$core$compare_indexed = null;
  var cljs$core$compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count(xs);
    var yl = cljs.core.count(ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return cljs$core$compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  };
  var cljs$core$compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
      if (d === 0 && n + 1 < len) {
        var G__7429 = xs;
        var G__7430 = ys;
        var G__7431 = len;
        var G__7432 = n + 1;
        xs = G__7429;
        ys = G__7430;
        len = G__7431;
        n = G__7432;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  cljs$core$compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$compare_indexed__2.call(this, xs, ys);
      case 4:
        return cljs$core$compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$compare_indexed.cljs$core$IFn$_invoke$arity$2 = cljs$core$compare_indexed__2;
  cljs$core$compare_indexed.cljs$core$IFn$_invoke$arity$4 = cljs$core$compare_indexed__4;
  return cljs$core$compare_indexed;
}();
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = function() {
        var G__7437 = x;
        var G__7438 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7437, G__7438) : f.call(null, G__7437, G__7438);
      }();
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(function() {
            var G__7439 = y;
            var G__7440 = x;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7439, G__7440) : f.call(null, G__7439, G__7440);
          }())) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var cljs$core$sort = null;
  var cljs$core$sort__1 = function(coll) {
    return cljs$core$sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
  };
  var cljs$core$sort__2 = function(comp, coll) {
    if (cljs.core.seq(coll)) {
      var a = function() {
        var G__7446 = coll;
        return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__7446) : cljs.core.to_array.call(null, G__7446);
      }();
      var G__7447_7449 = a;
      var G__7448_7450 = cljs.core.fn__GT_comparator(comp);
      goog.array.stableSort(G__7447_7449, G__7448_7450);
      return cljs.core.seq(a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  cljs$core$sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$sort__1.call(this, comp);
      case 2:
        return cljs$core$sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$sort.cljs$core$IFn$_invoke$arity$1 = cljs$core$sort__1;
  cljs$core$sort.cljs$core$IFn$_invoke$arity$2 = cljs$core$sort__2;
  return cljs$core$sort;
}();
cljs.core.sort_by = function() {
  var cljs$core$sort_by = null;
  var cljs$core$sort_by__2 = function(keyfn, coll) {
    return cljs$core$sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
  };
  var cljs$core$sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
      return cljs.core.fn__GT_comparator(comp).call(null, function() {
        var G__7456 = x;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__7456) : keyfn.call(null, G__7456);
      }(), function() {
        var G__7457 = y;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__7457) : keyfn.call(null, G__7457);
      }());
    }, coll);
  };
  cljs$core$sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$sort_by__2.call(this, keyfn, comp);
      case 3:
        return cljs$core$sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$sort_by.cljs$core$IFn$_invoke$arity$2 = cljs$core$sort_by__2;
  cljs$core$sort_by.cljs$core$IFn$_invoke$arity$3 = cljs$core$sort_by__3;
  return cljs$core$sort_by;
}();
cljs.core.seq_reduce = function() {
  var cljs$core$seq_reduce = null;
  var cljs$core$seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq(coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      var G__7463 = f;
      var G__7464 = cljs.core.first(s);
      var G__7465 = cljs.core.next(s);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__7463, G__7464, G__7465) : cljs.core.reduce.call(null, G__7463, G__7464, G__7465);
    } else {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }
  };
  var cljs$core$seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq(coll);
    while (true) {
      if (coll__$1) {
        var nval = function() {
          var G__7466 = val__$1;
          var G__7467 = cljs.core.first(coll__$1);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7466, G__7467) : f.call(null, G__7466, G__7467);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__7468 = nval;
          var G__7469 = cljs.core.next(coll__$1);
          val__$1 = G__7468;
          coll__$1 = G__7469;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  cljs$core$seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$seq_reduce__2.call(this, f, val);
      case 3:
        return cljs$core$seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$seq_reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$seq_reduce__2;
  cljs$core$seq_reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$seq_reduce__3;
  return cljs$core$seq_reduce;
}();
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = function() {
    var G__7473 = coll;
    return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__7473) : cljs.core.to_array.call(null, G__7473);
  }();
  var G__7474_7476 = a;
  goog.array.shuffle(G__7474_7476);
  var G__7475 = a;
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(G__7475) : cljs.core.vec.call(null, G__7475);
};
cljs.core.reduce = function() {
  var cljs$core$reduce = null;
  var cljs$core$reduce__2 = function(f, coll) {
    if (function() {
      var G__7479 = coll;
      if (G__7479) {
        var bit__4789__auto__ = G__7479.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4789__auto__ || G__7479.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
          }
        }
      }
    }
  };
  var cljs$core$reduce__3 = function(f, val, coll) {
    if (function() {
      var G__7480 = coll;
      if (G__7480) {
        var bit__4789__auto__ = G__7480.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4789__auto__ || G__7480.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
          }
        }
      }
    }
  };
  cljs$core$reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$reduce__2.call(this, f, val);
      case 3:
        return cljs$core$reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$reduce__2;
  cljs$core$reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$reduce__3;
  return cljs$core$reduce;
}();
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function() {
  var cljs$core$completing = null;
  var cljs$core$completing__1 = function(f) {
    return cljs$core$completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
  };
  var cljs$core$completing__2 = function(f, cf) {
    return function() {
      var G__7489 = null;
      var G__7489__0 = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      };
      var G__7489__1 = function(x) {
        var G__7486 = x;
        return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(G__7486) : cf.call(null, G__7486);
      };
      var G__7489__2 = function(x, y) {
        var G__7487 = x;
        var G__7488 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7487, G__7488) : f.call(null, G__7487, G__7488);
      };
      G__7489 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__7489__0.call(this);
          case 1:
            return G__7489__1.call(this, x);
          case 2:
            return G__7489__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7489.cljs$core$IFn$_invoke$arity$0 = G__7489__0;
      G__7489.cljs$core$IFn$_invoke$arity$1 = G__7489__1;
      G__7489.cljs$core$IFn$_invoke$arity$2 = G__7489__2;
      return G__7489;
    }();
  };
  cljs$core$completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return cljs$core$completing__1.call(this, f);
      case 2:
        return cljs$core$completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$completing.cljs$core$IFn$_invoke$arity$1 = cljs$core$completing__1;
  cljs$core$completing.cljs$core$IFn$_invoke$arity$2 = cljs$core$completing__2;
  return cljs$core$completing;
}();
cljs.core.transduce = function() {
  var cljs$core$transduce = null;
  var cljs$core$transduce__3 = function(xform, f, coll) {
    return cljs$core$transduce.cljs$core$IFn$_invoke$arity$4(xform, f, function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }(), coll);
  };
  var cljs$core$transduce__4 = function(xform, f, init, coll) {
    var f__$1 = function() {
      var G__7496 = f;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__7496) : xform.call(null, G__7496);
    }();
    var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
    var G__7497 = ret;
    return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(G__7497) : f__$1.call(null, G__7497);
  };
  cljs$core$transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return cljs$core$transduce__3.call(this, xform, f, init);
      case 4:
        return cljs$core$transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$transduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$transduce__3;
  cljs$core$transduce.cljs$core$IFn$_invoke$arity$4 = cljs$core$transduce__4;
  return cljs$core$transduce;
}();
cljs.core._PLUS_ = function() {
  var cljs$core$_PLUS_ = null;
  var cljs$core$_PLUS___0 = function() {
    return 0;
  };
  var cljs$core$_PLUS___1 = function(x) {
    return x;
  };
  var cljs$core$_PLUS___2 = function(x, y) {
    return x + y;
  };
  var cljs$core$_PLUS___3 = function() {
    var G__7498__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$_PLUS_, x + y, more);
    };
    var G__7498 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7499__i = 0, G__7499__a = new Array(arguments.length - 2);
        while (G__7499__i < G__7499__a.length) {
          G__7499__a[G__7499__i] = arguments[G__7499__i + 2];
          ++G__7499__i;
        }
        more = new cljs.core.IndexedSeq(G__7499__a, 0);
      }
      return G__7498__delegate.call(this, x, y, more);
    };
    G__7498.cljs$lang$maxFixedArity = 2;
    G__7498.cljs$lang$applyTo = function(arglist__7500) {
      var x = cljs.core.first(arglist__7500);
      arglist__7500 = cljs.core.next(arglist__7500);
      var y = cljs.core.first(arglist__7500);
      var more = cljs.core.rest(arglist__7500);
      return G__7498__delegate(x, y, more);
    };
    G__7498.cljs$core$IFn$_invoke$arity$variadic = G__7498__delegate;
    return G__7498;
  }();
  cljs$core$_PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$_PLUS___0.call(this);
      case 1:
        return cljs$core$_PLUS___1.call(this, x);
      case 2:
        return cljs$core$_PLUS___2.call(this, x, y);
      default:
        var G__7501 = null;
        if (arguments.length > 2) {
          var G__7502__i = 0, G__7502__a = new Array(arguments.length - 2);
          while (G__7502__i < G__7502__a.length) {
            G__7502__a[G__7502__i] = arguments[G__7502__i + 2];
            ++G__7502__i;
          }
          G__7501 = new cljs.core.IndexedSeq(G__7502__a, 0);
        }
        return cljs$core$_PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7501);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_PLUS_.cljs$lang$maxFixedArity = 2;
  cljs$core$_PLUS_.cljs$lang$applyTo = cljs$core$_PLUS___3.cljs$lang$applyTo;
  cljs$core$_PLUS_.cljs$core$IFn$_invoke$arity$0 = cljs$core$_PLUS___0;
  cljs$core$_PLUS_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_PLUS___1;
  cljs$core$_PLUS_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_PLUS___2;
  cljs$core$_PLUS_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_PLUS_;
}();
cljs.core._ = function() {
  var cljs$core$_ = null;
  var cljs$core$___1 = function(x) {
    return-x;
  };
  var cljs$core$___2 = function(x, y) {
    return x - y;
  };
  var cljs$core$___3 = function() {
    var G__7503__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$_, x - y, more);
    };
    var G__7503 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7504__i = 0, G__7504__a = new Array(arguments.length - 2);
        while (G__7504__i < G__7504__a.length) {
          G__7504__a[G__7504__i] = arguments[G__7504__i + 2];
          ++G__7504__i;
        }
        more = new cljs.core.IndexedSeq(G__7504__a, 0);
      }
      return G__7503__delegate.call(this, x, y, more);
    };
    G__7503.cljs$lang$maxFixedArity = 2;
    G__7503.cljs$lang$applyTo = function(arglist__7505) {
      var x = cljs.core.first(arglist__7505);
      arglist__7505 = cljs.core.next(arglist__7505);
      var y = cljs.core.first(arglist__7505);
      var more = cljs.core.rest(arglist__7505);
      return G__7503__delegate(x, y, more);
    };
    G__7503.cljs$core$IFn$_invoke$arity$variadic = G__7503__delegate;
    return G__7503;
  }();
  cljs$core$_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$___1.call(this, x);
      case 2:
        return cljs$core$___2.call(this, x, y);
      default:
        var G__7506 = null;
        if (arguments.length > 2) {
          var G__7507__i = 0, G__7507__a = new Array(arguments.length - 2);
          while (G__7507__i < G__7507__a.length) {
            G__7507__a[G__7507__i] = arguments[G__7507__i + 2];
            ++G__7507__i;
          }
          G__7506 = new cljs.core.IndexedSeq(G__7507__a, 0);
        }
        return cljs$core$___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7506);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_.cljs$lang$maxFixedArity = 2;
  cljs$core$_.cljs$lang$applyTo = cljs$core$___3.cljs$lang$applyTo;
  cljs$core$_.cljs$core$IFn$_invoke$arity$1 = cljs$core$___1;
  cljs$core$_.cljs$core$IFn$_invoke$arity$2 = cljs$core$___2;
  cljs$core$_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_;
}();
cljs.core._STAR_ = function() {
  var cljs$core$_STAR_ = null;
  var cljs$core$_STAR___0 = function() {
    return 1;
  };
  var cljs$core$_STAR___1 = function(x) {
    return x;
  };
  var cljs$core$_STAR___2 = function(x, y) {
    return x * y;
  };
  var cljs$core$_STAR___3 = function() {
    var G__7508__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$_STAR_, x * y, more);
    };
    var G__7508 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7509__i = 0, G__7509__a = new Array(arguments.length - 2);
        while (G__7509__i < G__7509__a.length) {
          G__7509__a[G__7509__i] = arguments[G__7509__i + 2];
          ++G__7509__i;
        }
        more = new cljs.core.IndexedSeq(G__7509__a, 0);
      }
      return G__7508__delegate.call(this, x, y, more);
    };
    G__7508.cljs$lang$maxFixedArity = 2;
    G__7508.cljs$lang$applyTo = function(arglist__7510) {
      var x = cljs.core.first(arglist__7510);
      arglist__7510 = cljs.core.next(arglist__7510);
      var y = cljs.core.first(arglist__7510);
      var more = cljs.core.rest(arglist__7510);
      return G__7508__delegate(x, y, more);
    };
    G__7508.cljs$core$IFn$_invoke$arity$variadic = G__7508__delegate;
    return G__7508;
  }();
  cljs$core$_STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$_STAR___0.call(this);
      case 1:
        return cljs$core$_STAR___1.call(this, x);
      case 2:
        return cljs$core$_STAR___2.call(this, x, y);
      default:
        var G__7511 = null;
        if (arguments.length > 2) {
          var G__7512__i = 0, G__7512__a = new Array(arguments.length - 2);
          while (G__7512__i < G__7512__a.length) {
            G__7512__a[G__7512__i] = arguments[G__7512__i + 2];
            ++G__7512__i;
          }
          G__7511 = new cljs.core.IndexedSeq(G__7512__a, 0);
        }
        return cljs$core$_STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7511);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_STAR_.cljs$lang$maxFixedArity = 2;
  cljs$core$_STAR_.cljs$lang$applyTo = cljs$core$_STAR___3.cljs$lang$applyTo;
  cljs$core$_STAR_.cljs$core$IFn$_invoke$arity$0 = cljs$core$_STAR___0;
  cljs$core$_STAR_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_STAR___1;
  cljs$core$_STAR_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_STAR___2;
  cljs$core$_STAR_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_STAR_;
}();
cljs.core._SLASH_ = function() {
  var cljs$core$_SLASH_ = null;
  var cljs$core$_SLASH___1 = function(x) {
    return cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var cljs$core$_SLASH___2 = function(x, y) {
    return x / y;
  };
  var cljs$core$_SLASH___3 = function() {
    var G__7517__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$_SLASH_, cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__7517 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7518__i = 0, G__7518__a = new Array(arguments.length - 2);
        while (G__7518__i < G__7518__a.length) {
          G__7518__a[G__7518__i] = arguments[G__7518__i + 2];
          ++G__7518__i;
        }
        more = new cljs.core.IndexedSeq(G__7518__a, 0);
      }
      return G__7517__delegate.call(this, x, y, more);
    };
    G__7517.cljs$lang$maxFixedArity = 2;
    G__7517.cljs$lang$applyTo = function(arglist__7519) {
      var x = cljs.core.first(arglist__7519);
      arglist__7519 = cljs.core.next(arglist__7519);
      var y = cljs.core.first(arglist__7519);
      var more = cljs.core.rest(arglist__7519);
      return G__7517__delegate(x, y, more);
    };
    G__7517.cljs$core$IFn$_invoke$arity$variadic = G__7517__delegate;
    return G__7517;
  }();
  cljs$core$_SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_SLASH___1.call(this, x);
      case 2:
        return cljs$core$_SLASH___2.call(this, x, y);
      default:
        var G__7520 = null;
        if (arguments.length > 2) {
          var G__7521__i = 0, G__7521__a = new Array(arguments.length - 2);
          while (G__7521__i < G__7521__a.length) {
            G__7521__a[G__7521__i] = arguments[G__7521__i + 2];
            ++G__7521__i;
          }
          G__7520 = new cljs.core.IndexedSeq(G__7521__a, 0);
        }
        return cljs$core$_SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7520);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_SLASH_.cljs$lang$maxFixedArity = 2;
  cljs$core$_SLASH_.cljs$lang$applyTo = cljs$core$_SLASH___3.cljs$lang$applyTo;
  cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_SLASH___1;
  cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_SLASH___2;
  cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_SLASH_;
}();
cljs.core._LT_ = function() {
  var cljs$core$_LT_ = null;
  var cljs$core$_LT___1 = function(x) {
    return true;
  };
  var cljs$core$_LT___2 = function(x, y) {
    return x < y;
  };
  var cljs$core$_LT___3 = function() {
    var G__7522__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next(more)) {
            var G__7523 = y;
            var G__7524 = cljs.core.first(more);
            var G__7525 = cljs.core.next(more);
            x = G__7523;
            y = G__7524;
            more = G__7525;
            continue;
          } else {
            return y < cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__7522 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7526__i = 0, G__7526__a = new Array(arguments.length - 2);
        while (G__7526__i < G__7526__a.length) {
          G__7526__a[G__7526__i] = arguments[G__7526__i + 2];
          ++G__7526__i;
        }
        more = new cljs.core.IndexedSeq(G__7526__a, 0);
      }
      return G__7522__delegate.call(this, x, y, more);
    };
    G__7522.cljs$lang$maxFixedArity = 2;
    G__7522.cljs$lang$applyTo = function(arglist__7527) {
      var x = cljs.core.first(arglist__7527);
      arglist__7527 = cljs.core.next(arglist__7527);
      var y = cljs.core.first(arglist__7527);
      var more = cljs.core.rest(arglist__7527);
      return G__7522__delegate(x, y, more);
    };
    G__7522.cljs$core$IFn$_invoke$arity$variadic = G__7522__delegate;
    return G__7522;
  }();
  cljs$core$_LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_LT___1.call(this, x);
      case 2:
        return cljs$core$_LT___2.call(this, x, y);
      default:
        var G__7528 = null;
        if (arguments.length > 2) {
          var G__7529__i = 0, G__7529__a = new Array(arguments.length - 2);
          while (G__7529__i < G__7529__a.length) {
            G__7529__a[G__7529__i] = arguments[G__7529__i + 2];
            ++G__7529__i;
          }
          G__7528 = new cljs.core.IndexedSeq(G__7529__a, 0);
        }
        return cljs$core$_LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7528);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_LT_.cljs$lang$maxFixedArity = 2;
  cljs$core$_LT_.cljs$lang$applyTo = cljs$core$_LT___3.cljs$lang$applyTo;
  cljs$core$_LT_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_LT___1;
  cljs$core$_LT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_LT___2;
  cljs$core$_LT_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_LT_;
}();
cljs.core._LT__EQ_ = function() {
  var cljs$core$_LT__EQ_ = null;
  var cljs$core$_LT__EQ___1 = function(x) {
    return true;
  };
  var cljs$core$_LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var cljs$core$_LT__EQ___3 = function() {
    var G__7530__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next(more)) {
            var G__7531 = y;
            var G__7532 = cljs.core.first(more);
            var G__7533 = cljs.core.next(more);
            x = G__7531;
            y = G__7532;
            more = G__7533;
            continue;
          } else {
            return y <= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__7530 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7534__i = 0, G__7534__a = new Array(arguments.length - 2);
        while (G__7534__i < G__7534__a.length) {
          G__7534__a[G__7534__i] = arguments[G__7534__i + 2];
          ++G__7534__i;
        }
        more = new cljs.core.IndexedSeq(G__7534__a, 0);
      }
      return G__7530__delegate.call(this, x, y, more);
    };
    G__7530.cljs$lang$maxFixedArity = 2;
    G__7530.cljs$lang$applyTo = function(arglist__7535) {
      var x = cljs.core.first(arglist__7535);
      arglist__7535 = cljs.core.next(arglist__7535);
      var y = cljs.core.first(arglist__7535);
      var more = cljs.core.rest(arglist__7535);
      return G__7530__delegate(x, y, more);
    };
    G__7530.cljs$core$IFn$_invoke$arity$variadic = G__7530__delegate;
    return G__7530;
  }();
  cljs$core$_LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_LT__EQ___1.call(this, x);
      case 2:
        return cljs$core$_LT__EQ___2.call(this, x, y);
      default:
        var G__7536 = null;
        if (arguments.length > 2) {
          var G__7537__i = 0, G__7537__a = new Array(arguments.length - 2);
          while (G__7537__i < G__7537__a.length) {
            G__7537__a[G__7537__i] = arguments[G__7537__i + 2];
            ++G__7537__i;
          }
          G__7536 = new cljs.core.IndexedSeq(G__7537__a, 0);
        }
        return cljs$core$_LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7536);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_LT__EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$_LT__EQ_.cljs$lang$applyTo = cljs$core$_LT__EQ___3.cljs$lang$applyTo;
  cljs$core$_LT__EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_LT__EQ___1;
  cljs$core$_LT__EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_LT__EQ___2;
  cljs$core$_LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_LT__EQ_;
}();
cljs.core._GT_ = function() {
  var cljs$core$_GT_ = null;
  var cljs$core$_GT___1 = function(x) {
    return true;
  };
  var cljs$core$_GT___2 = function(x, y) {
    return x > y;
  };
  var cljs$core$_GT___3 = function() {
    var G__7538__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next(more)) {
            var G__7539 = y;
            var G__7540 = cljs.core.first(more);
            var G__7541 = cljs.core.next(more);
            x = G__7539;
            y = G__7540;
            more = G__7541;
            continue;
          } else {
            return y > cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__7538 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7542__i = 0, G__7542__a = new Array(arguments.length - 2);
        while (G__7542__i < G__7542__a.length) {
          G__7542__a[G__7542__i] = arguments[G__7542__i + 2];
          ++G__7542__i;
        }
        more = new cljs.core.IndexedSeq(G__7542__a, 0);
      }
      return G__7538__delegate.call(this, x, y, more);
    };
    G__7538.cljs$lang$maxFixedArity = 2;
    G__7538.cljs$lang$applyTo = function(arglist__7543) {
      var x = cljs.core.first(arglist__7543);
      arglist__7543 = cljs.core.next(arglist__7543);
      var y = cljs.core.first(arglist__7543);
      var more = cljs.core.rest(arglist__7543);
      return G__7538__delegate(x, y, more);
    };
    G__7538.cljs$core$IFn$_invoke$arity$variadic = G__7538__delegate;
    return G__7538;
  }();
  cljs$core$_GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_GT___1.call(this, x);
      case 2:
        return cljs$core$_GT___2.call(this, x, y);
      default:
        var G__7544 = null;
        if (arguments.length > 2) {
          var G__7545__i = 0, G__7545__a = new Array(arguments.length - 2);
          while (G__7545__i < G__7545__a.length) {
            G__7545__a[G__7545__i] = arguments[G__7545__i + 2];
            ++G__7545__i;
          }
          G__7544 = new cljs.core.IndexedSeq(G__7545__a, 0);
        }
        return cljs$core$_GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7544);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_GT_.cljs$lang$maxFixedArity = 2;
  cljs$core$_GT_.cljs$lang$applyTo = cljs$core$_GT___3.cljs$lang$applyTo;
  cljs$core$_GT_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_GT___1;
  cljs$core$_GT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_GT___2;
  cljs$core$_GT_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_GT_;
}();
cljs.core._GT__EQ_ = function() {
  var cljs$core$_GT__EQ_ = null;
  var cljs$core$_GT__EQ___1 = function(x) {
    return true;
  };
  var cljs$core$_GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var cljs$core$_GT__EQ___3 = function() {
    var G__7546__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next(more)) {
            var G__7547 = y;
            var G__7548 = cljs.core.first(more);
            var G__7549 = cljs.core.next(more);
            x = G__7547;
            y = G__7548;
            more = G__7549;
            continue;
          } else {
            return y >= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__7546 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7550__i = 0, G__7550__a = new Array(arguments.length - 2);
        while (G__7550__i < G__7550__a.length) {
          G__7550__a[G__7550__i] = arguments[G__7550__i + 2];
          ++G__7550__i;
        }
        more = new cljs.core.IndexedSeq(G__7550__a, 0);
      }
      return G__7546__delegate.call(this, x, y, more);
    };
    G__7546.cljs$lang$maxFixedArity = 2;
    G__7546.cljs$lang$applyTo = function(arglist__7551) {
      var x = cljs.core.first(arglist__7551);
      arglist__7551 = cljs.core.next(arglist__7551);
      var y = cljs.core.first(arglist__7551);
      var more = cljs.core.rest(arglist__7551);
      return G__7546__delegate(x, y, more);
    };
    G__7546.cljs$core$IFn$_invoke$arity$variadic = G__7546__delegate;
    return G__7546;
  }();
  cljs$core$_GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_GT__EQ___1.call(this, x);
      case 2:
        return cljs$core$_GT__EQ___2.call(this, x, y);
      default:
        var G__7552 = null;
        if (arguments.length > 2) {
          var G__7553__i = 0, G__7553__a = new Array(arguments.length - 2);
          while (G__7553__i < G__7553__a.length) {
            G__7553__a[G__7553__i] = arguments[G__7553__i + 2];
            ++G__7553__i;
          }
          G__7552 = new cljs.core.IndexedSeq(G__7553__a, 0);
        }
        return cljs$core$_GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7552);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_GT__EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$_GT__EQ_.cljs$lang$applyTo = cljs$core$_GT__EQ___3.cljs$lang$applyTo;
  cljs$core$_GT__EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_GT__EQ___1;
  cljs$core$_GT__EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_GT__EQ___2;
  cljs$core$_GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_GT__EQ_;
}();
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var cljs$core$max = null;
  var cljs$core$max__1 = function(x) {
    return x;
  };
  var cljs$core$max__2 = function(x, y) {
    var x__4434__auto__ = x;
    var y__4435__auto__ = y;
    return x__4434__auto__ > y__4435__auto__ ? x__4434__auto__ : y__4435__auto__;
  };
  var cljs$core$max__3 = function() {
    var G__7554__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$max, function() {
        var x__4434__auto__ = x;
        var y__4435__auto__ = y;
        return x__4434__auto__ > y__4435__auto__ ? x__4434__auto__ : y__4435__auto__;
      }(), more);
    };
    var G__7554 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7555__i = 0, G__7555__a = new Array(arguments.length - 2);
        while (G__7555__i < G__7555__a.length) {
          G__7555__a[G__7555__i] = arguments[G__7555__i + 2];
          ++G__7555__i;
        }
        more = new cljs.core.IndexedSeq(G__7555__a, 0);
      }
      return G__7554__delegate.call(this, x, y, more);
    };
    G__7554.cljs$lang$maxFixedArity = 2;
    G__7554.cljs$lang$applyTo = function(arglist__7556) {
      var x = cljs.core.first(arglist__7556);
      arglist__7556 = cljs.core.next(arglist__7556);
      var y = cljs.core.first(arglist__7556);
      var more = cljs.core.rest(arglist__7556);
      return G__7554__delegate(x, y, more);
    };
    G__7554.cljs$core$IFn$_invoke$arity$variadic = G__7554__delegate;
    return G__7554;
  }();
  cljs$core$max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$max__1.call(this, x);
      case 2:
        return cljs$core$max__2.call(this, x, y);
      default:
        var G__7557 = null;
        if (arguments.length > 2) {
          var G__7558__i = 0, G__7558__a = new Array(arguments.length - 2);
          while (G__7558__i < G__7558__a.length) {
            G__7558__a[G__7558__i] = arguments[G__7558__i + 2];
            ++G__7558__i;
          }
          G__7557 = new cljs.core.IndexedSeq(G__7558__a, 0);
        }
        return cljs$core$max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7557);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$max.cljs$lang$maxFixedArity = 2;
  cljs$core$max.cljs$lang$applyTo = cljs$core$max__3.cljs$lang$applyTo;
  cljs$core$max.cljs$core$IFn$_invoke$arity$1 = cljs$core$max__1;
  cljs$core$max.cljs$core$IFn$_invoke$arity$2 = cljs$core$max__2;
  cljs$core$max.cljs$core$IFn$_invoke$arity$variadic = cljs$core$max__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$max;
}();
cljs.core.min = function() {
  var cljs$core$min = null;
  var cljs$core$min__1 = function(x) {
    return x;
  };
  var cljs$core$min__2 = function(x, y) {
    var x__4441__auto__ = x;
    var y__4442__auto__ = y;
    return x__4441__auto__ < y__4442__auto__ ? x__4441__auto__ : y__4442__auto__;
  };
  var cljs$core$min__3 = function() {
    var G__7559__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$min, function() {
        var x__4441__auto__ = x;
        var y__4442__auto__ = y;
        return x__4441__auto__ < y__4442__auto__ ? x__4441__auto__ : y__4442__auto__;
      }(), more);
    };
    var G__7559 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7560__i = 0, G__7560__a = new Array(arguments.length - 2);
        while (G__7560__i < G__7560__a.length) {
          G__7560__a[G__7560__i] = arguments[G__7560__i + 2];
          ++G__7560__i;
        }
        more = new cljs.core.IndexedSeq(G__7560__a, 0);
      }
      return G__7559__delegate.call(this, x, y, more);
    };
    G__7559.cljs$lang$maxFixedArity = 2;
    G__7559.cljs$lang$applyTo = function(arglist__7561) {
      var x = cljs.core.first(arglist__7561);
      arglist__7561 = cljs.core.next(arglist__7561);
      var y = cljs.core.first(arglist__7561);
      var more = cljs.core.rest(arglist__7561);
      return G__7559__delegate(x, y, more);
    };
    G__7559.cljs$core$IFn$_invoke$arity$variadic = G__7559__delegate;
    return G__7559;
  }();
  cljs$core$min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$min__1.call(this, x);
      case 2:
        return cljs$core$min__2.call(this, x, y);
      default:
        var G__7562 = null;
        if (arguments.length > 2) {
          var G__7563__i = 0, G__7563__a = new Array(arguments.length - 2);
          while (G__7563__i < G__7563__a.length) {
            G__7563__a[G__7563__i] = arguments[G__7563__i + 2];
            ++G__7563__i;
          }
          G__7562 = new cljs.core.IndexedSeq(G__7563__a, 0);
        }
        return cljs$core$min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7562);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$min.cljs$lang$maxFixedArity = 2;
  cljs$core$min.cljs$lang$applyTo = cljs$core$min__3.cljs$lang$applyTo;
  cljs$core$min.cljs$core$IFn$_invoke$arity$1 = cljs$core$min__1;
  cljs$core$min.cljs$core$IFn$_invoke$arity$2 = cljs$core$min__2;
  cljs$core$min.cljs$core$IFn$_invoke$arity$variadic = cljs$core$min__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$min;
}();
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var cljs$core$unchecked_add = null;
  var cljs$core$unchecked_add__0 = function() {
    return 0;
  };
  var cljs$core$unchecked_add__1 = function(x) {
    return x;
  };
  var cljs$core$unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var cljs$core$unchecked_add__3 = function() {
    var G__7564__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_add, x + y, more);
    };
    var G__7564 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7565__i = 0, G__7565__a = new Array(arguments.length - 2);
        while (G__7565__i < G__7565__a.length) {
          G__7565__a[G__7565__i] = arguments[G__7565__i + 2];
          ++G__7565__i;
        }
        more = new cljs.core.IndexedSeq(G__7565__a, 0);
      }
      return G__7564__delegate.call(this, x, y, more);
    };
    G__7564.cljs$lang$maxFixedArity = 2;
    G__7564.cljs$lang$applyTo = function(arglist__7566) {
      var x = cljs.core.first(arglist__7566);
      arglist__7566 = cljs.core.next(arglist__7566);
      var y = cljs.core.first(arglist__7566);
      var more = cljs.core.rest(arglist__7566);
      return G__7564__delegate(x, y, more);
    };
    G__7564.cljs$core$IFn$_invoke$arity$variadic = G__7564__delegate;
    return G__7564;
  }();
  cljs$core$unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$unchecked_add__0.call(this);
      case 1:
        return cljs$core$unchecked_add__1.call(this, x);
      case 2:
        return cljs$core$unchecked_add__2.call(this, x, y);
      default:
        var G__7567 = null;
        if (arguments.length > 2) {
          var G__7568__i = 0, G__7568__a = new Array(arguments.length - 2);
          while (G__7568__i < G__7568__a.length) {
            G__7568__a[G__7568__i] = arguments[G__7568__i + 2];
            ++G__7568__i;
          }
          G__7567 = new cljs.core.IndexedSeq(G__7568__a, 0);
        }
        return cljs$core$unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7567);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_add.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_add.cljs$lang$applyTo = cljs$core$unchecked_add__3.cljs$lang$applyTo;
  cljs$core$unchecked_add.cljs$core$IFn$_invoke$arity$0 = cljs$core$unchecked_add__0;
  cljs$core$unchecked_add.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_add__1;
  cljs$core$unchecked_add.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_add__2;
  cljs$core$unchecked_add.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var cljs$core$unchecked_add_int = null;
  var cljs$core$unchecked_add_int__0 = function() {
    return 0;
  };
  var cljs$core$unchecked_add_int__1 = function(x) {
    return x;
  };
  var cljs$core$unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var cljs$core$unchecked_add_int__3 = function() {
    var G__7569__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_add_int, x + y, more);
    };
    var G__7569 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7570__i = 0, G__7570__a = new Array(arguments.length - 2);
        while (G__7570__i < G__7570__a.length) {
          G__7570__a[G__7570__i] = arguments[G__7570__i + 2];
          ++G__7570__i;
        }
        more = new cljs.core.IndexedSeq(G__7570__a, 0);
      }
      return G__7569__delegate.call(this, x, y, more);
    };
    G__7569.cljs$lang$maxFixedArity = 2;
    G__7569.cljs$lang$applyTo = function(arglist__7571) {
      var x = cljs.core.first(arglist__7571);
      arglist__7571 = cljs.core.next(arglist__7571);
      var y = cljs.core.first(arglist__7571);
      var more = cljs.core.rest(arglist__7571);
      return G__7569__delegate(x, y, more);
    };
    G__7569.cljs$core$IFn$_invoke$arity$variadic = G__7569__delegate;
    return G__7569;
  }();
  cljs$core$unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$unchecked_add_int__0.call(this);
      case 1:
        return cljs$core$unchecked_add_int__1.call(this, x);
      case 2:
        return cljs$core$unchecked_add_int__2.call(this, x, y);
      default:
        var G__7572 = null;
        if (arguments.length > 2) {
          var G__7573__i = 0, G__7573__a = new Array(arguments.length - 2);
          while (G__7573__i < G__7573__a.length) {
            G__7573__a[G__7573__i] = arguments[G__7573__i + 2];
            ++G__7573__i;
          }
          G__7572 = new cljs.core.IndexedSeq(G__7573__a, 0);
        }
        return cljs$core$unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7572);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_add_int.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_add_int.cljs$lang$applyTo = cljs$core$unchecked_add_int__3.cljs$lang$applyTo;
  cljs$core$unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = cljs$core$unchecked_add_int__0;
  cljs$core$unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_add_int__1;
  cljs$core$unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_add_int__2;
  cljs$core$unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_add_int;
}();
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var cljs$core$unchecked_divide_int = null;
  var cljs$core$unchecked_divide_int__1 = function(x) {
    return cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var cljs$core$unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var cljs$core$unchecked_divide_int__3 = function() {
    var G__7578__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_divide_int, cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__7578 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7579__i = 0, G__7579__a = new Array(arguments.length - 2);
        while (G__7579__i < G__7579__a.length) {
          G__7579__a[G__7579__i] = arguments[G__7579__i + 2];
          ++G__7579__i;
        }
        more = new cljs.core.IndexedSeq(G__7579__a, 0);
      }
      return G__7578__delegate.call(this, x, y, more);
    };
    G__7578.cljs$lang$maxFixedArity = 2;
    G__7578.cljs$lang$applyTo = function(arglist__7580) {
      var x = cljs.core.first(arglist__7580);
      arglist__7580 = cljs.core.next(arglist__7580);
      var y = cljs.core.first(arglist__7580);
      var more = cljs.core.rest(arglist__7580);
      return G__7578__delegate(x, y, more);
    };
    G__7578.cljs$core$IFn$_invoke$arity$variadic = G__7578__delegate;
    return G__7578;
  }();
  cljs$core$unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$unchecked_divide_int__1.call(this, x);
      case 2:
        return cljs$core$unchecked_divide_int__2.call(this, x, y);
      default:
        var G__7581 = null;
        if (arguments.length > 2) {
          var G__7582__i = 0, G__7582__a = new Array(arguments.length - 2);
          while (G__7582__i < G__7582__a.length) {
            G__7582__a[G__7582__i] = arguments[G__7582__i + 2];
            ++G__7582__i;
          }
          G__7581 = new cljs.core.IndexedSeq(G__7582__a, 0);
        }
        return cljs$core$unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7581);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_divide_int.cljs$lang$applyTo = cljs$core$unchecked_divide_int__3.cljs$lang$applyTo;
  cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_divide_int__1;
  cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_divide_int__2;
  cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_divide_int;
}();
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var cljs$core$unchecked_multiply = null;
  var cljs$core$unchecked_multiply__0 = function() {
    return 1;
  };
  var cljs$core$unchecked_multiply__1 = function(x) {
    return x;
  };
  var cljs$core$unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var cljs$core$unchecked_multiply__3 = function() {
    var G__7583__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_multiply, x * y, more);
    };
    var G__7583 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7584__i = 0, G__7584__a = new Array(arguments.length - 2);
        while (G__7584__i < G__7584__a.length) {
          G__7584__a[G__7584__i] = arguments[G__7584__i + 2];
          ++G__7584__i;
        }
        more = new cljs.core.IndexedSeq(G__7584__a, 0);
      }
      return G__7583__delegate.call(this, x, y, more);
    };
    G__7583.cljs$lang$maxFixedArity = 2;
    G__7583.cljs$lang$applyTo = function(arglist__7585) {
      var x = cljs.core.first(arglist__7585);
      arglist__7585 = cljs.core.next(arglist__7585);
      var y = cljs.core.first(arglist__7585);
      var more = cljs.core.rest(arglist__7585);
      return G__7583__delegate(x, y, more);
    };
    G__7583.cljs$core$IFn$_invoke$arity$variadic = G__7583__delegate;
    return G__7583;
  }();
  cljs$core$unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$unchecked_multiply__0.call(this);
      case 1:
        return cljs$core$unchecked_multiply__1.call(this, x);
      case 2:
        return cljs$core$unchecked_multiply__2.call(this, x, y);
      default:
        var G__7586 = null;
        if (arguments.length > 2) {
          var G__7587__i = 0, G__7587__a = new Array(arguments.length - 2);
          while (G__7587__i < G__7587__a.length) {
            G__7587__a[G__7587__i] = arguments[G__7587__i + 2];
            ++G__7587__i;
          }
          G__7586 = new cljs.core.IndexedSeq(G__7587__a, 0);
        }
        return cljs$core$unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7586);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_multiply.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_multiply.cljs$lang$applyTo = cljs$core$unchecked_multiply__3.cljs$lang$applyTo;
  cljs$core$unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = cljs$core$unchecked_multiply__0;
  cljs$core$unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_multiply__1;
  cljs$core$unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_multiply__2;
  cljs$core$unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var cljs$core$unchecked_multiply_int = null;
  var cljs$core$unchecked_multiply_int__0 = function() {
    return 1;
  };
  var cljs$core$unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var cljs$core$unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var cljs$core$unchecked_multiply_int__3 = function() {
    var G__7588__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_multiply_int, x * y, more);
    };
    var G__7588 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7589__i = 0, G__7589__a = new Array(arguments.length - 2);
        while (G__7589__i < G__7589__a.length) {
          G__7589__a[G__7589__i] = arguments[G__7589__i + 2];
          ++G__7589__i;
        }
        more = new cljs.core.IndexedSeq(G__7589__a, 0);
      }
      return G__7588__delegate.call(this, x, y, more);
    };
    G__7588.cljs$lang$maxFixedArity = 2;
    G__7588.cljs$lang$applyTo = function(arglist__7590) {
      var x = cljs.core.first(arglist__7590);
      arglist__7590 = cljs.core.next(arglist__7590);
      var y = cljs.core.first(arglist__7590);
      var more = cljs.core.rest(arglist__7590);
      return G__7588__delegate(x, y, more);
    };
    G__7588.cljs$core$IFn$_invoke$arity$variadic = G__7588__delegate;
    return G__7588;
  }();
  cljs$core$unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$unchecked_multiply_int__0.call(this);
      case 1:
        return cljs$core$unchecked_multiply_int__1.call(this, x);
      case 2:
        return cljs$core$unchecked_multiply_int__2.call(this, x, y);
      default:
        var G__7591 = null;
        if (arguments.length > 2) {
          var G__7592__i = 0, G__7592__a = new Array(arguments.length - 2);
          while (G__7592__i < G__7592__a.length) {
            G__7592__a[G__7592__i] = arguments[G__7592__i + 2];
            ++G__7592__i;
          }
          G__7591 = new cljs.core.IndexedSeq(G__7592__a, 0);
        }
        return cljs$core$unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7591);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_multiply_int.cljs$lang$applyTo = cljs$core$unchecked_multiply_int__3.cljs$lang$applyTo;
  cljs$core$unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = cljs$core$unchecked_multiply_int__0;
  cljs$core$unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_multiply_int__1;
  cljs$core$unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_multiply_int__2;
  cljs$core$unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  var G__7595 = x;
  var G__7596 = n;
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(G__7595, G__7596) : cljs.core.mod.call(null, G__7595, G__7596);
};
cljs.core.unchecked_subtract = function() {
  var cljs$core$unchecked_subtract = null;
  var cljs$core$unchecked_subtract__1 = function(x) {
    return-x;
  };
  var cljs$core$unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var cljs$core$unchecked_subtract__3 = function() {
    var G__7597__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_subtract, x - y, more);
    };
    var G__7597 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7598__i = 0, G__7598__a = new Array(arguments.length - 2);
        while (G__7598__i < G__7598__a.length) {
          G__7598__a[G__7598__i] = arguments[G__7598__i + 2];
          ++G__7598__i;
        }
        more = new cljs.core.IndexedSeq(G__7598__a, 0);
      }
      return G__7597__delegate.call(this, x, y, more);
    };
    G__7597.cljs$lang$maxFixedArity = 2;
    G__7597.cljs$lang$applyTo = function(arglist__7599) {
      var x = cljs.core.first(arglist__7599);
      arglist__7599 = cljs.core.next(arglist__7599);
      var y = cljs.core.first(arglist__7599);
      var more = cljs.core.rest(arglist__7599);
      return G__7597__delegate(x, y, more);
    };
    G__7597.cljs$core$IFn$_invoke$arity$variadic = G__7597__delegate;
    return G__7597;
  }();
  cljs$core$unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$unchecked_subtract__1.call(this, x);
      case 2:
        return cljs$core$unchecked_subtract__2.call(this, x, y);
      default:
        var G__7600 = null;
        if (arguments.length > 2) {
          var G__7601__i = 0, G__7601__a = new Array(arguments.length - 2);
          while (G__7601__i < G__7601__a.length) {
            G__7601__a[G__7601__i] = arguments[G__7601__i + 2];
            ++G__7601__i;
          }
          G__7600 = new cljs.core.IndexedSeq(G__7601__a, 0);
        }
        return cljs$core$unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7600);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_subtract.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_subtract.cljs$lang$applyTo = cljs$core$unchecked_subtract__3.cljs$lang$applyTo;
  cljs$core$unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_subtract__1;
  cljs$core$unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_subtract__2;
  cljs$core$unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var cljs$core$unchecked_subtract_int = null;
  var cljs$core$unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var cljs$core$unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var cljs$core$unchecked_subtract_int__3 = function() {
    var G__7602__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_subtract_int, x - y, more);
    };
    var G__7602 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7603__i = 0, G__7603__a = new Array(arguments.length - 2);
        while (G__7603__i < G__7603__a.length) {
          G__7603__a[G__7603__i] = arguments[G__7603__i + 2];
          ++G__7603__i;
        }
        more = new cljs.core.IndexedSeq(G__7603__a, 0);
      }
      return G__7602__delegate.call(this, x, y, more);
    };
    G__7602.cljs$lang$maxFixedArity = 2;
    G__7602.cljs$lang$applyTo = function(arglist__7604) {
      var x = cljs.core.first(arglist__7604);
      arglist__7604 = cljs.core.next(arglist__7604);
      var y = cljs.core.first(arglist__7604);
      var more = cljs.core.rest(arglist__7604);
      return G__7602__delegate(x, y, more);
    };
    G__7602.cljs$core$IFn$_invoke$arity$variadic = G__7602__delegate;
    return G__7602;
  }();
  cljs$core$unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$unchecked_subtract_int__1.call(this, x);
      case 2:
        return cljs$core$unchecked_subtract_int__2.call(this, x, y);
      default:
        var G__7605 = null;
        if (arguments.length > 2) {
          var G__7606__i = 0, G__7606__a = new Array(arguments.length - 2);
          while (G__7606__i < G__7606__a.length) {
            G__7606__a[G__7606__i] = arguments[G__7606__i + 2];
            ++G__7606__i;
          }
          G__7605 = new cljs.core.IndexedSeq(G__7606__a, 0);
        }
        return cljs$core$unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7605);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_subtract_int.cljs$lang$applyTo = cljs$core$unchecked_subtract_int__3.cljs$lang$applyTo;
  cljs$core$unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_subtract_int__1;
  cljs$core$unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_subtract_int__2;
  cljs$core$unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_subtract_int;
}();
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    var G__7609 = q;
    return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__7609) : Math.floor.call(null, G__7609);
  } else {
    var G__7610 = q;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__7610) : Math.ceil.call(null, G__7610);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function() {
  var cljs$core$bit_xor = null;
  var cljs$core$bit_xor__2 = function(x, y) {
    return x ^ y;
  };
  var cljs$core$bit_xor__3 = function() {
    var G__7611__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$bit_xor, x ^ y, more);
    };
    var G__7611 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7612__i = 0, G__7612__a = new Array(arguments.length - 2);
        while (G__7612__i < G__7612__a.length) {
          G__7612__a[G__7612__i] = arguments[G__7612__i + 2];
          ++G__7612__i;
        }
        more = new cljs.core.IndexedSeq(G__7612__a, 0);
      }
      return G__7611__delegate.call(this, x, y, more);
    };
    G__7611.cljs$lang$maxFixedArity = 2;
    G__7611.cljs$lang$applyTo = function(arglist__7613) {
      var x = cljs.core.first(arglist__7613);
      arglist__7613 = cljs.core.next(arglist__7613);
      var y = cljs.core.first(arglist__7613);
      var more = cljs.core.rest(arglist__7613);
      return G__7611__delegate(x, y, more);
    };
    G__7611.cljs$core$IFn$_invoke$arity$variadic = G__7611__delegate;
    return G__7611;
  }();
  cljs$core$bit_xor = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$bit_xor__2.call(this, x, y);
      default:
        var G__7614 = null;
        if (arguments.length > 2) {
          var G__7615__i = 0, G__7615__a = new Array(arguments.length - 2);
          while (G__7615__i < G__7615__a.length) {
            G__7615__a[G__7615__i] = arguments[G__7615__i + 2];
            ++G__7615__i;
          }
          G__7614 = new cljs.core.IndexedSeq(G__7615__a, 0);
        }
        return cljs$core$bit_xor__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7614);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$bit_xor.cljs$lang$maxFixedArity = 2;
  cljs$core$bit_xor.cljs$lang$applyTo = cljs$core$bit_xor__3.cljs$lang$applyTo;
  cljs$core$bit_xor.cljs$core$IFn$_invoke$arity$2 = cljs$core$bit_xor__2;
  cljs$core$bit_xor.cljs$core$IFn$_invoke$arity$variadic = cljs$core$bit_xor__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$bit_xor;
}();
cljs.core.bit_and = function() {
  var cljs$core$bit_and = null;
  var cljs$core$bit_and__2 = function(x, y) {
    return x & y;
  };
  var cljs$core$bit_and__3 = function() {
    var G__7616__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$bit_and, x & y, more);
    };
    var G__7616 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7617__i = 0, G__7617__a = new Array(arguments.length - 2);
        while (G__7617__i < G__7617__a.length) {
          G__7617__a[G__7617__i] = arguments[G__7617__i + 2];
          ++G__7617__i;
        }
        more = new cljs.core.IndexedSeq(G__7617__a, 0);
      }
      return G__7616__delegate.call(this, x, y, more);
    };
    G__7616.cljs$lang$maxFixedArity = 2;
    G__7616.cljs$lang$applyTo = function(arglist__7618) {
      var x = cljs.core.first(arglist__7618);
      arglist__7618 = cljs.core.next(arglist__7618);
      var y = cljs.core.first(arglist__7618);
      var more = cljs.core.rest(arglist__7618);
      return G__7616__delegate(x, y, more);
    };
    G__7616.cljs$core$IFn$_invoke$arity$variadic = G__7616__delegate;
    return G__7616;
  }();
  cljs$core$bit_and = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$bit_and__2.call(this, x, y);
      default:
        var G__7619 = null;
        if (arguments.length > 2) {
          var G__7620__i = 0, G__7620__a = new Array(arguments.length - 2);
          while (G__7620__i < G__7620__a.length) {
            G__7620__a[G__7620__i] = arguments[G__7620__i + 2];
            ++G__7620__i;
          }
          G__7619 = new cljs.core.IndexedSeq(G__7620__a, 0);
        }
        return cljs$core$bit_and__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7619);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$bit_and.cljs$lang$maxFixedArity = 2;
  cljs$core$bit_and.cljs$lang$applyTo = cljs$core$bit_and__3.cljs$lang$applyTo;
  cljs$core$bit_and.cljs$core$IFn$_invoke$arity$2 = cljs$core$bit_and__2;
  cljs$core$bit_and.cljs$core$IFn$_invoke$arity$variadic = cljs$core$bit_and__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$bit_and;
}();
cljs.core.bit_or = function() {
  var cljs$core$bit_or = null;
  var cljs$core$bit_or__2 = function(x, y) {
    return x | y;
  };
  var cljs$core$bit_or__3 = function() {
    var G__7621__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$bit_or, x | y, more);
    };
    var G__7621 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7622__i = 0, G__7622__a = new Array(arguments.length - 2);
        while (G__7622__i < G__7622__a.length) {
          G__7622__a[G__7622__i] = arguments[G__7622__i + 2];
          ++G__7622__i;
        }
        more = new cljs.core.IndexedSeq(G__7622__a, 0);
      }
      return G__7621__delegate.call(this, x, y, more);
    };
    G__7621.cljs$lang$maxFixedArity = 2;
    G__7621.cljs$lang$applyTo = function(arglist__7623) {
      var x = cljs.core.first(arglist__7623);
      arglist__7623 = cljs.core.next(arglist__7623);
      var y = cljs.core.first(arglist__7623);
      var more = cljs.core.rest(arglist__7623);
      return G__7621__delegate(x, y, more);
    };
    G__7621.cljs$core$IFn$_invoke$arity$variadic = G__7621__delegate;
    return G__7621;
  }();
  cljs$core$bit_or = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$bit_or__2.call(this, x, y);
      default:
        var G__7624 = null;
        if (arguments.length > 2) {
          var G__7625__i = 0, G__7625__a = new Array(arguments.length - 2);
          while (G__7625__i < G__7625__a.length) {
            G__7625__a[G__7625__i] = arguments[G__7625__i + 2];
            ++G__7625__i;
          }
          G__7624 = new cljs.core.IndexedSeq(G__7625__a, 0);
        }
        return cljs$core$bit_or__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7624);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$bit_or.cljs$lang$maxFixedArity = 2;
  cljs$core$bit_or.cljs$lang$applyTo = cljs$core$bit_or__3.cljs$lang$applyTo;
  cljs$core$bit_or.cljs$core$IFn$_invoke$arity$2 = cljs$core$bit_or__2;
  cljs$core$bit_or.cljs$core$IFn$_invoke$arity$variadic = cljs$core$bit_or__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$bit_or;
}();
cljs.core.bit_and_not = function() {
  var cljs$core$bit_and_not = null;
  var cljs$core$bit_and_not__2 = function(x, y) {
    return x & ~y;
  };
  var cljs$core$bit_and_not__3 = function() {
    var G__7626__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$bit_and_not, x & ~y, more);
    };
    var G__7626 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7627__i = 0, G__7627__a = new Array(arguments.length - 2);
        while (G__7627__i < G__7627__a.length) {
          G__7627__a[G__7627__i] = arguments[G__7627__i + 2];
          ++G__7627__i;
        }
        more = new cljs.core.IndexedSeq(G__7627__a, 0);
      }
      return G__7626__delegate.call(this, x, y, more);
    };
    G__7626.cljs$lang$maxFixedArity = 2;
    G__7626.cljs$lang$applyTo = function(arglist__7628) {
      var x = cljs.core.first(arglist__7628);
      arglist__7628 = cljs.core.next(arglist__7628);
      var y = cljs.core.first(arglist__7628);
      var more = cljs.core.rest(arglist__7628);
      return G__7626__delegate(x, y, more);
    };
    G__7626.cljs$core$IFn$_invoke$arity$variadic = G__7626__delegate;
    return G__7626;
  }();
  cljs$core$bit_and_not = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$bit_and_not__2.call(this, x, y);
      default:
        var G__7629 = null;
        if (arguments.length > 2) {
          var G__7630__i = 0, G__7630__a = new Array(arguments.length - 2);
          while (G__7630__i < G__7630__a.length) {
            G__7630__a[G__7630__i] = arguments[G__7630__i + 2];
            ++G__7630__i;
          }
          G__7629 = new cljs.core.IndexedSeq(G__7630__a, 0);
        }
        return cljs$core$bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7629);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$bit_and_not.cljs$lang$maxFixedArity = 2;
  cljs$core$bit_and_not.cljs$lang$applyTo = cljs$core$bit_and_not__3.cljs$lang$applyTo;
  cljs$core$bit_and_not.cljs$core$IFn$_invoke$arity$2 = cljs$core$bit_and_not__2;
  cljs$core$bit_and_not.cljs$core$IFn$_invoke$arity$variadic = cljs$core$bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$bit_and_not;
}();
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var cljs$core$_EQ__EQ_ = null;
  var cljs$core$_EQ__EQ___1 = function(x) {
    return true;
  };
  var cljs$core$_EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv(x, y);
  };
  var cljs$core$_EQ__EQ___3 = function() {
    var G__7635__delegate = function(x, y, more) {
      while (true) {
        if (cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__7636 = y;
            var G__7637 = cljs.core.first(more);
            var G__7638 = cljs.core.next(more);
            x = G__7636;
            y = G__7637;
            more = G__7638;
            continue;
          } else {
            return cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__7635 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__7639__i = 0, G__7639__a = new Array(arguments.length - 2);
        while (G__7639__i < G__7639__a.length) {
          G__7639__a[G__7639__i] = arguments[G__7639__i + 2];
          ++G__7639__i;
        }
        more = new cljs.core.IndexedSeq(G__7639__a, 0);
      }
      return G__7635__delegate.call(this, x, y, more);
    };
    G__7635.cljs$lang$maxFixedArity = 2;
    G__7635.cljs$lang$applyTo = function(arglist__7640) {
      var x = cljs.core.first(arglist__7640);
      arglist__7640 = cljs.core.next(arglist__7640);
      var y = cljs.core.first(arglist__7640);
      var more = cljs.core.rest(arglist__7640);
      return G__7635__delegate(x, y, more);
    };
    G__7635.cljs$core$IFn$_invoke$arity$variadic = G__7635__delegate;
    return G__7635;
  }();
  cljs$core$_EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_EQ__EQ___1.call(this, x);
      case 2:
        return cljs$core$_EQ__EQ___2.call(this, x, y);
      default:
        var G__7641 = null;
        if (arguments.length > 2) {
          var G__7642__i = 0, G__7642__a = new Array(arguments.length - 2);
          while (G__7642__i < G__7642__a.length) {
            G__7642__a[G__7642__i] = arguments[G__7642__i + 2];
            ++G__7642__i;
          }
          G__7641 = new cljs.core.IndexedSeq(G__7642__a, 0);
        }
        return cljs$core$_EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7641);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_EQ__EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$_EQ__EQ_.cljs$lang$applyTo = cljs$core$_EQ__EQ___3.cljs$lang$applyTo;
  cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_EQ__EQ___1;
  cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_EQ__EQ___2;
  cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__7643 = n__$1 - 1;
      var G__7644 = cljs.core.next(xs);
      n__$1 = G__7643;
      xs = G__7644;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var cljs$core$str = null;
  var cljs$core$str__0 = function() {
    return "";
  };
  var cljs$core$str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      var G__7648 = x;
      return goog.string.buildString(G__7648);
    }
  };
  var cljs$core$str__2 = function() {
    var G__7649__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(cljs$core$str.cljs$core$IFn$_invoke$arity$1(x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__7650 = sb.append(cljs$core$str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(more)));
          var G__7651 = cljs.core.next(more);
          sb = G__7650;
          more = G__7651;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__7649 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        var G__7652__i = 0, G__7652__a = new Array(arguments.length - 1);
        while (G__7652__i < G__7652__a.length) {
          G__7652__a[G__7652__i] = arguments[G__7652__i + 1];
          ++G__7652__i;
        }
        ys = new cljs.core.IndexedSeq(G__7652__a, 0);
      }
      return G__7649__delegate.call(this, x, ys);
    };
    G__7649.cljs$lang$maxFixedArity = 1;
    G__7649.cljs$lang$applyTo = function(arglist__7653) {
      var x = cljs.core.first(arglist__7653);
      var ys = cljs.core.rest(arglist__7653);
      return G__7649__delegate(x, ys);
    };
    G__7649.cljs$core$IFn$_invoke$arity$variadic = G__7649__delegate;
    return G__7649;
  }();
  cljs$core$str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$str__0.call(this);
      case 1:
        return cljs$core$str__1.call(this, x);
      default:
        var G__7654 = null;
        if (arguments.length > 1) {
          var G__7655__i = 0, G__7655__a = new Array(arguments.length - 1);
          while (G__7655__i < G__7655__a.length) {
            G__7655__a[G__7655__i] = arguments[G__7655__i + 1];
            ++G__7655__i;
          }
          G__7654 = new cljs.core.IndexedSeq(G__7655__a, 0);
        }
        return cljs$core$str__2.cljs$core$IFn$_invoke$arity$variadic(x, G__7654);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$str.cljs$lang$maxFixedArity = 1;
  cljs$core$str.cljs$lang$applyTo = cljs$core$str__2.cljs$lang$applyTo;
  cljs$core$str.cljs$core$IFn$_invoke$arity$0 = cljs$core$str__0;
  cljs$core$str.cljs$core$IFn$_invoke$arity$1 = cljs$core$str__1;
  cljs$core$str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$str__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$str;
}();
cljs.core.subs = function() {
  var cljs$core$subs = null;
  var cljs$core$subs__2 = function(s, start) {
    return s.substring(start);
  };
  var cljs$core$subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  cljs$core$subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return cljs$core$subs__2.call(this, s, start);
      case 3:
        return cljs$core$subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$subs.cljs$core$IFn$_invoke$arity$2 = cljs$core$subs__2;
  cljs$core$subs.cljs$core$IFn$_invoke$arity$3 = cljs$core$subs__3;
  return cljs$core$subs;
}();
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__7656 = cljs.core.next(xs);
            var G__7657 = cljs.core.next(ys);
            xs = G__7656;
            ys = G__7657;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__7658 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__7659 = cljs.core.next(s);
        res = G__7658;
        s = G__7659;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__7664 = (h + (cljs.core.hash(function() {
        var G__7662 = e;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__7662) : cljs.core.key.call(null, G__7662);
      }()) ^ cljs.core.hash(function() {
        var G__7663 = e;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__7663) : cljs.core.val.call(null, G__7663);
      }()))) % 4503599627370496;
      var G__7665 = cljs.core.next(s);
      h = G__7664;
      s = G__7665;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__7666 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__7667 = cljs.core.next(s__$1);
      h = G__7666;
      s__$1 = G__7667;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__7678_7688 = cljs.core.seq(fn_map);
  var chunk__7679_7689 = null;
  var count__7680_7690 = 0;
  var i__7681_7691 = 0;
  while (true) {
    if (i__7681_7691 < count__7680_7690) {
      var vec__7682_7692 = chunk__7679_7689.cljs$core$IIndexed$_nth$arity$2(null, i__7681_7691);
      var key_name_7693 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7682_7692, 0, null);
      var f_7694 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7682_7692, 1, null);
      var str_name_7695 = function() {
        var G__7683 = key_name_7693;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__7683) : cljs.core.name.call(null, G__7683);
      }();
      obj[str_name_7695] = f_7694;
      var G__7696 = seq__7678_7688;
      var G__7697 = chunk__7679_7689;
      var G__7698 = count__7680_7690;
      var G__7699 = i__7681_7691 + 1;
      seq__7678_7688 = G__7696;
      chunk__7679_7689 = G__7697;
      count__7680_7690 = G__7698;
      i__7681_7691 = G__7699;
      continue;
    } else {
      var temp__4126__auto___7700 = cljs.core.seq(seq__7678_7688);
      if (temp__4126__auto___7700) {
        var seq__7678_7701__$1 = temp__4126__auto___7700;
        if (cljs.core.chunked_seq_QMARK_(seq__7678_7701__$1)) {
          var c__4907__auto___7702 = function() {
            var G__7684 = seq__7678_7701__$1;
            return cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(G__7684) : cljs.core.chunk_first.call(null, G__7684);
          }();
          var G__7703 = function() {
            var G__7685 = seq__7678_7701__$1;
            return cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(G__7685) : cljs.core.chunk_rest.call(null, G__7685);
          }();
          var G__7704 = c__4907__auto___7702;
          var G__7705 = cljs.core.count(c__4907__auto___7702);
          var G__7706 = 0;
          seq__7678_7688 = G__7703;
          chunk__7679_7689 = G__7704;
          count__7680_7690 = G__7705;
          i__7681_7691 = G__7706;
          continue;
        } else {
          var vec__7686_7707 = cljs.core.first(seq__7678_7701__$1);
          var key_name_7708 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7686_7707, 0, null);
          var f_7709 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7686_7707, 1, null);
          var str_name_7710 = function() {
            var G__7687 = key_name_7708;
            return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__7687) : cljs.core.name.call(null, G__7687);
          }();
          obj[str_name_7710] = f_7709;
          var G__7711 = cljs.core.next(seq__7678_7701__$1);
          var G__7712 = null;
          var G__7713 = 0;
          var G__7714 = 0;
          seq__7678_7688 = G__7711;
          chunk__7679_7689 = G__7712;
          count__7680_7690 = G__7713;
          i__7681_7691 = G__7714;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  var G__7716 = coll;
  if (G__7716) {
    var bit__4796__auto__ = G__7716.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4796__auto__ || G__7716.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__7716.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__7716);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__7716);
  }
};
cljs.core.rseq = function cljs$core$rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var cljs$core$list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
          var G__7717 = xs__$1.cljs$core$INext$_next$arity$1(null);
          xs__$1 = G__7717;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__7718 = i - 1;
        var G__7719 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
        i = G__7718;
        r = G__7719;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var cljs$core$list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      var G__7720__i = 0, G__7720__a = new Array(arguments.length - 0);
      while (G__7720__i < G__7720__a.length) {
        G__7720__a[G__7720__i] = arguments[G__7720__i + 0];
        ++G__7720__i;
      }
      xs = new cljs.core.IndexedSeq(G__7720__a, 0);
    }
    return cljs$core$list__delegate.call(this, xs);
  };
  cljs$core$list.cljs$lang$maxFixedArity = 0;
  cljs$core$list.cljs$lang$applyTo = function(arglist__7721) {
    var xs = cljs.core.seq(arglist__7721);
    return cljs$core$list__delegate(xs);
  };
  cljs$core$list.cljs$core$IFn$_invoke$arity$variadic = cljs$core$list__delegate;
  return cljs$core$list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__4122__auto__ = coll == null;
    if (or__4122__auto__) {
      return or__4122__auto__;
    } else {
      var G__7725 = coll;
      if (G__7725) {
        var bit__4789__auto__ = G__7725.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4789__auto__ || G__7725.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  var G__7727 = x;
  if (G__7727) {
    var bit__4796__auto__ = G__7727.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4796__auto__ || G__7727.cljs$core$IList$) {
      return true;
    } else {
      if (!G__7727.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__7727);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__7727);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = cljs.core.not(a.ns);
      if (and__4110__auto__) {
        return b.ns;
      } else {
        return and__4110__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__7734 = a.ns;
            var G__7735 = b.ns;
            return goog.array.defaultCompare(G__7734, G__7735);
          }();
          if (0 === nsc) {
            var G__7736 = a.name;
            var G__7737 = b.name;
            return goog.array.defaultCompare(G__7736, G__7737);
          } else {
            return nsc;
          }
        }
      } else {
        var G__7738 = a.name;
        var G__7739 = b.name;
        return goog.array.defaultCompare(G__7738, G__7739);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4538__auto__ = self__._hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__7741 = null;
  var G__7741__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__7741__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__7741 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7741__2.call(this, self__, coll);
      case 3:
        return G__7741__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__7741.cljs$core$IFn$_invoke$arity$2 = G__7741__2;
  G__7741.cljs$core$IFn$_invoke$arity$3 = G__7741__3;
  return G__7741;
}();
cljs.core.Keyword.prototype.apply = function(self__, args7740) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args7740)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (function() {
    var G__7743 = x;
    if (G__7743) {
      var bit__4789__auto__ = G__7743.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4789__auto__ || G__7743.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var cljs$core$keyword = null;
  var cljs$core$keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace(name), function() {
          var G__7745 = name;
          return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__7745) : cljs.core.name.call(null, G__7745);
        }(), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var cljs$core$keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  cljs$core$keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return cljs$core$keyword__1.call(this, ns);
      case 2:
        return cljs$core$keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$keyword.cljs$core$IFn$_invoke$arity$1 = cljs$core$keyword__1;
  cljs$core$keyword.cljs$core$IFn$_invoke$arity$2 = cljs$core$keyword__2;
  return cljs$core$keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = function() {
      return self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    }();
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__7746 = ls.sval();
        ls = G__7746;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var cljs$core$array_chunk = null;
  var cljs$core$array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var cljs$core$array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var cljs$core$array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  cljs$core$array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return cljs$core$array_chunk__1.call(this, arr);
      case 2:
        return cljs$core$array_chunk__2.call(this, arr, off);
      case 3:
        return cljs$core$array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$array_chunk.cljs$core$IFn$_invoke$arity$1 = cljs$core$array_chunk__1;
  cljs$core$array_chunk.cljs$core$IFn$_invoke$arity$2 = cljs$core$array_chunk__2;
  cljs$core$array_chunk.cljs$core$IFn$_invoke$arity$3 = cljs$core$array_chunk__3;
  return cljs$core$array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (function() {
    var G__7748 = s;
    if (G__7748) {
      var bit__4789__auto__ = G__7748.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4789__auto__ || G__7748.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__7749 = cljs.core.next(s__$1);
      s__$1 = G__7749;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_7750 = 0;
  var xs_7751 = cljs.core.seq(coll);
  while (true) {
    if (xs_7751) {
      ret[i_7750] = cljs.core.to_array(cljs.core.first(xs_7751));
      var G__7752 = i_7750 + 1;
      var G__7753 = cljs.core.next(xs_7751);
      i_7750 = G__7752;
      xs_7751 = G__7753;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var cljs$core$int_array = null;
  var cljs$core$int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return cljs$core$int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var cljs$core$int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__7756 = i + 1;
          var G__7757 = cljs.core.next(s__$1);
          i = G__7756;
          s__$1 = G__7757;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__5007__auto___7758 = size;
      var i_7759 = 0;
      while (true) {
        if (i_7759 < n__5007__auto___7758) {
          a[i_7759] = init_val_or_seq;
          var G__7760 = i_7759 + 1;
          i_7759 = G__7760;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  cljs$core$int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$int_array__1.call(this, size);
      case 2:
        return cljs$core$int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$int_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$int_array__1;
  cljs$core$int_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$int_array__2;
  return cljs$core$int_array;
}();
cljs.core.long_array = function() {
  var cljs$core$long_array = null;
  var cljs$core$long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return cljs$core$long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var cljs$core$long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__7763 = i + 1;
          var G__7764 = cljs.core.next(s__$1);
          i = G__7763;
          s__$1 = G__7764;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__5007__auto___7765 = size;
      var i_7766 = 0;
      while (true) {
        if (i_7766 < n__5007__auto___7765) {
          a[i_7766] = init_val_or_seq;
          var G__7767 = i_7766 + 1;
          i_7766 = G__7767;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  cljs$core$long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$long_array__1.call(this, size);
      case 2:
        return cljs$core$long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$long_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$long_array__1;
  cljs$core$long_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$long_array__2;
  return cljs$core$long_array;
}();
cljs.core.double_array = function() {
  var cljs$core$double_array = null;
  var cljs$core$double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return cljs$core$double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var cljs$core$double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__7770 = i + 1;
          var G__7771 = cljs.core.next(s__$1);
          i = G__7770;
          s__$1 = G__7771;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__5007__auto___7772 = size;
      var i_7773 = 0;
      while (true) {
        if (i_7773 < n__5007__auto___7772) {
          a[i_7773] = init_val_or_seq;
          var G__7774 = i_7773 + 1;
          i_7773 = G__7774;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  cljs$core$double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$double_array__1.call(this, size);
      case 2:
        return cljs$core$double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$double_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$double_array__1;
  cljs$core$double_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$double_array__2;
  return cljs$core$double_array;
}();
cljs.core.object_array = function() {
  var cljs$core$object_array = null;
  var cljs$core$object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return cljs$core$object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var cljs$core$object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__7777 = i + 1;
          var G__7778 = cljs.core.next(s__$1);
          i = G__7777;
          s__$1 = G__7778;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__5007__auto___7779 = size;
      var i_7780 = 0;
      while (true) {
        if (i_7780 < n__5007__auto___7779) {
          a[i_7780] = init_val_or_seq;
          var G__7781 = i_7780 + 1;
          i_7780 = G__7781;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  cljs$core$object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$object_array__1.call(this, size);
      case 2:
        return cljs$core$object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$object_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$object_array__1;
  cljs$core$object_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$object_array__2;
  return cljs$core$object_array;
}();
cljs.core.bounded_count = function cljs$core$bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__7782 = cljs.core.next(s__$1);
        var G__7783 = i - 1;
        var G__7784 = sum + 1;
        s__$1 = G__7782;
        i = G__7783;
        sum = G__7784;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs$core$spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function() {
  var cljs$core$concat = null;
  var cljs$core$concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var cljs$core$concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var cljs$core$concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq(x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_(s)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs$core$concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
        } else {
          return cljs.core.cons(cljs.core.first(s), cljs$core$concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var cljs$core$concat__3 = function() {
    var G__7804__delegate = function(x, y, zs) {
      var cat = function cljs$core$concat_$_cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq(xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
              return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$concat_$_cat(cljs.core.chunk_rest(xys__$1), zs__$1));
            } else {
              return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$concat_$_cat(cljs.core.rest(xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cljs$core$concat_$_cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat(cljs$core$concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
    };
    var G__7804 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        var G__7805__i = 0, G__7805__a = new Array(arguments.length - 2);
        while (G__7805__i < G__7805__a.length) {
          G__7805__a[G__7805__i] = arguments[G__7805__i + 2];
          ++G__7805__i;
        }
        zs = new cljs.core.IndexedSeq(G__7805__a, 0);
      }
      return G__7804__delegate.call(this, x, y, zs);
    };
    G__7804.cljs$lang$maxFixedArity = 2;
    G__7804.cljs$lang$applyTo = function(arglist__7806) {
      var x = cljs.core.first(arglist__7806);
      arglist__7806 = cljs.core.next(arglist__7806);
      var y = cljs.core.first(arglist__7806);
      var zs = cljs.core.rest(arglist__7806);
      return G__7804__delegate(x, y, zs);
    };
    G__7804.cljs$core$IFn$_invoke$arity$variadic = G__7804__delegate;
    return G__7804;
  }();
  cljs$core$concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$concat__0.call(this);
      case 1:
        return cljs$core$concat__1.call(this, x);
      case 2:
        return cljs$core$concat__2.call(this, x, y);
      default:
        var G__7807 = null;
        if (arguments.length > 2) {
          var G__7808__i = 0, G__7808__a = new Array(arguments.length - 2);
          while (G__7808__i < G__7808__a.length) {
            G__7808__a[G__7808__i] = arguments[G__7808__i + 2];
            ++G__7808__i;
          }
          G__7807 = new cljs.core.IndexedSeq(G__7808__a, 0);
        }
        return cljs$core$concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7807);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$concat.cljs$lang$maxFixedArity = 2;
  cljs$core$concat.cljs$lang$applyTo = cljs$core$concat__3.cljs$lang$applyTo;
  cljs$core$concat.cljs$core$IFn$_invoke$arity$0 = cljs$core$concat__0;
  cljs$core$concat.cljs$core$IFn$_invoke$arity$1 = cljs$core$concat__1;
  cljs$core$concat.cljs$core$IFn$_invoke$arity$2 = cljs$core$concat__2;
  cljs$core$concat.cljs$core$IFn$_invoke$arity$variadic = cljs$core$concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$concat;
}();
cljs.core.list_STAR_ = function() {
  var cljs$core$list_STAR_ = null;
  var cljs$core$list_STAR___1 = function(args) {
    return cljs.core.seq(args);
  };
  var cljs$core$list_STAR___2 = function(a, args) {
    return cljs.core.cons(a, args);
  };
  var cljs$core$list_STAR___3 = function(a, b, args) {
    return cljs.core.cons(a, cljs.core.cons(b, args));
  };
  var cljs$core$list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
  };
  var cljs$core$list_STAR___5 = function() {
    var G__7809__delegate = function(a, b, c, d, more) {
      return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
    };
    var G__7809 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__7810__i = 0, G__7810__a = new Array(arguments.length - 4);
        while (G__7810__i < G__7810__a.length) {
          G__7810__a[G__7810__i] = arguments[G__7810__i + 4];
          ++G__7810__i;
        }
        more = new cljs.core.IndexedSeq(G__7810__a, 0);
      }
      return G__7809__delegate.call(this, a, b, c, d, more);
    };
    G__7809.cljs$lang$maxFixedArity = 4;
    G__7809.cljs$lang$applyTo = function(arglist__7811) {
      var a = cljs.core.first(arglist__7811);
      arglist__7811 = cljs.core.next(arglist__7811);
      var b = cljs.core.first(arglist__7811);
      arglist__7811 = cljs.core.next(arglist__7811);
      var c = cljs.core.first(arglist__7811);
      arglist__7811 = cljs.core.next(arglist__7811);
      var d = cljs.core.first(arglist__7811);
      var more = cljs.core.rest(arglist__7811);
      return G__7809__delegate(a, b, c, d, more);
    };
    G__7809.cljs$core$IFn$_invoke$arity$variadic = G__7809__delegate;
    return G__7809;
  }();
  cljs$core$list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$list_STAR___1.call(this, a);
      case 2:
        return cljs$core$list_STAR___2.call(this, a, b);
      case 3:
        return cljs$core$list_STAR___3.call(this, a, b, c);
      case 4:
        return cljs$core$list_STAR___4.call(this, a, b, c, d);
      default:
        var G__7812 = null;
        if (arguments.length > 4) {
          var G__7813__i = 0, G__7813__a = new Array(arguments.length - 4);
          while (G__7813__i < G__7813__a.length) {
            G__7813__a[G__7813__i] = arguments[G__7813__i + 4];
            ++G__7813__i;
          }
          G__7812 = new cljs.core.IndexedSeq(G__7813__a, 0);
        }
        return cljs$core$list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, G__7812);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$list_STAR_.cljs$lang$maxFixedArity = 4;
  cljs$core$list_STAR_.cljs$lang$applyTo = cljs$core$list_STAR___5.cljs$lang$applyTo;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$1 = cljs$core$list_STAR___1;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$2 = cljs$core$list_STAR___2;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$3 = cljs$core$list_STAR___3;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$4 = cljs$core$list_STAR___4;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$list_STAR_;
}();
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function() {
  var cljs$core$conj_BANG_ = null;
  var cljs$core$conj_BANG___0 = function() {
    return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
  };
  var cljs$core$conj_BANG___1 = function(coll) {
    return coll;
  };
  var cljs$core$conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_(tcoll, val);
  };
  var cljs$core$conj_BANG___3 = function() {
    var G__7814__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__7815 = ntcoll;
          var G__7816 = cljs.core.first(vals);
          var G__7817 = cljs.core.next(vals);
          tcoll = G__7815;
          val = G__7816;
          vals = G__7817;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7814 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__7818__i = 0, G__7818__a = new Array(arguments.length - 2);
        while (G__7818__i < G__7818__a.length) {
          G__7818__a[G__7818__i] = arguments[G__7818__i + 2];
          ++G__7818__i;
        }
        vals = new cljs.core.IndexedSeq(G__7818__a, 0);
      }
      return G__7814__delegate.call(this, tcoll, val, vals);
    };
    G__7814.cljs$lang$maxFixedArity = 2;
    G__7814.cljs$lang$applyTo = function(arglist__7819) {
      var tcoll = cljs.core.first(arglist__7819);
      arglist__7819 = cljs.core.next(arglist__7819);
      var val = cljs.core.first(arglist__7819);
      var vals = cljs.core.rest(arglist__7819);
      return G__7814__delegate(tcoll, val, vals);
    };
    G__7814.cljs$core$IFn$_invoke$arity$variadic = G__7814__delegate;
    return G__7814;
  }();
  cljs$core$conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$conj_BANG___0.call(this);
      case 1:
        return cljs$core$conj_BANG___1.call(this, tcoll);
      case 2:
        return cljs$core$conj_BANG___2.call(this, tcoll, val);
      default:
        var G__7820 = null;
        if (arguments.length > 2) {
          var G__7821__i = 0, G__7821__a = new Array(arguments.length - 2);
          while (G__7821__i < G__7821__a.length) {
            G__7821__a[G__7821__i] = arguments[G__7821__i + 2];
            ++G__7821__i;
          }
          G__7820 = new cljs.core.IndexedSeq(G__7821__a, 0);
        }
        return cljs$core$conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__7820);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$conj_BANG_.cljs$lang$maxFixedArity = 2;
  cljs$core$conj_BANG_.cljs$lang$applyTo = cljs$core$conj_BANG___3.cljs$lang$applyTo;
  cljs$core$conj_BANG_.cljs$core$IFn$_invoke$arity$0 = cljs$core$conj_BANG___0;
  cljs$core$conj_BANG_.cljs$core$IFn$_invoke$arity$1 = cljs$core$conj_BANG___1;
  cljs$core$conj_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$conj_BANG___2;
  cljs$core$conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var cljs$core$assoc_BANG_ = null;
  var cljs$core$assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_(tcoll, key, val);
  };
  var cljs$core$assoc_BANG___4 = function() {
    var G__7822__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__7823 = ntcoll;
          var G__7824 = cljs.core.first(kvs);
          var G__7825 = cljs.core.second(kvs);
          var G__7826 = cljs.core.nnext(kvs);
          tcoll = G__7823;
          key = G__7824;
          val = G__7825;
          kvs = G__7826;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7822 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__7827__i = 0, G__7827__a = new Array(arguments.length - 3);
        while (G__7827__i < G__7827__a.length) {
          G__7827__a[G__7827__i] = arguments[G__7827__i + 3];
          ++G__7827__i;
        }
        kvs = new cljs.core.IndexedSeq(G__7827__a, 0);
      }
      return G__7822__delegate.call(this, tcoll, key, val, kvs);
    };
    G__7822.cljs$lang$maxFixedArity = 3;
    G__7822.cljs$lang$applyTo = function(arglist__7828) {
      var tcoll = cljs.core.first(arglist__7828);
      arglist__7828 = cljs.core.next(arglist__7828);
      var key = cljs.core.first(arglist__7828);
      arglist__7828 = cljs.core.next(arglist__7828);
      var val = cljs.core.first(arglist__7828);
      var kvs = cljs.core.rest(arglist__7828);
      return G__7822__delegate(tcoll, key, val, kvs);
    };
    G__7822.cljs$core$IFn$_invoke$arity$variadic = G__7822__delegate;
    return G__7822;
  }();
  cljs$core$assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$assoc_BANG___3.call(this, tcoll, key, val);
      default:
        var G__7829 = null;
        if (arguments.length > 3) {
          var G__7830__i = 0, G__7830__a = new Array(arguments.length - 3);
          while (G__7830__i < G__7830__a.length) {
            G__7830__a[G__7830__i] = arguments[G__7830__i + 3];
            ++G__7830__i;
          }
          G__7829 = new cljs.core.IndexedSeq(G__7830__a, 0);
        }
        return cljs$core$assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, G__7829);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$assoc_BANG_.cljs$lang$maxFixedArity = 3;
  cljs$core$assoc_BANG_.cljs$lang$applyTo = cljs$core$assoc_BANG___4.cljs$lang$applyTo;
  cljs$core$assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = cljs$core$assoc_BANG___3;
  cljs$core$assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var cljs$core$dissoc_BANG_ = null;
  var cljs$core$dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_(tcoll, key);
  };
  var cljs$core$dissoc_BANG___3 = function() {
    var G__7831__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__7832 = ntcoll;
          var G__7833 = cljs.core.first(ks);
          var G__7834 = cljs.core.next(ks);
          tcoll = G__7832;
          key = G__7833;
          ks = G__7834;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7831 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__7835__i = 0, G__7835__a = new Array(arguments.length - 2);
        while (G__7835__i < G__7835__a.length) {
          G__7835__a[G__7835__i] = arguments[G__7835__i + 2];
          ++G__7835__i;
        }
        ks = new cljs.core.IndexedSeq(G__7835__a, 0);
      }
      return G__7831__delegate.call(this, tcoll, key, ks);
    };
    G__7831.cljs$lang$maxFixedArity = 2;
    G__7831.cljs$lang$applyTo = function(arglist__7836) {
      var tcoll = cljs.core.first(arglist__7836);
      arglist__7836 = cljs.core.next(arglist__7836);
      var key = cljs.core.first(arglist__7836);
      var ks = cljs.core.rest(arglist__7836);
      return G__7831__delegate(tcoll, key, ks);
    };
    G__7831.cljs$core$IFn$_invoke$arity$variadic = G__7831__delegate;
    return G__7831;
  }();
  cljs$core$dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$dissoc_BANG___2.call(this, tcoll, key);
      default:
        var G__7837 = null;
        if (arguments.length > 2) {
          var G__7838__i = 0, G__7838__a = new Array(arguments.length - 2);
          while (G__7838__i < G__7838__a.length) {
            G__7838__a[G__7838__i] = arguments[G__7838__i + 2];
            ++G__7838__i;
          }
          G__7837 = new cljs.core.IndexedSeq(G__7838__a, 0);
        }
        return cljs$core$dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, G__7837);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  cljs$core$dissoc_BANG_.cljs$lang$applyTo = cljs$core$dissoc_BANG___3.cljs$lang$applyTo;
  cljs$core$dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$dissoc_BANG___2;
  cljs$core$dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function() {
  var cljs$core$disj_BANG_ = null;
  var cljs$core$disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_(tcoll, val);
  };
  var cljs$core$disj_BANG___3 = function() {
    var G__7839__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__7840 = ntcoll;
          var G__7841 = cljs.core.first(vals);
          var G__7842 = cljs.core.next(vals);
          tcoll = G__7840;
          val = G__7841;
          vals = G__7842;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7839 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__7843__i = 0, G__7843__a = new Array(arguments.length - 2);
        while (G__7843__i < G__7843__a.length) {
          G__7843__a[G__7843__i] = arguments[G__7843__i + 2];
          ++G__7843__i;
        }
        vals = new cljs.core.IndexedSeq(G__7843__a, 0);
      }
      return G__7839__delegate.call(this, tcoll, val, vals);
    };
    G__7839.cljs$lang$maxFixedArity = 2;
    G__7839.cljs$lang$applyTo = function(arglist__7844) {
      var tcoll = cljs.core.first(arglist__7844);
      arglist__7844 = cljs.core.next(arglist__7844);
      var val = cljs.core.first(arglist__7844);
      var vals = cljs.core.rest(arglist__7844);
      return G__7839__delegate(tcoll, val, vals);
    };
    G__7839.cljs$core$IFn$_invoke$arity$variadic = G__7839__delegate;
    return G__7839;
  }();
  cljs$core$disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$disj_BANG___2.call(this, tcoll, val);
      default:
        var G__7845 = null;
        if (arguments.length > 2) {
          var G__7846__i = 0, G__7846__a = new Array(arguments.length - 2);
          while (G__7846__i < G__7846__a.length) {
            G__7846__a[G__7846__i] = arguments[G__7846__i + 2];
            ++G__7846__i;
          }
          G__7845 = new cljs.core.IndexedSeq(G__7846__a, 0);
        }
        return cljs$core$disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__7845);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$disj_BANG_.cljs$lang$maxFixedArity = 2;
  cljs$core$disj_BANG_.cljs$lang$applyTo = cljs$core$disj_BANG___3.cljs$lang$applyTo;
  cljs$core$disj_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$disj_BANG___2;
  cljs$core$disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$disj_BANG_;
}();
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a5051 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a5051);
      } else {
        var G__8057 = a5051;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8057) : f.call(null, G__8057);
      }
    } else {
      var b5052 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a5051, b5052);
        } else {
          var G__8058 = a5051;
          var G__8059 = b5052;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8058, G__8059) : f.call(null, G__8058, G__8059);
        }
      } else {
        var c5053 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a5051, b5052, c5053);
          } else {
            var G__8060 = a5051;
            var G__8061 = b5052;
            var G__8062 = c5053;
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8060, G__8061, G__8062) : f.call(null, G__8060, G__8061, G__8062);
          }
        } else {
          var d5054 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a5051, b5052, c5053, d5054);
            } else {
              var G__8063 = a5051;
              var G__8064 = b5052;
              var G__8065 = c5053;
              var G__8066 = d5054;
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8063, G__8064, G__8065, G__8066) : f.call(null, G__8063, G__8064, G__8065, G__8066);
            }
          } else {
            var e5055 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a5051, b5052, c5053, d5054, e5055);
              } else {
                var G__8067 = a5051;
                var G__8068 = b5052;
                var G__8069 = c5053;
                var G__8070 = d5054;
                var G__8071 = e5055;
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__8067, G__8068, G__8069, G__8070, G__8071) : f.call(null, G__8067, G__8068, G__8069, G__8070, G__8071);
              }
            } else {
              var f5056 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a5051, b5052, c5053, d5054, e5055, f5056);
                } else {
                  var G__8072 = a5051;
                  var G__8073 = b5052;
                  var G__8074 = c5053;
                  var G__8075 = d5054;
                  var G__8076 = e5055;
                  var G__8077 = f5056;
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__8072, G__8073, G__8074, G__8075, G__8076, G__8077) : f.call(null, G__8072, G__8073, G__8074, G__8075, G__8076, G__8077);
                }
              } else {
                var g5057 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a5051, b5052, c5053, d5054, e5055, f5056, g5057);
                  } else {
                    var G__8078 = a5051;
                    var G__8079 = b5052;
                    var G__8080 = c5053;
                    var G__8081 = d5054;
                    var G__8082 = e5055;
                    var G__8083 = f5056;
                    var G__8084 = g5057;
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(G__8078, G__8079, G__8080, G__8081, G__8082, G__8083, G__8084) : f.call(null, G__8078, G__8079, G__8080, G__8081, G__8082, G__8083, G__8084);
                  }
                } else {
                  var h5058 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058);
                    } else {
                      var G__8085 = a5051;
                      var G__8086 = b5052;
                      var G__8087 = c5053;
                      var G__8088 = d5054;
                      var G__8089 = e5055;
                      var G__8090 = f5056;
                      var G__8091 = g5057;
                      var G__8092 = h5058;
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(G__8085, G__8086, G__8087, G__8088, G__8089, G__8090, G__8091, G__8092) : f.call(null, G__8085, G__8086, G__8087, G__8088, G__8089, G__8090, G__8091, G__8092);
                    }
                  } else {
                    var i5059 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059);
                      } else {
                        var G__8093 = a5051;
                        var G__8094 = b5052;
                        var G__8095 = c5053;
                        var G__8096 = d5054;
                        var G__8097 = e5055;
                        var G__8098 = f5056;
                        var G__8099 = g5057;
                        var G__8100 = h5058;
                        var G__8101 = i5059;
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(G__8093, G__8094, G__8095, G__8096, G__8097, G__8098, G__8099, G__8100, G__8101) : f.call(null, G__8093, G__8094, G__8095, G__8096, G__8097, G__8098, G__8099, G__8100, G__8101);
                      }
                    } else {
                      var j5060 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060);
                        } else {
                          var G__8102 = a5051;
                          var G__8103 = b5052;
                          var G__8104 = c5053;
                          var G__8105 = d5054;
                          var G__8106 = e5055;
                          var G__8107 = f5056;
                          var G__8108 = g5057;
                          var G__8109 = h5058;
                          var G__8110 = i5059;
                          var G__8111 = j5060;
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(G__8102, G__8103, G__8104, G__8105, G__8106, G__8107, G__8108, G__8109, G__8110, G__8111) : f.call(null, G__8102, G__8103, G__8104, G__8105, G__8106, G__8107, G__8108, G__8109, G__8110, G__8111);
                        }
                      } else {
                        var k5061 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061);
                          } else {
                            var G__8112 = a5051;
                            var G__8113 = b5052;
                            var G__8114 = c5053;
                            var G__8115 = d5054;
                            var G__8116 = e5055;
                            var G__8117 = f5056;
                            var G__8118 = g5057;
                            var G__8119 = h5058;
                            var G__8120 = i5059;
                            var G__8121 = j5060;
                            var G__8122 = k5061;
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(G__8112, G__8113, G__8114, G__8115, G__8116, G__8117, G__8118, G__8119, G__8120, G__8121, G__8122) : f.call(null, G__8112, G__8113, G__8114, G__8115, G__8116, G__8117, G__8118, G__8119, G__8120, G__8121, G__8122);
                          }
                        } else {
                          var l5062 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062);
                            } else {
                              var G__8123 = a5051;
                              var G__8124 = b5052;
                              var G__8125 = c5053;
                              var G__8126 = d5054;
                              var G__8127 = e5055;
                              var G__8128 = f5056;
                              var G__8129 = g5057;
                              var G__8130 = h5058;
                              var G__8131 = i5059;
                              var G__8132 = j5060;
                              var G__8133 = k5061;
                              var G__8134 = l5062;
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(G__8123, G__8124, G__8125, G__8126, G__8127, G__8128, G__8129, G__8130, G__8131, G__8132, G__8133, G__8134) : f.call(null, G__8123, G__8124, G__8125, G__8126, G__8127, G__8128, G__8129, G__8130, G__8131, G__8132, G__8133, G__8134);
                            }
                          } else {
                            var m5063 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063);
                              } else {
                                var G__8135 = a5051;
                                var G__8136 = b5052;
                                var G__8137 = c5053;
                                var G__8138 = d5054;
                                var G__8139 = e5055;
                                var G__8140 = f5056;
                                var G__8141 = g5057;
                                var G__8142 = h5058;
                                var G__8143 = i5059;
                                var G__8144 = j5060;
                                var G__8145 = k5061;
                                var G__8146 = l5062;
                                var G__8147 = m5063;
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(G__8135, G__8136, G__8137, G__8138, G__8139, G__8140, G__8141, G__8142, G__8143, G__8144, G__8145, G__8146, G__8147) : f.call(null, G__8135, G__8136, G__8137, G__8138, G__8139, G__8140, G__8141, G__8142, G__8143, G__8144, G__8145, G__8146, G__8147);
                              }
                            } else {
                              var n5064 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064);
                                } else {
                                  var G__8148 = a5051;
                                  var G__8149 = b5052;
                                  var G__8150 = c5053;
                                  var G__8151 = d5054;
                                  var G__8152 = e5055;
                                  var G__8153 = f5056;
                                  var G__8154 = g5057;
                                  var G__8155 = h5058;
                                  var G__8156 = i5059;
                                  var G__8157 = j5060;
                                  var G__8158 = k5061;
                                  var G__8159 = l5062;
                                  var G__8160 = m5063;
                                  var G__8161 = n5064;
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(G__8148, G__8149, G__8150, G__8151, G__8152, G__8153, G__8154, G__8155, G__8156, G__8157, G__8158, G__8159, G__8160, G__8161) : f.call(null, G__8148, G__8149, G__8150, G__8151, G__8152, G__8153, G__8154, G__8155, G__8156, G__8157, G__8158, G__8159, G__8160, G__8161);
                                }
                              } else {
                                var o5065 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064, o5065);
                                  } else {
                                    var G__8162 = a5051;
                                    var G__8163 = b5052;
                                    var G__8164 = c5053;
                                    var G__8165 = d5054;
                                    var G__8166 = e5055;
                                    var G__8167 = f5056;
                                    var G__8168 = g5057;
                                    var G__8169 = h5058;
                                    var G__8170 = i5059;
                                    var G__8171 = j5060;
                                    var G__8172 = k5061;
                                    var G__8173 = l5062;
                                    var G__8174 = m5063;
                                    var G__8175 = n5064;
                                    var G__8176 = o5065;
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(G__8162, G__8163, G__8164, G__8165, G__8166, G__8167, G__8168, G__8169, G__8170, G__8171, G__8172, G__8173, G__8174, G__8175, G__8176) : f.call(null, G__8162, G__8163, G__8164, G__8165, G__8166, G__8167, G__8168, G__8169, G__8170, G__8171, G__8172, G__8173, G__8174, G__8175, G__8176);
                                  }
                                } else {
                                  var p5066 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064, o5065, p5066);
                                    } else {
                                      var G__8177 = a5051;
                                      var G__8178 = b5052;
                                      var G__8179 = c5053;
                                      var G__8180 = d5054;
                                      var G__8181 = e5055;
                                      var G__8182 = f5056;
                                      var G__8183 = g5057;
                                      var G__8184 = h5058;
                                      var G__8185 = i5059;
                                      var G__8186 = j5060;
                                      var G__8187 = k5061;
                                      var G__8188 = l5062;
                                      var G__8189 = m5063;
                                      var G__8190 = n5064;
                                      var G__8191 = o5065;
                                      var G__8192 = p5066;
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(G__8177, G__8178, G__8179, G__8180, G__8181, G__8182, G__8183, G__8184, G__8185, G__8186, G__8187, G__8188, G__8189, G__8190, G__8191, G__8192) : f.call(null, G__8177, G__8178, G__8179, G__8180, G__8181, G__8182, G__8183, G__8184, G__8185, G__8186, G__8187, G__8188, G__8189, G__8190, G__8191, G__8192);
                                    }
                                  } else {
                                    var q5067 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064, o5065, p5066, q5067);
                                      } else {
                                        var G__8193 = a5051;
                                        var G__8194 = b5052;
                                        var G__8195 = c5053;
                                        var G__8196 = d5054;
                                        var G__8197 = e5055;
                                        var G__8198 = f5056;
                                        var G__8199 = g5057;
                                        var G__8200 = h5058;
                                        var G__8201 = i5059;
                                        var G__8202 = j5060;
                                        var G__8203 = k5061;
                                        var G__8204 = l5062;
                                        var G__8205 = m5063;
                                        var G__8206 = n5064;
                                        var G__8207 = o5065;
                                        var G__8208 = p5066;
                                        var G__8209 = q5067;
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(G__8193, G__8194, G__8195, G__8196, G__8197, G__8198, G__8199, G__8200, G__8201, G__8202, G__8203, G__8204, G__8205, G__8206, G__8207, G__8208, G__8209) : f.call(null, G__8193, G__8194, G__8195, G__8196, G__8197, G__8198, G__8199, G__8200, G__8201, G__8202, G__8203, G__8204, G__8205, G__8206, G__8207, G__8208, G__8209);
                                      }
                                    } else {
                                      var r5068 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064, o5065, p5066, q5067, r5068);
                                        } else {
                                          var G__8210 = a5051;
                                          var G__8211 = b5052;
                                          var G__8212 = c5053;
                                          var G__8213 = d5054;
                                          var G__8214 = e5055;
                                          var G__8215 = f5056;
                                          var G__8216 = g5057;
                                          var G__8217 = h5058;
                                          var G__8218 = i5059;
                                          var G__8219 = j5060;
                                          var G__8220 = k5061;
                                          var G__8221 = l5062;
                                          var G__8222 = m5063;
                                          var G__8223 = n5064;
                                          var G__8224 = o5065;
                                          var G__8225 = p5066;
                                          var G__8226 = q5067;
                                          var G__8227 = r5068;
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(G__8210, G__8211, G__8212, G__8213, G__8214, G__8215, G__8216, G__8217, G__8218, G__8219, G__8220, G__8221, G__8222, G__8223, G__8224, G__8225, G__8226, G__8227) : f.call(null, G__8210, G__8211, G__8212, G__8213, G__8214, G__8215, G__8216, G__8217, G__8218, G__8219, G__8220, G__8221, G__8222, G__8223, G__8224, G__8225, G__8226, G__8227);
                                        }
                                      } else {
                                        var s5069 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064, o5065, p5066, q5067, r5068, s5069);
                                          } else {
                                            var G__8228 = a5051;
                                            var G__8229 = b5052;
                                            var G__8230 = c5053;
                                            var G__8231 = d5054;
                                            var G__8232 = e5055;
                                            var G__8233 = f5056;
                                            var G__8234 = g5057;
                                            var G__8235 = h5058;
                                            var G__8236 = i5059;
                                            var G__8237 = j5060;
                                            var G__8238 = k5061;
                                            var G__8239 = l5062;
                                            var G__8240 = m5063;
                                            var G__8241 = n5064;
                                            var G__8242 = o5065;
                                            var G__8243 = p5066;
                                            var G__8244 = q5067;
                                            var G__8245 = r5068;
                                            var G__8246 = s5069;
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(G__8228, G__8229, G__8230, G__8231, G__8232, G__8233, G__8234, G__8235, G__8236, G__8237, G__8238, G__8239, G__8240, G__8241, G__8242, G__8243, G__8244, G__8245, G__8246) : f.call(null, G__8228, G__8229, G__8230, G__8231, G__8232, G__8233, G__8234, G__8235, G__8236, G__8237, G__8238, G__8239, G__8240, G__8241, G__8242, G__8243, G__8244, G__8245, G__8246);
                                          }
                                        } else {
                                          var t5070 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064, o5065, p5066, q5067, r5068, s5069, t5070);
                                            } else {
                                              var G__8247 = a5051;
                                              var G__8248 = b5052;
                                              var G__8249 = c5053;
                                              var G__8250 = d5054;
                                              var G__8251 = e5055;
                                              var G__8252 = f5056;
                                              var G__8253 = g5057;
                                              var G__8254 = h5058;
                                              var G__8255 = i5059;
                                              var G__8256 = j5060;
                                              var G__8257 = k5061;
                                              var G__8258 = l5062;
                                              var G__8259 = m5063;
                                              var G__8260 = n5064;
                                              var G__8261 = o5065;
                                              var G__8262 = p5066;
                                              var G__8263 = q5067;
                                              var G__8264 = r5068;
                                              var G__8265 = s5069;
                                              var G__8266 = t5070;
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(G__8247, G__8248, G__8249, G__8250, G__8251, G__8252, G__8253, G__8254, G__8255, G__8256, G__8257, G__8258, G__8259, G__8260, G__8261, G__8262, G__8263, G__8264, G__8265, G__8266) : f.call(null, G__8247, G__8248, G__8249, G__8250, G__8251, G__8252, G__8253, G__8254, G__8255, G__8256, G__8257, G__8258, G__8259, G__8260, G__8261, G__8262, G__8263, G__8264, G__8265, G__8266);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var cljs$core$apply = null;
  var cljs$core$apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array(args));
    }
  };
  var cljs$core$apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var cljs$core$apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var cljs$core$apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var cljs$core$apply__6 = function() {
    var G__8267__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to(f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array(arglist));
      }
    };
    var G__8267 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        var G__8268__i = 0, G__8268__a = new Array(arguments.length - 5);
        while (G__8268__i < G__8268__a.length) {
          G__8268__a[G__8268__i] = arguments[G__8268__i + 5];
          ++G__8268__i;
        }
        args = new cljs.core.IndexedSeq(G__8268__a, 0);
      }
      return G__8267__delegate.call(this, f, a, b, c, d, args);
    };
    G__8267.cljs$lang$maxFixedArity = 5;
    G__8267.cljs$lang$applyTo = function(arglist__8269) {
      var f = cljs.core.first(arglist__8269);
      arglist__8269 = cljs.core.next(arglist__8269);
      var a = cljs.core.first(arglist__8269);
      arglist__8269 = cljs.core.next(arglist__8269);
      var b = cljs.core.first(arglist__8269);
      arglist__8269 = cljs.core.next(arglist__8269);
      var c = cljs.core.first(arglist__8269);
      arglist__8269 = cljs.core.next(arglist__8269);
      var d = cljs.core.first(arglist__8269);
      var args = cljs.core.rest(arglist__8269);
      return G__8267__delegate(f, a, b, c, d, args);
    };
    G__8267.cljs$core$IFn$_invoke$arity$variadic = G__8267__delegate;
    return G__8267;
  }();
  cljs$core$apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$apply__2.call(this, f, a);
      case 3:
        return cljs$core$apply__3.call(this, f, a, b);
      case 4:
        return cljs$core$apply__4.call(this, f, a, b, c);
      case 5:
        return cljs$core$apply__5.call(this, f, a, b, c, d);
      default:
        var G__8270 = null;
        if (arguments.length > 5) {
          var G__8271__i = 0, G__8271__a = new Array(arguments.length - 5);
          while (G__8271__i < G__8271__a.length) {
            G__8271__a[G__8271__i] = arguments[G__8271__i + 5];
            ++G__8271__i;
          }
          G__8270 = new cljs.core.IndexedSeq(G__8271__a, 0);
        }
        return cljs$core$apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, G__8270);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$apply.cljs$lang$maxFixedArity = 5;
  cljs$core$apply.cljs$lang$applyTo = cljs$core$apply__6.cljs$lang$applyTo;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$2 = cljs$core$apply__2;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$3 = cljs$core$apply__3;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$4 = cljs$core$apply__4;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$5 = cljs$core$apply__5;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$variadic = cljs$core$apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$apply;
}();
cljs.core.vary_meta = function() {
  var cljs$core$vary_meta = null;
  var cljs$core$vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta(obj, function() {
      var G__8287 = cljs.core.meta(obj);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8287) : f.call(null, G__8287);
    }());
  };
  var cljs$core$vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta(obj, function() {
      var G__8288 = cljs.core.meta(obj);
      var G__8289 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8288, G__8289) : f.call(null, G__8288, G__8289);
    }());
  };
  var cljs$core$vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta(obj, function() {
      var G__8290 = cljs.core.meta(obj);
      var G__8291 = a;
      var G__8292 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8290, G__8291, G__8292) : f.call(null, G__8290, G__8291, G__8292);
    }());
  };
  var cljs$core$vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta(obj, function() {
      var G__8293 = cljs.core.meta(obj);
      var G__8294 = a;
      var G__8295 = b;
      var G__8296 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8293, G__8294, G__8295, G__8296) : f.call(null, G__8293, G__8294, G__8295, G__8296);
    }());
  };
  var cljs$core$vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta(obj, function() {
      var G__8297 = cljs.core.meta(obj);
      var G__8298 = a;
      var G__8299 = b;
      var G__8300 = c;
      var G__8301 = d;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__8297, G__8298, G__8299, G__8300, G__8301) : f.call(null, G__8297, G__8298, G__8299, G__8300, G__8301);
    }());
  };
  var cljs$core$vary_meta__7 = function() {
    var G__8302__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
    };
    var G__8302 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__8303__i = 0, G__8303__a = new Array(arguments.length - 6);
        while (G__8303__i < G__8303__a.length) {
          G__8303__a[G__8303__i] = arguments[G__8303__i + 6];
          ++G__8303__i;
        }
        args = new cljs.core.IndexedSeq(G__8303__a, 0);
      }
      return G__8302__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__8302.cljs$lang$maxFixedArity = 6;
    G__8302.cljs$lang$applyTo = function(arglist__8304) {
      var obj = cljs.core.first(arglist__8304);
      arglist__8304 = cljs.core.next(arglist__8304);
      var f = cljs.core.first(arglist__8304);
      arglist__8304 = cljs.core.next(arglist__8304);
      var a = cljs.core.first(arglist__8304);
      arglist__8304 = cljs.core.next(arglist__8304);
      var b = cljs.core.first(arglist__8304);
      arglist__8304 = cljs.core.next(arglist__8304);
      var c = cljs.core.first(arglist__8304);
      arglist__8304 = cljs.core.next(arglist__8304);
      var d = cljs.core.first(arglist__8304);
      var args = cljs.core.rest(arglist__8304);
      return G__8302__delegate(obj, f, a, b, c, d, args);
    };
    G__8302.cljs$core$IFn$_invoke$arity$variadic = G__8302__delegate;
    return G__8302;
  }();
  cljs$core$vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$vary_meta__2.call(this, obj, f);
      case 3:
        return cljs$core$vary_meta__3.call(this, obj, f, a);
      case 4:
        return cljs$core$vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return cljs$core$vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return cljs$core$vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        var G__8305 = null;
        if (arguments.length > 6) {
          var G__8306__i = 0, G__8306__a = new Array(arguments.length - 6);
          while (G__8306__i < G__8306__a.length) {
            G__8306__a[G__8306__i] = arguments[G__8306__i + 6];
            ++G__8306__i;
          }
          G__8305 = new cljs.core.IndexedSeq(G__8306__a, 0);
        }
        return cljs$core$vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, G__8305);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$vary_meta.cljs$lang$maxFixedArity = 6;
  cljs$core$vary_meta.cljs$lang$applyTo = cljs$core$vary_meta__7.cljs$lang$applyTo;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$2 = cljs$core$vary_meta__2;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$3 = cljs$core$vary_meta__3;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$4 = cljs$core$vary_meta__4;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$5 = cljs$core$vary_meta__5;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$6 = cljs$core$vary_meta__6;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$variadic = cljs$core$vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var cljs$core$not_EQ_ = null;
  var cljs$core$not_EQ___1 = function(x) {
    return false;
  };
  var cljs$core$not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var cljs$core$not_EQ___3 = function() {
    var G__8307__delegate = function(x, y, more) {
      return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
    };
    var G__8307 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__8308__i = 0, G__8308__a = new Array(arguments.length - 2);
        while (G__8308__i < G__8308__a.length) {
          G__8308__a[G__8308__i] = arguments[G__8308__i + 2];
          ++G__8308__i;
        }
        more = new cljs.core.IndexedSeq(G__8308__a, 0);
      }
      return G__8307__delegate.call(this, x, y, more);
    };
    G__8307.cljs$lang$maxFixedArity = 2;
    G__8307.cljs$lang$applyTo = function(arglist__8309) {
      var x = cljs.core.first(arglist__8309);
      arglist__8309 = cljs.core.next(arglist__8309);
      var y = cljs.core.first(arglist__8309);
      var more = cljs.core.rest(arglist__8309);
      return G__8307__delegate(x, y, more);
    };
    G__8307.cljs$core$IFn$_invoke$arity$variadic = G__8307__delegate;
    return G__8307;
  }();
  cljs$core$not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$not_EQ___1.call(this, x);
      case 2:
        return cljs$core$not_EQ___2.call(this, x, y);
      default:
        var G__8310 = null;
        if (arguments.length > 2) {
          var G__8311__i = 0, G__8311__a = new Array(arguments.length - 2);
          while (G__8311__i < G__8311__a.length) {
            G__8311__a[G__8311__i] = arguments[G__8311__i + 2];
            ++G__8311__i;
          }
          G__8310 = new cljs.core.IndexedSeq(G__8311__a, 0);
        }
        return cljs$core$not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__8310);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$not_EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$not_EQ_.cljs$lang$applyTo = cljs$core$not_EQ___3.cljs$lang$applyTo;
  cljs$core$not_EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$not_EQ___1;
  cljs$core$not_EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$not_EQ___2;
  cljs$core$not_EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$not_EQ_;
}();
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t8315 !== "undefined") {
  } else {
    cljs.core.t8315 = function(nil_iter, meta8316) {
      this.nil_iter = nil_iter;
      this.meta8316 = meta8316;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t8315.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t8315.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t8315.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t8315.prototype.cljs$core$IMeta$_meta$arity$1 = function(_8317) {
      var self__ = this;
      var _8317__$1 = this;
      return self__.meta8316;
    };
    cljs.core.t8315.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_8317, meta8316__$1) {
      var self__ = this;
      var _8317__$1 = this;
      return new cljs.core.t8315(self__.nil_iter, meta8316__$1);
    };
    cljs.core.t8315.cljs$lang$type = true;
    cljs.core.t8315.cljs$lang$ctorStr = "cljs.core/t8315";
    cljs.core.t8315.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write(writer__4702__auto__, "cljs.core/t8315");
    };
    cljs.core.__GT_t8315 = function cljs$core$nil_iter_$___GT_t8315(nil_iter__$1, meta8316) {
      return new cljs.core.t8315(nil_iter__$1, meta8316);
    };
  }
  return new cljs.core.t8315(cljs$core$nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.iterable_QMARK_(coll)) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = !(lt.stepper == null);
      if (and__4110__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__4110__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__8318 = lt;
        var G__8319 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__8318, G__8319) : self__.xform.call(null, G__8318, G__8319);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__8320 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__8320) : self__.xform.call(null, G__8320);
  }
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(function() {
    var G__8322 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__8322) : xform.call(null, G__8322);
  }(), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__8324 = cljs.core.next(iters__$1);
        iters__$1 = G__8324;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__5007__auto___8325 = self__.iters.length;
  var i_8326 = 0;
  while (true) {
    if (i_8326 < n__5007__auto___8325) {
      self__.nexts[i_8326] = self__.iters[i_8326].next();
      var G__8327 = i_8326 + 1;
      i_8326 = G__8327;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = !(lt.stepper == null);
      if (and__4110__auto__) {
        return this$.hasNext();
      } else {
        return and__4110__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__8323 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__8323) : self__.xform.call(null, G__8323);
  }
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var cljs$core$multi_stepper = null;
  var cljs$core$multi_stepper__2 = function(xform, iters) {
    return cljs$core$multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
  };
  var cljs$core$multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var cljs$core$multi_stepper_$_stepfn = null;
      var cljs$core$multi_stepper_$_stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
        lt.stepper = null;
        return lt;
      };
      var cljs$core$multi_stepper_$_stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer(lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      cljs$core$multi_stepper_$_stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return cljs$core$multi_stepper_$_stepfn__1.call(this, result);
          case 2:
            return cljs$core$multi_stepper_$_stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$multi_stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$multi_stepper_$_stepfn__1;
      cljs$core$multi_stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$multi_stepper_$_stepfn__2;
      return cljs$core$multi_stepper_$_stepfn;
    }();
    return new cljs.core.MultiStepper(function() {
      var G__8332 = stepfn;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__8332) : xform.call(null, G__8332);
    }(), iters, nexts);
  };
  cljs$core$multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return cljs$core$multi_stepper__2.call(this, xform, iters);
      case 3:
        return cljs$core$multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$multi_stepper.cljs$core$IFn$_invoke$arity$2 = cljs$core$multi_stepper__2;
  cljs$core$multi_stepper.cljs$core$IFn$_invoke$arity$3 = cljs$core$multi_stepper__3;
  return cljs$core$multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__8333_8337 = cljs.core.seq(colls);
  var chunk__8334_8338 = null;
  var count__8335_8339 = 0;
  var i__8336_8340 = 0;
  while (true) {
    if (i__8336_8340 < count__8335_8339) {
      var coll_8341 = chunk__8334_8338.cljs$core$IIndexed$_nth$arity$2(null, i__8336_8340);
      iters.push(cljs.core.iter(coll_8341));
      var G__8342 = seq__8333_8337;
      var G__8343 = chunk__8334_8338;
      var G__8344 = count__8335_8339;
      var G__8345 = i__8336_8340 + 1;
      seq__8333_8337 = G__8342;
      chunk__8334_8338 = G__8343;
      count__8335_8339 = G__8344;
      i__8336_8340 = G__8345;
      continue;
    } else {
      var temp__4126__auto___8346 = cljs.core.seq(seq__8333_8337);
      if (temp__4126__auto___8346) {
        var seq__8333_8347__$1 = temp__4126__auto___8346;
        if (cljs.core.chunked_seq_QMARK_(seq__8333_8347__$1)) {
          var c__4907__auto___8348 = cljs.core.chunk_first(seq__8333_8347__$1);
          var G__8349 = cljs.core.chunk_rest(seq__8333_8347__$1);
          var G__8350 = c__4907__auto___8348;
          var G__8351 = cljs.core.count(c__4907__auto___8348);
          var G__8352 = 0;
          seq__8333_8337 = G__8349;
          chunk__8334_8338 = G__8350;
          count__8335_8339 = G__8351;
          i__8336_8340 = G__8352;
          continue;
        } else {
          var coll_8353 = cljs.core.first(seq__8333_8347__$1);
          iters.push(cljs.core.iter(coll_8353));
          var G__8354 = cljs.core.next(seq__8333_8347__$1);
          var G__8355 = null;
          var G__8356 = 0;
          var G__8357 = 0;
          seq__8333_8337 = G__8354;
          chunk__8334_8338 = G__8355;
          count__8335_8339 = G__8356;
          i__8336_8340 = G__8357;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var cljs$core$sequence = null;
  var cljs$core$sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_(coll)) {
      return coll;
    } else {
      var or__4122__auto__ = cljs.core.seq(coll);
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var cljs$core$sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var cljs$core$sequence__3 = function() {
    var G__8358__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
    };
    var G__8358 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__8359__i = 0, G__8359__a = new Array(arguments.length - 2);
        while (G__8359__i < G__8359__a.length) {
          G__8359__a[G__8359__i] = arguments[G__8359__i + 2];
          ++G__8359__i;
        }
        colls = new cljs.core.IndexedSeq(G__8359__a, 0);
      }
      return G__8358__delegate.call(this, xform, coll, colls);
    };
    G__8358.cljs$lang$maxFixedArity = 2;
    G__8358.cljs$lang$applyTo = function(arglist__8360) {
      var xform = cljs.core.first(arglist__8360);
      arglist__8360 = cljs.core.next(arglist__8360);
      var coll = cljs.core.first(arglist__8360);
      var colls = cljs.core.rest(arglist__8360);
      return G__8358__delegate(xform, coll, colls);
    };
    G__8358.cljs$core$IFn$_invoke$arity$variadic = G__8358__delegate;
    return G__8358;
  }();
  cljs$core$sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$sequence__1.call(this, xform);
      case 2:
        return cljs$core$sequence__2.call(this, xform, coll);
      default:
        var G__8361 = null;
        if (arguments.length > 2) {
          var G__8362__i = 0, G__8362__a = new Array(arguments.length - 2);
          while (G__8362__i < G__8362__a.length) {
            G__8362__a[G__8362__i] = arguments[G__8362__i + 2];
            ++G__8362__i;
          }
          G__8361 = new cljs.core.IndexedSeq(G__8362__a, 0);
        }
        return cljs$core$sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, G__8361);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$sequence.cljs$lang$maxFixedArity = 2;
  cljs$core$sequence.cljs$lang$applyTo = cljs$core$sequence__3.cljs$lang$applyTo;
  cljs$core$sequence.cljs$core$IFn$_invoke$arity$1 = cljs$core$sequence__1;
  cljs$core$sequence.cljs$core$IFn$_invoke$arity$2 = cljs$core$sequence__2;
  cljs$core$sequence.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$sequence;
}();
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__8364 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__8364) : pred.call(null, G__8364);
      }())) {
        var G__8365 = pred;
        var G__8366 = cljs.core.next(coll);
        pred = G__8365;
        coll = G__8366;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__4122__auto__ = function() {
        var G__8370 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__8370) : pred.call(null, G__8370);
      }();
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        var G__8371 = pred;
        var G__8372 = cljs.core.next(coll);
        pred = G__8371;
        coll = G__8372;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return!cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__8379 = null;
    var G__8379__0 = function() {
      return cljs.core.not(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    };
    var G__8379__1 = function(x) {
      return cljs.core.not(function() {
        var G__8376 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8376) : f.call(null, G__8376);
      }());
    };
    var G__8379__2 = function(x, y) {
      return cljs.core.not(function() {
        var G__8377 = x;
        var G__8378 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8377, G__8378) : f.call(null, G__8377, G__8378);
      }());
    };
    var G__8379__3 = function() {
      var G__8380__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__8380 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__8381__i = 0, G__8381__a = new Array(arguments.length - 2);
          while (G__8381__i < G__8381__a.length) {
            G__8381__a[G__8381__i] = arguments[G__8381__i + 2];
            ++G__8381__i;
          }
          zs = new cljs.core.IndexedSeq(G__8381__a, 0);
        }
        return G__8380__delegate.call(this, x, y, zs);
      };
      G__8380.cljs$lang$maxFixedArity = 2;
      G__8380.cljs$lang$applyTo = function(arglist__8382) {
        var x = cljs.core.first(arglist__8382);
        arglist__8382 = cljs.core.next(arglist__8382);
        var y = cljs.core.first(arglist__8382);
        var zs = cljs.core.rest(arglist__8382);
        return G__8380__delegate(x, y, zs);
      };
      G__8380.cljs$core$IFn$_invoke$arity$variadic = G__8380__delegate;
      return G__8380;
    }();
    G__8379 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__8379__0.call(this);
        case 1:
          return G__8379__1.call(this, x);
        case 2:
          return G__8379__2.call(this, x, y);
        default:
          var G__8383 = null;
          if (arguments.length > 2) {
            var G__8384__i = 0, G__8384__a = new Array(arguments.length - 2);
            while (G__8384__i < G__8384__a.length) {
              G__8384__a[G__8384__i] = arguments[G__8384__i + 2];
              ++G__8384__i;
            }
            G__8383 = new cljs.core.IndexedSeq(G__8384__a, 0);
          }
          return G__8379__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__8383);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8379.cljs$lang$maxFixedArity = 2;
    G__8379.cljs$lang$applyTo = G__8379__3.cljs$lang$applyTo;
    G__8379.cljs$core$IFn$_invoke$arity$0 = G__8379__0;
    G__8379.cljs$core$IFn$_invoke$arity$1 = G__8379__1;
    G__8379.cljs$core$IFn$_invoke$arity$2 = G__8379__2;
    G__8379.cljs$core$IFn$_invoke$arity$variadic = G__8379__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__8379;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__8385__delegate = function(args) {
      return x;
    };
    var G__8385 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__8386__i = 0, G__8386__a = new Array(arguments.length - 0);
        while (G__8386__i < G__8386__a.length) {
          G__8386__a[G__8386__i] = arguments[G__8386__i + 0];
          ++G__8386__i;
        }
        args = new cljs.core.IndexedSeq(G__8386__a, 0);
      }
      return G__8385__delegate.call(this, args);
    };
    G__8385.cljs$lang$maxFixedArity = 0;
    G__8385.cljs$lang$applyTo = function(arglist__8387) {
      var args = cljs.core.seq(arglist__8387);
      return G__8385__delegate(args);
    };
    G__8385.cljs$core$IFn$_invoke$arity$variadic = G__8385__delegate;
    return G__8385;
  }();
};
cljs.core.comp = function() {
  var cljs$core$comp = null;
  var cljs$core$comp__0 = function() {
    return cljs.core.identity;
  };
  var cljs$core$comp__1 = function(f) {
    return f;
  };
  var cljs$core$comp__2 = function(f, g) {
    return function() {
      var G__8442 = null;
      var G__8442__0 = function() {
        var G__8415 = function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8415) : f.call(null, G__8415);
      };
      var G__8442__1 = function(x) {
        var G__8416 = function() {
          var G__8417 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__8417) : g.call(null, G__8417);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8416) : f.call(null, G__8416);
      };
      var G__8442__2 = function(x, y) {
        var G__8418 = function() {
          var G__8419 = x;
          var G__8420 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__8419, G__8420) : g.call(null, G__8419, G__8420);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8418) : f.call(null, G__8418);
      };
      var G__8442__3 = function(x, y, z) {
        var G__8421 = function() {
          var G__8422 = x;
          var G__8423 = y;
          var G__8424 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__8422, G__8423, G__8424) : g.call(null, G__8422, G__8423, G__8424);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8421) : f.call(null, G__8421);
      };
      var G__8442__4 = function() {
        var G__8443__delegate = function(x, y, z, args) {
          var G__8425 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8425) : f.call(null, G__8425);
        };
        var G__8443 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__8444__i = 0, G__8444__a = new Array(arguments.length - 3);
            while (G__8444__i < G__8444__a.length) {
              G__8444__a[G__8444__i] = arguments[G__8444__i + 3];
              ++G__8444__i;
            }
            args = new cljs.core.IndexedSeq(G__8444__a, 0);
          }
          return G__8443__delegate.call(this, x, y, z, args);
        };
        G__8443.cljs$lang$maxFixedArity = 3;
        G__8443.cljs$lang$applyTo = function(arglist__8445) {
          var x = cljs.core.first(arglist__8445);
          arglist__8445 = cljs.core.next(arglist__8445);
          var y = cljs.core.first(arglist__8445);
          arglist__8445 = cljs.core.next(arglist__8445);
          var z = cljs.core.first(arglist__8445);
          var args = cljs.core.rest(arglist__8445);
          return G__8443__delegate(x, y, z, args);
        };
        G__8443.cljs$core$IFn$_invoke$arity$variadic = G__8443__delegate;
        return G__8443;
      }();
      G__8442 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__8442__0.call(this);
          case 1:
            return G__8442__1.call(this, x);
          case 2:
            return G__8442__2.call(this, x, y);
          case 3:
            return G__8442__3.call(this, x, y, z);
          default:
            var G__8446 = null;
            if (arguments.length > 3) {
              var G__8447__i = 0, G__8447__a = new Array(arguments.length - 3);
              while (G__8447__i < G__8447__a.length) {
                G__8447__a[G__8447__i] = arguments[G__8447__i + 3];
                ++G__8447__i;
              }
              G__8446 = new cljs.core.IndexedSeq(G__8447__a, 0);
            }
            return G__8442__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8446);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8442.cljs$lang$maxFixedArity = 3;
      G__8442.cljs$lang$applyTo = G__8442__4.cljs$lang$applyTo;
      G__8442.cljs$core$IFn$_invoke$arity$0 = G__8442__0;
      G__8442.cljs$core$IFn$_invoke$arity$1 = G__8442__1;
      G__8442.cljs$core$IFn$_invoke$arity$2 = G__8442__2;
      G__8442.cljs$core$IFn$_invoke$arity$3 = G__8442__3;
      G__8442.cljs$core$IFn$_invoke$arity$variadic = G__8442__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__8442;
    }();
  };
  var cljs$core$comp__3 = function(f, g, h) {
    return function() {
      var G__8448 = null;
      var G__8448__0 = function() {
        var G__8426 = function() {
          var G__8427 = function() {
            return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__8427) : g.call(null, G__8427);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8426) : f.call(null, G__8426);
      };
      var G__8448__1 = function(x) {
        var G__8428 = function() {
          var G__8429 = function() {
            var G__8430 = x;
            return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__8430) : h.call(null, G__8430);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__8429) : g.call(null, G__8429);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8428) : f.call(null, G__8428);
      };
      var G__8448__2 = function(x, y) {
        var G__8431 = function() {
          var G__8432 = function() {
            var G__8433 = x;
            var G__8434 = y;
            return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__8433, G__8434) : h.call(null, G__8433, G__8434);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__8432) : g.call(null, G__8432);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8431) : f.call(null, G__8431);
      };
      var G__8448__3 = function(x, y, z) {
        var G__8435 = function() {
          var G__8436 = function() {
            var G__8437 = x;
            var G__8438 = y;
            var G__8439 = z;
            return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__8437, G__8438, G__8439) : h.call(null, G__8437, G__8438, G__8439);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__8436) : g.call(null, G__8436);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8435) : f.call(null, G__8435);
      };
      var G__8448__4 = function() {
        var G__8449__delegate = function(x, y, z, args) {
          var G__8440 = function() {
            var G__8441 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
            return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__8441) : g.call(null, G__8441);
          }();
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8440) : f.call(null, G__8440);
        };
        var G__8449 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__8450__i = 0, G__8450__a = new Array(arguments.length - 3);
            while (G__8450__i < G__8450__a.length) {
              G__8450__a[G__8450__i] = arguments[G__8450__i + 3];
              ++G__8450__i;
            }
            args = new cljs.core.IndexedSeq(G__8450__a, 0);
          }
          return G__8449__delegate.call(this, x, y, z, args);
        };
        G__8449.cljs$lang$maxFixedArity = 3;
        G__8449.cljs$lang$applyTo = function(arglist__8451) {
          var x = cljs.core.first(arglist__8451);
          arglist__8451 = cljs.core.next(arglist__8451);
          var y = cljs.core.first(arglist__8451);
          arglist__8451 = cljs.core.next(arglist__8451);
          var z = cljs.core.first(arglist__8451);
          var args = cljs.core.rest(arglist__8451);
          return G__8449__delegate(x, y, z, args);
        };
        G__8449.cljs$core$IFn$_invoke$arity$variadic = G__8449__delegate;
        return G__8449;
      }();
      G__8448 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__8448__0.call(this);
          case 1:
            return G__8448__1.call(this, x);
          case 2:
            return G__8448__2.call(this, x, y);
          case 3:
            return G__8448__3.call(this, x, y, z);
          default:
            var G__8452 = null;
            if (arguments.length > 3) {
              var G__8453__i = 0, G__8453__a = new Array(arguments.length - 3);
              while (G__8453__i < G__8453__a.length) {
                G__8453__a[G__8453__i] = arguments[G__8453__i + 3];
                ++G__8453__i;
              }
              G__8452 = new cljs.core.IndexedSeq(G__8453__a, 0);
            }
            return G__8448__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8452);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8448.cljs$lang$maxFixedArity = 3;
      G__8448.cljs$lang$applyTo = G__8448__4.cljs$lang$applyTo;
      G__8448.cljs$core$IFn$_invoke$arity$0 = G__8448__0;
      G__8448.cljs$core$IFn$_invoke$arity$1 = G__8448__1;
      G__8448.cljs$core$IFn$_invoke$arity$2 = G__8448__2;
      G__8448.cljs$core$IFn$_invoke$arity$3 = G__8448__3;
      G__8448.cljs$core$IFn$_invoke$arity$variadic = G__8448__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__8448;
    }();
  };
  var cljs$core$comp__4 = function() {
    var G__8454__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__8455__delegate = function(args) {
            var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
            var fs__$2 = cljs.core.next(fs__$1);
            while (true) {
              if (fs__$2) {
                var G__8456 = cljs.core.first(fs__$2).call(null, ret);
                var G__8457 = cljs.core.next(fs__$2);
                ret = G__8456;
                fs__$2 = G__8457;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__8455 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              var G__8458__i = 0, G__8458__a = new Array(arguments.length - 0);
              while (G__8458__i < G__8458__a.length) {
                G__8458__a[G__8458__i] = arguments[G__8458__i + 0];
                ++G__8458__i;
              }
              args = new cljs.core.IndexedSeq(G__8458__a, 0);
            }
            return G__8455__delegate.call(this, args);
          };
          G__8455.cljs$lang$maxFixedArity = 0;
          G__8455.cljs$lang$applyTo = function(arglist__8459) {
            var args = cljs.core.seq(arglist__8459);
            return G__8455__delegate(args);
          };
          G__8455.cljs$core$IFn$_invoke$arity$variadic = G__8455__delegate;
          return G__8455;
        }();
      }(fs__$1);
    };
    var G__8454 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__8460__i = 0, G__8460__a = new Array(arguments.length - 3);
        while (G__8460__i < G__8460__a.length) {
          G__8460__a[G__8460__i] = arguments[G__8460__i + 3];
          ++G__8460__i;
        }
        fs = new cljs.core.IndexedSeq(G__8460__a, 0);
      }
      return G__8454__delegate.call(this, f1, f2, f3, fs);
    };
    G__8454.cljs$lang$maxFixedArity = 3;
    G__8454.cljs$lang$applyTo = function(arglist__8461) {
      var f1 = cljs.core.first(arglist__8461);
      arglist__8461 = cljs.core.next(arglist__8461);
      var f2 = cljs.core.first(arglist__8461);
      arglist__8461 = cljs.core.next(arglist__8461);
      var f3 = cljs.core.first(arglist__8461);
      var fs = cljs.core.rest(arglist__8461);
      return G__8454__delegate(f1, f2, f3, fs);
    };
    G__8454.cljs$core$IFn$_invoke$arity$variadic = G__8454__delegate;
    return G__8454;
  }();
  cljs$core$comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$comp__0.call(this);
      case 1:
        return cljs$core$comp__1.call(this, f1);
      case 2:
        return cljs$core$comp__2.call(this, f1, f2);
      case 3:
        return cljs$core$comp__3.call(this, f1, f2, f3);
      default:
        var G__8462 = null;
        if (arguments.length > 3) {
          var G__8463__i = 0, G__8463__a = new Array(arguments.length - 3);
          while (G__8463__i < G__8463__a.length) {
            G__8463__a[G__8463__i] = arguments[G__8463__i + 3];
            ++G__8463__i;
          }
          G__8462 = new cljs.core.IndexedSeq(G__8463__a, 0);
        }
        return cljs$core$comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, G__8462);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$comp.cljs$lang$maxFixedArity = 3;
  cljs$core$comp.cljs$lang$applyTo = cljs$core$comp__4.cljs$lang$applyTo;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$0 = cljs$core$comp__0;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$1 = cljs$core$comp__1;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$2 = cljs$core$comp__2;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$3 = cljs$core$comp__3;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$variadic = cljs$core$comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$comp;
}();
cljs.core.partial = function() {
  var cljs$core$partial = null;
  var cljs$core$partial__1 = function(f) {
    return f;
  };
  var cljs$core$partial__2 = function(f, arg1) {
    return function() {
      var G__8548 = null;
      var G__8548__0 = function() {
        var G__8506 = arg1;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8506) : f.call(null, G__8506);
      };
      var G__8548__1 = function(x) {
        var G__8507 = arg1;
        var G__8508 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8507, G__8508) : f.call(null, G__8507, G__8508);
      };
      var G__8548__2 = function(x, y) {
        var G__8509 = arg1;
        var G__8510 = x;
        var G__8511 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8509, G__8510, G__8511) : f.call(null, G__8509, G__8510, G__8511);
      };
      var G__8548__3 = function(x, y, z) {
        var G__8512 = arg1;
        var G__8513 = x;
        var G__8514 = y;
        var G__8515 = z;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8512, G__8513, G__8514, G__8515) : f.call(null, G__8512, G__8513, G__8514, G__8515);
      };
      var G__8548__4 = function() {
        var G__8549__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
        };
        var G__8549 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__8550__i = 0, G__8550__a = new Array(arguments.length - 3);
            while (G__8550__i < G__8550__a.length) {
              G__8550__a[G__8550__i] = arguments[G__8550__i + 3];
              ++G__8550__i;
            }
            args = new cljs.core.IndexedSeq(G__8550__a, 0);
          }
          return G__8549__delegate.call(this, x, y, z, args);
        };
        G__8549.cljs$lang$maxFixedArity = 3;
        G__8549.cljs$lang$applyTo = function(arglist__8551) {
          var x = cljs.core.first(arglist__8551);
          arglist__8551 = cljs.core.next(arglist__8551);
          var y = cljs.core.first(arglist__8551);
          arglist__8551 = cljs.core.next(arglist__8551);
          var z = cljs.core.first(arglist__8551);
          var args = cljs.core.rest(arglist__8551);
          return G__8549__delegate(x, y, z, args);
        };
        G__8549.cljs$core$IFn$_invoke$arity$variadic = G__8549__delegate;
        return G__8549;
      }();
      G__8548 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__8548__0.call(this);
          case 1:
            return G__8548__1.call(this, x);
          case 2:
            return G__8548__2.call(this, x, y);
          case 3:
            return G__8548__3.call(this, x, y, z);
          default:
            var G__8552 = null;
            if (arguments.length > 3) {
              var G__8553__i = 0, G__8553__a = new Array(arguments.length - 3);
              while (G__8553__i < G__8553__a.length) {
                G__8553__a[G__8553__i] = arguments[G__8553__i + 3];
                ++G__8553__i;
              }
              G__8552 = new cljs.core.IndexedSeq(G__8553__a, 0);
            }
            return G__8548__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8552);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8548.cljs$lang$maxFixedArity = 3;
      G__8548.cljs$lang$applyTo = G__8548__4.cljs$lang$applyTo;
      G__8548.cljs$core$IFn$_invoke$arity$0 = G__8548__0;
      G__8548.cljs$core$IFn$_invoke$arity$1 = G__8548__1;
      G__8548.cljs$core$IFn$_invoke$arity$2 = G__8548__2;
      G__8548.cljs$core$IFn$_invoke$arity$3 = G__8548__3;
      G__8548.cljs$core$IFn$_invoke$arity$variadic = G__8548__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__8548;
    }();
  };
  var cljs$core$partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__8554 = null;
      var G__8554__0 = function() {
        var G__8516 = arg1;
        var G__8517 = arg2;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8516, G__8517) : f.call(null, G__8516, G__8517);
      };
      var G__8554__1 = function(x) {
        var G__8518 = arg1;
        var G__8519 = arg2;
        var G__8520 = x;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8518, G__8519, G__8520) : f.call(null, G__8518, G__8519, G__8520);
      };
      var G__8554__2 = function(x, y) {
        var G__8521 = arg1;
        var G__8522 = arg2;
        var G__8523 = x;
        var G__8524 = y;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8521, G__8522, G__8523, G__8524) : f.call(null, G__8521, G__8522, G__8523, G__8524);
      };
      var G__8554__3 = function(x, y, z) {
        var G__8525 = arg1;
        var G__8526 = arg2;
        var G__8527 = x;
        var G__8528 = y;
        var G__8529 = z;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__8525, G__8526, G__8527, G__8528, G__8529) : f.call(null, G__8525, G__8526, G__8527, G__8528, G__8529);
      };
      var G__8554__4 = function() {
        var G__8555__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
        };
        var G__8555 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__8556__i = 0, G__8556__a = new Array(arguments.length - 3);
            while (G__8556__i < G__8556__a.length) {
              G__8556__a[G__8556__i] = arguments[G__8556__i + 3];
              ++G__8556__i;
            }
            args = new cljs.core.IndexedSeq(G__8556__a, 0);
          }
          return G__8555__delegate.call(this, x, y, z, args);
        };
        G__8555.cljs$lang$maxFixedArity = 3;
        G__8555.cljs$lang$applyTo = function(arglist__8557) {
          var x = cljs.core.first(arglist__8557);
          arglist__8557 = cljs.core.next(arglist__8557);
          var y = cljs.core.first(arglist__8557);
          arglist__8557 = cljs.core.next(arglist__8557);
          var z = cljs.core.first(arglist__8557);
          var args = cljs.core.rest(arglist__8557);
          return G__8555__delegate(x, y, z, args);
        };
        G__8555.cljs$core$IFn$_invoke$arity$variadic = G__8555__delegate;
        return G__8555;
      }();
      G__8554 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__8554__0.call(this);
          case 1:
            return G__8554__1.call(this, x);
          case 2:
            return G__8554__2.call(this, x, y);
          case 3:
            return G__8554__3.call(this, x, y, z);
          default:
            var G__8558 = null;
            if (arguments.length > 3) {
              var G__8559__i = 0, G__8559__a = new Array(arguments.length - 3);
              while (G__8559__i < G__8559__a.length) {
                G__8559__a[G__8559__i] = arguments[G__8559__i + 3];
                ++G__8559__i;
              }
              G__8558 = new cljs.core.IndexedSeq(G__8559__a, 0);
            }
            return G__8554__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8558);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8554.cljs$lang$maxFixedArity = 3;
      G__8554.cljs$lang$applyTo = G__8554__4.cljs$lang$applyTo;
      G__8554.cljs$core$IFn$_invoke$arity$0 = G__8554__0;
      G__8554.cljs$core$IFn$_invoke$arity$1 = G__8554__1;
      G__8554.cljs$core$IFn$_invoke$arity$2 = G__8554__2;
      G__8554.cljs$core$IFn$_invoke$arity$3 = G__8554__3;
      G__8554.cljs$core$IFn$_invoke$arity$variadic = G__8554__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__8554;
    }();
  };
  var cljs$core$partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__8560 = null;
      var G__8560__0 = function() {
        var G__8530 = arg1;
        var G__8531 = arg2;
        var G__8532 = arg3;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8530, G__8531, G__8532) : f.call(null, G__8530, G__8531, G__8532);
      };
      var G__8560__1 = function(x) {
        var G__8533 = arg1;
        var G__8534 = arg2;
        var G__8535 = arg3;
        var G__8536 = x;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8533, G__8534, G__8535, G__8536) : f.call(null, G__8533, G__8534, G__8535, G__8536);
      };
      var G__8560__2 = function(x, y) {
        var G__8537 = arg1;
        var G__8538 = arg2;
        var G__8539 = arg3;
        var G__8540 = x;
        var G__8541 = y;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__8537, G__8538, G__8539, G__8540, G__8541) : f.call(null, G__8537, G__8538, G__8539, G__8540, G__8541);
      };
      var G__8560__3 = function(x, y, z) {
        var G__8542 = arg1;
        var G__8543 = arg2;
        var G__8544 = arg3;
        var G__8545 = x;
        var G__8546 = y;
        var G__8547 = z;
        return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__8542, G__8543, G__8544, G__8545, G__8546, G__8547) : f.call(null, G__8542, G__8543, G__8544, G__8545, G__8546, G__8547);
      };
      var G__8560__4 = function() {
        var G__8561__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
        };
        var G__8561 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__8562__i = 0, G__8562__a = new Array(arguments.length - 3);
            while (G__8562__i < G__8562__a.length) {
              G__8562__a[G__8562__i] = arguments[G__8562__i + 3];
              ++G__8562__i;
            }
            args = new cljs.core.IndexedSeq(G__8562__a, 0);
          }
          return G__8561__delegate.call(this, x, y, z, args);
        };
        G__8561.cljs$lang$maxFixedArity = 3;
        G__8561.cljs$lang$applyTo = function(arglist__8563) {
          var x = cljs.core.first(arglist__8563);
          arglist__8563 = cljs.core.next(arglist__8563);
          var y = cljs.core.first(arglist__8563);
          arglist__8563 = cljs.core.next(arglist__8563);
          var z = cljs.core.first(arglist__8563);
          var args = cljs.core.rest(arglist__8563);
          return G__8561__delegate(x, y, z, args);
        };
        G__8561.cljs$core$IFn$_invoke$arity$variadic = G__8561__delegate;
        return G__8561;
      }();
      G__8560 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__8560__0.call(this);
          case 1:
            return G__8560__1.call(this, x);
          case 2:
            return G__8560__2.call(this, x, y);
          case 3:
            return G__8560__3.call(this, x, y, z);
          default:
            var G__8564 = null;
            if (arguments.length > 3) {
              var G__8565__i = 0, G__8565__a = new Array(arguments.length - 3);
              while (G__8565__i < G__8565__a.length) {
                G__8565__a[G__8565__i] = arguments[G__8565__i + 3];
                ++G__8565__i;
              }
              G__8564 = new cljs.core.IndexedSeq(G__8565__a, 0);
            }
            return G__8560__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8564);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8560.cljs$lang$maxFixedArity = 3;
      G__8560.cljs$lang$applyTo = G__8560__4.cljs$lang$applyTo;
      G__8560.cljs$core$IFn$_invoke$arity$0 = G__8560__0;
      G__8560.cljs$core$IFn$_invoke$arity$1 = G__8560__1;
      G__8560.cljs$core$IFn$_invoke$arity$2 = G__8560__2;
      G__8560.cljs$core$IFn$_invoke$arity$3 = G__8560__3;
      G__8560.cljs$core$IFn$_invoke$arity$variadic = G__8560__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__8560;
    }();
  };
  var cljs$core$partial__5 = function() {
    var G__8566__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__8567__delegate = function(args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
        };
        var G__8567 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            var G__8568__i = 0, G__8568__a = new Array(arguments.length - 0);
            while (G__8568__i < G__8568__a.length) {
              G__8568__a[G__8568__i] = arguments[G__8568__i + 0];
              ++G__8568__i;
            }
            args = new cljs.core.IndexedSeq(G__8568__a, 0);
          }
          return G__8567__delegate.call(this, args);
        };
        G__8567.cljs$lang$maxFixedArity = 0;
        G__8567.cljs$lang$applyTo = function(arglist__8569) {
          var args = cljs.core.seq(arglist__8569);
          return G__8567__delegate(args);
        };
        G__8567.cljs$core$IFn$_invoke$arity$variadic = G__8567__delegate;
        return G__8567;
      }();
    };
    var G__8566 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__8570__i = 0, G__8570__a = new Array(arguments.length - 4);
        while (G__8570__i < G__8570__a.length) {
          G__8570__a[G__8570__i] = arguments[G__8570__i + 4];
          ++G__8570__i;
        }
        more = new cljs.core.IndexedSeq(G__8570__a, 0);
      }
      return G__8566__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__8566.cljs$lang$maxFixedArity = 4;
    G__8566.cljs$lang$applyTo = function(arglist__8571) {
      var f = cljs.core.first(arglist__8571);
      arglist__8571 = cljs.core.next(arglist__8571);
      var arg1 = cljs.core.first(arglist__8571);
      arglist__8571 = cljs.core.next(arglist__8571);
      var arg2 = cljs.core.first(arglist__8571);
      arglist__8571 = cljs.core.next(arglist__8571);
      var arg3 = cljs.core.first(arglist__8571);
      var more = cljs.core.rest(arglist__8571);
      return G__8566__delegate(f, arg1, arg2, arg3, more);
    };
    G__8566.cljs$core$IFn$_invoke$arity$variadic = G__8566__delegate;
    return G__8566;
  }();
  cljs$core$partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$partial__1.call(this, f);
      case 2:
        return cljs$core$partial__2.call(this, f, arg1);
      case 3:
        return cljs$core$partial__3.call(this, f, arg1, arg2);
      case 4:
        return cljs$core$partial__4.call(this, f, arg1, arg2, arg3);
      default:
        var G__8572 = null;
        if (arguments.length > 4) {
          var G__8573__i = 0, G__8573__a = new Array(arguments.length - 4);
          while (G__8573__i < G__8573__a.length) {
            G__8573__a[G__8573__i] = arguments[G__8573__i + 4];
            ++G__8573__i;
          }
          G__8572 = new cljs.core.IndexedSeq(G__8573__a, 0);
        }
        return cljs$core$partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, G__8572);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$partial.cljs$lang$maxFixedArity = 4;
  cljs$core$partial.cljs$lang$applyTo = cljs$core$partial__5.cljs$lang$applyTo;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$1 = cljs$core$partial__1;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$2 = cljs$core$partial__2;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$3 = cljs$core$partial__3;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$4 = cljs$core$partial__4;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$variadic = cljs$core$partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$partial;
}();
cljs.core.fnil = function() {
  var cljs$core$fnil = null;
  var cljs$core$fnil__2 = function(f, x) {
    return function() {
      var G__8606 = null;
      var G__8606__1 = function(a) {
        var G__8590 = a == null ? x : a;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8590) : f.call(null, G__8590);
      };
      var G__8606__2 = function(a, b) {
        var G__8591 = a == null ? x : a;
        var G__8592 = b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8591, G__8592) : f.call(null, G__8591, G__8592);
      };
      var G__8606__3 = function(a, b, c) {
        var G__8593 = a == null ? x : a;
        var G__8594 = b;
        var G__8595 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8593, G__8594, G__8595) : f.call(null, G__8593, G__8594, G__8595);
      };
      var G__8606__4 = function() {
        var G__8607__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
        };
        var G__8607 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__8608__i = 0, G__8608__a = new Array(arguments.length - 3);
            while (G__8608__i < G__8608__a.length) {
              G__8608__a[G__8608__i] = arguments[G__8608__i + 3];
              ++G__8608__i;
            }
            ds = new cljs.core.IndexedSeq(G__8608__a, 0);
          }
          return G__8607__delegate.call(this, a, b, c, ds);
        };
        G__8607.cljs$lang$maxFixedArity = 3;
        G__8607.cljs$lang$applyTo = function(arglist__8609) {
          var a = cljs.core.first(arglist__8609);
          arglist__8609 = cljs.core.next(arglist__8609);
          var b = cljs.core.first(arglist__8609);
          arglist__8609 = cljs.core.next(arglist__8609);
          var c = cljs.core.first(arglist__8609);
          var ds = cljs.core.rest(arglist__8609);
          return G__8607__delegate(a, b, c, ds);
        };
        G__8607.cljs$core$IFn$_invoke$arity$variadic = G__8607__delegate;
        return G__8607;
      }();
      G__8606 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__8606__1.call(this, a);
          case 2:
            return G__8606__2.call(this, a, b);
          case 3:
            return G__8606__3.call(this, a, b, c);
          default:
            var G__8610 = null;
            if (arguments.length > 3) {
              var G__8611__i = 0, G__8611__a = new Array(arguments.length - 3);
              while (G__8611__i < G__8611__a.length) {
                G__8611__a[G__8611__i] = arguments[G__8611__i + 3];
                ++G__8611__i;
              }
              G__8610 = new cljs.core.IndexedSeq(G__8611__a, 0);
            }
            return G__8606__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8610);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8606.cljs$lang$maxFixedArity = 3;
      G__8606.cljs$lang$applyTo = G__8606__4.cljs$lang$applyTo;
      G__8606.cljs$core$IFn$_invoke$arity$1 = G__8606__1;
      G__8606.cljs$core$IFn$_invoke$arity$2 = G__8606__2;
      G__8606.cljs$core$IFn$_invoke$arity$3 = G__8606__3;
      G__8606.cljs$core$IFn$_invoke$arity$variadic = G__8606__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__8606;
    }();
  };
  var cljs$core$fnil__3 = function(f, x, y) {
    return function() {
      var G__8612 = null;
      var G__8612__2 = function(a, b) {
        var G__8596 = a == null ? x : a;
        var G__8597 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8596, G__8597) : f.call(null, G__8596, G__8597);
      };
      var G__8612__3 = function(a, b, c) {
        var G__8598 = a == null ? x : a;
        var G__8599 = b == null ? y : b;
        var G__8600 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8598, G__8599, G__8600) : f.call(null, G__8598, G__8599, G__8600);
      };
      var G__8612__4 = function() {
        var G__8613__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__8613 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__8614__i = 0, G__8614__a = new Array(arguments.length - 3);
            while (G__8614__i < G__8614__a.length) {
              G__8614__a[G__8614__i] = arguments[G__8614__i + 3];
              ++G__8614__i;
            }
            ds = new cljs.core.IndexedSeq(G__8614__a, 0);
          }
          return G__8613__delegate.call(this, a, b, c, ds);
        };
        G__8613.cljs$lang$maxFixedArity = 3;
        G__8613.cljs$lang$applyTo = function(arglist__8615) {
          var a = cljs.core.first(arglist__8615);
          arglist__8615 = cljs.core.next(arglist__8615);
          var b = cljs.core.first(arglist__8615);
          arglist__8615 = cljs.core.next(arglist__8615);
          var c = cljs.core.first(arglist__8615);
          var ds = cljs.core.rest(arglist__8615);
          return G__8613__delegate(a, b, c, ds);
        };
        G__8613.cljs$core$IFn$_invoke$arity$variadic = G__8613__delegate;
        return G__8613;
      }();
      G__8612 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__8612__2.call(this, a, b);
          case 3:
            return G__8612__3.call(this, a, b, c);
          default:
            var G__8616 = null;
            if (arguments.length > 3) {
              var G__8617__i = 0, G__8617__a = new Array(arguments.length - 3);
              while (G__8617__i < G__8617__a.length) {
                G__8617__a[G__8617__i] = arguments[G__8617__i + 3];
                ++G__8617__i;
              }
              G__8616 = new cljs.core.IndexedSeq(G__8617__a, 0);
            }
            return G__8612__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8616);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8612.cljs$lang$maxFixedArity = 3;
      G__8612.cljs$lang$applyTo = G__8612__4.cljs$lang$applyTo;
      G__8612.cljs$core$IFn$_invoke$arity$2 = G__8612__2;
      G__8612.cljs$core$IFn$_invoke$arity$3 = G__8612__3;
      G__8612.cljs$core$IFn$_invoke$arity$variadic = G__8612__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__8612;
    }();
  };
  var cljs$core$fnil__4 = function(f, x, y, z) {
    return function() {
      var G__8618 = null;
      var G__8618__2 = function(a, b) {
        var G__8601 = a == null ? x : a;
        var G__8602 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8601, G__8602) : f.call(null, G__8601, G__8602);
      };
      var G__8618__3 = function(a, b, c) {
        var G__8603 = a == null ? x : a;
        var G__8604 = b == null ? y : b;
        var G__8605 = c == null ? z : c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8603, G__8604, G__8605) : f.call(null, G__8603, G__8604, G__8605);
      };
      var G__8618__4 = function() {
        var G__8619__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__8619 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__8620__i = 0, G__8620__a = new Array(arguments.length - 3);
            while (G__8620__i < G__8620__a.length) {
              G__8620__a[G__8620__i] = arguments[G__8620__i + 3];
              ++G__8620__i;
            }
            ds = new cljs.core.IndexedSeq(G__8620__a, 0);
          }
          return G__8619__delegate.call(this, a, b, c, ds);
        };
        G__8619.cljs$lang$maxFixedArity = 3;
        G__8619.cljs$lang$applyTo = function(arglist__8621) {
          var a = cljs.core.first(arglist__8621);
          arglist__8621 = cljs.core.next(arglist__8621);
          var b = cljs.core.first(arglist__8621);
          arglist__8621 = cljs.core.next(arglist__8621);
          var c = cljs.core.first(arglist__8621);
          var ds = cljs.core.rest(arglist__8621);
          return G__8619__delegate(a, b, c, ds);
        };
        G__8619.cljs$core$IFn$_invoke$arity$variadic = G__8619__delegate;
        return G__8619;
      }();
      G__8618 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__8618__2.call(this, a, b);
          case 3:
            return G__8618__3.call(this, a, b, c);
          default:
            var G__8622 = null;
            if (arguments.length > 3) {
              var G__8623__i = 0, G__8623__a = new Array(arguments.length - 3);
              while (G__8623__i < G__8623__a.length) {
                G__8623__a[G__8623__i] = arguments[G__8623__i + 3];
                ++G__8623__i;
              }
              G__8622 = new cljs.core.IndexedSeq(G__8623__a, 0);
            }
            return G__8618__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8622);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8618.cljs$lang$maxFixedArity = 3;
      G__8618.cljs$lang$applyTo = G__8618__4.cljs$lang$applyTo;
      G__8618.cljs$core$IFn$_invoke$arity$2 = G__8618__2;
      G__8618.cljs$core$IFn$_invoke$arity$3 = G__8618__3;
      G__8618.cljs$core$IFn$_invoke$arity$variadic = G__8618__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__8618;
    }();
  };
  cljs$core$fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return cljs$core$fnil__2.call(this, f, x);
      case 3:
        return cljs$core$fnil__3.call(this, f, x, y);
      case 4:
        return cljs$core$fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$fnil.cljs$core$IFn$_invoke$arity$2 = cljs$core$fnil__2;
  cljs$core$fnil.cljs$core$IFn$_invoke$arity$3 = cljs$core$fnil__3;
  cljs$core$fnil.cljs$core$IFn$_invoke$arity$4 = cljs$core$fnil__4;
  return cljs$core$fnil;
}();
cljs.core.map_indexed = function() {
  var cljs$core$map_indexed = null;
  var cljs$core$map_indexed__1 = function(f) {
    return function(rf) {
      var i = function() {
        var G__8654 = -1;
        return cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(G__8654) : cljs.core.volatile_BANG_.call(null, G__8654);
      }();
      return function(i) {
        return function() {
          var G__8684 = null;
          var G__8684__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__8684__1 = function(result) {
            var G__8655 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__8655) : rf.call(null, G__8655);
          };
          var G__8684__2 = function(result, input) {
            var G__8656 = result;
            var G__8657 = function() {
              var G__8658 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
              var G__8659 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8658, G__8659) : f.call(null, G__8658, G__8659);
            }();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__8656, G__8657) : rf.call(null, G__8656, G__8657);
          };
          G__8684 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__8684__0.call(this);
              case 1:
                return G__8684__1.call(this, result);
              case 2:
                return G__8684__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__8684.cljs$core$IFn$_invoke$arity$0 = G__8684__0;
          G__8684.cljs$core$IFn$_invoke$arity$1 = G__8684__1;
          G__8684.cljs$core$IFn$_invoke$arity$2 = G__8684__2;
          return G__8684;
        }();
      }(i);
    };
  };
  var cljs$core$map_indexed__2 = function(f, coll) {
    var mapi = function cljs$core$map_indexed_$_mapi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__5007__auto___8685 = size;
            var i_8686 = 0;
            while (true) {
              if (i_8686 < n__5007__auto___8685) {
                cljs.core.chunk_append(b, function() {
                  var G__8680 = idx + i_8686;
                  var G__8681 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8686);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8680, G__8681) : f.call(null, G__8680, G__8681);
                }());
                var G__8687 = i_8686 + 1;
                i_8686 = G__8687;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$map_indexed_$_mapi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            return cljs.core.cons(function() {
              var G__8682 = idx;
              var G__8683 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8682, G__8683) : f.call(null, G__8682, G__8683);
            }(), cljs$core$map_indexed_$_mapi(idx + 1, cljs.core.rest(s)));
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return mapi(0, coll);
  };
  cljs$core$map_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$map_indexed__1.call(this, f);
      case 2:
        return cljs$core$map_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$map_indexed.cljs$core$IFn$_invoke$arity$1 = cljs$core$map_indexed__1;
  cljs$core$map_indexed.cljs$core$IFn$_invoke$arity$2 = cljs$core$map_indexed__2;
  return cljs$core$map_indexed;
}();
cljs.core.keep = function() {
  var cljs$core$keep = null;
  var cljs$core$keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__8706 = null;
        var G__8706__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__8706__1 = function(result) {
          var G__8700 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__8700) : rf.call(null, G__8700);
        };
        var G__8706__2 = function(result, input) {
          var v = function() {
            var G__8701 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8701) : f.call(null, G__8701);
          }();
          if (v == null) {
            return result;
          } else {
            var G__8702 = result;
            var G__8703 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__8702, G__8703) : rf.call(null, G__8702, G__8703);
          }
        };
        G__8706 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__8706__0.call(this);
            case 1:
              return G__8706__1.call(this, result);
            case 2:
              return G__8706__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8706.cljs$core$IFn$_invoke$arity$0 = G__8706__0;
        G__8706.cljs$core$IFn$_invoke$arity$1 = G__8706__1;
        G__8706.cljs$core$IFn$_invoke$arity$2 = G__8706__2;
        return G__8706;
      }();
    };
  };
  var cljs$core$keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5007__auto___8707 = size;
          var i_8708 = 0;
          while (true) {
            if (i_8708 < n__5007__auto___8707) {
              var x_8709 = function() {
                var G__8704 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8708);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8704) : f.call(null, G__8704);
              }();
              if (x_8709 == null) {
              } else {
                cljs.core.chunk_append(b, x_8709);
              }
              var G__8710 = i_8708 + 1;
              i_8708 = G__8710;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__8705 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8705) : f.call(null, G__8705);
          }();
          if (x == null) {
            return cljs$core$keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$keep__1.call(this, f);
      case 2:
        return cljs$core$keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$keep.cljs$core$IFn$_invoke$arity$1 = cljs$core$keep__1;
  cljs$core$keep.cljs$core$IFn$_invoke$arity$2 = cljs$core$keep__2;
  return cljs$core$keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__8711 = this$__$1;
  return goog.getUid(G__8711);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__8712 = cljs.core.seq(self__.watches);
  var chunk__8713 = null;
  var count__8714 = 0;
  var i__8715 = 0;
  while (true) {
    if (i__8715 < count__8714) {
      var vec__8716 = chunk__8713.cljs$core$IIndexed$_nth$arity$2(null, i__8715);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8716, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8716, 1, null);
      var G__8717_8726 = key;
      var G__8718_8727 = this$__$1;
      var G__8719_8728 = oldval;
      var G__8720_8729 = newval;
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8717_8726, G__8718_8727, G__8719_8728, G__8720_8729) : f.call(null, G__8717_8726, G__8718_8727, G__8719_8728, G__8720_8729);
      var G__8730 = seq__8712;
      var G__8731 = chunk__8713;
      var G__8732 = count__8714;
      var G__8733 = i__8715 + 1;
      seq__8712 = G__8730;
      chunk__8713 = G__8731;
      count__8714 = G__8732;
      i__8715 = G__8733;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__8712);
      if (temp__4126__auto__) {
        var seq__8712__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__8712__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__8712__$1);
          var G__8734 = cljs.core.chunk_rest(seq__8712__$1);
          var G__8735 = c__4907__auto__;
          var G__8736 = cljs.core.count(c__4907__auto__);
          var G__8737 = 0;
          seq__8712 = G__8734;
          chunk__8713 = G__8735;
          count__8714 = G__8736;
          i__8715 = G__8737;
          continue;
        } else {
          var vec__8721 = cljs.core.first(seq__8712__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8721, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8721, 1, null);
          var G__8722_8738 = key;
          var G__8723_8739 = this$__$1;
          var G__8724_8740 = oldval;
          var G__8725_8741 = newval;
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8722_8738, G__8723_8739, G__8724_8740, G__8725_8741) : f.call(null, G__8722_8738, G__8723_8739, G__8724_8740, G__8725_8741);
          var G__8742 = cljs.core.next(seq__8712__$1);
          var G__8743 = null;
          var G__8744 = 0;
          var G__8745 = 0;
          seq__8712 = G__8742;
          chunk__8713 = G__8743;
          count__8714 = G__8744;
          i__8715 = G__8745;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var cljs$core$atom = null;
  var cljs$core$atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var cljs$core$atom__2 = function() {
    var G__8749__delegate = function(x, p__8746) {
      var map__8748 = p__8746;
      var map__8748__$1 = cljs.core.seq_QMARK_(map__8748) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__8748) : map__8748;
      var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8748__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8748__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__8749 = function(x, var_args) {
      var p__8746 = null;
      if (arguments.length > 1) {
        var G__8750__i = 0, G__8750__a = new Array(arguments.length - 1);
        while (G__8750__i < G__8750__a.length) {
          G__8750__a[G__8750__i] = arguments[G__8750__i + 1];
          ++G__8750__i;
        }
        p__8746 = new cljs.core.IndexedSeq(G__8750__a, 0);
      }
      return G__8749__delegate.call(this, x, p__8746);
    };
    G__8749.cljs$lang$maxFixedArity = 1;
    G__8749.cljs$lang$applyTo = function(arglist__8751) {
      var x = cljs.core.first(arglist__8751);
      var p__8746 = cljs.core.rest(arglist__8751);
      return G__8749__delegate(x, p__8746);
    };
    G__8749.cljs$core$IFn$_invoke$arity$variadic = G__8749__delegate;
    return G__8749;
  }();
  cljs$core$atom = function(x, var_args) {
    var p__8746 = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$atom__1.call(this, x);
      default:
        var G__8752 = null;
        if (arguments.length > 1) {
          var G__8753__i = 0, G__8753__a = new Array(arguments.length - 1);
          while (G__8753__i < G__8753__a.length) {
            G__8753__a[G__8753__i] = arguments[G__8753__i + 1];
            ++G__8753__i;
          }
          G__8752 = new cljs.core.IndexedSeq(G__8753__a, 0);
        }
        return cljs$core$atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__8752);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$atom.cljs$lang$maxFixedArity = 1;
  cljs$core$atom.cljs$lang$applyTo = cljs$core$atom__2.cljs$lang$applyTo;
  cljs$core$atom.cljs$core$IFn$_invoke$arity$1 = cljs$core$atom__1;
  cljs$core$atom.cljs$core$IFn$_invoke$arity$variadic = cljs$core$atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$atom;
}();
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(function() {
        var G__8756 = new_value;
        return validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(G__8756) : validate.call(null, G__8756);
      }())) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__8757 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__8757) : cljs.core.pr_str.call(null, G__8757);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var cljs$core$swap_BANG_ = null;
  var cljs$core$swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__8764 = a.state;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8764) : f.call(null, G__8764);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
    }
  };
  var cljs$core$swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__8765 = a.state;
        var G__8766 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8765, G__8766) : f.call(null, G__8765, G__8766);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
    }
  };
  var cljs$core$swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__8767 = a.state;
        var G__8768 = x;
        var G__8769 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8767, G__8768, G__8769) : f.call(null, G__8767, G__8768, G__8769);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
    }
  };
  var cljs$core$swap_BANG___5 = function() {
    var G__8770__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
      }
    };
    var G__8770 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__8771__i = 0, G__8771__a = new Array(arguments.length - 4);
        while (G__8771__i < G__8771__a.length) {
          G__8771__a[G__8771__i] = arguments[G__8771__i + 4];
          ++G__8771__i;
        }
        more = new cljs.core.IndexedSeq(G__8771__a, 0);
      }
      return G__8770__delegate.call(this, a, f, x, y, more);
    };
    G__8770.cljs$lang$maxFixedArity = 4;
    G__8770.cljs$lang$applyTo = function(arglist__8772) {
      var a = cljs.core.first(arglist__8772);
      arglist__8772 = cljs.core.next(arglist__8772);
      var f = cljs.core.first(arglist__8772);
      arglist__8772 = cljs.core.next(arglist__8772);
      var x = cljs.core.first(arglist__8772);
      arglist__8772 = cljs.core.next(arglist__8772);
      var y = cljs.core.first(arglist__8772);
      var more = cljs.core.rest(arglist__8772);
      return G__8770__delegate(a, f, x, y, more);
    };
    G__8770.cljs$core$IFn$_invoke$arity$variadic = G__8770__delegate;
    return G__8770;
  }();
  cljs$core$swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$swap_BANG___2.call(this, a, f);
      case 3:
        return cljs$core$swap_BANG___3.call(this, a, f, x);
      case 4:
        return cljs$core$swap_BANG___4.call(this, a, f, x, y);
      default:
        var G__8773 = null;
        if (arguments.length > 4) {
          var G__8774__i = 0, G__8774__a = new Array(arguments.length - 4);
          while (G__8774__i < G__8774__a.length) {
            G__8774__a[G__8774__i] = arguments[G__8774__i + 4];
            ++G__8774__i;
          }
          G__8773 = new cljs.core.IndexedSeq(G__8774__a, 0);
        }
        return cljs$core$swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, G__8773);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$swap_BANG_.cljs$lang$maxFixedArity = 4;
  cljs$core$swap_BANG_.cljs$lang$applyTo = cljs$core$swap_BANG___5.cljs$lang$applyTo;
  cljs$core$swap_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$swap_BANG___2;
  cljs$core$swap_BANG_.cljs$core$IFn$_invoke$arity$3 = cljs$core$swap_BANG___3;
  cljs$core$swap_BANG_.cljs$core$IFn$_invoke$arity$4 = cljs$core$swap_BANG___4;
  cljs$core$swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function() {
  var cljs$core$keep_indexed = null;
  var cljs$core$keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__8841 = null;
          var G__8841__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__8841__1 = function(result) {
            var G__8808 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__8808) : rf.call(null, G__8808);
          };
          var G__8841__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            var v = function() {
              var G__8809 = i;
              var G__8810 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8809, G__8810) : f.call(null, G__8809, G__8810);
            }();
            if (v == null) {
              return result;
            } else {
              var G__8811 = result;
              var G__8812 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__8811, G__8812) : rf.call(null, G__8811, G__8812);
            }
          };
          G__8841 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__8841__0.call(this);
              case 1:
                return G__8841__1.call(this, result);
              case 2:
                return G__8841__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__8841.cljs$core$IFn$_invoke$arity$0 = G__8841__0;
          G__8841.cljs$core$IFn$_invoke$arity$1 = G__8841__1;
          G__8841.cljs$core$IFn$_invoke$arity$2 = G__8841__2;
          return G__8841;
        }();
      }(ia);
    };
  };
  var cljs$core$keep_indexed__2 = function(f, coll) {
    var keepi = function cljs$core$keep_indexed_$_keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__5007__auto___8842 = size;
            var i_8843 = 0;
            while (true) {
              if (i_8843 < n__5007__auto___8842) {
                var x_8844 = function() {
                  var G__8837 = idx + i_8843;
                  var G__8838 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8843);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8837, G__8838) : f.call(null, G__8837, G__8838);
                }();
                if (x_8844 == null) {
                } else {
                  cljs.core.chunk_append(b, x_8844);
                }
                var G__8845 = i_8843 + 1;
                i_8843 = G__8845;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keep_indexed_$_keepi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            var x = function() {
              var G__8839 = idx;
              var G__8840 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8839, G__8840) : f.call(null, G__8839, G__8840);
            }();
            if (x == null) {
              return cljs$core$keep_indexed_$_keepi(idx + 1, cljs.core.rest(s));
            } else {
              return cljs.core.cons(x, cljs$core$keep_indexed_$_keepi(idx + 1, cljs.core.rest(s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi(0, coll);
  };
  cljs$core$keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$keep_indexed__1.call(this, f);
      case 2:
        return cljs$core$keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$keep_indexed.cljs$core$IFn$_invoke$arity$1 = cljs$core$keep_indexed__1;
  cljs$core$keep_indexed.cljs$core$IFn$_invoke$arity$2 = cljs$core$keep_indexed__2;
  return cljs$core$keep_indexed;
}();
cljs.core.every_pred = function() {
  var cljs$core$every_pred = null;
  var cljs$core$every_pred__1 = function(p) {
    return function() {
      var cljs$core$every_pred_$_ep1 = null;
      var cljs$core$every_pred_$_ep1__0 = function() {
        return true;
      };
      var cljs$core$every_pred_$_ep1__1 = function(x) {
        return cljs.core.boolean$(function() {
          var G__9059 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9059) : p.call(null, G__9059);
        }());
      };
      var cljs$core$every_pred_$_ep1__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__9061 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9061) : p.call(null, G__9061);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var G__9062 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9062) : p.call(null, G__9062);
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep1__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__9064 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9064) : p.call(null, G__9064);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var and__4110__auto____$1 = function() {
              var G__9066 = y;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9066) : p.call(null, G__9066);
            }();
            if (cljs.core.truth_(and__4110__auto____$1)) {
              var G__9067 = z;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9067) : p.call(null, G__9067);
            } else {
              return and__4110__auto____$1;
            }
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep1__4 = function() {
        var G__9236__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(p, args));
        };
        var G__9236 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9237__i = 0, G__9237__a = new Array(arguments.length - 3);
            while (G__9237__i < G__9237__a.length) {
              G__9237__a[G__9237__i] = arguments[G__9237__i + 3];
              ++G__9237__i;
            }
            args = new cljs.core.IndexedSeq(G__9237__a, 0);
          }
          return G__9236__delegate.call(this, x, y, z, args);
        };
        G__9236.cljs$lang$maxFixedArity = 3;
        G__9236.cljs$lang$applyTo = function(arglist__9238) {
          var x = cljs.core.first(arglist__9238);
          arglist__9238 = cljs.core.next(arglist__9238);
          var y = cljs.core.first(arglist__9238);
          arglist__9238 = cljs.core.next(arglist__9238);
          var z = cljs.core.first(arglist__9238);
          var args = cljs.core.rest(arglist__9238);
          return G__9236__delegate(x, y, z, args);
        };
        G__9236.cljs$core$IFn$_invoke$arity$variadic = G__9236__delegate;
        return G__9236;
      }();
      cljs$core$every_pred_$_ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$every_pred_$_ep1__0.call(this);
          case 1:
            return cljs$core$every_pred_$_ep1__1.call(this, x);
          case 2:
            return cljs$core$every_pred_$_ep1__2.call(this, x, y);
          case 3:
            return cljs$core$every_pred_$_ep1__3.call(this, x, y, z);
          default:
            var G__9239 = null;
            if (arguments.length > 3) {
              var G__9240__i = 0, G__9240__a = new Array(arguments.length - 3);
              while (G__9240__i < G__9240__a.length) {
                G__9240__a[G__9240__i] = arguments[G__9240__i + 3];
                ++G__9240__i;
              }
              G__9239 = new cljs.core.IndexedSeq(G__9240__a, 0);
            }
            return cljs$core$every_pred_$_ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9239);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$every_pred_$_ep1.cljs$lang$maxFixedArity = 3;
      cljs$core$every_pred_$_ep1.cljs$lang$applyTo = cljs$core$every_pred_$_ep1__4.cljs$lang$applyTo;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$every_pred_$_ep1__0;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred_$_ep1__1;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred_$_ep1__2;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred_$_ep1__3;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred_$_ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$every_pred_$_ep1;
    }();
  };
  var cljs$core$every_pred__2 = function(p1, p2) {
    return function() {
      var cljs$core$every_pred_$_ep2 = null;
      var cljs$core$every_pred_$_ep2__0 = function() {
        return true;
      };
      var cljs$core$every_pred_$_ep2__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__9099 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9099) : p1.call(null, G__9099);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var G__9100 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9100) : p2.call(null, G__9100);
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep2__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__9102 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9102) : p1.call(null, G__9102);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var and__4110__auto____$1 = function() {
              var G__9104 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9104) : p1.call(null, G__9104);
            }();
            if (cljs.core.truth_(and__4110__auto____$1)) {
              var and__4110__auto____$2 = function() {
                var G__9106 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9106) : p2.call(null, G__9106);
              }();
              if (cljs.core.truth_(and__4110__auto____$2)) {
                var G__9107 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9107) : p2.call(null, G__9107);
              } else {
                return and__4110__auto____$2;
              }
            } else {
              return and__4110__auto____$1;
            }
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep2__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__9109 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9109) : p1.call(null, G__9109);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var and__4110__auto____$1 = function() {
              var G__9111 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9111) : p1.call(null, G__9111);
            }();
            if (cljs.core.truth_(and__4110__auto____$1)) {
              var and__4110__auto____$2 = function() {
                var G__9113 = z;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9113) : p1.call(null, G__9113);
              }();
              if (cljs.core.truth_(and__4110__auto____$2)) {
                var and__4110__auto____$3 = function() {
                  var G__9115 = x;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9115) : p2.call(null, G__9115);
                }();
                if (cljs.core.truth_(and__4110__auto____$3)) {
                  var and__4110__auto____$4 = function() {
                    var G__9117 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9117) : p2.call(null, G__9117);
                  }();
                  if (cljs.core.truth_(and__4110__auto____$4)) {
                    var G__9118 = z;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9118) : p2.call(null, G__9118);
                  } else {
                    return and__4110__auto____$4;
                  }
                } else {
                  return and__4110__auto____$3;
                }
              } else {
                return and__4110__auto____$2;
              }
            } else {
              return and__4110__auto____$1;
            }
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep2__4 = function() {
        var G__9241__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__8846_SHARP_) {
            var and__4110__auto__ = function() {
              var G__9123 = p1__8846_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9123) : p1.call(null, G__9123);
            }();
            if (cljs.core.truth_(and__4110__auto__)) {
              var G__9124 = p1__8846_SHARP_;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9124) : p2.call(null, G__9124);
            } else {
              return and__4110__auto__;
            }
          }, args));
        };
        var G__9241 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9242__i = 0, G__9242__a = new Array(arguments.length - 3);
            while (G__9242__i < G__9242__a.length) {
              G__9242__a[G__9242__i] = arguments[G__9242__i + 3];
              ++G__9242__i;
            }
            args = new cljs.core.IndexedSeq(G__9242__a, 0);
          }
          return G__9241__delegate.call(this, x, y, z, args);
        };
        G__9241.cljs$lang$maxFixedArity = 3;
        G__9241.cljs$lang$applyTo = function(arglist__9243) {
          var x = cljs.core.first(arglist__9243);
          arglist__9243 = cljs.core.next(arglist__9243);
          var y = cljs.core.first(arglist__9243);
          arglist__9243 = cljs.core.next(arglist__9243);
          var z = cljs.core.first(arglist__9243);
          var args = cljs.core.rest(arglist__9243);
          return G__9241__delegate(x, y, z, args);
        };
        G__9241.cljs$core$IFn$_invoke$arity$variadic = G__9241__delegate;
        return G__9241;
      }();
      cljs$core$every_pred_$_ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$every_pred_$_ep2__0.call(this);
          case 1:
            return cljs$core$every_pred_$_ep2__1.call(this, x);
          case 2:
            return cljs$core$every_pred_$_ep2__2.call(this, x, y);
          case 3:
            return cljs$core$every_pred_$_ep2__3.call(this, x, y, z);
          default:
            var G__9244 = null;
            if (arguments.length > 3) {
              var G__9245__i = 0, G__9245__a = new Array(arguments.length - 3);
              while (G__9245__i < G__9245__a.length) {
                G__9245__a[G__9245__i] = arguments[G__9245__i + 3];
                ++G__9245__i;
              }
              G__9244 = new cljs.core.IndexedSeq(G__9245__a, 0);
            }
            return cljs$core$every_pred_$_ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9244);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$every_pred_$_ep2.cljs$lang$maxFixedArity = 3;
      cljs$core$every_pred_$_ep2.cljs$lang$applyTo = cljs$core$every_pred_$_ep2__4.cljs$lang$applyTo;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$every_pred_$_ep2__0;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred_$_ep2__1;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred_$_ep2__2;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred_$_ep2__3;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred_$_ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$every_pred_$_ep2;
    }();
  };
  var cljs$core$every_pred__3 = function(p1, p2, p3) {
    return function() {
      var cljs$core$every_pred_$_ep3 = null;
      var cljs$core$every_pred_$_ep3__0 = function() {
        return true;
      };
      var cljs$core$every_pred_$_ep3__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__9170 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9170) : p1.call(null, G__9170);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var and__4110__auto____$1 = function() {
              var G__9172 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9172) : p2.call(null, G__9172);
            }();
            if (cljs.core.truth_(and__4110__auto____$1)) {
              var G__9173 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9173) : p3.call(null, G__9173);
            } else {
              return and__4110__auto____$1;
            }
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep3__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__9175 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9175) : p1.call(null, G__9175);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var and__4110__auto____$1 = function() {
              var G__9177 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9177) : p2.call(null, G__9177);
            }();
            if (cljs.core.truth_(and__4110__auto____$1)) {
              var and__4110__auto____$2 = function() {
                var G__9179 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9179) : p3.call(null, G__9179);
              }();
              if (cljs.core.truth_(and__4110__auto____$2)) {
                var and__4110__auto____$3 = function() {
                  var G__9181 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9181) : p1.call(null, G__9181);
                }();
                if (cljs.core.truth_(and__4110__auto____$3)) {
                  var and__4110__auto____$4 = function() {
                    var G__9183 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9183) : p2.call(null, G__9183);
                  }();
                  if (cljs.core.truth_(and__4110__auto____$4)) {
                    var G__9184 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9184) : p3.call(null, G__9184);
                  } else {
                    return and__4110__auto____$4;
                  }
                } else {
                  return and__4110__auto____$3;
                }
              } else {
                return and__4110__auto____$2;
              }
            } else {
              return and__4110__auto____$1;
            }
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep3__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__9186 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9186) : p1.call(null, G__9186);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var and__4110__auto____$1 = function() {
              var G__9188 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9188) : p2.call(null, G__9188);
            }();
            if (cljs.core.truth_(and__4110__auto____$1)) {
              var and__4110__auto____$2 = function() {
                var G__9190 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9190) : p3.call(null, G__9190);
              }();
              if (cljs.core.truth_(and__4110__auto____$2)) {
                var and__4110__auto____$3 = function() {
                  var G__9192 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9192) : p1.call(null, G__9192);
                }();
                if (cljs.core.truth_(and__4110__auto____$3)) {
                  var and__4110__auto____$4 = function() {
                    var G__9194 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9194) : p2.call(null, G__9194);
                  }();
                  if (cljs.core.truth_(and__4110__auto____$4)) {
                    var and__4110__auto____$5 = function() {
                      var G__9196 = y;
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9196) : p3.call(null, G__9196);
                    }();
                    if (cljs.core.truth_(and__4110__auto____$5)) {
                      var and__4110__auto____$6 = function() {
                        var G__9198 = z;
                        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9198) : p1.call(null, G__9198);
                      }();
                      if (cljs.core.truth_(and__4110__auto____$6)) {
                        var and__4110__auto____$7 = function() {
                          var G__9200 = z;
                          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9200) : p2.call(null, G__9200);
                        }();
                        if (cljs.core.truth_(and__4110__auto____$7)) {
                          var G__9201 = z;
                          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9201) : p3.call(null, G__9201);
                        } else {
                          return and__4110__auto____$7;
                        }
                      } else {
                        return and__4110__auto____$6;
                      }
                    } else {
                      return and__4110__auto____$5;
                    }
                  } else {
                    return and__4110__auto____$4;
                  }
                } else {
                  return and__4110__auto____$3;
                }
              } else {
                return and__4110__auto____$2;
              }
            } else {
              return and__4110__auto____$1;
            }
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep3__4 = function() {
        var G__9246__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__8847_SHARP_) {
            var and__4110__auto__ = function() {
              var G__9208 = p1__8847_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9208) : p1.call(null, G__9208);
            }();
            if (cljs.core.truth_(and__4110__auto__)) {
              var and__4110__auto____$1 = function() {
                var G__9210 = p1__8847_SHARP_;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9210) : p2.call(null, G__9210);
              }();
              if (cljs.core.truth_(and__4110__auto____$1)) {
                var G__9211 = p1__8847_SHARP_;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9211) : p3.call(null, G__9211);
              } else {
                return and__4110__auto____$1;
              }
            } else {
              return and__4110__auto__;
            }
          }, args));
        };
        var G__9246 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9247__i = 0, G__9247__a = new Array(arguments.length - 3);
            while (G__9247__i < G__9247__a.length) {
              G__9247__a[G__9247__i] = arguments[G__9247__i + 3];
              ++G__9247__i;
            }
            args = new cljs.core.IndexedSeq(G__9247__a, 0);
          }
          return G__9246__delegate.call(this, x, y, z, args);
        };
        G__9246.cljs$lang$maxFixedArity = 3;
        G__9246.cljs$lang$applyTo = function(arglist__9248) {
          var x = cljs.core.first(arglist__9248);
          arglist__9248 = cljs.core.next(arglist__9248);
          var y = cljs.core.first(arglist__9248);
          arglist__9248 = cljs.core.next(arglist__9248);
          var z = cljs.core.first(arglist__9248);
          var args = cljs.core.rest(arglist__9248);
          return G__9246__delegate(x, y, z, args);
        };
        G__9246.cljs$core$IFn$_invoke$arity$variadic = G__9246__delegate;
        return G__9246;
      }();
      cljs$core$every_pred_$_ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$every_pred_$_ep3__0.call(this);
          case 1:
            return cljs$core$every_pred_$_ep3__1.call(this, x);
          case 2:
            return cljs$core$every_pred_$_ep3__2.call(this, x, y);
          case 3:
            return cljs$core$every_pred_$_ep3__3.call(this, x, y, z);
          default:
            var G__9249 = null;
            if (arguments.length > 3) {
              var G__9250__i = 0, G__9250__a = new Array(arguments.length - 3);
              while (G__9250__i < G__9250__a.length) {
                G__9250__a[G__9250__i] = arguments[G__9250__i + 3];
                ++G__9250__i;
              }
              G__9249 = new cljs.core.IndexedSeq(G__9250__a, 0);
            }
            return cljs$core$every_pred_$_ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9249);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$every_pred_$_ep3.cljs$lang$maxFixedArity = 3;
      cljs$core$every_pred_$_ep3.cljs$lang$applyTo = cljs$core$every_pred_$_ep3__4.cljs$lang$applyTo;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$every_pred_$_ep3__0;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred_$_ep3__1;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred_$_ep3__2;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred_$_ep3__3;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred_$_ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$every_pred_$_ep3;
    }();
  };
  var cljs$core$every_pred__4 = function() {
    var G__9251__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var cljs$core$every_pred_$_epn = null;
          var cljs$core$every_pred_$_epn__0 = function() {
            return true;
          };
          var cljs$core$every_pred_$_epn__1 = function(x) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__8848_SHARP_) {
                var G__9227 = x;
                return p1__8848_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8848_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9227) : p1__8848_SHARP_.call(null, G__9227);
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$every_pred_$_epn__2 = function(x, y) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__8849_SHARP_) {
                var and__4110__auto__ = function() {
                  var G__9229 = x;
                  return p1__8849_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8849_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9229) : p1__8849_SHARP_.call(null, G__9229);
                }();
                if (cljs.core.truth_(and__4110__auto__)) {
                  var G__9230 = y;
                  return p1__8849_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8849_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9230) : p1__8849_SHARP_.call(null, G__9230);
                } else {
                  return and__4110__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$every_pred_$_epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__8850_SHARP_) {
                var and__4110__auto__ = function() {
                  var G__9232 = x;
                  return p1__8850_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8850_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9232) : p1__8850_SHARP_.call(null, G__9232);
                }();
                if (cljs.core.truth_(and__4110__auto__)) {
                  var and__4110__auto____$1 = function() {
                    var G__9234 = y;
                    return p1__8850_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8850_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9234) : p1__8850_SHARP_.call(null, G__9234);
                  }();
                  if (cljs.core.truth_(and__4110__auto____$1)) {
                    var G__9235 = z;
                    return p1__8850_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8850_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9235) : p1__8850_SHARP_.call(null, G__9235);
                  } else {
                    return and__4110__auto____$1;
                  }
                } else {
                  return and__4110__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$every_pred_$_epn__4 = function() {
            var G__9252__delegate = function(x, y, z, args) {
              return cljs.core.boolean$(cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(ps__$1) {
                return function(p1__8851_SHARP_) {
                  return cljs.core.every_QMARK_(p1__8851_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__9252 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__9253__i = 0, G__9253__a = new Array(arguments.length - 3);
                while (G__9253__i < G__9253__a.length) {
                  G__9253__a[G__9253__i] = arguments[G__9253__i + 3];
                  ++G__9253__i;
                }
                args = new cljs.core.IndexedSeq(G__9253__a, 0);
              }
              return G__9252__delegate.call(this, x, y, z, args);
            };
            G__9252.cljs$lang$maxFixedArity = 3;
            G__9252.cljs$lang$applyTo = function(arglist__9254) {
              var x = cljs.core.first(arglist__9254);
              arglist__9254 = cljs.core.next(arglist__9254);
              var y = cljs.core.first(arglist__9254);
              arglist__9254 = cljs.core.next(arglist__9254);
              var z = cljs.core.first(arglist__9254);
              var args = cljs.core.rest(arglist__9254);
              return G__9252__delegate(x, y, z, args);
            };
            G__9252.cljs$core$IFn$_invoke$arity$variadic = G__9252__delegate;
            return G__9252;
          }();
          cljs$core$every_pred_$_epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return cljs$core$every_pred_$_epn__0.call(this);
              case 1:
                return cljs$core$every_pred_$_epn__1.call(this, x);
              case 2:
                return cljs$core$every_pred_$_epn__2.call(this, x, y);
              case 3:
                return cljs$core$every_pred_$_epn__3.call(this, x, y, z);
              default:
                var G__9255 = null;
                if (arguments.length > 3) {
                  var G__9256__i = 0, G__9256__a = new Array(arguments.length - 3);
                  while (G__9256__i < G__9256__a.length) {
                    G__9256__a[G__9256__i] = arguments[G__9256__i + 3];
                    ++G__9256__i;
                  }
                  G__9255 = new cljs.core.IndexedSeq(G__9256__a, 0);
                }
                return cljs$core$every_pred_$_epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9255);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          cljs$core$every_pred_$_epn.cljs$lang$maxFixedArity = 3;
          cljs$core$every_pred_$_epn.cljs$lang$applyTo = cljs$core$every_pred_$_epn__4.cljs$lang$applyTo;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$every_pred_$_epn__0;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred_$_epn__1;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred_$_epn__2;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred_$_epn__3;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred_$_epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return cljs$core$every_pred_$_epn;
        }();
      }(ps__$1);
    };
    var G__9251 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__9257__i = 0, G__9257__a = new Array(arguments.length - 3);
        while (G__9257__i < G__9257__a.length) {
          G__9257__a[G__9257__i] = arguments[G__9257__i + 3];
          ++G__9257__i;
        }
        ps = new cljs.core.IndexedSeq(G__9257__a, 0);
      }
      return G__9251__delegate.call(this, p1, p2, p3, ps);
    };
    G__9251.cljs$lang$maxFixedArity = 3;
    G__9251.cljs$lang$applyTo = function(arglist__9258) {
      var p1 = cljs.core.first(arglist__9258);
      arglist__9258 = cljs.core.next(arglist__9258);
      var p2 = cljs.core.first(arglist__9258);
      arglist__9258 = cljs.core.next(arglist__9258);
      var p3 = cljs.core.first(arglist__9258);
      var ps = cljs.core.rest(arglist__9258);
      return G__9251__delegate(p1, p2, p3, ps);
    };
    G__9251.cljs$core$IFn$_invoke$arity$variadic = G__9251__delegate;
    return G__9251;
  }();
  cljs$core$every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$every_pred__1.call(this, p1);
      case 2:
        return cljs$core$every_pred__2.call(this, p1, p2);
      case 3:
        return cljs$core$every_pred__3.call(this, p1, p2, p3);
      default:
        var G__9259 = null;
        if (arguments.length > 3) {
          var G__9260__i = 0, G__9260__a = new Array(arguments.length - 3);
          while (G__9260__i < G__9260__a.length) {
            G__9260__a[G__9260__i] = arguments[G__9260__i + 3];
            ++G__9260__i;
          }
          G__9259 = new cljs.core.IndexedSeq(G__9260__a, 0);
        }
        return cljs$core$every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__9259);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$every_pred.cljs$lang$maxFixedArity = 3;
  cljs$core$every_pred.cljs$lang$applyTo = cljs$core$every_pred__4.cljs$lang$applyTo;
  cljs$core$every_pred.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred__1;
  cljs$core$every_pred.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred__2;
  cljs$core$every_pred.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred__3;
  cljs$core$every_pred.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$every_pred;
}();
cljs.core.some_fn = function() {
  var cljs$core$some_fn = null;
  var cljs$core$some_fn__1 = function(p) {
    return function() {
      var cljs$core$some_fn_$_sp1 = null;
      var cljs$core$some_fn_$_sp1__0 = function() {
        return null;
      };
      var cljs$core$some_fn_$_sp1__1 = function(x) {
        var G__9466 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9466) : p.call(null, G__9466);
      };
      var cljs$core$some_fn_$_sp1__2 = function(x, y) {
        var or__4122__auto__ = function() {
          var G__9468 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9468) : p.call(null, G__9468);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var G__9469 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9469) : p.call(null, G__9469);
        }
      };
      var cljs$core$some_fn_$_sp1__3 = function(x, y, z) {
        var or__4122__auto__ = function() {
          var G__9471 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9471) : p.call(null, G__9471);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = function() {
            var G__9473 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9473) : p.call(null, G__9473);
          }();
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            var G__9474 = z;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9474) : p.call(null, G__9474);
          }
        }
      };
      var cljs$core$some_fn_$_sp1__4 = function() {
        var G__9635__delegate = function(x, y, z, args) {
          var or__4122__auto__ = cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return cljs.core.some(p, args);
          }
        };
        var G__9635 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9636__i = 0, G__9636__a = new Array(arguments.length - 3);
            while (G__9636__i < G__9636__a.length) {
              G__9636__a[G__9636__i] = arguments[G__9636__i + 3];
              ++G__9636__i;
            }
            args = new cljs.core.IndexedSeq(G__9636__a, 0);
          }
          return G__9635__delegate.call(this, x, y, z, args);
        };
        G__9635.cljs$lang$maxFixedArity = 3;
        G__9635.cljs$lang$applyTo = function(arglist__9637) {
          var x = cljs.core.first(arglist__9637);
          arglist__9637 = cljs.core.next(arglist__9637);
          var y = cljs.core.first(arglist__9637);
          arglist__9637 = cljs.core.next(arglist__9637);
          var z = cljs.core.first(arglist__9637);
          var args = cljs.core.rest(arglist__9637);
          return G__9635__delegate(x, y, z, args);
        };
        G__9635.cljs$core$IFn$_invoke$arity$variadic = G__9635__delegate;
        return G__9635;
      }();
      cljs$core$some_fn_$_sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$some_fn_$_sp1__0.call(this);
          case 1:
            return cljs$core$some_fn_$_sp1__1.call(this, x);
          case 2:
            return cljs$core$some_fn_$_sp1__2.call(this, x, y);
          case 3:
            return cljs$core$some_fn_$_sp1__3.call(this, x, y, z);
          default:
            var G__9638 = null;
            if (arguments.length > 3) {
              var G__9639__i = 0, G__9639__a = new Array(arguments.length - 3);
              while (G__9639__i < G__9639__a.length) {
                G__9639__a[G__9639__i] = arguments[G__9639__i + 3];
                ++G__9639__i;
              }
              G__9638 = new cljs.core.IndexedSeq(G__9639__a, 0);
            }
            return cljs$core$some_fn_$_sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9638);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$some_fn_$_sp1.cljs$lang$maxFixedArity = 3;
      cljs$core$some_fn_$_sp1.cljs$lang$applyTo = cljs$core$some_fn_$_sp1__4.cljs$lang$applyTo;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$some_fn_$_sp1__0;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn_$_sp1__1;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn_$_sp1__2;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn_$_sp1__3;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn_$_sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$some_fn_$_sp1;
    }();
  };
  var cljs$core$some_fn__2 = function(p1, p2) {
    return function() {
      var cljs$core$some_fn_$_sp2 = null;
      var cljs$core$some_fn_$_sp2__0 = function() {
        return null;
      };
      var cljs$core$some_fn_$_sp2__1 = function(x) {
        var or__4122__auto__ = function() {
          var G__9506 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9506) : p1.call(null, G__9506);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var G__9507 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9507) : p2.call(null, G__9507);
        }
      };
      var cljs$core$some_fn_$_sp2__2 = function(x, y) {
        var or__4122__auto__ = function() {
          var G__9509 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9509) : p1.call(null, G__9509);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = function() {
            var G__9511 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9511) : p1.call(null, G__9511);
          }();
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            var or__4122__auto____$2 = function() {
              var G__9513 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9513) : p2.call(null, G__9513);
            }();
            if (cljs.core.truth_(or__4122__auto____$2)) {
              return or__4122__auto____$2;
            } else {
              var G__9514 = y;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9514) : p2.call(null, G__9514);
            }
          }
        }
      };
      var cljs$core$some_fn_$_sp2__3 = function(x, y, z) {
        var or__4122__auto__ = function() {
          var G__9516 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9516) : p1.call(null, G__9516);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = function() {
            var G__9518 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9518) : p1.call(null, G__9518);
          }();
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            var or__4122__auto____$2 = function() {
              var G__9520 = z;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9520) : p1.call(null, G__9520);
            }();
            if (cljs.core.truth_(or__4122__auto____$2)) {
              return or__4122__auto____$2;
            } else {
              var or__4122__auto____$3 = function() {
                var G__9522 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9522) : p2.call(null, G__9522);
              }();
              if (cljs.core.truth_(or__4122__auto____$3)) {
                return or__4122__auto____$3;
              } else {
                var or__4122__auto____$4 = function() {
                  var G__9524 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9524) : p2.call(null, G__9524);
                }();
                if (cljs.core.truth_(or__4122__auto____$4)) {
                  return or__4122__auto____$4;
                } else {
                  var G__9525 = z;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9525) : p2.call(null, G__9525);
                }
              }
            }
          }
        }
      };
      var cljs$core$some_fn_$_sp2__4 = function() {
        var G__9640__delegate = function(x, y, z, args) {
          var or__4122__auto__ = cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return cljs.core.some(function(or__4122__auto__) {
              return function(p1__9261_SHARP_) {
                var or__4122__auto____$1 = function() {
                  var G__9527 = p1__9261_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9527) : p1.call(null, G__9527);
                }();
                if (cljs.core.truth_(or__4122__auto____$1)) {
                  return or__4122__auto____$1;
                } else {
                  var G__9528 = p1__9261_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9528) : p2.call(null, G__9528);
                }
              };
            }(or__4122__auto__), args);
          }
        };
        var G__9640 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9641__i = 0, G__9641__a = new Array(arguments.length - 3);
            while (G__9641__i < G__9641__a.length) {
              G__9641__a[G__9641__i] = arguments[G__9641__i + 3];
              ++G__9641__i;
            }
            args = new cljs.core.IndexedSeq(G__9641__a, 0);
          }
          return G__9640__delegate.call(this, x, y, z, args);
        };
        G__9640.cljs$lang$maxFixedArity = 3;
        G__9640.cljs$lang$applyTo = function(arglist__9642) {
          var x = cljs.core.first(arglist__9642);
          arglist__9642 = cljs.core.next(arglist__9642);
          var y = cljs.core.first(arglist__9642);
          arglist__9642 = cljs.core.next(arglist__9642);
          var z = cljs.core.first(arglist__9642);
          var args = cljs.core.rest(arglist__9642);
          return G__9640__delegate(x, y, z, args);
        };
        G__9640.cljs$core$IFn$_invoke$arity$variadic = G__9640__delegate;
        return G__9640;
      }();
      cljs$core$some_fn_$_sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$some_fn_$_sp2__0.call(this);
          case 1:
            return cljs$core$some_fn_$_sp2__1.call(this, x);
          case 2:
            return cljs$core$some_fn_$_sp2__2.call(this, x, y);
          case 3:
            return cljs$core$some_fn_$_sp2__3.call(this, x, y, z);
          default:
            var G__9643 = null;
            if (arguments.length > 3) {
              var G__9644__i = 0, G__9644__a = new Array(arguments.length - 3);
              while (G__9644__i < G__9644__a.length) {
                G__9644__a[G__9644__i] = arguments[G__9644__i + 3];
                ++G__9644__i;
              }
              G__9643 = new cljs.core.IndexedSeq(G__9644__a, 0);
            }
            return cljs$core$some_fn_$_sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9643);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$some_fn_$_sp2.cljs$lang$maxFixedArity = 3;
      cljs$core$some_fn_$_sp2.cljs$lang$applyTo = cljs$core$some_fn_$_sp2__4.cljs$lang$applyTo;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$some_fn_$_sp2__0;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn_$_sp2__1;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn_$_sp2__2;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn_$_sp2__3;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn_$_sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$some_fn_$_sp2;
    }();
  };
  var cljs$core$some_fn__3 = function(p1, p2, p3) {
    return function() {
      var cljs$core$some_fn_$_sp3 = null;
      var cljs$core$some_fn_$_sp3__0 = function() {
        return null;
      };
      var cljs$core$some_fn_$_sp3__1 = function(x) {
        var or__4122__auto__ = function() {
          var G__9574 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9574) : p1.call(null, G__9574);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = function() {
            var G__9576 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9576) : p2.call(null, G__9576);
          }();
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            var G__9577 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9577) : p3.call(null, G__9577);
          }
        }
      };
      var cljs$core$some_fn_$_sp3__2 = function(x, y) {
        var or__4122__auto__ = function() {
          var G__9579 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9579) : p1.call(null, G__9579);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = function() {
            var G__9581 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9581) : p2.call(null, G__9581);
          }();
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            var or__4122__auto____$2 = function() {
              var G__9583 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9583) : p3.call(null, G__9583);
            }();
            if (cljs.core.truth_(or__4122__auto____$2)) {
              return or__4122__auto____$2;
            } else {
              var or__4122__auto____$3 = function() {
                var G__9585 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9585) : p1.call(null, G__9585);
              }();
              if (cljs.core.truth_(or__4122__auto____$3)) {
                return or__4122__auto____$3;
              } else {
                var or__4122__auto____$4 = function() {
                  var G__9587 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9587) : p2.call(null, G__9587);
                }();
                if (cljs.core.truth_(or__4122__auto____$4)) {
                  return or__4122__auto____$4;
                } else {
                  var G__9588 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9588) : p3.call(null, G__9588);
                }
              }
            }
          }
        }
      };
      var cljs$core$some_fn_$_sp3__3 = function(x, y, z) {
        var or__4122__auto__ = function() {
          var G__9590 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9590) : p1.call(null, G__9590);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = function() {
            var G__9592 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9592) : p2.call(null, G__9592);
          }();
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            var or__4122__auto____$2 = function() {
              var G__9594 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9594) : p3.call(null, G__9594);
            }();
            if (cljs.core.truth_(or__4122__auto____$2)) {
              return or__4122__auto____$2;
            } else {
              var or__4122__auto____$3 = function() {
                var G__9596 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9596) : p1.call(null, G__9596);
              }();
              if (cljs.core.truth_(or__4122__auto____$3)) {
                return or__4122__auto____$3;
              } else {
                var or__4122__auto____$4 = function() {
                  var G__9598 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9598) : p2.call(null, G__9598);
                }();
                if (cljs.core.truth_(or__4122__auto____$4)) {
                  return or__4122__auto____$4;
                } else {
                  var or__4122__auto____$5 = function() {
                    var G__9600 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9600) : p3.call(null, G__9600);
                  }();
                  if (cljs.core.truth_(or__4122__auto____$5)) {
                    return or__4122__auto____$5;
                  } else {
                    var or__4122__auto____$6 = function() {
                      var G__9602 = z;
                      return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9602) : p1.call(null, G__9602);
                    }();
                    if (cljs.core.truth_(or__4122__auto____$6)) {
                      return or__4122__auto____$6;
                    } else {
                      var or__4122__auto____$7 = function() {
                        var G__9604 = z;
                        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9604) : p2.call(null, G__9604);
                      }();
                      if (cljs.core.truth_(or__4122__auto____$7)) {
                        return or__4122__auto____$7;
                      } else {
                        var G__9605 = z;
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9605) : p3.call(null, G__9605);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var cljs$core$some_fn_$_sp3__4 = function() {
        var G__9645__delegate = function(x, y, z, args) {
          var or__4122__auto__ = cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return cljs.core.some(function(or__4122__auto__) {
              return function(p1__9262_SHARP_) {
                var or__4122__auto____$1 = function() {
                  var G__9607 = p1__9262_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9607) : p1.call(null, G__9607);
                }();
                if (cljs.core.truth_(or__4122__auto____$1)) {
                  return or__4122__auto____$1;
                } else {
                  var or__4122__auto____$2 = function() {
                    var G__9609 = p1__9262_SHARP_;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9609) : p2.call(null, G__9609);
                  }();
                  if (cljs.core.truth_(or__4122__auto____$2)) {
                    return or__4122__auto____$2;
                  } else {
                    var G__9610 = p1__9262_SHARP_;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9610) : p3.call(null, G__9610);
                  }
                }
              };
            }(or__4122__auto__), args);
          }
        };
        var G__9645 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9646__i = 0, G__9646__a = new Array(arguments.length - 3);
            while (G__9646__i < G__9646__a.length) {
              G__9646__a[G__9646__i] = arguments[G__9646__i + 3];
              ++G__9646__i;
            }
            args = new cljs.core.IndexedSeq(G__9646__a, 0);
          }
          return G__9645__delegate.call(this, x, y, z, args);
        };
        G__9645.cljs$lang$maxFixedArity = 3;
        G__9645.cljs$lang$applyTo = function(arglist__9647) {
          var x = cljs.core.first(arglist__9647);
          arglist__9647 = cljs.core.next(arglist__9647);
          var y = cljs.core.first(arglist__9647);
          arglist__9647 = cljs.core.next(arglist__9647);
          var z = cljs.core.first(arglist__9647);
          var args = cljs.core.rest(arglist__9647);
          return G__9645__delegate(x, y, z, args);
        };
        G__9645.cljs$core$IFn$_invoke$arity$variadic = G__9645__delegate;
        return G__9645;
      }();
      cljs$core$some_fn_$_sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$some_fn_$_sp3__0.call(this);
          case 1:
            return cljs$core$some_fn_$_sp3__1.call(this, x);
          case 2:
            return cljs$core$some_fn_$_sp3__2.call(this, x, y);
          case 3:
            return cljs$core$some_fn_$_sp3__3.call(this, x, y, z);
          default:
            var G__9648 = null;
            if (arguments.length > 3) {
              var G__9649__i = 0, G__9649__a = new Array(arguments.length - 3);
              while (G__9649__i < G__9649__a.length) {
                G__9649__a[G__9649__i] = arguments[G__9649__i + 3];
                ++G__9649__i;
              }
              G__9648 = new cljs.core.IndexedSeq(G__9649__a, 0);
            }
            return cljs$core$some_fn_$_sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9648);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$some_fn_$_sp3.cljs$lang$maxFixedArity = 3;
      cljs$core$some_fn_$_sp3.cljs$lang$applyTo = cljs$core$some_fn_$_sp3__4.cljs$lang$applyTo;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$some_fn_$_sp3__0;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn_$_sp3__1;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn_$_sp3__2;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn_$_sp3__3;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn_$_sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$some_fn_$_sp3;
    }();
  };
  var cljs$core$some_fn__4 = function() {
    var G__9650__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var cljs$core$some_fn_$_spn = null;
          var cljs$core$some_fn_$_spn__0 = function() {
            return null;
          };
          var cljs$core$some_fn_$_spn__1 = function(x) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__9263_SHARP_) {
                var G__9626 = x;
                return p1__9263_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9263_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9626) : p1__9263_SHARP_.call(null, G__9626);
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$some_fn_$_spn__2 = function(x, y) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__9264_SHARP_) {
                var or__4122__auto__ = function() {
                  var G__9628 = x;
                  return p1__9264_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9264_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9628) : p1__9264_SHARP_.call(null, G__9628);
                }();
                if (cljs.core.truth_(or__4122__auto__)) {
                  return or__4122__auto__;
                } else {
                  var G__9629 = y;
                  return p1__9264_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9264_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9629) : p1__9264_SHARP_.call(null, G__9629);
                }
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$some_fn_$_spn__3 = function(x, y, z) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__9265_SHARP_) {
                var or__4122__auto__ = function() {
                  var G__9631 = x;
                  return p1__9265_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9265_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9631) : p1__9265_SHARP_.call(null, G__9631);
                }();
                if (cljs.core.truth_(or__4122__auto__)) {
                  return or__4122__auto__;
                } else {
                  var or__4122__auto____$1 = function() {
                    var G__9633 = y;
                    return p1__9265_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9265_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9633) : p1__9265_SHARP_.call(null, G__9633);
                  }();
                  if (cljs.core.truth_(or__4122__auto____$1)) {
                    return or__4122__auto____$1;
                  } else {
                    var G__9634 = z;
                    return p1__9265_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9265_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9634) : p1__9265_SHARP_.call(null, G__9634);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$some_fn_$_spn__4 = function() {
            var G__9651__delegate = function(x, y, z, args) {
              var or__4122__auto__ = cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
              if (cljs.core.truth_(or__4122__auto__)) {
                return or__4122__auto__;
              } else {
                return cljs.core.some(function(or__4122__auto__, ps__$1) {
                  return function(p1__9266_SHARP_) {
                    return cljs.core.some(p1__9266_SHARP_, args);
                  };
                }(or__4122__auto__, ps__$1), ps__$1);
              }
            };
            var G__9651 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__9652__i = 0, G__9652__a = new Array(arguments.length - 3);
                while (G__9652__i < G__9652__a.length) {
                  G__9652__a[G__9652__i] = arguments[G__9652__i + 3];
                  ++G__9652__i;
                }
                args = new cljs.core.IndexedSeq(G__9652__a, 0);
              }
              return G__9651__delegate.call(this, x, y, z, args);
            };
            G__9651.cljs$lang$maxFixedArity = 3;
            G__9651.cljs$lang$applyTo = function(arglist__9653) {
              var x = cljs.core.first(arglist__9653);
              arglist__9653 = cljs.core.next(arglist__9653);
              var y = cljs.core.first(arglist__9653);
              arglist__9653 = cljs.core.next(arglist__9653);
              var z = cljs.core.first(arglist__9653);
              var args = cljs.core.rest(arglist__9653);
              return G__9651__delegate(x, y, z, args);
            };
            G__9651.cljs$core$IFn$_invoke$arity$variadic = G__9651__delegate;
            return G__9651;
          }();
          cljs$core$some_fn_$_spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return cljs$core$some_fn_$_spn__0.call(this);
              case 1:
                return cljs$core$some_fn_$_spn__1.call(this, x);
              case 2:
                return cljs$core$some_fn_$_spn__2.call(this, x, y);
              case 3:
                return cljs$core$some_fn_$_spn__3.call(this, x, y, z);
              default:
                var G__9654 = null;
                if (arguments.length > 3) {
                  var G__9655__i = 0, G__9655__a = new Array(arguments.length - 3);
                  while (G__9655__i < G__9655__a.length) {
                    G__9655__a[G__9655__i] = arguments[G__9655__i + 3];
                    ++G__9655__i;
                  }
                  G__9654 = new cljs.core.IndexedSeq(G__9655__a, 0);
                }
                return cljs$core$some_fn_$_spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9654);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          cljs$core$some_fn_$_spn.cljs$lang$maxFixedArity = 3;
          cljs$core$some_fn_$_spn.cljs$lang$applyTo = cljs$core$some_fn_$_spn__4.cljs$lang$applyTo;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$some_fn_$_spn__0;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn_$_spn__1;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn_$_spn__2;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn_$_spn__3;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn_$_spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return cljs$core$some_fn_$_spn;
        }();
      }(ps__$1);
    };
    var G__9650 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__9656__i = 0, G__9656__a = new Array(arguments.length - 3);
        while (G__9656__i < G__9656__a.length) {
          G__9656__a[G__9656__i] = arguments[G__9656__i + 3];
          ++G__9656__i;
        }
        ps = new cljs.core.IndexedSeq(G__9656__a, 0);
      }
      return G__9650__delegate.call(this, p1, p2, p3, ps);
    };
    G__9650.cljs$lang$maxFixedArity = 3;
    G__9650.cljs$lang$applyTo = function(arglist__9657) {
      var p1 = cljs.core.first(arglist__9657);
      arglist__9657 = cljs.core.next(arglist__9657);
      var p2 = cljs.core.first(arglist__9657);
      arglist__9657 = cljs.core.next(arglist__9657);
      var p3 = cljs.core.first(arglist__9657);
      var ps = cljs.core.rest(arglist__9657);
      return G__9650__delegate(p1, p2, p3, ps);
    };
    G__9650.cljs$core$IFn$_invoke$arity$variadic = G__9650__delegate;
    return G__9650;
  }();
  cljs$core$some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$some_fn__1.call(this, p1);
      case 2:
        return cljs$core$some_fn__2.call(this, p1, p2);
      case 3:
        return cljs$core$some_fn__3.call(this, p1, p2, p3);
      default:
        var G__9658 = null;
        if (arguments.length > 3) {
          var G__9659__i = 0, G__9659__a = new Array(arguments.length - 3);
          while (G__9659__i < G__9659__a.length) {
            G__9659__a[G__9659__i] = arguments[G__9659__i + 3];
            ++G__9659__i;
          }
          G__9658 = new cljs.core.IndexedSeq(G__9659__a, 0);
        }
        return cljs$core$some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__9658);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$some_fn.cljs$lang$maxFixedArity = 3;
  cljs$core$some_fn.cljs$lang$applyTo = cljs$core$some_fn__4.cljs$lang$applyTo;
  cljs$core$some_fn.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn__1;
  cljs$core$some_fn.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn__2;
  cljs$core$some_fn.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn__3;
  cljs$core$some_fn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$some_fn;
}();
cljs.core.map = function() {
  var cljs$core$map = null;
  var cljs$core$map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__9714 = null;
        var G__9714__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9714__1 = function(result) {
          var G__9700 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9700) : rf.call(null, G__9700);
        };
        var G__9714__2 = function(result, input) {
          var G__9701 = result;
          var G__9702 = function() {
            var G__9703 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9703) : f.call(null, G__9703);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9701, G__9702) : rf.call(null, G__9701, G__9702);
        };
        var G__9714__3 = function() {
          var G__9715__delegate = function(result, input, inputs) {
            var G__9704 = result;
            var G__9705 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9704, G__9705) : rf.call(null, G__9704, G__9705);
          };
          var G__9715 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              var G__9716__i = 0, G__9716__a = new Array(arguments.length - 2);
              while (G__9716__i < G__9716__a.length) {
                G__9716__a[G__9716__i] = arguments[G__9716__i + 2];
                ++G__9716__i;
              }
              inputs = new cljs.core.IndexedSeq(G__9716__a, 0);
            }
            return G__9715__delegate.call(this, result, input, inputs);
          };
          G__9715.cljs$lang$maxFixedArity = 2;
          G__9715.cljs$lang$applyTo = function(arglist__9717) {
            var result = cljs.core.first(arglist__9717);
            arglist__9717 = cljs.core.next(arglist__9717);
            var input = cljs.core.first(arglist__9717);
            var inputs = cljs.core.rest(arglist__9717);
            return G__9715__delegate(result, input, inputs);
          };
          G__9715.cljs$core$IFn$_invoke$arity$variadic = G__9715__delegate;
          return G__9715;
        }();
        G__9714 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__9714__0.call(this);
            case 1:
              return G__9714__1.call(this, result);
            case 2:
              return G__9714__2.call(this, result, input);
            default:
              var G__9718 = null;
              if (arguments.length > 2) {
                var G__9719__i = 0, G__9719__a = new Array(arguments.length - 2);
                while (G__9719__i < G__9719__a.length) {
                  G__9719__a[G__9719__i] = arguments[G__9719__i + 2];
                  ++G__9719__i;
                }
                G__9718 = new cljs.core.IndexedSeq(G__9719__a, 0);
              }
              return G__9714__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__9718);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9714.cljs$lang$maxFixedArity = 2;
        G__9714.cljs$lang$applyTo = G__9714__3.cljs$lang$applyTo;
        G__9714.cljs$core$IFn$_invoke$arity$0 = G__9714__0;
        G__9714.cljs$core$IFn$_invoke$arity$1 = G__9714__1;
        G__9714.cljs$core$IFn$_invoke$arity$2 = G__9714__2;
        G__9714.cljs$core$IFn$_invoke$arity$variadic = G__9714__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__9714;
      }();
    };
  };
  var cljs$core$map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5007__auto___9720 = size;
          var i_9721 = 0;
          while (true) {
            if (i_9721 < n__5007__auto___9720) {
              cljs.core.chunk_append(b, function() {
                var G__9706 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9721);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9706) : f.call(null, G__9706);
              }());
              var G__9722 = i_9721 + 1;
              i_9721 = G__9722;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__9707 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9707) : f.call(null, G__9707);
          }(), cljs$core$map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(function() {
          var G__9708 = cljs.core.first(s1);
          var G__9709 = cljs.core.first(s2);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9708, G__9709) : f.call(null, G__9708, G__9709);
        }(), cljs$core$map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      var s3 = cljs.core.seq(c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons(function() {
          var G__9710 = cljs.core.first(s1);
          var G__9711 = cljs.core.first(s2);
          var G__9712 = cljs.core.first(s3);
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9710, G__9711, G__9712) : f.call(null, G__9710, G__9711, G__9712);
        }(), cljs$core$map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$map__5 = function() {
    var G__9723__delegate = function(f, c1, c2, c3, colls) {
      var step = function cljs$core$map_$_step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = cljs$core$map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
          if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
            return cljs.core.cons(cljs$core$map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$map_$_step(cljs$core$map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return cljs$core$map.cljs$core$IFn$_invoke$arity$2(function(step) {
        return function(p1__9660_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__9660_SHARP_);
        };
      }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
    };
    var G__9723 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__9724__i = 0, G__9724__a = new Array(arguments.length - 4);
        while (G__9724__i < G__9724__a.length) {
          G__9724__a[G__9724__i] = arguments[G__9724__i + 4];
          ++G__9724__i;
        }
        colls = new cljs.core.IndexedSeq(G__9724__a, 0);
      }
      return G__9723__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__9723.cljs$lang$maxFixedArity = 4;
    G__9723.cljs$lang$applyTo = function(arglist__9725) {
      var f = cljs.core.first(arglist__9725);
      arglist__9725 = cljs.core.next(arglist__9725);
      var c1 = cljs.core.first(arglist__9725);
      arglist__9725 = cljs.core.next(arglist__9725);
      var c2 = cljs.core.first(arglist__9725);
      arglist__9725 = cljs.core.next(arglist__9725);
      var c3 = cljs.core.first(arglist__9725);
      var colls = cljs.core.rest(arglist__9725);
      return G__9723__delegate(f, c1, c2, c3, colls);
    };
    G__9723.cljs$core$IFn$_invoke$arity$variadic = G__9723__delegate;
    return G__9723;
  }();
  cljs$core$map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$map__1.call(this, f);
      case 2:
        return cljs$core$map__2.call(this, f, c1);
      case 3:
        return cljs$core$map__3.call(this, f, c1, c2);
      case 4:
        return cljs$core$map__4.call(this, f, c1, c2, c3);
      default:
        var G__9726 = null;
        if (arguments.length > 4) {
          var G__9727__i = 0, G__9727__a = new Array(arguments.length - 4);
          while (G__9727__i < G__9727__a.length) {
            G__9727__a[G__9727__i] = arguments[G__9727__i + 4];
            ++G__9727__i;
          }
          G__9726 = new cljs.core.IndexedSeq(G__9727__a, 0);
        }
        return cljs$core$map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__9726);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$map.cljs$lang$maxFixedArity = 4;
  cljs$core$map.cljs$lang$applyTo = cljs$core$map__5.cljs$lang$applyTo;
  cljs$core$map.cljs$core$IFn$_invoke$arity$1 = cljs$core$map__1;
  cljs$core$map.cljs$core$IFn$_invoke$arity$2 = cljs$core$map__2;
  cljs$core$map.cljs$core$IFn$_invoke$arity$3 = cljs$core$map__3;
  cljs$core$map.cljs$core$IFn$_invoke$arity$4 = cljs$core$map__4;
  cljs$core$map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$map__5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$map;
}();
cljs.core.take = function() {
  var cljs$core$take = null;
  var cljs$core$take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__9736 = null;
          var G__9736__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__9736__1 = function(result) {
            var G__9733 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9733) : rf.call(null, G__9733);
          };
          var G__9736__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            var nn = na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            var result__$1 = n__$1 > 0 ? function() {
              var G__9734 = result;
              var G__9735 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9734, G__9735) : rf.call(null, G__9734, G__9735);
            }() : result;
            if (!(nn > 0)) {
              return cljs.core.ensure_reduced(result__$1);
            } else {
              return result__$1;
            }
          };
          G__9736 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__9736__0.call(this);
              case 1:
                return G__9736__1.call(this, result);
              case 2:
                return G__9736__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__9736.cljs$core$IFn$_invoke$arity$0 = G__9736__0;
          G__9736.cljs$core$IFn$_invoke$arity$1 = G__9736__1;
          G__9736.cljs$core$IFn$_invoke$arity$2 = G__9736__2;
          return G__9736;
        }();
      }(na);
    };
  };
  var cljs$core$take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq(coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons(cljs.core.first(s), cljs$core$take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$take__1.call(this, n);
      case 2:
        return cljs$core$take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$take.cljs$core$IFn$_invoke$arity$1 = cljs$core$take__1;
  cljs$core$take.cljs$core$IFn$_invoke$arity$2 = cljs$core$take__2;
  return cljs$core$take;
}();
cljs.core.drop = function() {
  var cljs$core$drop = null;
  var cljs$core$drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__9743 = null;
          var G__9743__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__9743__1 = function(result) {
            var G__9740 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9740) : rf.call(null, G__9740);
          };
          var G__9743__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            if (n__$1 > 0) {
              return result;
            } else {
              var G__9741 = result;
              var G__9742 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9741, G__9742) : rf.call(null, G__9741, G__9742);
            }
          };
          G__9743 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__9743__0.call(this);
              case 1:
                return G__9743__1.call(this, result);
              case 2:
                return G__9743__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__9743.cljs$core$IFn$_invoke$arity$0 = G__9743__0;
          G__9743.cljs$core$IFn$_invoke$arity$1 = G__9743__1;
          G__9743.cljs$core$IFn$_invoke$arity$2 = G__9743__2;
          return G__9743;
        }();
      }(na);
    };
  };
  var cljs$core$drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (n__$1 > 0 && s) {
          var G__9744 = n__$1 - 1;
          var G__9745 = cljs.core.rest(s);
          n__$1 = G__9744;
          coll__$1 = G__9745;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(n, coll);
      };
    }(step), null, null);
  };
  cljs$core$drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$drop__1.call(this, n);
      case 2:
        return cljs$core$drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$drop.cljs$core$IFn$_invoke$arity$1 = cljs$core$drop__1;
  cljs$core$drop.cljs$core$IFn$_invoke$arity$2 = cljs$core$drop__2;
  return cljs$core$drop;
}();
cljs.core.drop_last = function() {
  var cljs$core$drop_last = null;
  var cljs$core$drop_last__1 = function(s) {
    return cljs$core$drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
  };
  var cljs$core$drop_last__2 = function(n, s) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
      return x;
    }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
  };
  cljs$core$drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return cljs$core$drop_last__1.call(this, n);
      case 2:
        return cljs$core$drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$drop_last.cljs$core$IFn$_invoke$arity$1 = cljs$core$drop_last__1;
  cljs$core$drop_last.cljs$core$IFn$_invoke$arity$2 = cljs$core$drop_last__2;
  return cljs$core$drop_last;
}();
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__9748 = cljs.core.next(s);
      var G__9749 = cljs.core.next(lead);
      s = G__9748;
      lead = G__9749;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var cljs$core$drop_while = null;
  var cljs$core$drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.volatile_BANG_(true);
      return function(da) {
        return function() {
          var G__9762 = null;
          var G__9762__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__9762__1 = function(result) {
            var G__9756 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9756) : rf.call(null, G__9756);
          };
          var G__9762__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref(da);
            if (cljs.core.truth_(function() {
              var and__4110__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__4110__auto__)) {
                var G__9757 = input;
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9757) : pred.call(null, G__9757);
              } else {
                return and__4110__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.vreset_BANG_(da, null);
              var G__9758 = result;
              var G__9759 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9758, G__9759) : rf.call(null, G__9758, G__9759);
            }
          };
          G__9762 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__9762__0.call(this);
              case 1:
                return G__9762__1.call(this, result);
              case 2:
                return G__9762__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__9762.cljs$core$IFn$_invoke$arity$0 = G__9762__0;
          G__9762.cljs$core$IFn$_invoke$arity$1 = G__9762__1;
          G__9762.cljs$core$IFn$_invoke$arity$2 = G__9762__2;
          return G__9762;
        }();
      }(da);
    };
  };
  var cljs$core$drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (cljs.core.truth_(function() {
          var and__4110__auto__ = s;
          if (and__4110__auto__) {
            var G__9761 = cljs.core.first(s);
            return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__9761) : pred__$1.call(null, G__9761);
          } else {
            return and__4110__auto__;
          }
        }())) {
          var G__9763 = pred__$1;
          var G__9764 = cljs.core.rest(s);
          pred__$1 = G__9763;
          coll__$1 = G__9764;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(pred, coll);
      };
    }(step), null, null);
  };
  cljs$core$drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$drop_while__1.call(this, pred);
      case 2:
        return cljs$core$drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$drop_while.cljs$core$IFn$_invoke$arity$1 = cljs$core$drop_while__1;
  cljs$core$drop_while.cljs$core$IFn$_invoke$arity$2 = cljs$core$drop_while__2;
  return cljs$core$drop_while;
}();
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs$core$cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function() {
  var cljs$core$repeat = null;
  var cljs$core$repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(x, cljs$core$repeat.cljs$core$IFn$_invoke$arity$1(x));
    }, null, null);
  };
  var cljs$core$repeat__2 = function(n, x) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs$core$repeat.cljs$core$IFn$_invoke$arity$1(x));
  };
  cljs$core$repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return cljs$core$repeat__1.call(this, n);
      case 2:
        return cljs$core$repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$repeat.cljs$core$IFn$_invoke$arity$1 = cljs$core$repeat__1;
  cljs$core$repeat.cljs$core$IFn$_invoke$arity$2 = cljs$core$repeat__2;
  return cljs$core$repeat;
}();
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function() {
  var cljs$core$repeatedly = null;
  var cljs$core$repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), cljs$core$repeatedly.cljs$core$IFn$_invoke$arity$1(f));
    }, null, null);
  };
  var cljs$core$repeatedly__2 = function(n, f) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs$core$repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  };
  cljs$core$repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return cljs$core$repeatedly__1.call(this, n);
      case 2:
        return cljs$core$repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$repeatedly.cljs$core$IFn$_invoke$arity$1 = cljs$core$repeatedly__1;
  cljs$core$repeatedly.cljs$core$IFn$_invoke$arity$2 = cljs$core$repeatedly__2;
  return cljs$core$repeatedly;
}();
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return cljs$core$iterate(f, function() {
      var G__9773 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9773) : f.call(null, G__9773);
    }());
  }, null, null));
};
cljs.core.interleave = function() {
  var cljs$core$interleave = null;
  var cljs$core$interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs$core$interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$interleave__3 = function() {
    var G__9776__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
        if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
          return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs$core$interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__9776 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__9777__i = 0, G__9777__a = new Array(arguments.length - 2);
        while (G__9777__i < G__9777__a.length) {
          G__9777__a[G__9777__i] = arguments[G__9777__i + 2];
          ++G__9777__i;
        }
        colls = new cljs.core.IndexedSeq(G__9777__a, 0);
      }
      return G__9776__delegate.call(this, c1, c2, colls);
    };
    G__9776.cljs$lang$maxFixedArity = 2;
    G__9776.cljs$lang$applyTo = function(arglist__9778) {
      var c1 = cljs.core.first(arglist__9778);
      arglist__9778 = cljs.core.next(arglist__9778);
      var c2 = cljs.core.first(arglist__9778);
      var colls = cljs.core.rest(arglist__9778);
      return G__9776__delegate(c1, c2, colls);
    };
    G__9776.cljs$core$IFn$_invoke$arity$variadic = G__9776__delegate;
    return G__9776;
  }();
  cljs$core$interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$interleave__2.call(this, c1, c2);
      default:
        var G__9779 = null;
        if (arguments.length > 2) {
          var G__9780__i = 0, G__9780__a = new Array(arguments.length - 2);
          while (G__9780__i < G__9780__a.length) {
            G__9780__a[G__9780__i] = arguments[G__9780__i + 2];
            ++G__9780__i;
          }
          G__9779 = new cljs.core.IndexedSeq(G__9780__a, 0);
        }
        return cljs$core$interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, G__9779);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$interleave.cljs$lang$maxFixedArity = 2;
  cljs$core$interleave.cljs$lang$applyTo = cljs$core$interleave__3.cljs$lang$applyTo;
  cljs$core$interleave.cljs$core$IFn$_invoke$arity$2 = cljs$core$interleave__2;
  cljs$core$interleave.cljs$core$IFn$_invoke$arity$variadic = cljs$core$interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$interleave;
}();
cljs.core.interpose = function() {
  var cljs$core$interpose = null;
  var cljs$core$interpose__1 = function(sep) {
    return function(rf) {
      var started = cljs.core.volatile_BANG_(false);
      return function(started) {
        return function() {
          var G__9795 = null;
          var G__9795__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__9795__1 = function(result) {
            var G__9788 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9788) : rf.call(null, G__9788);
          };
          var G__9795__2 = function(result, input) {
            if (cljs.core.truth_(cljs.core.deref(started))) {
              var sepr = function() {
                var G__9789 = result;
                var G__9790 = sep;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9789, G__9790) : rf.call(null, G__9789, G__9790);
              }();
              if (cljs.core.reduced_QMARK_(sepr)) {
                return sepr;
              } else {
                var G__9791 = sepr;
                var G__9792 = input;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9791, G__9792) : rf.call(null, G__9791, G__9792);
              }
            } else {
              cljs.core.vreset_BANG_(started, true);
              var G__9793 = result;
              var G__9794 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9793, G__9794) : rf.call(null, G__9793, G__9794);
            }
          };
          G__9795 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__9795__0.call(this);
              case 1:
                return G__9795__1.call(this, result);
              case 2:
                return G__9795__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__9795.cljs$core$IFn$_invoke$arity$0 = G__9795__0;
          G__9795.cljs$core$IFn$_invoke$arity$1 = G__9795__1;
          G__9795.cljs$core$IFn$_invoke$arity$2 = G__9795__2;
          return G__9795;
        }();
      }(started);
    };
  };
  var cljs$core$interpose__2 = function(sep, coll) {
    return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
  };
  cljs$core$interpose = function(sep, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$interpose__1.call(this, sep);
      case 2:
        return cljs$core$interpose__2.call(this, sep, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$interpose.cljs$core$IFn$_invoke$arity$1 = cljs$core$interpose__1;
  cljs$core$interpose.cljs$core$IFn$_invoke$arity$2 = cljs$core$interpose__2;
  return cljs$core$interpose;
}();
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function() {
  var cljs$core$mapcat = null;
  var cljs$core$mapcat__1 = function(f) {
    return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
  };
  var cljs$core$mapcat__2 = function() {
    var G__9804__delegate = function(f, colls) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
    };
    var G__9804 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        var G__9805__i = 0, G__9805__a = new Array(arguments.length - 1);
        while (G__9805__i < G__9805__a.length) {
          G__9805__a[G__9805__i] = arguments[G__9805__i + 1];
          ++G__9805__i;
        }
        colls = new cljs.core.IndexedSeq(G__9805__a, 0);
      }
      return G__9804__delegate.call(this, f, colls);
    };
    G__9804.cljs$lang$maxFixedArity = 1;
    G__9804.cljs$lang$applyTo = function(arglist__9806) {
      var f = cljs.core.first(arglist__9806);
      var colls = cljs.core.rest(arglist__9806);
      return G__9804__delegate(f, colls);
    };
    G__9804.cljs$core$IFn$_invoke$arity$variadic = G__9804__delegate;
    return G__9804;
  }();
  cljs$core$mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$mapcat__1.call(this, f);
      default:
        var G__9807 = null;
        if (arguments.length > 1) {
          var G__9808__i = 0, G__9808__a = new Array(arguments.length - 1);
          while (G__9808__i < G__9808__a.length) {
            G__9808__a[G__9808__i] = arguments[G__9808__i + 1];
            ++G__9808__i;
          }
          G__9807 = new cljs.core.IndexedSeq(G__9808__a, 0);
        }
        return cljs$core$mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, G__9807);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$mapcat.cljs$lang$maxFixedArity = 1;
  cljs$core$mapcat.cljs$lang$applyTo = cljs$core$mapcat__2.cljs$lang$applyTo;
  cljs$core$mapcat.cljs$core$IFn$_invoke$arity$1 = cljs$core$mapcat__1;
  cljs$core$mapcat.cljs$core$IFn$_invoke$arity$variadic = cljs$core$mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$mapcat;
}();
cljs.core.filter = function() {
  var cljs$core$filter = null;
  var cljs$core$filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__9827 = null;
        var G__9827__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9827__1 = function(result) {
          var G__9821 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9821) : rf.call(null, G__9821);
        };
        var G__9827__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__9822 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9822) : pred.call(null, G__9822);
          }())) {
            var G__9823 = result;
            var G__9824 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9823, G__9824) : rf.call(null, G__9823, G__9824);
          } else {
            return result;
          }
        };
        G__9827 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9827__0.call(this);
            case 1:
              return G__9827__1.call(this, result);
            case 2:
              return G__9827__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9827.cljs$core$IFn$_invoke$arity$0 = G__9827__0;
        G__9827.cljs$core$IFn$_invoke$arity$1 = G__9827__1;
        G__9827.cljs$core$IFn$_invoke$arity$2 = G__9827__2;
        return G__9827;
      }();
    };
  };
  var cljs$core$filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5007__auto___9828 = size;
          var i_9829 = 0;
          while (true) {
            if (i_9829 < n__5007__auto___9828) {
              if (cljs.core.truth_(function() {
                var G__9825 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9829);
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9825) : pred.call(null, G__9825);
              }())) {
                cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9829));
              } else {
              }
              var G__9830 = i_9829 + 1;
              i_9829 = G__9830;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
        } else {
          var f = cljs.core.first(s);
          var r = cljs.core.rest(s);
          if (cljs.core.truth_(function() {
            var G__9826 = f;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9826) : pred.call(null, G__9826);
          }())) {
            return cljs.core.cons(f, cljs$core$filter.cljs$core$IFn$_invoke$arity$2(pred, r));
          } else {
            return cljs$core$filter.cljs$core$IFn$_invoke$arity$2(pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$filter__1.call(this, pred);
      case 2:
        return cljs$core$filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$filter.cljs$core$IFn$_invoke$arity$1 = cljs$core$filter__1;
  cljs$core$filter.cljs$core$IFn$_invoke$arity$2 = cljs$core$filter__2;
  return cljs$core$filter;
}();
cljs.core.remove = function() {
  var cljs$core$remove = null;
  var cljs$core$remove__1 = function(pred) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
  };
  var cljs$core$remove__2 = function(pred, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
  };
  cljs$core$remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$remove__1.call(this, pred);
      case 2:
        return cljs$core$remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$remove.cljs$core$IFn$_invoke$arity$1 = cljs$core$remove__1;
  cljs$core$remove.cljs$core$IFn$_invoke$arity$2 = cljs$core$remove__2;
  return cljs$core$remove;
}();
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(function() {
        var G__9837 = node;
        return branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(G__9837) : branch_QMARK_.call(null, G__9837);
      }()) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([function() {
        var G__9838 = node;
        return children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(G__9838) : children.call(null, G__9838);
      }()], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__9839_SHARP_) {
    return!cljs.core.sequential_QMARK_(p1__9839_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var cljs$core$into = null;
  var cljs$core$into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__9842 = to;
        if (G__9842) {
          var bit__4789__auto__ = G__9842.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4789__auto__ || G__9842.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
      } else {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var cljs$core$into__3 = function(to, xform, from) {
    if (function() {
      var G__9843 = to;
      if (G__9843) {
        var bit__4789__auto__ = G__9843.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4789__auto__ || G__9843.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
    }
  };
  cljs$core$into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return cljs$core$into__2.call(this, to, xform);
      case 3:
        return cljs$core$into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$into.cljs$core$IFn$_invoke$arity$2 = cljs$core$into__2;
  cljs$core$into.cljs$core$IFn$_invoke$arity$3 = cljs$core$into__3;
  return cljs$core$into;
}();
cljs.core.mapv = function() {
  var cljs$core$mapv = null;
  var cljs$core$mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, function() {
        var G__9845 = o;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9845) : f.call(null, G__9845);
      }());
    }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
  };
  var cljs$core$mapv__3 = function(f, c1, c2) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
  };
  var cljs$core$mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
  };
  var cljs$core$mapv__5 = function() {
    var G__9846__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
    };
    var G__9846 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__9847__i = 0, G__9847__a = new Array(arguments.length - 4);
        while (G__9847__i < G__9847__a.length) {
          G__9847__a[G__9847__i] = arguments[G__9847__i + 4];
          ++G__9847__i;
        }
        colls = new cljs.core.IndexedSeq(G__9847__a, 0);
      }
      return G__9846__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__9846.cljs$lang$maxFixedArity = 4;
    G__9846.cljs$lang$applyTo = function(arglist__9848) {
      var f = cljs.core.first(arglist__9848);
      arglist__9848 = cljs.core.next(arglist__9848);
      var c1 = cljs.core.first(arglist__9848);
      arglist__9848 = cljs.core.next(arglist__9848);
      var c2 = cljs.core.first(arglist__9848);
      arglist__9848 = cljs.core.next(arglist__9848);
      var c3 = cljs.core.first(arglist__9848);
      var colls = cljs.core.rest(arglist__9848);
      return G__9846__delegate(f, c1, c2, c3, colls);
    };
    G__9846.cljs$core$IFn$_invoke$arity$variadic = G__9846__delegate;
    return G__9846;
  }();
  cljs$core$mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$mapv__2.call(this, f, c1);
      case 3:
        return cljs$core$mapv__3.call(this, f, c1, c2);
      case 4:
        return cljs$core$mapv__4.call(this, f, c1, c2, c3);
      default:
        var G__9849 = null;
        if (arguments.length > 4) {
          var G__9850__i = 0, G__9850__a = new Array(arguments.length - 4);
          while (G__9850__i < G__9850__a.length) {
            G__9850__a[G__9850__i] = arguments[G__9850__i + 4];
            ++G__9850__i;
          }
          G__9849 = new cljs.core.IndexedSeq(G__9850__a, 0);
        }
        return cljs$core$mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__9849);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$mapv.cljs$lang$maxFixedArity = 4;
  cljs$core$mapv.cljs$lang$applyTo = cljs$core$mapv__5.cljs$lang$applyTo;
  cljs$core$mapv.cljs$core$IFn$_invoke$arity$2 = cljs$core$mapv__2;
  cljs$core$mapv.cljs$core$IFn$_invoke$arity$3 = cljs$core$mapv__3;
  cljs$core$mapv.cljs$core$IFn$_invoke$arity$4 = cljs$core$mapv__4;
  cljs$core$mapv.cljs$core$IFn$_invoke$arity$variadic = cljs$core$mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$mapv;
}();
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(function() {
      var G__9852 = o;
      return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9852) : pred.call(null, G__9852);
    }())) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var cljs$core$partition = null;
  var cljs$core$partition__2 = function(n, coll) {
    return cljs$core$partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var cljs$core$partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, cljs$core$partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, cljs$core$partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$partition__2.call(this, n, step);
      case 3:
        return cljs$core$partition__3.call(this, n, step, pad);
      case 4:
        return cljs$core$partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$partition.cljs$core$IFn$_invoke$arity$2 = cljs$core$partition__2;
  cljs$core$partition.cljs$core$IFn$_invoke$arity$3 = cljs$core$partition__3;
  cljs$core$partition.cljs$core$IFn$_invoke$arity$4 = cljs$core$partition__4;
  return cljs$core$partition;
}();
cljs.core.get_in = function() {
  var cljs$core$get_in = null;
  var cljs$core$get_in__2 = function(m, ks) {
    return cljs$core$get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
  };
  var cljs$core$get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq(ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__9867 = m__$1;
          if (G__9867) {
            var bit__4796__auto__ = G__9867.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4796__auto__ || G__9867.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__9867.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__9867);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__9867);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__9868 = sentinel;
            var G__9869 = m__$2;
            var G__9870 = cljs.core.next(ks__$1);
            sentinel = G__9868;
            m__$1 = G__9869;
            ks__$1 = G__9870;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  cljs$core$get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$get_in__2.call(this, m, ks);
      case 3:
        return cljs$core$get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$get_in.cljs$core$IFn$_invoke$arity$2 = cljs$core$get_in__2;
  cljs$core$get_in.cljs$core$IFn$_invoke$arity$3 = cljs$core$get_in__3;
  return cljs$core$get_in;
}();
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__9871, v) {
  var vec__9876 = p__9871;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9876, 0, null);
  var ks = cljs.core.nthnext(vec__9876, 1);
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function() {
  var cljs$core$update_in = null;
  var cljs$core$update_in__3 = function(m, p__9877, f) {
    var vec__9915 = p__9877;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9915, 0, null);
    var ks = cljs.core.nthnext(vec__9915, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__9916 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9916) : f.call(null, G__9916);
      }());
    }
  };
  var cljs$core$update_in__4 = function(m, p__9878, f, a) {
    var vec__9917 = p__9878;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9917, 0, null);
    var ks = cljs.core.nthnext(vec__9917, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__9918 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__9919 = a;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9918, G__9919) : f.call(null, G__9918, G__9919);
      }());
    }
  };
  var cljs$core$update_in__5 = function(m, p__9879, f, a, b) {
    var vec__9920 = p__9879;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9920, 0, null);
    var ks = cljs.core.nthnext(vec__9920, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__9921 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__9922 = a;
        var G__9923 = b;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9921, G__9922, G__9923) : f.call(null, G__9921, G__9922, G__9923);
      }());
    }
  };
  var cljs$core$update_in__6 = function(m, p__9880, f, a, b, c) {
    var vec__9924 = p__9880;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9924, 0, null);
    var ks = cljs.core.nthnext(vec__9924, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__9925 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__9926 = a;
        var G__9927 = b;
        var G__9928 = c;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__9925, G__9926, G__9927, G__9928) : f.call(null, G__9925, G__9926, G__9927, G__9928);
      }());
    }
  };
  var cljs$core$update_in__7 = function() {
    var G__9930__delegate = function(m, p__9881, f, a, b, c, args) {
      var vec__9929 = p__9881;
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9929, 0, null);
      var ks = cljs.core.nthnext(vec__9929, 1);
      if (ks) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs$core$update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
      }
    };
    var G__9930 = function(m, p__9881, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__9931__i = 0, G__9931__a = new Array(arguments.length - 6);
        while (G__9931__i < G__9931__a.length) {
          G__9931__a[G__9931__i] = arguments[G__9931__i + 6];
          ++G__9931__i;
        }
        args = new cljs.core.IndexedSeq(G__9931__a, 0);
      }
      return G__9930__delegate.call(this, m, p__9881, f, a, b, c, args);
    };
    G__9930.cljs$lang$maxFixedArity = 6;
    G__9930.cljs$lang$applyTo = function(arglist__9932) {
      var m = cljs.core.first(arglist__9932);
      arglist__9932 = cljs.core.next(arglist__9932);
      var p__9881 = cljs.core.first(arglist__9932);
      arglist__9932 = cljs.core.next(arglist__9932);
      var f = cljs.core.first(arglist__9932);
      arglist__9932 = cljs.core.next(arglist__9932);
      var a = cljs.core.first(arglist__9932);
      arglist__9932 = cljs.core.next(arglist__9932);
      var b = cljs.core.first(arglist__9932);
      arglist__9932 = cljs.core.next(arglist__9932);
      var c = cljs.core.first(arglist__9932);
      var args = cljs.core.rest(arglist__9932);
      return G__9930__delegate(m, p__9881, f, a, b, c, args);
    };
    G__9930.cljs$core$IFn$_invoke$arity$variadic = G__9930__delegate;
    return G__9930;
  }();
  cljs$core$update_in = function(m, p__9881, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$update_in__3.call(this, m, p__9881, f);
      case 4:
        return cljs$core$update_in__4.call(this, m, p__9881, f, a);
      case 5:
        return cljs$core$update_in__5.call(this, m, p__9881, f, a, b);
      case 6:
        return cljs$core$update_in__6.call(this, m, p__9881, f, a, b, c);
      default:
        var G__9933 = null;
        if (arguments.length > 6) {
          var G__9934__i = 0, G__9934__a = new Array(arguments.length - 6);
          while (G__9934__i < G__9934__a.length) {
            G__9934__a[G__9934__i] = arguments[G__9934__i + 6];
            ++G__9934__i;
          }
          G__9933 = new cljs.core.IndexedSeq(G__9934__a, 0);
        }
        return cljs$core$update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__9881, f, a, b, c, G__9933);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$update_in.cljs$lang$maxFixedArity = 6;
  cljs$core$update_in.cljs$lang$applyTo = cljs$core$update_in__7.cljs$lang$applyTo;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$3 = cljs$core$update_in__3;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$4 = cljs$core$update_in__4;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$5 = cljs$core$update_in__5;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$6 = cljs$core$update_in__6;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$variadic = cljs$core$update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$update_in;
}();
cljs.core.update = function() {
  var cljs$core$update = null;
  var cljs$core$update__3 = function(m, k, f) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9945 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9945) : f.call(null, G__9945);
    }());
  };
  var cljs$core$update__4 = function(m, k, f, x) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9946 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9947 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9946, G__9947) : f.call(null, G__9946, G__9947);
    }());
  };
  var cljs$core$update__5 = function(m, k, f, x, y) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9948 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9949 = x;
      var G__9950 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9948, G__9949, G__9950) : f.call(null, G__9948, G__9949, G__9950);
    }());
  };
  var cljs$core$update__6 = function(m, k, f, x, y, z) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9951 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9952 = x;
      var G__9953 = y;
      var G__9954 = z;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__9951, G__9952, G__9953, G__9954) : f.call(null, G__9951, G__9952, G__9953, G__9954);
    }());
  };
  var cljs$core$update__7 = function() {
    var G__9955__delegate = function(m, k, f, x, y, z, more) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
    };
    var G__9955 = function(m, k, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 6) {
        var G__9956__i = 0, G__9956__a = new Array(arguments.length - 6);
        while (G__9956__i < G__9956__a.length) {
          G__9956__a[G__9956__i] = arguments[G__9956__i + 6];
          ++G__9956__i;
        }
        more = new cljs.core.IndexedSeq(G__9956__a, 0);
      }
      return G__9955__delegate.call(this, m, k, f, x, y, z, more);
    };
    G__9955.cljs$lang$maxFixedArity = 6;
    G__9955.cljs$lang$applyTo = function(arglist__9957) {
      var m = cljs.core.first(arglist__9957);
      arglist__9957 = cljs.core.next(arglist__9957);
      var k = cljs.core.first(arglist__9957);
      arglist__9957 = cljs.core.next(arglist__9957);
      var f = cljs.core.first(arglist__9957);
      arglist__9957 = cljs.core.next(arglist__9957);
      var x = cljs.core.first(arglist__9957);
      arglist__9957 = cljs.core.next(arglist__9957);
      var y = cljs.core.first(arglist__9957);
      arglist__9957 = cljs.core.next(arglist__9957);
      var z = cljs.core.first(arglist__9957);
      var more = cljs.core.rest(arglist__9957);
      return G__9955__delegate(m, k, f, x, y, z, more);
    };
    G__9955.cljs$core$IFn$_invoke$arity$variadic = G__9955__delegate;
    return G__9955;
  }();
  cljs$core$update = function(m, k, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$update__3.call(this, m, k, f);
      case 4:
        return cljs$core$update__4.call(this, m, k, f, x);
      case 5:
        return cljs$core$update__5.call(this, m, k, f, x, y);
      case 6:
        return cljs$core$update__6.call(this, m, k, f, x, y, z);
      default:
        var G__9958 = null;
        if (arguments.length > 6) {
          var G__9959__i = 0, G__9959__a = new Array(arguments.length - 6);
          while (G__9959__i < G__9959__a.length) {
            G__9959__a[G__9959__i] = arguments[G__9959__i + 6];
            ++G__9959__i;
          }
          G__9958 = new cljs.core.IndexedSeq(G__9959__a, 0);
        }
        return cljs$core$update__7.cljs$core$IFn$_invoke$arity$variadic(m, k, f, x, y, z, G__9958);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$update.cljs$lang$maxFixedArity = 6;
  cljs$core$update.cljs$lang$applyTo = cljs$core$update__7.cljs$lang$applyTo;
  cljs$core$update.cljs$core$IFn$_invoke$arity$3 = cljs$core$update__3;
  cljs$core$update.cljs$core$IFn$_invoke$arity$4 = cljs$core$update__4;
  cljs$core$update.cljs$core$IFn$_invoke$arity$5 = cljs$core$update__5;
  cljs$core$update.cljs$core$IFn$_invoke$arity$6 = cljs$core$update__6;
  cljs$core$update.cljs$core$IFn$_invoke$arity$variadic = cljs$core$update__7.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$update;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__9960 = ll - 5;
      var G__9961 = r;
      ll = G__9960;
      ret = G__9961;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = cljs$core$push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__9966 = cljs.core.pv_aget(node, 0);
      var G__9967 = level - 5;
      node = G__9966;
      level = G__9967;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__9968 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__9969 = level - 5;
        node = G__9968;
        level = G__9969;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, cljs$core$do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__9979 = init__$2;
              var G__9980 = j + i;
              var G__9981 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9979, G__9980, G__9981) : f.call(null, G__9979, G__9980, G__9981);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__9992 = j + 1;
              var G__9993 = init__$3;
              j = G__9992;
              init__$2 = G__9993;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9982 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9982) : cljs.core.deref.call(null, G__9982);
      } else {
        var G__9994 = i + len;
        var G__9995 = init__$2;
        i = G__9994;
        init__$1 = G__9995;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, function() {
    var G__9983 = self__.root;
    return cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(G__9983) : cljs.core.tv_editable_root.call(null, G__9983);
  }(), function() {
    var G__9984 = self__.tail;
    return cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(G__9984) : cljs.core.tv_editable_tail.call(null, G__9984);
  }());
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__9985 = init__$2;
              var G__9986 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9985, G__9986) : f.call(null, G__9985, G__9986);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__9996 = j + 1;
              var G__9997 = init__$3;
              j = G__9996;
              init__$2 = G__9997;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9987 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9987) : cljs.core.deref.call(null, G__9987);
      } else {
        var G__9998 = i + len;
        var G__9999 = init__$2;
        i = G__9998;
        init__$1 = G__9999;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__9988 = coll__$1;
      var G__9989 = cljs.core.first_array_for_longvec(coll__$1);
      var G__9990 = 0;
      var G__9991 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9988, G__9989, G__9990, G__9991) : cljs.core.chunked_seq.call(null, G__9988, G__9989, G__9990, G__9991);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__5007__auto___10000 = len;
    var i_10001 = 0;
    while (true) {
      if (i_10001 < n__5007__auto___10000) {
        new_tail[i_10001] = self__.tail[i_10001];
        var G__10002 = i_10001 + 1;
        i_10001 = G__10002;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__10003 = null;
  var G__10003__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__10003__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__10003 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10003__2.call(this, self__, k);
      case 3:
        return G__10003__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10003.cljs$core$IFn$_invoke$arity$2 = G__10003__2;
  G__10003.cljs$core$IFn$_invoke$arity$3 = G__10003__3;
  return G__10003;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args9978) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9978)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__10004 = i + 1;
        var G__10005 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__10004;
        out = G__10005;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function() {
  var cljs$core$vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec(args);
    }
  };
  var cljs$core$vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      var G__10006__i = 0, G__10006__a = new Array(arguments.length - 0);
      while (G__10006__i < G__10006__a.length) {
        G__10006__a[G__10006__i] = arguments[G__10006__i + 0];
        ++G__10006__i;
      }
      args = new cljs.core.IndexedSeq(G__10006__a, 0);
    }
    return cljs$core$vector__delegate.call(this, args);
  };
  cljs$core$vector.cljs$lang$maxFixedArity = 0;
  cljs$core$vector.cljs$lang$applyTo = function(arglist__10007) {
    var args = cljs.core.seq(arglist__10007);
    return cljs$core$vector__delegate(args);
  };
  cljs$core$vector.cljs$core$IFn$_invoke$arity$variadic = cljs$core$vector__delegate;
  return cljs$core$vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__10008 = self__.vec;
      var G__10009 = self__.node;
      var G__10010 = self__.i;
      var G__10011 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__10008, G__10009, G__10010, G__10011) : cljs.core.chunked_seq.call(null, G__10008, G__10009, G__10010, G__10011);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__10012 = self__.vec;
    var G__10013 = self__.i + self__.off;
    var G__10014 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__10012, G__10013, G__10014) : cljs.core.subvec.call(null, G__10012, G__10013, G__10014);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__10015 = self__.vec;
    var G__10016 = self__.i + self__.off;
    var G__10017 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__10015, G__10016, G__10017) : cljs.core.subvec.call(null, G__10015, G__10016, G__10017);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__10018 = self__.vec;
      var G__10019 = self__.node;
      var G__10020 = self__.i;
      var G__10021 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__10018, G__10019, G__10020, G__10021) : cljs.core.chunked_seq.call(null, G__10018, G__10019, G__10020, G__10021);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__10022 = self__.vec;
    var G__10023 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__10024 = end;
    var G__10025 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__10022, G__10023, G__10024, G__10025) : cljs.core.chunked_seq.call(null, G__10022, G__10023, G__10024, G__10025);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  var G__10026 = self__.vec;
  var G__10027 = self__.node;
  var G__10028 = self__.i;
  var G__10029 = self__.off;
  var G__10030 = m;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(G__10026, G__10027, G__10028, G__10029, G__10030) : cljs.core.chunked_seq.call(null, G__10026, G__10027, G__10028, G__10029, G__10030);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__10031 = self__.vec;
    var G__10032 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__10033 = end;
    var G__10034 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__10031, G__10032, G__10033, G__10034) : cljs.core.chunked_seq.call(null, G__10031, G__10032, G__10033, G__10034);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.chunked_seq = function() {
  var cljs$core$chunked_seq = null;
  var cljs$core$chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
  };
  var cljs$core$chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var cljs$core$chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  cljs$core$chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return cljs$core$chunked_seq__3.call(this, vec, node, i);
      case 4:
        return cljs$core$chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return cljs$core$chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$chunked_seq.cljs$core$IFn$_invoke$arity$3 = cljs$core$chunked_seq__3;
  cljs$core$chunked_seq.cljs$core$IFn$_invoke$arity$4 = cljs$core$chunked_seq__4;
  cljs$core$chunked_seq.cljs$core$IFn$_invoke$arity$5 = cljs$core$chunked_seq__5;
  return cljs$core$chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__10036 = init__$1;
        var G__10037 = j;
        var G__10038 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10036, G__10037, G__10038) : f.call(null, G__10036, G__10037, G__10038);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__10039 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10039) : cljs.core.deref.call(null, G__10039);
      } else {
        var G__10061 = i + 1;
        var G__10062 = j + 1;
        var G__10063 = init__$2;
        i = G__10061;
        j = G__10062;
        init__$1 = G__10063;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__10040 = self__.meta;
  var G__10041 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__10042 = self__.start;
  var G__10043 = function() {
    var x__4434__auto__ = self__.end;
    var y__4435__auto__ = v_pos + 1;
    return x__4434__auto__ > y__4435__auto__ ? x__4434__auto__ : y__4435__auto__;
  }();
  var G__10044 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__10040, G__10041, G__10042, G__10043, G__10044) : cljs.core.build_subvec.call(null, G__10040, G__10041, G__10042, G__10043, G__10044);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__10045 = self__.meta;
    var G__10046 = self__.v;
    var G__10047 = self__.start;
    var G__10048 = self__.end - 1;
    var G__10049 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__10045, G__10046, G__10047, G__10048, G__10049) : cljs.core.build_subvec.call(null, G__10045, G__10046, G__10047, G__10048, G__10049);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  var G__10051 = meta__$1;
  var G__10052 = self__.v;
  var G__10053 = self__.start;
  var G__10054 = self__.end;
  var G__10055 = self__.__hash;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__10051, G__10052, G__10053, G__10054, G__10055) : cljs.core.build_subvec.call(null, G__10051, G__10052, G__10053, G__10054, G__10055);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__10056 = self__.meta;
  var G__10057 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__10058 = self__.start;
  var G__10059 = self__.end + 1;
  var G__10060 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__10056, G__10057, G__10058, G__10059, G__10060) : cljs.core.build_subvec.call(null, G__10056, G__10057, G__10058, G__10059, G__10060);
};
cljs.core.Subvec.prototype.call = function() {
  var G__10064 = null;
  var G__10064__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__10064__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__10064 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10064__2.call(this, self__, k);
      case 3:
        return G__10064__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10064.cljs$core$IFn$_invoke$arity$2 = G__10064__2;
  G__10064.cljs$core$IFn$_invoke$arity$3 = G__10064__3;
  return G__10064;
}();
cljs.core.Subvec.prototype.apply = function(self__, args10035) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10035)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__10065 = meta;
      var G__10066 = v.v;
      var G__10067 = v.start + start;
      var G__10068 = v.start + end;
      var G__10069 = __hash;
      meta = G__10065;
      v = G__10066;
      start = G__10067;
      end = G__10068;
      __hash = G__10069;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var cljs$core$subvec = null;
  var cljs$core$subvec__2 = function(v, start) {
    return cljs$core$subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
  };
  var cljs$core$subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec(null, v, start, end, null);
  };
  cljs$core$subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return cljs$core$subvec__2.call(this, v, start);
      case 3:
        return cljs$core$subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$subvec.cljs$core$IFn$_invoke$arity$2 = cljs$core$subvec__2;
  cljs$core$subvec.cljs$core$IFn$_invoke$arity$3 = cljs$core$subvec__3;
  return cljs$core$subvec;
}();
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj10076 = {};
    return obj10076;
  }(), cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return cljs$core$tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__10084 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__10085 = level - 5;
        node = G__10084;
        level = G__10085;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.prototype.call = function() {
  var G__10089 = null;
  var G__10089__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10089__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10089 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10089__2.call(this, self__, k);
      case 3:
        return G__10089__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10089.cljs$core$IFn$_invoke$arity$2 = G__10089__2;
  G__10089.cljs$core$IFn$_invoke$arity$3 = G__10089__3;
  return G__10089;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args10086) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10086)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next(self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next(self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__4122__auto__ = self__.front;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__4122__auto__ = self__.rear;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__10090 = i + incr;
        i = G__10090;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__10091 = i + 1;
      var G__10092 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__10091;
      out = G__10092;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = function() {
    var obj10096 = {};
    return obj10096;
  }();
  var l = ks.length;
  var i_10097 = 0;
  while (true) {
    if (i_10097 < l) {
      var k_10098 = ks[i_10097];
      new_obj[k_10098] = obj[k_10098];
      var G__10099 = i_10097 + 1;
      i_10097 = G__10099;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = function() {
      var G__10103 = k;
      return goog.isString(G__10103);
    }();
    if (cljs.core.truth_(and__4110__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4110__auto__;
    }
  }())) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__10104 = init__$1;
        var G__10105 = k;
        var G__10106 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10104, G__10105, G__10106) : f.call(null, G__10104, G__10105, G__10106);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__10107 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10107) : cljs.core.deref.call(null, G__10107);
      } else {
        var G__10113 = cljs.core.rest(keys__$1);
        var G__10114 = init__$2;
        keys__$1 = G__10113;
        init__$1 = G__10114;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = function() {
      var G__10109 = k;
      return goog.isString(G__10109);
    }();
    if (cljs.core.truth_(and__4110__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4110__auto__;
    }
  }())) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var G__10110 = k;
    return goog.isString(G__10110);
  }())) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = function() {
      var G__10112 = k;
      return goog.isString(G__10112);
    }();
    if (cljs.core.truth_(and__4110__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4110__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__10100_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__10100_SHARP_, self__.strobj[p1__10100_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__10115 = null;
  var G__10115__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10115__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10115 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10115__2.call(this, self__, k);
      case 3:
        return G__10115__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10115.cljs$core$IFn$_invoke$arity$2 = G__10115__2;
  G__10115.cljs$core$IFn$_invoke$arity$3 = G__10115__3;
  return G__10115;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args10101) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10101)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj10117 = {};
  return obj10117;
}(), 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__10118 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10118, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10118, 1, null);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function cljs$core$array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__10119 = i + 2;
        i = G__10119;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function cljs$core$array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__10120 = i + 2;
        i = G__10120;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function cljs$core$array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__10121 = i + 2;
        i = G__10121;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function cljs$core$array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__10122 = i + 2;
        i = G__10122;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function cljs$core$array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__10123 = i + 2;
        i = G__10123;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_(arr, m, k);
  } else {
    if (cljs.core.truth_(function() {
      var or__4122__auto__ = function() {
        var G__10127 = k;
        return goog.isString(G__10127);
      }();
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return typeof k === "number";
      }
    }())) {
      return cljs.core.array_map_index_of_identical_QMARK_(arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_(arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_(arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_(arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_10128 = 0;
  while (true) {
    if (i_10128 < l) {
      narr[i_10128] = arr[i_10128];
      var G__10129 = i_10128 + 1;
      i_10128 = G__10129;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__10131 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__10131) : cljs.core.keys.call(null, G__10131);
  }());
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__10132 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__10132) : cljs.core.vals.call(null, G__10132);
  }());
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10133 = cljs.core.seq(coll);
  var chunk__10134 = null;
  var count__10135 = 0;
  var i__10136 = 0;
  while (true) {
    if (i__10136 < count__10135) {
      var vec__10137 = chunk__10134.cljs$core$IIndexed$_nth$arity$2(null, i__10136);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10137, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10137, 1, null);
      var G__10138_10151 = v;
      var G__10139_10152 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10138_10151, G__10139_10152) : f.call(null, G__10138_10151, G__10139_10152);
      var G__10153 = seq__10133;
      var G__10154 = chunk__10134;
      var G__10155 = count__10135;
      var G__10156 = i__10136 + 1;
      seq__10133 = G__10153;
      chunk__10134 = G__10154;
      count__10135 = G__10155;
      i__10136 = G__10156;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__10133);
      if (temp__4126__auto__) {
        var seq__10133__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10133__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__10133__$1);
          var G__10157 = cljs.core.chunk_rest(seq__10133__$1);
          var G__10158 = c__4907__auto__;
          var G__10159 = cljs.core.count(c__4907__auto__);
          var G__10160 = 0;
          seq__10133 = G__10157;
          chunk__10134 = G__10158;
          count__10135 = G__10159;
          i__10136 = G__10160;
          continue;
        } else {
          var vec__10140 = cljs.core.first(seq__10133__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10140, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10140, 1, null);
          var G__10141_10161 = v;
          var G__10142_10162 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10141_10161, G__10142_10162) : f.call(null, G__10141_10161, G__10142_10162);
          var G__10163 = cljs.core.next(seq__10133__$1);
          var G__10164 = null;
          var G__10165 = 0;
          var G__10166 = 0;
          seq__10133 = G__10163;
          chunk__10134 = G__10164;
          count__10135 = G__10165;
          i__10136 = G__10166;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__10143 = init__$1;
        var G__10144 = self__.arr[i];
        var G__10145 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10143, G__10144, G__10145) : f.call(null, G__10143, G__10144, G__10145);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__10146 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10146) : cljs.core.deref.call(null, G__10146);
      } else {
        var G__10167 = i + 2;
        var G__10168 = init__$2;
        i = G__10167;
        init__$1 = G__10168;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__10147 = other;
    if (G__10147) {
      var bit__4789__auto__ = G__10147.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4789__auto__ || G__10147.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__10169 = i + 2;
              i = G__10169;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj10149 = {};
    return obj10149;
  }(), self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__10170 = s + 2;
            var G__10171 = d;
            s = G__10170;
            d = G__10171;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__10172 = s + 2;
            var G__10173 = d + 2;
            s = G__10172;
            d = G__10173;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__10150 = cljs.core.aclone(self__.arr);
        G__10150[idx + 1] = v;
        return G__10150;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__10174 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__10175 = cljs.core.next(es);
          ret = G__10174;
          es = G__10175;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__10176 = null;
  var G__10176__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10176__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10176 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10176__2.call(this, self__, k);
      case 3:
        return G__10176__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10176.cljs$core$IFn$_invoke$arity$2 = G__10176__2;
  G__10176.cljs$core$IFn$_invoke$arity$3 = G__10176__3;
  return G__10176;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args10130) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10130)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__10177 = i + 2;
        var G__10178 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
        i = G__10177;
        ret = G__10178;
        continue;
      } else {
        return cljs.core._persistent_BANG_(ret);
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__10179_10187 = self__.arr;
      G__10179_10187.pop();
      G__10179_10187.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(function() {
          var G__10180 = self__.len;
          var G__10181 = self__.arr;
          return cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(G__10180, G__10181) : cljs.core.array__GT_transient_hash_map.call(null, G__10180, G__10181);
        }(), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__10182 = o;
      if (G__10182) {
        var bit__4796__auto__ = G__10182.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4796__auto__ || G__10182.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__10182.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__10182);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__10182);
      }
    }()) {
      return cljs.core._assoc_BANG_(tcoll__$1, function() {
        var G__10183 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__10183) : cljs.core.key.call(null, G__10183);
      }(), function() {
        var G__10184 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__10184) : cljs.core.val.call(null, G__10184);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__10188 = cljs.core.next(es);
          var G__10189 = cljs.core._assoc_BANG_(tcoll__$2, function() {
            var G__10185 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__10185) : cljs.core.key.call(null, G__10185);
          }(), function() {
            var G__10186 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__10186) : cljs.core.val.call(null, G__10186);
          }());
          es = G__10188;
          tcoll__$2 = G__10189;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__10190 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__10191 = i + 2;
      out = G__10190;
      i = G__10191;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var cljs$core$clone_and_set = null;
  var cljs$core$clone_and_set__3 = function(arr, i, a) {
    var G__10194 = cljs.core.aclone(arr);
    G__10194[i] = a;
    return G__10194;
  };
  var cljs$core$clone_and_set__5 = function(arr, i, a, j, b) {
    var G__10195 = cljs.core.aclone(arr);
    G__10195[i] = a;
    G__10195[j] = b;
    return G__10195;
  };
  cljs$core$clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return cljs$core$clone_and_set__3.call(this, arr, i, a);
      case 5:
        return cljs$core$clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$clone_and_set.cljs$core$IFn$_invoke$arity$3 = cljs$core$clone_and_set__3;
  cljs$core$clone_and_set.cljs$core$IFn$_invoke$arity$5 = cljs$core$clone_and_set__5;
  return cljs$core$clone_and_set;
}();
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var cljs$core$edit_and_set = null;
  var cljs$core$edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var cljs$core$edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  cljs$core$edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return cljs$core$edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return cljs$core$edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$edit_and_set.cljs$core$IFn$_invoke$arity$4 = cljs$core$edit_and_set__4;
  cljs$core$edit_and_set.cljs$core$IFn$_invoke$arity$6 = cljs$core$edit_and_set__6;
  return cljs$core$edit_and_set;
}();
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__10200 = init__$1;
          var G__10201 = k;
          var G__10202 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10200, G__10201, G__10202) : f.call(null, G__10200, G__10201, G__10202);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__10203 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10203) : cljs.core.deref.call(null, G__10203);
      } else {
        var G__10204 = i + 2;
        var G__10205 = init__$2;
        i = G__10204;
        init__$1 = G__10205;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__10206 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__10206) : cljs.core.create_inode_seq.call(null, G__10206);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_10220 = 0;
        var j_10221 = 0;
        while (true) {
          if (i_10220 < 32) {
            if ((self__.bitmap >>> i_10220 & 1) === 0) {
              var G__10222 = i_10220 + 1;
              var G__10223 = j_10221;
              i_10220 = G__10222;
              j_10221 = G__10223;
              continue;
            } else {
              nodes[i_10220] = !(self__.arr[j_10221] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_10221]), self__.arr[j_10221], self__.arr[j_10221 + 1], added_leaf_QMARK_) : self__.arr[j_10221 + 1];
              var G__10224 = i_10220 + 1;
              var G__10225 = j_10221 + 2;
              i_10220 = G__10224;
              j_10221 = G__10225;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__10207 = edit__$1;
          var G__10208 = shift + 5;
          var G__10209 = key_or_nil;
          var G__10210 = val_or_node;
          var G__10211 = hash;
          var G__10212 = key;
          var G__10213 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__10207, G__10208, G__10209, G__10210, G__10211, G__10212, G__10213) : cljs.core.create_node.call(null, G__10207, G__10208, G__10209, G__10210, G__10211, G__10212, G__10213);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_10226 = 0;
      var j_10227 = 0;
      while (true) {
        if (i_10226 < 32) {
          if ((self__.bitmap >>> i_10226 & 1) === 0) {
            var G__10228 = i_10226 + 1;
            var G__10229 = j_10227;
            i_10226 = G__10228;
            j_10227 = G__10229;
            continue;
          } else {
            nodes[i_10226] = !(self__.arr[j_10227] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_10227]), self__.arr[j_10227], self__.arr[j_10227 + 1], added_leaf_QMARK_) : self__.arr[j_10227 + 1];
            var G__10230 = i_10226 + 1;
            var G__10231 = j_10227 + 2;
            i_10226 = G__10230;
            j_10227 = G__10231;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__10214 = shift + 5;
          var G__10215 = key_or_nil;
          var G__10216 = val_or_node;
          var G__10217 = hash;
          var G__10218 = key;
          var G__10219 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__10214, G__10215, G__10216, G__10217, G__10218, G__10219) : cljs.core.create_node.call(null, G__10214, G__10215, G__10216, G__10217, G__10218, G__10219);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__10232 = i + 1;
        var G__10233 = j + 2;
        var G__10234 = bitmap | 1 << i;
        i = G__10232;
        j = G__10233;
        bitmap = G__10234;
        continue;
      } else {
        var G__10235 = i + 1;
        var G__10236 = j;
        var G__10237 = bitmap;
        i = G__10235;
        j = G__10236;
        bitmap = G__10237;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__10238 = self__.arr;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(G__10238) : cljs.core.create_array_node_seq.call(null, G__10238);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          var G__10239 = init__$2;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10239) : cljs.core.deref.call(null, G__10239);
        } else {
          var G__10240 = i + 1;
          var G__10241 = init__$2;
          i = G__10240;
          init__$1 = G__10241;
          continue;
        }
      } else {
        var G__10242 = i + 1;
        var G__10243 = init__$1;
        i = G__10242;
        init__$1 = G__10243;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__10244 = i + 2;
        i = G__10244;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__10245 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__10245) : cljs.core.create_inode_seq.call(null, G__10245);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var cljs$core$create_node = null;
  var cljs$core$create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var cljs$core$create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  cljs$core$create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return cljs$core$create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return cljs$core$create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$create_node.cljs$core$IFn$_invoke$arity$6 = cljs$core$create_node__6;
  cljs$core$create_node.cljs$core$IFn$_invoke$arity$7 = cljs$core$create_node__7;
  return cljs$core$create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__10246 = self__.nodes;
    var G__10247 = self__.i + 2;
    var G__10248 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__10246, G__10247, G__10248) : cljs.core.create_inode_seq.call(null, G__10246, G__10247, G__10248);
  } else {
    var G__10249 = self__.nodes;
    var G__10250 = self__.i;
    var G__10251 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__10249, G__10250, G__10251) : cljs.core.create_inode_seq.call(null, G__10249, G__10250, G__10251);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.create_inode_seq = function() {
  var cljs$core$create_inode_seq = null;
  var cljs$core$create_inode_seq__1 = function(nodes) {
    return cljs$core$create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
  };
  var cljs$core$create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__10255 = j + 2;
                j = G__10255;
                continue;
              }
            } else {
              var G__10256 = j + 2;
              j = G__10256;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  cljs$core$create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return cljs$core$create_inode_seq__1.call(this, nodes);
      case 3:
        return cljs$core$create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$create_inode_seq.cljs$core$IFn$_invoke$arity$1 = cljs$core$create_inode_seq__1;
  cljs$core$create_inode_seq.cljs$core$IFn$_invoke$arity$3 = cljs$core$create_inode_seq__3;
  return cljs$core$create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__10257 = null;
  var G__10258 = self__.nodes;
  var G__10259 = self__.i;
  var G__10260 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__10257, G__10258, G__10259, G__10260) : cljs.core.create_array_node_seq.call(null, G__10257, G__10258, G__10259, G__10260);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.create_array_node_seq = function() {
  var cljs$core$create_array_node_seq = null;
  var cljs$core$create_array_node_seq__1 = function(nodes) {
    return cljs$core$create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
  };
  var cljs$core$create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__10265 = j + 1;
              j = G__10265;
              continue;
            }
          } else {
            var G__10266 = j + 1;
            j = G__10266;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  cljs$core$create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return cljs$core$create_array_node_seq__1.call(this, meta);
      case 4:
        return cljs$core$create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = cljs$core$create_array_node_seq__1;
  cljs$core$create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = cljs$core$create_array_node_seq__4;
  return cljs$core$create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__10268 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__10268) : cljs.core.keys.call(null, G__10268);
  }());
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__10269 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__10269) : cljs.core.vals.call(null, G__10269);
  }());
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10270 = cljs.core.seq(coll);
  var chunk__10271 = null;
  var count__10272 = 0;
  var i__10273 = 0;
  while (true) {
    if (i__10273 < count__10272) {
      var vec__10274 = chunk__10271.cljs$core$IIndexed$_nth$arity$2(null, i__10273);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10274, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10274, 1, null);
      var G__10275_10286 = v;
      var G__10276_10287 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10275_10286, G__10276_10287) : f.call(null, G__10275_10286, G__10276_10287);
      var G__10288 = seq__10270;
      var G__10289 = chunk__10271;
      var G__10290 = count__10272;
      var G__10291 = i__10273 + 1;
      seq__10270 = G__10288;
      chunk__10271 = G__10289;
      count__10272 = G__10290;
      i__10273 = G__10291;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__10270);
      if (temp__4126__auto__) {
        var seq__10270__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10270__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__10270__$1);
          var G__10292 = cljs.core.chunk_rest(seq__10270__$1);
          var G__10293 = c__4907__auto__;
          var G__10294 = cljs.core.count(c__4907__auto__);
          var G__10295 = 0;
          seq__10270 = G__10292;
          chunk__10271 = G__10293;
          count__10272 = G__10294;
          i__10273 = G__10295;
          continue;
        } else {
          var vec__10277 = cljs.core.first(seq__10270__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10277, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10277, 1, null);
          var G__10278_10296 = v;
          var G__10279_10297 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10278_10296, G__10279_10297) : f.call(null, G__10278_10296, G__10279_10297);
          var G__10298 = cljs.core.next(seq__10270__$1);
          var G__10299 = null;
          var G__10300 = 0;
          var G__10301 = 0;
          seq__10270 = G__10298;
          chunk__10271 = G__10299;
          count__10272 = G__10300;
          i__10273 = G__10301;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? function() {
    var G__10280 = init;
    var G__10281 = null;
    var G__10282 = self__.nil_val;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10280, G__10281, G__10282) : f.call(null, G__10280, G__10281, G__10282);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__10283 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10283) : cljs.core.deref.call(null, G__10283);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj10285 = {};
    return obj10285;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__10302 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__10303 = cljs.core.next(es);
          ret = G__10302;
          es = G__10303;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__10304 = null;
  var G__10304__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10304__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10304 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10304__2.call(this, self__, k);
      case 3:
        return G__10304__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10304.cljs$core$IFn$_invoke$arity$2 = G__10304__2;
  G__10304.cljs$core$IFn$_invoke$arity$3 = G__10304__3;
  return G__10304;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args10267) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10267)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__10305 = i + 2;
      var G__10306 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__10305;
      ret = G__10306;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__10307 = i + 1;
      var G__10308 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__10307;
      out = G__10308;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__10309 = o;
      if (G__10309) {
        var bit__4796__auto__ = G__10309.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4796__auto__ || G__10309.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__10309.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__10309);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__10309);
      }
    }()) {
      return tcoll.assoc_BANG_(function() {
        var G__10310 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__10310) : cljs.core.key.call(null, G__10310);
      }(), function() {
        var G__10311 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__10311) : cljs.core.val.call(null, G__10311);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__10314 = cljs.core.next(es);
          var G__10315 = tcoll__$1.assoc_BANG_(function() {
            var G__10312 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__10312) : cljs.core.key.call(null, G__10312);
          }(), function() {
            var G__10313 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__10313) : cljs.core.val.call(null, G__10313);
          }());
          es = G__10314;
          tcoll__$1 = G__10315;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__10316 = ascending_QMARK_ ? t.left : t.right;
      var G__10317 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__10316;
      stack__$1 = G__10317;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? cljs$core$tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__10330 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10330) : cljs.core.deref.call(null, G__10330);
  } else {
    var init__$2 = function() {
      var G__10331 = init__$1;
      var G__10332 = node.key;
      var G__10333 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10331, G__10332, G__10333) : f.call(null, G__10331, G__10332, G__10333);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      var G__10334 = init__$2;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10334) : cljs.core.deref.call(null, G__10334);
    } else {
      var init__$3 = !(node.right == null) ? cljs$core$tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        var G__10335 = init__$3;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10335) : cljs.core.deref.call(null, G__10335);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__10337 = null;
  var G__10337__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10337__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10337 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10337__2.call(this, self__, k);
      case 3:
        return G__10337__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10337.cljs$core$IFn$_invoke$arity$2 = G__10337__2;
  G__10337.cljs$core$IFn$_invoke$arity$3 = G__10337__3;
  return G__10337;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args10336) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10336)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__10339 = null;
  var G__10339__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10339__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10339 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10339__2.call(this, self__, k);
      case 3:
        return G__10339__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10339.cljs$core$IFn$_invoke$arity$2 = G__10339__2;
  G__10339.cljs$core$IFn$_invoke$arity$3 = G__10339__3;
  return G__10339;
}();
cljs.core.RedNode.prototype.apply = function(self__, args10338) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10338)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__10352 = k;
      var G__10353 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__10352, G__10353) : comp.call(null, G__10352, G__10353);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = cljs$core$tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = cljs$core$tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, cljs$core$tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, cljs$core$tree_map_append(left, right.left), right.right, null);
        } else {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__10372 = k;
      var G__10373 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__10372, G__10373) : comp.call(null, G__10372, G__10373);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = cljs$core$tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = cljs$core$tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = function() {
    var G__10384 = k;
    var G__10385 = tk;
    return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__10384, G__10385) : comp.call(null, G__10384, G__10385);
  }();
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, cljs$core$tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, cljs$core$tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10387 = cljs.core.seq(coll);
  var chunk__10388 = null;
  var count__10389 = 0;
  var i__10390 = 0;
  while (true) {
    if (i__10390 < count__10389) {
      var vec__10391 = chunk__10388.cljs$core$IIndexed$_nth$arity$2(null, i__10390);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10391, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10391, 1, null);
      var G__10392_10404 = v;
      var G__10393_10405 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10392_10404, G__10393_10405) : f.call(null, G__10392_10404, G__10393_10405);
      var G__10406 = seq__10387;
      var G__10407 = chunk__10388;
      var G__10408 = count__10389;
      var G__10409 = i__10390 + 1;
      seq__10387 = G__10406;
      chunk__10388 = G__10407;
      count__10389 = G__10408;
      i__10390 = G__10409;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__10387);
      if (temp__4126__auto__) {
        var seq__10387__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10387__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__10387__$1);
          var G__10410 = cljs.core.chunk_rest(seq__10387__$1);
          var G__10411 = c__4907__auto__;
          var G__10412 = cljs.core.count(c__4907__auto__);
          var G__10413 = 0;
          seq__10387 = G__10410;
          chunk__10388 = G__10411;
          count__10389 = G__10412;
          i__10390 = G__10413;
          continue;
        } else {
          var vec__10394 = cljs.core.first(seq__10387__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10394, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10394, 1, null);
          var G__10395_10414 = v;
          var G__10396_10415 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10395_10414, G__10396_10415) : f.call(null, G__10395_10414, G__10396_10415);
          var G__10416 = cljs.core.next(seq__10387__$1);
          var G__10417 = null;
          var G__10418 = 0;
          var G__10419 = 0;
          seq__10387 = G__10416;
          chunk__10388 = G__10417;
          count__10389 = G__10418;
          i__10390 = G__10419;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__10397 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__10397) : cljs.core.keys.call(null, G__10397);
  }());
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__10398 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__10398) : cljs.core.vals.call(null, G__10398);
  }());
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__10399 = k;
        var G__10400 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__10399, G__10400) : self__.comp.call(null, G__10399, G__10400);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__10420 = t.left;
          t = G__10420;
          continue;
        } else {
          var G__10421 = t.right;
          t = G__10421;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__10422 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__10423 = cljs.core.next(es);
          ret = G__10422;
          es = G__10423;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__10424 = null;
  var G__10424__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10424__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10424 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10424__2.call(this, self__, k);
      case 3:
        return G__10424__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10424.cljs$core$IFn$_invoke$arity$2 = G__10424__2;
  G__10424.cljs$core$IFn$_invoke$arity$3 = G__10424__3;
  return G__10424;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args10386) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10386)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__10401 = k;
          var G__10402 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__10401, G__10402) : self__.comp.call(null, G__10401, G__10402);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__10425 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__10426 = t.left;
              stack = G__10425;
              t = G__10426;
              continue;
            } else {
              var G__10427 = stack;
              var G__10428 = t.right;
              stack = G__10427;
              t = G__10428;
              continue;
            }
          } else {
            if (c > 0) {
              var G__10429 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__10430 = t.right;
              stack = G__10429;
              t = G__10430;
              continue;
            } else {
              var G__10431 = stack;
              var G__10432 = t.left;
              stack = G__10431;
              t = G__10432;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  var G__10403 = entry;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__10403) : cljs.core.key.call(null, G__10403);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.hash_map = function() {
  var cljs$core$hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__10433 = cljs.core.nnext(in$);
        var G__10434 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__10433;
        out = G__10434;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  };
  var cljs$core$hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__10435__i = 0, G__10435__a = new Array(arguments.length - 0);
      while (G__10435__i < G__10435__a.length) {
        G__10435__a[G__10435__i] = arguments[G__10435__i + 0];
        ++G__10435__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__10435__a, 0);
    }
    return cljs$core$hash_map__delegate.call(this, keyvals);
  };
  cljs$core$hash_map.cljs$lang$maxFixedArity = 0;
  cljs$core$hash_map.cljs$lang$applyTo = function(arglist__10436) {
    var keyvals = cljs.core.seq(arglist__10436);
    return cljs$core$hash_map__delegate(keyvals);
  };
  cljs$core$hash_map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$hash_map__delegate;
  return cljs$core$hash_map;
}();
cljs.core.array_map = function() {
  var cljs$core$array_map__delegate = function(keyvals) {
    return cljs.core.PersistentArrayMap.fromArray(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array, keyvals), true, false);
  };
  var cljs$core$array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__10437__i = 0, G__10437__a = new Array(arguments.length - 0);
      while (G__10437__i < G__10437__a.length) {
        G__10437__a[G__10437__i] = arguments[G__10437__i + 0];
        ++G__10437__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__10437__a, 0);
    }
    return cljs$core$array_map__delegate.call(this, keyvals);
  };
  cljs$core$array_map.cljs$lang$maxFixedArity = 0;
  cljs$core$array_map.cljs$lang$applyTo = function(arglist__10438) {
    var keyvals = cljs.core.seq(arglist__10438);
    return cljs$core$array_map__delegate(keyvals);
  };
  cljs$core$array_map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$array_map__delegate;
  return cljs$core$array_map;
}();
cljs.core.obj_map = function() {
  var cljs$core$obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj10442 = {};
      return obj10442;
    }();
    var kvs = cljs.core.seq(keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first(kvs));
        obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
        var G__10443 = cljs.core.nnext(kvs);
        kvs = G__10443;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var cljs$core$obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__10444__i = 0, G__10444__a = new Array(arguments.length - 0);
      while (G__10444__i < G__10444__a.length) {
        G__10444__a[G__10444__i] = arguments[G__10444__i + 0];
        ++G__10444__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__10444__a, 0);
    }
    return cljs$core$obj_map__delegate.call(this, keyvals);
  };
  cljs$core$obj_map.cljs$lang$maxFixedArity = 0;
  cljs$core$obj_map.cljs$lang$applyTo = function(arglist__10445) {
    var keyvals = cljs.core.seq(arglist__10445);
    return cljs$core$obj_map__delegate(keyvals);
  };
  cljs$core$obj_map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$obj_map__delegate;
  return cljs$core$obj_map;
}();
cljs.core.sorted_map = function() {
  var cljs$core$sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__10446 = cljs.core.nnext(in$);
        var G__10447 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__10446;
        out = G__10447;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var cljs$core$sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__10448__i = 0, G__10448__a = new Array(arguments.length - 0);
      while (G__10448__i < G__10448__a.length) {
        G__10448__a[G__10448__i] = arguments[G__10448__i + 0];
        ++G__10448__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__10448__a, 0);
    }
    return cljs$core$sorted_map__delegate.call(this, keyvals);
  };
  cljs$core$sorted_map.cljs$lang$maxFixedArity = 0;
  cljs$core$sorted_map.cljs$lang$applyTo = function(arglist__10449) {
    var keyvals = cljs.core.seq(arglist__10449);
    return cljs$core$sorted_map__delegate(keyvals);
  };
  cljs$core$sorted_map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sorted_map__delegate;
  return cljs$core$sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var cljs$core$sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__10450 = cljs.core.nnext(in$);
        var G__10451 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__10450;
        out = G__10451;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var cljs$core$sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      var G__10452__i = 0, G__10452__a = new Array(arguments.length - 1);
      while (G__10452__i < G__10452__a.length) {
        G__10452__a[G__10452__i] = arguments[G__10452__i + 1];
        ++G__10452__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__10452__a, 0);
    }
    return cljs$core$sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  cljs$core$sorted_map_by.cljs$lang$maxFixedArity = 1;
  cljs$core$sorted_map_by.cljs$lang$applyTo = function(arglist__10453) {
    var comparator = cljs.core.first(arglist__10453);
    var keyvals = cljs.core.rest(arglist__10453);
    return cljs$core$sorted_map_by__delegate(comparator, keyvals);
  };
  cljs$core$sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sorted_map_by__delegate;
  return cljs$core$sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__10454 = self__.mseq;
    if (G__10454) {
      var bit__4796__auto__ = G__10454.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4796__auto__ || G__10454.cljs$core$INext$) {
        return true;
      } else {
        if (!G__10454.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__10454);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__10454);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__10455 = self__.mseq;
    if (G__10455) {
      var bit__4796__auto__ = G__10455.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4796__auto__ || G__10455.cljs$core$INext$) {
        return true;
      } else {
        if (!G__10455.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__10455);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__10455);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__10456 = self__.mseq;
    if (G__10456) {
      var bit__4796__auto__ = G__10456.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4796__auto__ || G__10456.cljs$core$INext$) {
        return true;
      } else {
        if (!G__10456.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__10456);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__10456);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__10457 = self__.mseq;
    if (G__10457) {
      var bit__4796__auto__ = G__10457.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4796__auto__ || G__10457.cljs$core$INext$) {
        return true;
      } else {
        if (!G__10457.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__10457);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__10457);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function() {
  var cljs$core$merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__10458_SHARP_, p2__10459_SHARP_) {
        return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
          var or__4122__auto__ = p1__10458_SHARP_;
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__10459_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var cljs$core$merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      var G__10460__i = 0, G__10460__a = new Array(arguments.length - 0);
      while (G__10460__i < G__10460__a.length) {
        G__10460__a[G__10460__i] = arguments[G__10460__i + 0];
        ++G__10460__i;
      }
      maps = new cljs.core.IndexedSeq(G__10460__a, 0);
    }
    return cljs$core$merge__delegate.call(this, maps);
  };
  cljs$core$merge.cljs$lang$maxFixedArity = 0;
  cljs$core$merge.cljs$lang$applyTo = function(arglist__10461) {
    var maps = cljs.core.seq(arglist__10461);
    return cljs$core$merge__delegate(maps);
  };
  cljs$core$merge.cljs$core$IFn$_invoke$arity$variadic = cljs$core$merge__delegate;
  return cljs$core$merge;
}();
cljs.core.merge_with = function() {
  var cljs$core$merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first(e);
        var v = cljs.core.second(e);
        if (cljs.core.contains_QMARK_(m, k)) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
            var G__10464 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
            var G__10465 = v;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10464, G__10465) : f.call(null, G__10464, G__10465);
          }());
        } else {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
            var or__4122__auto__ = m1;
            if (cljs.core.truth_(or__4122__auto__)) {
              return or__4122__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq(m2));
        };
      }(merge_entry);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
    } else {
      return null;
    }
  };
  var cljs$core$merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      var G__10466__i = 0, G__10466__a = new Array(arguments.length - 1);
      while (G__10466__i < G__10466__a.length) {
        G__10466__a[G__10466__i] = arguments[G__10466__i + 1];
        ++G__10466__i;
      }
      maps = new cljs.core.IndexedSeq(G__10466__a, 0);
    }
    return cljs$core$merge_with__delegate.call(this, f, maps);
  };
  cljs$core$merge_with.cljs$lang$maxFixedArity = 1;
  cljs$core$merge_with.cljs$lang$applyTo = function(arglist__10467) {
    var f = cljs.core.first(arglist__10467);
    var maps = cljs.core.rest(arglist__10467);
    return cljs$core$merge_with__delegate(f, maps);
  };
  cljs$core$merge_with.cljs$core$IFn$_invoke$arity$variadic = cljs$core$merge_with__delegate;
  return cljs$core$merge_with;
}();
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__10468 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__10469 = cljs.core.next(keys);
      ret = G__10468;
      keys = G__10469;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10472 = cljs.core.seq(coll);
  var chunk__10473 = null;
  var count__10474 = 0;
  var i__10475 = 0;
  while (true) {
    if (i__10475 < count__10474) {
      var vec__10476 = chunk__10473.cljs$core$IIndexed$_nth$arity$2(null, i__10475);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10476, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10476, 1, null);
      var G__10477_10482 = v;
      var G__10478_10483 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10477_10482, G__10478_10483) : f.call(null, G__10477_10482, G__10478_10483);
      var G__10484 = seq__10472;
      var G__10485 = chunk__10473;
      var G__10486 = count__10474;
      var G__10487 = i__10475 + 1;
      seq__10472 = G__10484;
      chunk__10473 = G__10485;
      count__10474 = G__10486;
      i__10475 = G__10487;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__10472);
      if (temp__4126__auto__) {
        var seq__10472__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10472__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__10472__$1);
          var G__10488 = cljs.core.chunk_rest(seq__10472__$1);
          var G__10489 = c__4907__auto__;
          var G__10490 = cljs.core.count(c__4907__auto__);
          var G__10491 = 0;
          seq__10472 = G__10488;
          chunk__10473 = G__10489;
          count__10474 = G__10490;
          i__10475 = G__10491;
          continue;
        } else {
          var vec__10479 = cljs.core.first(seq__10472__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10479, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10479, 1, null);
          var G__10480_10492 = v;
          var G__10481_10493 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10480_10492, G__10481_10493) : f.call(null, G__10480_10492, G__10481_10493);
          var G__10494 = cljs.core.next(seq__10472__$1);
          var G__10495 = null;
          var G__10496 = 0;
          var G__10497 = 0;
          seq__10472 = G__10494;
          chunk__10473 = G__10495;
          count__10474 = G__10496;
          i__10475 = G__10497;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__10470_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__10470_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__10498 = null;
  var G__10498__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10498__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10498 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10498__2.call(this, self__, k);
      case 3:
        return G__10498__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10498.cljs$core$IFn$_invoke$arity$2 = G__10498__2;
  G__10498.cljs$core$IFn$_invoke$arity$3 = G__10498__3;
  return G__10498;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args10471) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10471)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__10499 = i + 1;
        var G__10500 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__10499;
        out = G__10500;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__10501 = i + 1;
        var G__10502 = cljs.core._conj_BANG_(out, items[i]);
        i = G__10501;
        out = G__10502;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__10504 = null;
  var G__10504__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__10504__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__10504 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10504__2.call(this, self__, k);
      case 3:
        return G__10504__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10504.cljs$core$IFn$_invoke$arity$2 = G__10504__2;
  G__10504.cljs$core$IFn$_invoke$arity$3 = G__10504__3;
  return G__10504;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args10503) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10503)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10507 = cljs.core.seq(coll);
  var chunk__10508 = null;
  var count__10509 = 0;
  var i__10510 = 0;
  while (true) {
    if (i__10510 < count__10509) {
      var vec__10511 = chunk__10508.cljs$core$IIndexed$_nth$arity$2(null, i__10510);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10511, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10511, 1, null);
      var G__10512_10517 = v;
      var G__10513_10518 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10512_10517, G__10513_10518) : f.call(null, G__10512_10517, G__10513_10518);
      var G__10519 = seq__10507;
      var G__10520 = chunk__10508;
      var G__10521 = count__10509;
      var G__10522 = i__10510 + 1;
      seq__10507 = G__10519;
      chunk__10508 = G__10520;
      count__10509 = G__10521;
      i__10510 = G__10522;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__10507);
      if (temp__4126__auto__) {
        var seq__10507__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10507__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__10507__$1);
          var G__10523 = cljs.core.chunk_rest(seq__10507__$1);
          var G__10524 = c__4907__auto__;
          var G__10525 = cljs.core.count(c__4907__auto__);
          var G__10526 = 0;
          seq__10507 = G__10523;
          chunk__10508 = G__10524;
          count__10509 = G__10525;
          i__10510 = G__10526;
          continue;
        } else {
          var vec__10514 = cljs.core.first(seq__10507__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10514, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10514, 1, null);
          var G__10515_10527 = v;
          var G__10516_10528 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10515_10527, G__10516_10528) : f.call(null, G__10515_10527, G__10516_10528);
          var G__10529 = cljs.core.next(seq__10507__$1);
          var G__10530 = null;
          var G__10531 = 0;
          var G__10532 = 0;
          seq__10507 = G__10529;
          chunk__10508 = G__10530;
          count__10509 = G__10531;
          i__10510 = G__10532;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__10505_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__10505_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__10533 = null;
  var G__10533__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10533__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10533 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10533__2.call(this, self__, k);
      case 3:
        return G__10533__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10533.cljs$core$IFn$_invoke$arity$2 = G__10533__2;
  G__10533.cljs$core$IFn$_invoke$arity$3 = G__10533__3;
  return G__10533;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args10506) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10506)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__5001__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__5001__auto__.length) {
        var G__10534 = i + 1;
        var G__10535 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__10534;
        res = G__10535;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__10536 = in$__$1.cljs$core$INext$_next$arity$1(null);
          var G__10537 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__10536;
          out = G__10537;
          continue;
        } else {
          return out.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var cljs$core$hash_set = null;
  var cljs$core$hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var cljs$core$hash_set__1 = function() {
    var G__10538__delegate = function(keys) {
      return cljs.core.set(keys);
    };
    var G__10538 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        var G__10539__i = 0, G__10539__a = new Array(arguments.length - 0);
        while (G__10539__i < G__10539__a.length) {
          G__10539__a[G__10539__i] = arguments[G__10539__i + 0];
          ++G__10539__i;
        }
        keys = new cljs.core.IndexedSeq(G__10539__a, 0);
      }
      return G__10538__delegate.call(this, keys);
    };
    G__10538.cljs$lang$maxFixedArity = 0;
    G__10538.cljs$lang$applyTo = function(arglist__10540) {
      var keys = cljs.core.seq(arglist__10540);
      return G__10538__delegate(keys);
    };
    G__10538.cljs$core$IFn$_invoke$arity$variadic = G__10538__delegate;
    return G__10538;
  }();
  cljs$core$hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$hash_set__0.call(this);
      default:
        var G__10541 = null;
        if (arguments.length > 0) {
          var G__10542__i = 0, G__10542__a = new Array(arguments.length - 0);
          while (G__10542__i < G__10542__a.length) {
            G__10542__a[G__10542__i] = arguments[G__10542__i + 0];
            ++G__10542__i;
          }
          G__10541 = new cljs.core.IndexedSeq(G__10542__a, 0);
        }
        return cljs$core$hash_set__1.cljs$core$IFn$_invoke$arity$variadic(G__10541);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$hash_set.cljs$lang$maxFixedArity = 0;
  cljs$core$hash_set.cljs$lang$applyTo = cljs$core$hash_set__1.cljs$lang$applyTo;
  cljs$core$hash_set.cljs$core$IFn$_invoke$arity$0 = cljs$core$hash_set__0;
  cljs$core$hash_set.cljs$core$IFn$_invoke$arity$variadic = cljs$core$hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$hash_set;
}();
cljs.core.sorted_set = function() {
  var cljs$core$sorted_set__delegate = function(keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var cljs$core$sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      var G__10543__i = 0, G__10543__a = new Array(arguments.length - 0);
      while (G__10543__i < G__10543__a.length) {
        G__10543__a[G__10543__i] = arguments[G__10543__i + 0];
        ++G__10543__i;
      }
      keys = new cljs.core.IndexedSeq(G__10543__a, 0);
    }
    return cljs$core$sorted_set__delegate.call(this, keys);
  };
  cljs$core$sorted_set.cljs$lang$maxFixedArity = 0;
  cljs$core$sorted_set.cljs$lang$applyTo = function(arglist__10544) {
    var keys = cljs.core.seq(arglist__10544);
    return cljs$core$sorted_set__delegate(keys);
  };
  cljs$core$sorted_set.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sorted_set__delegate;
  return cljs$core$sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var cljs$core$sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
  };
  var cljs$core$sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      var G__10545__i = 0, G__10545__a = new Array(arguments.length - 1);
      while (G__10545__i < G__10545__a.length) {
        G__10545__a[G__10545__i] = arguments[G__10545__i + 1];
        ++G__10545__i;
      }
      keys = new cljs.core.IndexedSeq(G__10545__a, 0);
    }
    return cljs$core$sorted_set_by__delegate.call(this, comparator, keys);
  };
  cljs$core$sorted_set_by.cljs$lang$maxFixedArity = 1;
  cljs$core$sorted_set_by.cljs$lang$applyTo = function(arglist__10546) {
    var comparator = cljs.core.first(arglist__10546);
    var keys = cljs.core.rest(arglist__10546);
    return cljs$core$sorted_set_by__delegate(comparator, keys);
  };
  cljs$core$sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sorted_set_by__delegate;
  return cljs$core$sorted_set_by;
}();
cljs.core.replace = function() {
  var cljs$core$replace = null;
  var cljs$core$replace__1 = function(smap) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__10547_SHARP_) {
      var temp__4124__auto__ = cljs.core.find(smap, p1__10547_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val(e);
      } else {
        return p1__10547_SHARP_;
      }
    });
  };
  var cljs$core$replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_(coll)) {
      var n = cljs.core.count(coll);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
    } else {
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__10548_SHARP_) {
        var temp__4124__auto__ = cljs.core.find(smap, p1__10548_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second(e);
        } else {
          return p1__10548_SHARP_;
        }
      }, coll);
    }
  };
  cljs$core$replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$replace__1.call(this, smap);
      case 2:
        return cljs$core$replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$replace.cljs$core$IFn$_invoke$arity$1 = cljs$core$replace__1;
  cljs$core$replace.cljs$core$IFn$_invoke$arity$2 = cljs$core$replace__2;
  return cljs$core$replace;
}();
cljs.core.distinct = function() {
  var cljs$core$distinct = null;
  var cljs$core$distinct__0 = function() {
    return function(rf) {
      var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
      return function(seen) {
        return function() {
          var G__10569 = null;
          var G__10569__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__10569__1 = function(result) {
            var G__10559 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10559) : rf.call(null, G__10559);
          };
          var G__10569__2 = function(result, input) {
            if (cljs.core.contains_QMARK_(function() {
              var G__10560 = seen;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10560) : cljs.core.deref.call(null, G__10560);
            }(), input)) {
              return result;
            } else {
              seen.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen.cljs$core$IDeref$_deref$arity$1(null), input));
              var G__10561 = result;
              var G__10562 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10561, G__10562) : rf.call(null, G__10561, G__10562);
            }
          };
          G__10569 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__10569__0.call(this);
              case 1:
                return G__10569__1.call(this, result);
              case 2:
                return G__10569__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__10569.cljs$core$IFn$_invoke$arity$0 = G__10569__0;
          G__10569.cljs$core$IFn$_invoke$arity$1 = G__10569__1;
          G__10569.cljs$core$IFn$_invoke$arity$2 = G__10569__2;
          return G__10569;
        }();
      }(seen);
    };
  };
  var cljs$core$distinct__1 = function(coll) {
    var step = function cljs$core$distinct_$_step(xs, seen) {
      return new cljs.core.LazySeq(null, function() {
        return function(p__10567, seen__$1) {
          while (true) {
            var vec__10568 = p__10567;
            var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10568, 0, null);
            var xs__$1 = vec__10568;
            var temp__4126__auto__ = cljs.core.seq(xs__$1);
            if (temp__4126__auto__) {
              var s = temp__4126__auto__;
              if (cljs.core.contains_QMARK_(seen__$1, f)) {
                var G__10570 = cljs.core.rest(s);
                var G__10571 = seen__$1;
                p__10567 = G__10570;
                seen__$1 = G__10571;
                continue;
              } else {
                return cljs.core.cons(f, cljs$core$distinct_$_step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
              }
            } else {
              return null;
            }
            break;
          }
        }.call(null, xs, seen);
      }, null, null);
    };
    return step(coll, cljs.core.PersistentHashSet.EMPTY);
  };
  cljs$core$distinct = function(coll) {
    switch(arguments.length) {
      case 0:
        return cljs$core$distinct__0.call(this);
      case 1:
        return cljs$core$distinct__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$distinct.cljs$core$IFn$_invoke$arity$0 = cljs$core$distinct__0;
  cljs$core$distinct.cljs$core$IFn$_invoke$arity$1 = cljs$core$distinct__1;
  return cljs$core$distinct;
}();
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__10572 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__10573 = cljs.core.next(s__$1);
      ret = G__10572;
      s__$1 = G__10573;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (function() {
    var G__10575 = x;
    if (G__10575) {
      var bit__4789__auto__ = G__10575.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4789__auto__ || G__10575.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__10576 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__10577 = cljs.core.next(ks);
      var G__10578 = cljs.core.next(vs);
      map = G__10576;
      ks = G__10577;
      vs = G__10578;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var cljs$core$max_key = null;
  var cljs$core$max_key__2 = function(k, x) {
    return x;
  };
  var cljs$core$max_key__3 = function(k, x, y) {
    if (function() {
      var G__10589 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10589) : k.call(null, G__10589);
    }() > function() {
      var G__10590 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10590) : k.call(null, G__10590);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var cljs$core$max_key__4 = function() {
    var G__10591__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10579_SHARP_, p2__10580_SHARP_) {
        return cljs$core$max_key.cljs$core$IFn$_invoke$arity$3(k, p1__10579_SHARP_, p2__10580_SHARP_);
      }, cljs$core$max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__10591 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__10592__i = 0, G__10592__a = new Array(arguments.length - 3);
        while (G__10592__i < G__10592__a.length) {
          G__10592__a[G__10592__i] = arguments[G__10592__i + 3];
          ++G__10592__i;
        }
        more = new cljs.core.IndexedSeq(G__10592__a, 0);
      }
      return G__10591__delegate.call(this, k, x, y, more);
    };
    G__10591.cljs$lang$maxFixedArity = 3;
    G__10591.cljs$lang$applyTo = function(arglist__10593) {
      var k = cljs.core.first(arglist__10593);
      arglist__10593 = cljs.core.next(arglist__10593);
      var x = cljs.core.first(arglist__10593);
      arglist__10593 = cljs.core.next(arglist__10593);
      var y = cljs.core.first(arglist__10593);
      var more = cljs.core.rest(arglist__10593);
      return G__10591__delegate(k, x, y, more);
    };
    G__10591.cljs$core$IFn$_invoke$arity$variadic = G__10591__delegate;
    return G__10591;
  }();
  cljs$core$max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$max_key__2.call(this, k, x);
      case 3:
        return cljs$core$max_key__3.call(this, k, x, y);
      default:
        var G__10594 = null;
        if (arguments.length > 3) {
          var G__10595__i = 0, G__10595__a = new Array(arguments.length - 3);
          while (G__10595__i < G__10595__a.length) {
            G__10595__a[G__10595__i] = arguments[G__10595__i + 3];
            ++G__10595__i;
          }
          G__10594 = new cljs.core.IndexedSeq(G__10595__a, 0);
        }
        return cljs$core$max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__10594);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$max_key.cljs$lang$maxFixedArity = 3;
  cljs$core$max_key.cljs$lang$applyTo = cljs$core$max_key__4.cljs$lang$applyTo;
  cljs$core$max_key.cljs$core$IFn$_invoke$arity$2 = cljs$core$max_key__2;
  cljs$core$max_key.cljs$core$IFn$_invoke$arity$3 = cljs$core$max_key__3;
  cljs$core$max_key.cljs$core$IFn$_invoke$arity$variadic = cljs$core$max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$max_key;
}();
cljs.core.min_key = function() {
  var cljs$core$min_key = null;
  var cljs$core$min_key__2 = function(k, x) {
    return x;
  };
  var cljs$core$min_key__3 = function(k, x, y) {
    if (function() {
      var G__10606 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10606) : k.call(null, G__10606);
    }() < function() {
      var G__10607 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10607) : k.call(null, G__10607);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var cljs$core$min_key__4 = function() {
    var G__10608__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10596_SHARP_, p2__10597_SHARP_) {
        return cljs$core$min_key.cljs$core$IFn$_invoke$arity$3(k, p1__10596_SHARP_, p2__10597_SHARP_);
      }, cljs$core$min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__10608 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__10609__i = 0, G__10609__a = new Array(arguments.length - 3);
        while (G__10609__i < G__10609__a.length) {
          G__10609__a[G__10609__i] = arguments[G__10609__i + 3];
          ++G__10609__i;
        }
        more = new cljs.core.IndexedSeq(G__10609__a, 0);
      }
      return G__10608__delegate.call(this, k, x, y, more);
    };
    G__10608.cljs$lang$maxFixedArity = 3;
    G__10608.cljs$lang$applyTo = function(arglist__10610) {
      var k = cljs.core.first(arglist__10610);
      arglist__10610 = cljs.core.next(arglist__10610);
      var x = cljs.core.first(arglist__10610);
      arglist__10610 = cljs.core.next(arglist__10610);
      var y = cljs.core.first(arglist__10610);
      var more = cljs.core.rest(arglist__10610);
      return G__10608__delegate(k, x, y, more);
    };
    G__10608.cljs$core$IFn$_invoke$arity$variadic = G__10608__delegate;
    return G__10608;
  }();
  cljs$core$min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$min_key__2.call(this, k, x);
      case 3:
        return cljs$core$min_key__3.call(this, k, x, y);
      default:
        var G__10611 = null;
        if (arguments.length > 3) {
          var G__10612__i = 0, G__10612__a = new Array(arguments.length - 3);
          while (G__10612__i < G__10612__a.length) {
            G__10612__a[G__10612__i] = arguments[G__10612__i + 3];
            ++G__10612__i;
          }
          G__10611 = new cljs.core.IndexedSeq(G__10612__a, 0);
        }
        return cljs$core$min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__10611);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$min_key.cljs$lang$maxFixedArity = 3;
  cljs$core$min_key.cljs$lang$applyTo = cljs$core$min_key__4.cljs$lang$applyTo;
  cljs$core$min_key.cljs$core$IFn$_invoke$arity$2 = cljs$core$min_key__2;
  cljs$core$min_key.cljs$core$IFn$_invoke$arity$3 = cljs$core$min_key__3;
  cljs$core$min_key.cljs$core$IFn$_invoke$arity$variadic = cljs$core$min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var cljs$core$partition_all = null;
  var cljs$core$partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list();
      return function(a) {
        return function() {
          var G__10629 = null;
          var G__10629__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__10629__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__10624 = result;
                var G__10625 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10624, G__10625) : rf.call(null, G__10624, G__10625);
              }());
            }();
            var G__10626 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10626) : rf.call(null, G__10626);
          };
          var G__10629__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var G__10627 = result;
              var G__10628 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10627, G__10628) : rf.call(null, G__10627, G__10628);
            } else {
              return result;
            }
          };
          G__10629 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__10629__0.call(this);
              case 1:
                return G__10629__1.call(this, result);
              case 2:
                return G__10629__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__10629.cljs$core$IFn$_invoke$arity$0 = G__10629__0;
          G__10629.cljs$core$IFn$_invoke$arity$1 = G__10629__1;
          G__10629.cljs$core$IFn$_invoke$arity$2 = G__10629__2;
          return G__10629;
        }();
      }(a);
    };
  };
  var cljs$core$partition_all__2 = function(n, coll) {
    return cljs$core$partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var cljs$core$partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs$core$partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$partition_all__1.call(this, n);
      case 2:
        return cljs$core$partition_all__2.call(this, n, step);
      case 3:
        return cljs$core$partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$partition_all.cljs$core$IFn$_invoke$arity$1 = cljs$core$partition_all__1;
  cljs$core$partition_all.cljs$core$IFn$_invoke$arity$2 = cljs$core$partition_all__2;
  cljs$core$partition_all.cljs$core$IFn$_invoke$arity$3 = cljs$core$partition_all__3;
  return cljs$core$partition_all;
}();
cljs.core.take_while = function() {
  var cljs$core$take_while = null;
  var cljs$core$take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__10642 = null;
        var G__10642__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10642__1 = function(result) {
          var G__10637 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10637) : rf.call(null, G__10637);
        };
        var G__10642__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__10638 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__10638) : pred.call(null, G__10638);
          }())) {
            var G__10639 = result;
            var G__10640 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10639, G__10640) : rf.call(null, G__10639, G__10640);
          } else {
            return cljs.core.reduced(result);
          }
        };
        G__10642 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10642__0.call(this);
            case 1:
              return G__10642__1.call(this, result);
            case 2:
              return G__10642__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10642.cljs$core$IFn$_invoke$arity$0 = G__10642__0;
        G__10642.cljs$core$IFn$_invoke$arity$1 = G__10642__1;
        G__10642.cljs$core$IFn$_invoke$arity$2 = G__10642__2;
        return G__10642;
      }();
    };
  };
  var cljs$core$take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(function() {
          var G__10641 = cljs.core.first(s);
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__10641) : pred.call(null, G__10641);
        }())) {
          return cljs.core.cons(cljs.core.first(s), cljs$core$take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$take_while__1.call(this, pred);
      case 2:
        return cljs$core$take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$take_while.cljs$core$IFn$_invoke$arity$1 = cljs$core$take_while__1;
  cljs$core$take_while.cljs$core$IFn$_invoke$arity$2 = cljs$core$take_while__2;
  return cljs$core$take_while;
}();
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__10647 = function() {
      var G__10649 = cljs.core._entry_key(sc, e);
      var G__10650 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__10649, G__10650) : comp.call(null, G__10649, G__10650);
    }();
    var G__10648 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__10647, G__10648) : test.call(null, G__10647, G__10648);
  };
};
cljs.core.subseq = function() {
  var cljs$core$subseq = null;
  var cljs$core$subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__10654 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10654, 0, null);
        var s = vec__10654;
        if (cljs.core.truth_(function() {
          var G__10655 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__10655) : include.call(null, G__10655);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
    }
  };
  var cljs$core$subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__10656 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10656, 0, null);
      var s = vec__10656;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  cljs$core$subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return cljs$core$subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return cljs$core$subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$subseq.cljs$core$IFn$_invoke$arity$3 = cljs$core$subseq__3;
  cljs$core$subseq.cljs$core$IFn$_invoke$arity$5 = cljs$core$subseq__5;
  return cljs$core$subseq;
}();
cljs.core.rsubseq = function() {
  var cljs$core$rsubseq = null;
  var cljs$core$rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__10660 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10660, 0, null);
        var s = vec__10660;
        if (cljs.core.truth_(function() {
          var G__10661 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__10661) : include.call(null, G__10661);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
    }
  };
  var cljs$core$rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__10662 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10662, 0, null);
      var s = vec__10662;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  cljs$core$rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return cljs$core$rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return cljs$core$rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$rsubseq.cljs$core$IFn$_invoke$arity$3 = cljs$core$rsubseq__3;
  cljs$core$rsubseq.cljs$core$IFn$_invoke$arity$5 = cljs$core$rsubseq__5;
  return cljs$core$rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__10663 = (self__.end - self__.start) / self__.step;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__10663) : Math.ceil.call(null, G__10663);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = function() {
        var G__10664 = ret;
        var G__10665 = i;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10664, G__10665) : f.call(null, G__10664, G__10665);
      }();
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        var G__10666 = ret__$1;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10666) : cljs.core.deref.call(null, G__10666);
      } else {
        var G__10667 = i + self__.step;
        var G__10668 = ret__$1;
        i = G__10667;
        ret = G__10668;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.range = function() {
  var cljs$core$range = null;
  var cljs$core$range__0 = function() {
    return cljs$core$range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
  };
  var cljs$core$range__1 = function(end) {
    return cljs$core$range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
  };
  var cljs$core$range__2 = function(start, end) {
    return cljs$core$range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
  };
  var cljs$core$range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  cljs$core$range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return cljs$core$range__0.call(this);
      case 1:
        return cljs$core$range__1.call(this, start);
      case 2:
        return cljs$core$range__2.call(this, start, end);
      case 3:
        return cljs$core$range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$range.cljs$core$IFn$_invoke$arity$0 = cljs$core$range__0;
  cljs$core$range.cljs$core$IFn$_invoke$arity$1 = cljs$core$range__1;
  cljs$core$range.cljs$core$IFn$_invoke$arity$2 = cljs$core$range__2;
  cljs$core$range.cljs$core$IFn$_invoke$arity$3 = cljs$core$range__3;
  return cljs$core$range;
}();
cljs.core.take_nth = function() {
  var cljs$core$take_nth = null;
  var cljs$core$take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__10686 = null;
          var G__10686__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__10686__1 = function(result) {
            var G__10683 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10683) : rf.call(null, G__10683);
          };
          var G__10686__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            if (cljs.core.rem(i, n) === 0) {
              var G__10684 = result;
              var G__10685 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10684, G__10685) : rf.call(null, G__10684, G__10685);
            } else {
              return result;
            }
          };
          G__10686 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__10686__0.call(this);
              case 1:
                return G__10686__1.call(this, result);
              case 2:
                return G__10686__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__10686.cljs$core$IFn$_invoke$arity$0 = G__10686__0;
          G__10686.cljs$core$IFn$_invoke$arity$1 = G__10686__1;
          G__10686.cljs$core$IFn$_invoke$arity$2 = G__10686__2;
          return G__10686;
        }();
      }(ia);
    };
  };
  var cljs$core$take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs$core$take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$take_nth__1.call(this, n);
      case 2:
        return cljs$core$take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$take_nth.cljs$core$IFn$_invoke$arity$1 = cljs$core$take_nth__1;
  cljs$core$take_nth.cljs$core$IFn$_invoke$arity$2 = cljs$core$take_nth__2;
  return cljs$core$take_nth;
}();
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function() {
  var cljs$core$partition_by = null;
  var cljs$core$partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list();
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__10708 = null;
          var G__10708__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__10708__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__10699 = result;
                var G__10700 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10699, G__10700) : rf.call(null, G__10699, G__10700);
              }());
            }();
            var G__10701 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10701) : rf.call(null, G__10701);
          };
          var G__10708__2 = function(result, input) {
            var pval = function() {
              var G__10702 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10702) : cljs.core.deref.call(null, G__10702);
            }();
            var val = function() {
              var G__10703 = input;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10703) : f.call(null, G__10703);
            }();
            cljs.core.vreset_BANG_(pa, val);
            if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var ret = function() {
                var G__10704 = result;
                var G__10705 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10704, G__10705) : rf.call(null, G__10704, G__10705);
              }();
              if (cljs.core.reduced_QMARK_(ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__10708 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__10708__0.call(this);
              case 1:
                return G__10708__1.call(this, result);
              case 2:
                return G__10708__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__10708.cljs$core$IFn$_invoke$arity$0 = G__10708__0;
          G__10708.cljs$core$IFn$_invoke$arity$1 = G__10708__1;
          G__10708.cljs$core$IFn$_invoke$arity$2 = G__10708__2;
          return G__10708;
        }();
      }(a, pa);
    };
  };
  var cljs$core$partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first(s);
        var fv = function() {
          var G__10706 = fst;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10706) : f.call(null, G__10706);
        }();
        var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4126__auto__) {
          return function(p1__10687_SHARP_) {
            return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, function() {
              var G__10707 = p1__10687_SHARP_;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10707) : f.call(null, G__10707);
            }());
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next(s)));
        return cljs.core.cons(run, cljs$core$partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$partition_by__1.call(this, f);
      case 2:
        return cljs$core$partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$partition_by.cljs$core$IFn$_invoke$arity$1 = cljs$core$partition_by__1;
  cljs$core$partition_by.cljs$core$IFn$_invoke$arity$2 = cljs$core$partition_by__2;
  return cljs$core$partition_by;
}();
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var cljs$core$reductions = null;
  var cljs$core$reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return cljs$core$reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }());
      }
    }, null, null);
  };
  var cljs$core$reductions__3 = function(f, init, coll) {
    return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs$core$reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
          var G__10717 = init;
          var G__10718 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10717, G__10718) : f.call(null, G__10717, G__10718);
        }(), cljs.core.rest(s));
      } else {
        return null;
      }
    }, null, null));
  };
  cljs$core$reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$reductions__2.call(this, f, init);
      case 3:
        return cljs$core$reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$reductions.cljs$core$IFn$_invoke$arity$2 = cljs$core$reductions__2;
  cljs$core$reductions.cljs$core$IFn$_invoke$arity$3 = cljs$core$reductions__3;
  return cljs$core$reductions;
}();
cljs.core.juxt = function() {
  var cljs$core$juxt = null;
  var cljs$core$juxt__1 = function(f) {
    return function() {
      var G__10813 = null;
      var G__10813__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }()], null);
      };
      var G__10813__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10771 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10771) : f.call(null, G__10771);
        }()], null);
      };
      var G__10813__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10772 = x;
          var G__10773 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10772, G__10773) : f.call(null, G__10772, G__10773);
        }()], null);
      };
      var G__10813__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10774 = x;
          var G__10775 = y;
          var G__10776 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10774, G__10775, G__10776) : f.call(null, G__10774, G__10775, G__10776);
        }()], null);
      };
      var G__10813__4 = function() {
        var G__10814__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
        };
        var G__10814 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__10815__i = 0, G__10815__a = new Array(arguments.length - 3);
            while (G__10815__i < G__10815__a.length) {
              G__10815__a[G__10815__i] = arguments[G__10815__i + 3];
              ++G__10815__i;
            }
            args = new cljs.core.IndexedSeq(G__10815__a, 0);
          }
          return G__10814__delegate.call(this, x, y, z, args);
        };
        G__10814.cljs$lang$maxFixedArity = 3;
        G__10814.cljs$lang$applyTo = function(arglist__10816) {
          var x = cljs.core.first(arglist__10816);
          arglist__10816 = cljs.core.next(arglist__10816);
          var y = cljs.core.first(arglist__10816);
          arglist__10816 = cljs.core.next(arglist__10816);
          var z = cljs.core.first(arglist__10816);
          var args = cljs.core.rest(arglist__10816);
          return G__10814__delegate(x, y, z, args);
        };
        G__10814.cljs$core$IFn$_invoke$arity$variadic = G__10814__delegate;
        return G__10814;
      }();
      G__10813 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__10813__0.call(this);
          case 1:
            return G__10813__1.call(this, x);
          case 2:
            return G__10813__2.call(this, x, y);
          case 3:
            return G__10813__3.call(this, x, y, z);
          default:
            var G__10817 = null;
            if (arguments.length > 3) {
              var G__10818__i = 0, G__10818__a = new Array(arguments.length - 3);
              while (G__10818__i < G__10818__a.length) {
                G__10818__a[G__10818__i] = arguments[G__10818__i + 3];
                ++G__10818__i;
              }
              G__10817 = new cljs.core.IndexedSeq(G__10818__a, 0);
            }
            return G__10813__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10817);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10813.cljs$lang$maxFixedArity = 3;
      G__10813.cljs$lang$applyTo = G__10813__4.cljs$lang$applyTo;
      G__10813.cljs$core$IFn$_invoke$arity$0 = G__10813__0;
      G__10813.cljs$core$IFn$_invoke$arity$1 = G__10813__1;
      G__10813.cljs$core$IFn$_invoke$arity$2 = G__10813__2;
      G__10813.cljs$core$IFn$_invoke$arity$3 = G__10813__3;
      G__10813.cljs$core$IFn$_invoke$arity$variadic = G__10813__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__10813;
    }();
  };
  var cljs$core$juxt__2 = function(f, g) {
    return function() {
      var G__10819 = null;
      var G__10819__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }()], null);
      };
      var G__10819__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10777 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10777) : f.call(null, G__10777);
        }(), function() {
          var G__10778 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10778) : g.call(null, G__10778);
        }()], null);
      };
      var G__10819__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10779 = x;
          var G__10780 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10779, G__10780) : f.call(null, G__10779, G__10780);
        }(), function() {
          var G__10781 = x;
          var G__10782 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__10781, G__10782) : g.call(null, G__10781, G__10782);
        }()], null);
      };
      var G__10819__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10783 = x;
          var G__10784 = y;
          var G__10785 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10783, G__10784, G__10785) : f.call(null, G__10783, G__10784, G__10785);
        }(), function() {
          var G__10786 = x;
          var G__10787 = y;
          var G__10788 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__10786, G__10787, G__10788) : g.call(null, G__10786, G__10787, G__10788);
        }()], null);
      };
      var G__10819__4 = function() {
        var G__10820__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
        };
        var G__10820 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__10821__i = 0, G__10821__a = new Array(arguments.length - 3);
            while (G__10821__i < G__10821__a.length) {
              G__10821__a[G__10821__i] = arguments[G__10821__i + 3];
              ++G__10821__i;
            }
            args = new cljs.core.IndexedSeq(G__10821__a, 0);
          }
          return G__10820__delegate.call(this, x, y, z, args);
        };
        G__10820.cljs$lang$maxFixedArity = 3;
        G__10820.cljs$lang$applyTo = function(arglist__10822) {
          var x = cljs.core.first(arglist__10822);
          arglist__10822 = cljs.core.next(arglist__10822);
          var y = cljs.core.first(arglist__10822);
          arglist__10822 = cljs.core.next(arglist__10822);
          var z = cljs.core.first(arglist__10822);
          var args = cljs.core.rest(arglist__10822);
          return G__10820__delegate(x, y, z, args);
        };
        G__10820.cljs$core$IFn$_invoke$arity$variadic = G__10820__delegate;
        return G__10820;
      }();
      G__10819 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__10819__0.call(this);
          case 1:
            return G__10819__1.call(this, x);
          case 2:
            return G__10819__2.call(this, x, y);
          case 3:
            return G__10819__3.call(this, x, y, z);
          default:
            var G__10823 = null;
            if (arguments.length > 3) {
              var G__10824__i = 0, G__10824__a = new Array(arguments.length - 3);
              while (G__10824__i < G__10824__a.length) {
                G__10824__a[G__10824__i] = arguments[G__10824__i + 3];
                ++G__10824__i;
              }
              G__10823 = new cljs.core.IndexedSeq(G__10824__a, 0);
            }
            return G__10819__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10823);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10819.cljs$lang$maxFixedArity = 3;
      G__10819.cljs$lang$applyTo = G__10819__4.cljs$lang$applyTo;
      G__10819.cljs$core$IFn$_invoke$arity$0 = G__10819__0;
      G__10819.cljs$core$IFn$_invoke$arity$1 = G__10819__1;
      G__10819.cljs$core$IFn$_invoke$arity$2 = G__10819__2;
      G__10819.cljs$core$IFn$_invoke$arity$3 = G__10819__3;
      G__10819.cljs$core$IFn$_invoke$arity$variadic = G__10819__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__10819;
    }();
  };
  var cljs$core$juxt__3 = function(f, g, h) {
    return function() {
      var G__10825 = null;
      var G__10825__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }(), function() {
          return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        }()], null);
      };
      var G__10825__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10789 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10789) : f.call(null, G__10789);
        }(), function() {
          var G__10790 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10790) : g.call(null, G__10790);
        }(), function() {
          var G__10791 = x;
          return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__10791) : h.call(null, G__10791);
        }()], null);
      };
      var G__10825__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10792 = x;
          var G__10793 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10792, G__10793) : f.call(null, G__10792, G__10793);
        }(), function() {
          var G__10794 = x;
          var G__10795 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__10794, G__10795) : g.call(null, G__10794, G__10795);
        }(), function() {
          var G__10796 = x;
          var G__10797 = y;
          return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__10796, G__10797) : h.call(null, G__10796, G__10797);
        }()], null);
      };
      var G__10825__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__10798 = x;
          var G__10799 = y;
          var G__10800 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10798, G__10799, G__10800) : f.call(null, G__10798, G__10799, G__10800);
        }(), function() {
          var G__10801 = x;
          var G__10802 = y;
          var G__10803 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__10801, G__10802, G__10803) : g.call(null, G__10801, G__10802, G__10803);
        }(), function() {
          var G__10804 = x;
          var G__10805 = y;
          var G__10806 = z;
          return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__10804, G__10805, G__10806) : h.call(null, G__10804, G__10805, G__10806);
        }()], null);
      };
      var G__10825__4 = function() {
        var G__10826__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
        };
        var G__10826 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__10827__i = 0, G__10827__a = new Array(arguments.length - 3);
            while (G__10827__i < G__10827__a.length) {
              G__10827__a[G__10827__i] = arguments[G__10827__i + 3];
              ++G__10827__i;
            }
            args = new cljs.core.IndexedSeq(G__10827__a, 0);
          }
          return G__10826__delegate.call(this, x, y, z, args);
        };
        G__10826.cljs$lang$maxFixedArity = 3;
        G__10826.cljs$lang$applyTo = function(arglist__10828) {
          var x = cljs.core.first(arglist__10828);
          arglist__10828 = cljs.core.next(arglist__10828);
          var y = cljs.core.first(arglist__10828);
          arglist__10828 = cljs.core.next(arglist__10828);
          var z = cljs.core.first(arglist__10828);
          var args = cljs.core.rest(arglist__10828);
          return G__10826__delegate(x, y, z, args);
        };
        G__10826.cljs$core$IFn$_invoke$arity$variadic = G__10826__delegate;
        return G__10826;
      }();
      G__10825 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__10825__0.call(this);
          case 1:
            return G__10825__1.call(this, x);
          case 2:
            return G__10825__2.call(this, x, y);
          case 3:
            return G__10825__3.call(this, x, y, z);
          default:
            var G__10829 = null;
            if (arguments.length > 3) {
              var G__10830__i = 0, G__10830__a = new Array(arguments.length - 3);
              while (G__10830__i < G__10830__a.length) {
                G__10830__a[G__10830__i] = arguments[G__10830__i + 3];
                ++G__10830__i;
              }
              G__10829 = new cljs.core.IndexedSeq(G__10830__a, 0);
            }
            return G__10825__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10829);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10825.cljs$lang$maxFixedArity = 3;
      G__10825.cljs$lang$applyTo = G__10825__4.cljs$lang$applyTo;
      G__10825.cljs$core$IFn$_invoke$arity$0 = G__10825__0;
      G__10825.cljs$core$IFn$_invoke$arity$1 = G__10825__1;
      G__10825.cljs$core$IFn$_invoke$arity$2 = G__10825__2;
      G__10825.cljs$core$IFn$_invoke$arity$3 = G__10825__3;
      G__10825.cljs$core$IFn$_invoke$arity$variadic = G__10825__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__10825;
    }();
  };
  var cljs$core$juxt__4 = function() {
    var G__10831__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__10832 = null;
          var G__10832__0 = function() {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__10719_SHARP_, p2__10720_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10719_SHARP_, function() {
                  return p2__10720_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__10720_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__10720_SHARP_.call(null);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__10832__1 = function(x) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__10721_SHARP_, p2__10722_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10721_SHARP_, function() {
                  var G__10807 = x;
                  return p2__10722_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__10722_SHARP_.cljs$core$IFn$_invoke$arity$1(G__10807) : p2__10722_SHARP_.call(null, G__10807);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__10832__2 = function(x, y) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__10723_SHARP_, p2__10724_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10723_SHARP_, function() {
                  var G__10808 = x;
                  var G__10809 = y;
                  return p2__10724_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__10724_SHARP_.cljs$core$IFn$_invoke$arity$2(G__10808, G__10809) : p2__10724_SHARP_.call(null, G__10808, G__10809);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__10832__3 = function(x, y, z) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__10725_SHARP_, p2__10726_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10725_SHARP_, function() {
                  var G__10810 = x;
                  var G__10811 = y;
                  var G__10812 = z;
                  return p2__10726_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__10726_SHARP_.cljs$core$IFn$_invoke$arity$3(G__10810, G__10811, G__10812) : p2__10726_SHARP_.call(null, G__10810, G__10811, G__10812);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__10832__4 = function() {
            var G__10833__delegate = function(x, y, z, args) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
                return function(p1__10727_SHARP_, p2__10728_SHARP_) {
                  return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10727_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__10728_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__10833 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__10834__i = 0, G__10834__a = new Array(arguments.length - 3);
                while (G__10834__i < G__10834__a.length) {
                  G__10834__a[G__10834__i] = arguments[G__10834__i + 3];
                  ++G__10834__i;
                }
                args = new cljs.core.IndexedSeq(G__10834__a, 0);
              }
              return G__10833__delegate.call(this, x, y, z, args);
            };
            G__10833.cljs$lang$maxFixedArity = 3;
            G__10833.cljs$lang$applyTo = function(arglist__10835) {
              var x = cljs.core.first(arglist__10835);
              arglist__10835 = cljs.core.next(arglist__10835);
              var y = cljs.core.first(arglist__10835);
              arglist__10835 = cljs.core.next(arglist__10835);
              var z = cljs.core.first(arglist__10835);
              var args = cljs.core.rest(arglist__10835);
              return G__10833__delegate(x, y, z, args);
            };
            G__10833.cljs$core$IFn$_invoke$arity$variadic = G__10833__delegate;
            return G__10833;
          }();
          G__10832 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__10832__0.call(this);
              case 1:
                return G__10832__1.call(this, x);
              case 2:
                return G__10832__2.call(this, x, y);
              case 3:
                return G__10832__3.call(this, x, y, z);
              default:
                var G__10836 = null;
                if (arguments.length > 3) {
                  var G__10837__i = 0, G__10837__a = new Array(arguments.length - 3);
                  while (G__10837__i < G__10837__a.length) {
                    G__10837__a[G__10837__i] = arguments[G__10837__i + 3];
                    ++G__10837__i;
                  }
                  G__10836 = new cljs.core.IndexedSeq(G__10837__a, 0);
                }
                return G__10832__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10836);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__10832.cljs$lang$maxFixedArity = 3;
          G__10832.cljs$lang$applyTo = G__10832__4.cljs$lang$applyTo;
          G__10832.cljs$core$IFn$_invoke$arity$0 = G__10832__0;
          G__10832.cljs$core$IFn$_invoke$arity$1 = G__10832__1;
          G__10832.cljs$core$IFn$_invoke$arity$2 = G__10832__2;
          G__10832.cljs$core$IFn$_invoke$arity$3 = G__10832__3;
          G__10832.cljs$core$IFn$_invoke$arity$variadic = G__10832__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__10832;
        }();
      }(fs__$1);
    };
    var G__10831 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__10838__i = 0, G__10838__a = new Array(arguments.length - 3);
        while (G__10838__i < G__10838__a.length) {
          G__10838__a[G__10838__i] = arguments[G__10838__i + 3];
          ++G__10838__i;
        }
        fs = new cljs.core.IndexedSeq(G__10838__a, 0);
      }
      return G__10831__delegate.call(this, f, g, h, fs);
    };
    G__10831.cljs$lang$maxFixedArity = 3;
    G__10831.cljs$lang$applyTo = function(arglist__10839) {
      var f = cljs.core.first(arglist__10839);
      arglist__10839 = cljs.core.next(arglist__10839);
      var g = cljs.core.first(arglist__10839);
      arglist__10839 = cljs.core.next(arglist__10839);
      var h = cljs.core.first(arglist__10839);
      var fs = cljs.core.rest(arglist__10839);
      return G__10831__delegate(f, g, h, fs);
    };
    G__10831.cljs$core$IFn$_invoke$arity$variadic = G__10831__delegate;
    return G__10831;
  }();
  cljs$core$juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$juxt__1.call(this, f);
      case 2:
        return cljs$core$juxt__2.call(this, f, g);
      case 3:
        return cljs$core$juxt__3.call(this, f, g, h);
      default:
        var G__10840 = null;
        if (arguments.length > 3) {
          var G__10841__i = 0, G__10841__a = new Array(arguments.length - 3);
          while (G__10841__i < G__10841__a.length) {
            G__10841__a[G__10841__i] = arguments[G__10841__i + 3];
            ++G__10841__i;
          }
          G__10840 = new cljs.core.IndexedSeq(G__10841__a, 0);
        }
        return cljs$core$juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, G__10840);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$juxt.cljs$lang$maxFixedArity = 3;
  cljs$core$juxt.cljs$lang$applyTo = cljs$core$juxt__4.cljs$lang$applyTo;
  cljs$core$juxt.cljs$core$IFn$_invoke$arity$1 = cljs$core$juxt__1;
  cljs$core$juxt.cljs$core$IFn$_invoke$arity$2 = cljs$core$juxt__2;
  cljs$core$juxt.cljs$core$IFn$_invoke$arity$3 = cljs$core$juxt__3;
  cljs$core$juxt.cljs$core$IFn$_invoke$arity$variadic = cljs$core$juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$juxt;
}();
cljs.core.dorun = function() {
  var cljs$core$dorun = null;
  var cljs$core$dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq(coll)) {
        var G__10842 = cljs.core.next(coll);
        coll = G__10842;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var cljs$core$dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq(coll) && n > 0) {
        var G__10843 = n - 1;
        var G__10844 = cljs.core.next(coll);
        n = G__10843;
        coll = G__10844;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  cljs$core$dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$dorun__1.call(this, n);
      case 2:
        return cljs$core$dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$dorun.cljs$core$IFn$_invoke$arity$1 = cljs$core$dorun__1;
  cljs$core$dorun.cljs$core$IFn$_invoke$arity$2 = cljs$core$dorun__2;
  return cljs$core$dorun;
}();
cljs.core.doall = function() {
  var cljs$core$doall = null;
  var cljs$core$doall__1 = function(coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
    return coll;
  };
  var cljs$core$doall__2 = function(n, coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
    return coll;
  };
  cljs$core$doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$doall__1.call(this, n);
      case 2:
        return cljs$core$doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$doall.cljs$core$IFn$_invoke$arity$1 = cljs$core$doall__1;
  cljs$core$doall.cljs$core$IFn$_invoke$arity$2 = cljs$core$doall__2;
  return cljs$core$doall;
}();
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs$core$re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__10848 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10848, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10848, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__4122__auto__ = flags;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_10856 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__4122__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__4122__auto__)) {
              return or__4122__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__10857_10863 = cljs.core.first(coll);
          var G__10858_10864 = writer;
          var G__10859_10865 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10857_10863, G__10858_10864, G__10859_10865) : print_one.call(null, G__10857_10863, G__10858_10864, G__10859_10865);
        } else {
        }
        var coll_10866__$1 = cljs.core.next(coll);
        var n_10867 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_10866__$1 && (n_10867 == null || !(n_10867 === 0))) {
            cljs.core._write(writer, sep);
            var G__10860_10868 = cljs.core.first(coll_10866__$1);
            var G__10861_10869 = writer;
            var G__10862_10870 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10860_10868, G__10861_10869, G__10862_10870) : print_one.call(null, G__10860_10868, G__10861_10869, G__10862_10870);
            var G__10871 = cljs.core.next(coll_10866__$1);
            var G__10872 = n_10867 - 1;
            coll_10866__$1 = G__10871;
            n_10867 = G__10872;
            continue;
          } else {
            if (cljs.core.seq(coll_10866__$1) && n_10867 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__4122__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__4122__auto__)) {
                  return or__4122__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_10856;
  }
};
cljs.core.write_all = function() {
  var cljs$core$write_all__delegate = function(writer, ss) {
    var seq__10877 = cljs.core.seq(ss);
    var chunk__10878 = null;
    var count__10879 = 0;
    var i__10880 = 0;
    while (true) {
      if (i__10880 < count__10879) {
        var s = chunk__10878.cljs$core$IIndexed$_nth$arity$2(null, i__10880);
        cljs.core._write(writer, s);
        var G__10881 = seq__10877;
        var G__10882 = chunk__10878;
        var G__10883 = count__10879;
        var G__10884 = i__10880 + 1;
        seq__10877 = G__10881;
        chunk__10878 = G__10882;
        count__10879 = G__10883;
        i__10880 = G__10884;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq(seq__10877);
        if (temp__4126__auto__) {
          var seq__10877__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(seq__10877__$1)) {
            var c__4907__auto__ = cljs.core.chunk_first(seq__10877__$1);
            var G__10885 = cljs.core.chunk_rest(seq__10877__$1);
            var G__10886 = c__4907__auto__;
            var G__10887 = cljs.core.count(c__4907__auto__);
            var G__10888 = 0;
            seq__10877 = G__10885;
            chunk__10878 = G__10886;
            count__10879 = G__10887;
            i__10880 = G__10888;
            continue;
          } else {
            var s = cljs.core.first(seq__10877__$1);
            cljs.core._write(writer, s);
            var G__10889 = cljs.core.next(seq__10877__$1);
            var G__10890 = null;
            var G__10891 = 0;
            var G__10892 = 0;
            seq__10877 = G__10889;
            chunk__10878 = G__10890;
            count__10879 = G__10891;
            i__10880 = G__10892;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var cljs$core$write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      var G__10893__i = 0, G__10893__a = new Array(arguments.length - 1);
      while (G__10893__i < G__10893__a.length) {
        G__10893__a[G__10893__i] = arguments[G__10893__i + 1];
        ++G__10893__i;
      }
      ss = new cljs.core.IndexedSeq(G__10893__a, 0);
    }
    return cljs$core$write_all__delegate.call(this, writer, ss);
  };
  cljs$core$write_all.cljs$lang$maxFixedArity = 1;
  cljs$core$write_all.cljs$lang$applyTo = function(arglist__10894) {
    var writer = cljs.core.first(arglist__10894);
    var ss = cljs.core.rest(arglist__10894);
    return cljs$core$write_all__delegate(writer, ss);
  };
  cljs$core$write_all.cljs$core$IFn$_invoke$arity$variadic = cljs$core$write_all__delegate;
  return cljs$core$write_all;
}();
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj10896 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj10896;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(function() {
    var G__10899 = '[\\\\"\b\f\n\r\t]';
    var G__10900 = "g";
    return RegExp(G__10899, G__10900);
  }(), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write(writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__4110__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__4110__auto__)) {
          var and__4110__auto____$1 = function() {
            var G__10914 = obj;
            if (G__10914) {
              var bit__4796__auto__ = G__10914.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4796__auto__ || G__10914.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__10914.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__10914);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__10914);
            }
          }();
          if (and__4110__auto____$1) {
            return cljs.core.meta(obj);
          } else {
            return and__4110__auto____$1;
          }
        } else {
          return and__4110__auto__;
        }
      }())) {
        cljs.core._write(writer, "^");
        var G__10915_10925 = cljs.core.meta(obj);
        var G__10916_10926 = writer;
        var G__10917_10927 = opts;
        cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__10915_10925, G__10916_10926, G__10917_10927) : cljs.core.pr_writer.call(null, G__10915_10925, G__10916_10926, G__10917_10927);
        cljs.core._write(writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write(writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__10918 = obj;
            if (G__10918) {
              var bit__4789__auto__ = G__10918.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4789__auto__ || G__10918.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
          } else {
            if (cljs.core.type(obj) === Boolean || typeof obj === "number") {
              return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                var G__10919 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
                }, cljs.core.js_keys(obj));
                var G__10920 = cljs.core.pr_writer;
                var G__10921 = writer;
                var G__10922 = opts;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__10919, G__10920, G__10921, G__10922) : cljs.core.print_map.call(null, G__10919, G__10920, G__10921, G__10922);
              } else {
                if (cljs.core.array_QMARK_(obj)) {
                  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (cljs.core.truth_(function() {
                    var G__10923 = obj;
                    return goog.isString(G__10923);
                  }())) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write(writer, cljs.core.quote_string(obj));
                    } else {
                      return cljs.core._write(writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count(ns) < len) {
                              var G__10928 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__10928;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                      } else {
                        if (cljs.core.regexp_QMARK_(obj)) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                        } else {
                          if (function() {
                            var G__10924 = obj;
                            if (G__10924) {
                              var bit__4796__auto__ = G__10924.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4796__auto__ || G__10924.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__10924.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__10924);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__10924);
                            }
                          }()) {
                            return cljs.core._pr_writer(obj, writer, opts);
                          } else {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4124__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var alt_impl = temp__4124__auto__;
    var G__10932 = obj;
    var G__10933 = writer;
    var G__10934 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__10932, G__10933, G__10934) : alt_impl.call(null, G__10932, G__10933, G__10934);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__10939 = cljs.core.seq(cljs.core.next(objs));
  var chunk__10940 = null;
  var count__10941 = 0;
  var i__10942 = 0;
  while (true) {
    if (i__10942 < count__10941) {
      var obj = chunk__10940.cljs$core$IIndexed$_nth$arity$2(null, i__10942);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__10943 = seq__10939;
      var G__10944 = chunk__10940;
      var G__10945 = count__10941;
      var G__10946 = i__10942 + 1;
      seq__10939 = G__10943;
      chunk__10940 = G__10944;
      count__10941 = G__10945;
      i__10942 = G__10946;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__10939);
      if (temp__4126__auto__) {
        var seq__10939__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10939__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__10939__$1);
          var G__10947 = cljs.core.chunk_rest(seq__10939__$1);
          var G__10948 = c__4907__auto__;
          var G__10949 = cljs.core.count(c__4907__auto__);
          var G__10950 = 0;
          seq__10939 = G__10947;
          chunk__10940 = G__10948;
          count__10941 = G__10949;
          i__10942 = G__10950;
          continue;
        } else {
          var obj = cljs.core.first(seq__10939__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__10951 = cljs.core.next(seq__10939__$1);
          var G__10952 = null;
          var G__10953 = 0;
          var G__10954 = 0;
          seq__10939 = G__10951;
          chunk__10940 = G__10952;
          count__10941 = G__10953;
          i__10942 = G__10954;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var cljs$core$pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
  };
  var cljs$core$pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10955__i = 0, G__10955__a = new Array(arguments.length - 0);
      while (G__10955__i < G__10955__a.length) {
        G__10955__a[G__10955__i] = arguments[G__10955__i + 0];
        ++G__10955__i;
      }
      objs = new cljs.core.IndexedSeq(G__10955__a, 0);
    }
    return cljs$core$pr_str__delegate.call(this, objs);
  };
  cljs$core$pr_str.cljs$lang$maxFixedArity = 0;
  cljs$core$pr_str.cljs$lang$applyTo = function(arglist__10956) {
    var objs = cljs.core.seq(arglist__10956);
    return cljs$core$pr_str__delegate(objs);
  };
  cljs$core$pr_str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$pr_str__delegate;
  return cljs$core$pr_str;
}();
cljs.core.prn_str = function() {
  var cljs$core$prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
  };
  var cljs$core$prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10957__i = 0, G__10957__a = new Array(arguments.length - 0);
      while (G__10957__i < G__10957__a.length) {
        G__10957__a[G__10957__i] = arguments[G__10957__i + 0];
        ++G__10957__i;
      }
      objs = new cljs.core.IndexedSeq(G__10957__a, 0);
    }
    return cljs$core$prn_str__delegate.call(this, objs);
  };
  cljs$core$prn_str.cljs$lang$maxFixedArity = 0;
  cljs$core$prn_str.cljs$lang$applyTo = function(arglist__10958) {
    var objs = cljs.core.seq(arglist__10958);
    return cljs$core$prn_str__delegate(objs);
  };
  cljs$core$prn_str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$prn_str__delegate;
  return cljs$core$prn_str;
}();
cljs.core.pr = function() {
  var cljs$core$pr__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  };
  var cljs$core$pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10959__i = 0, G__10959__a = new Array(arguments.length - 0);
      while (G__10959__i < G__10959__a.length) {
        G__10959__a[G__10959__i] = arguments[G__10959__i + 0];
        ++G__10959__i;
      }
      objs = new cljs.core.IndexedSeq(G__10959__a, 0);
    }
    return cljs$core$pr__delegate.call(this, objs);
  };
  cljs$core$pr.cljs$lang$maxFixedArity = 0;
  cljs$core$pr.cljs$lang$applyTo = function(arglist__10960) {
    var objs = cljs.core.seq(arglist__10960);
    return cljs$core$pr__delegate(objs);
  };
  cljs$core$pr.cljs$core$IFn$_invoke$arity$variadic = cljs$core$pr__delegate;
  return cljs$core$pr;
}();
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10961__i = 0, G__10961__a = new Array(arguments.length - 0);
      while (G__10961__i < G__10961__a.length) {
        G__10961__a[G__10961__i] = arguments[G__10961__i + 0];
        ++G__10961__i;
      }
      objs = new cljs.core.IndexedSeq(G__10961__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__10962) {
    var objs = cljs.core.seq(arglist__10962);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function() {
  var cljs$core$print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10963__i = 0, G__10963__a = new Array(arguments.length - 0);
      while (G__10963__i < G__10963__a.length) {
        G__10963__a[G__10963__i] = arguments[G__10963__i + 0];
        ++G__10963__i;
      }
      objs = new cljs.core.IndexedSeq(G__10963__a, 0);
    }
    return cljs$core$print_str__delegate.call(this, objs);
  };
  cljs$core$print_str.cljs$lang$maxFixedArity = 0;
  cljs$core$print_str.cljs$lang$applyTo = function(arglist__10964) {
    var objs = cljs.core.seq(arglist__10964);
    return cljs$core$print_str__delegate(objs);
  };
  cljs$core$print_str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$print_str__delegate;
  return cljs$core$print_str;
}();
cljs.core.println = function() {
  var cljs$core$println__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var cljs$core$println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10965__i = 0, G__10965__a = new Array(arguments.length - 0);
      while (G__10965__i < G__10965__a.length) {
        G__10965__a[G__10965__i] = arguments[G__10965__i + 0];
        ++G__10965__i;
      }
      objs = new cljs.core.IndexedSeq(G__10965__a, 0);
    }
    return cljs$core$println__delegate.call(this, objs);
  };
  cljs$core$println.cljs$lang$maxFixedArity = 0;
  cljs$core$println.cljs$lang$applyTo = function(arglist__10966) {
    var objs = cljs.core.seq(arglist__10966);
    return cljs$core$println__delegate(objs);
  };
  cljs$core$println.cljs$core$IFn$_invoke$arity$variadic = cljs$core$println__delegate;
  return cljs$core$println;
}();
cljs.core.println_str = function() {
  var cljs$core$println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10967__i = 0, G__10967__a = new Array(arguments.length - 0);
      while (G__10967__i < G__10967__a.length) {
        G__10967__a[G__10967__i] = arguments[G__10967__i + 0];
        ++G__10967__i;
      }
      objs = new cljs.core.IndexedSeq(G__10967__a, 0);
    }
    return cljs$core$println_str__delegate.call(this, objs);
  };
  cljs$core$println_str.cljs$lang$maxFixedArity = 0;
  cljs$core$println_str.cljs$lang$applyTo = function(arglist__10968) {
    var objs = cljs.core.seq(arglist__10968);
    return cljs$core$println_str__delegate(objs);
  };
  cljs$core$println_str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$println_str__delegate;
  return cljs$core$println_str;
}();
cljs.core.prn = function() {
  var cljs$core$prn__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var cljs$core$prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10969__i = 0, G__10969__a = new Array(arguments.length - 0);
      while (G__10969__i < G__10969__a.length) {
        G__10969__a[G__10969__i] = arguments[G__10969__i + 0];
        ++G__10969__i;
      }
      objs = new cljs.core.IndexedSeq(G__10969__a, 0);
    }
    return cljs$core$prn__delegate.call(this, objs);
  };
  cljs$core$prn.cljs$lang$maxFixedArity = 0;
  cljs$core$prn.cljs$lang$applyTo = function(arglist__10970) {
    var objs = cljs.core.seq(arglist__10970);
    return cljs$core$prn__delegate(objs);
  };
  cljs$core$prn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$prn__delegate;
  return cljs$core$prn;
}();
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__10977_10983 = cljs.core.key(e);
    var G__10978_10984 = w;
    var G__10979_10985 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10977_10983, G__10978_10984, G__10979_10985) : print_one.call(null, G__10977_10983, G__10978_10984, G__10979_10985);
    cljs.core._write(w, " ");
    var G__10980 = cljs.core.val(e);
    var G__10981 = w;
    var G__10982 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10980, G__10981, G__10982) : print_one.call(null, G__10980, G__10981, G__10982);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cVolatile: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cAtom: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_keywords(x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols(x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var cljs$core$alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
  };
  var cljs$core$alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__10986__i = 0, G__10986__a = new Array(arguments.length - 2);
      while (G__10986__i < G__10986__a.length) {
        G__10986__a[G__10986__i] = arguments[G__10986__i + 2];
        ++G__10986__i;
      }
      args = new cljs.core.IndexedSeq(G__10986__a, 0);
    }
    return cljs$core$alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  cljs$core$alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  cljs$core$alter_meta_BANG_.cljs$lang$applyTo = function(arglist__10987) {
    var iref = cljs.core.first(arglist__10987);
    arglist__10987 = cljs.core.next(arglist__10987);
    var f = cljs.core.first(arglist__10987);
    var args = cljs.core.rest(arglist__10987);
    return cljs$core$alter_meta_BANG___delegate(iref, f, args);
  };
  cljs$core$alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$alter_meta_BANG___delegate;
  return cljs$core$alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var cljs$core$gensym = null;
  var cljs$core$gensym__0 = function() {
    return cljs$core$gensym.cljs$core$IFn$_invoke$arity$1("G__");
  };
  var cljs$core$gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = function() {
        var G__10990 = 0;
        return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__10990) : cljs.core.atom.call(null, G__10990);
      }();
    } else {
    }
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  cljs$core$gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return cljs$core$gensym__0.call(this);
      case 1:
        return cljs$core$gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$gensym.cljs$core$IFn$_invoke$arity$0 = cljs$core$gensym__0;
  cljs$core$gensym.cljs$core$IFn$_invoke$arity$1 = cljs$core$gensym__1;
  return cljs$core$gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = function() {
      return self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    }();
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    var G__10992 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10992) : cljs.core.deref.call(null, G__10992);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__10993_SHARP_, p2__10994_SHARP_) {
    var ret = function() {
      var G__10997 = p1__10993_SHARP_;
      var G__10998 = p2__10994_SHARP_;
      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10997, G__10998) : rf.call(null, G__10997, G__10998);
    }();
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__11001 = null;
      var G__11001__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__11001__1 = function(result) {
        var G__11000 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__11000) : rf.call(null, G__11000);
      };
      var G__11001__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__11001 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__11001__0.call(this);
          case 1:
            return G__11001__1.call(this, result);
          case 2:
            return G__11001__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__11001.cljs$core$IFn$_invoke$arity$0 = G__11001__0;
      G__11001.cljs$core$IFn$_invoke$arity$1 = G__11001__1;
      G__11001.cljs$core$IFn$_invoke$arity$2 = G__11001__2;
      return G__11001;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var cljs$core$dedupe = null;
  var cljs$core$dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__11010 = null;
          var G__11010__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__11010__1 = function(result) {
            var G__11006 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__11006) : rf.call(null, G__11006);
          };
          var G__11010__2 = function(result, input) {
            var prior = function() {
              var G__11007 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11007) : cljs.core.deref.call(null, G__11007);
            }();
            cljs.core.vreset_BANG_(pa, input);
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
              return result;
            } else {
              var G__11008 = result;
              var G__11009 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__11008, G__11009) : rf.call(null, G__11008, G__11009);
            }
          };
          G__11010 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__11010__0.call(this);
              case 1:
                return G__11010__1.call(this, result);
              case 2:
                return G__11010__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__11010.cljs$core$IFn$_invoke$arity$0 = G__11010__0;
          G__11010.cljs$core$IFn$_invoke$arity$1 = G__11010__1;
          G__11010.cljs$core$IFn$_invoke$arity$2 = G__11010__2;
          return G__11010;
        }();
      }(pa);
    };
  };
  var cljs$core$dedupe__1 = function(coll) {
    return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs$core$dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
  };
  cljs$core$dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return cljs$core$dedupe__0.call(this);
      case 1:
        return cljs$core$dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$dedupe.cljs$core$IFn$_invoke$arity$0 = cljs$core$dedupe__0;
  cljs$core$dedupe.cljs$core$IFn$_invoke$arity$1 = cljs$core$dedupe__1;
  return cljs$core$dedupe;
}();
cljs.core.random_sample = function() {
  var cljs$core$random_sample = null;
  var cljs$core$random_sample__1 = function(prob) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    });
  };
  var cljs$core$random_sample__2 = function(prob, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    }, coll);
  };
  cljs$core$random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$random_sample__1.call(this, prob);
      case 2:
        return cljs$core$random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$random_sample.cljs$core$IFn$_invoke$arity$1 = cljs$core$random_sample__1;
  cljs$core$random_sample.cljs$core$IFn$_invoke$arity$2 = cljs$core$random_sample__2;
  return cljs$core$random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.eduction = function cljs$core$eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__11012_SHARP_, p2__11011_SHARP_) {
    var G__11014 = p2__11011_SHARP_;
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(G__11014) : proc.call(null, G__11014);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj11016 = {};
  return obj11016;
}();
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = cljs.core._clj__GT_js[function() {
        var G__11020 = x__4758__auto__;
        return goog.typeOf(G__11020);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = cljs.core._key__GT_js[function() {
        var G__11024 = x__4758__auto__;
        return goog.typeOf(G__11024);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (function() {
    var G__11027 = k;
    if (G__11027) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__11027.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__11027.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__11027);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__11027);
    }
  }()) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      var G__11028 = k;
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(G__11028) : cljs.core.clj__GT_js.call(null, G__11028);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__11044 = x;
      if (G__11044) {
        var bit__4796__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4122__auto__ = bit__4796__auto__;
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return G__11044.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__11044.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__11044);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__11044);
      }
    }()) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = function() {
              var obj11046 = {};
              return obj11046;
            }();
            var seq__11047_11057 = cljs.core.seq(x);
            var chunk__11048_11058 = null;
            var count__11049_11059 = 0;
            var i__11050_11060 = 0;
            while (true) {
              if (i__11050_11060 < count__11049_11059) {
                var vec__11051_11061 = chunk__11048_11058.cljs$core$IIndexed$_nth$arity$2(null, i__11050_11060);
                var k_11062 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11051_11061, 0, null);
                var v_11063 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11051_11061, 1, null);
                m[cljs.core.key__GT_js(k_11062)] = cljs$core$clj__GT_js(v_11063);
                var G__11064 = seq__11047_11057;
                var G__11065 = chunk__11048_11058;
                var G__11066 = count__11049_11059;
                var G__11067 = i__11050_11060 + 1;
                seq__11047_11057 = G__11064;
                chunk__11048_11058 = G__11065;
                count__11049_11059 = G__11066;
                i__11050_11060 = G__11067;
                continue;
              } else {
                var temp__4126__auto___11068 = cljs.core.seq(seq__11047_11057);
                if (temp__4126__auto___11068) {
                  var seq__11047_11069__$1 = temp__4126__auto___11068;
                  if (cljs.core.chunked_seq_QMARK_(seq__11047_11069__$1)) {
                    var c__4907__auto___11070 = cljs.core.chunk_first(seq__11047_11069__$1);
                    var G__11071 = cljs.core.chunk_rest(seq__11047_11069__$1);
                    var G__11072 = c__4907__auto___11070;
                    var G__11073 = cljs.core.count(c__4907__auto___11070);
                    var G__11074 = 0;
                    seq__11047_11057 = G__11071;
                    chunk__11048_11058 = G__11072;
                    count__11049_11059 = G__11073;
                    i__11050_11060 = G__11074;
                    continue;
                  } else {
                    var vec__11052_11075 = cljs.core.first(seq__11047_11069__$1);
                    var k_11076 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11052_11075, 0, null);
                    var v_11077 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11052_11075, 1, null);
                    m[cljs.core.key__GT_js(k_11076)] = cljs$core$clj__GT_js(v_11077);
                    var G__11078 = cljs.core.next(seq__11047_11069__$1);
                    var G__11079 = null;
                    var G__11080 = 0;
                    var G__11081 = 0;
                    seq__11047_11057 = G__11078;
                    chunk__11048_11058 = G__11079;
                    count__11049_11059 = G__11080;
                    i__11050_11060 = G__11081;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__11053_11082 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$clj__GT_js, x));
              var chunk__11054_11083 = null;
              var count__11055_11084 = 0;
              var i__11056_11085 = 0;
              while (true) {
                if (i__11056_11085 < count__11055_11084) {
                  var x_11086__$1 = chunk__11054_11083.cljs$core$IIndexed$_nth$arity$2(null, i__11056_11085);
                  arr.push(x_11086__$1);
                  var G__11087 = seq__11053_11082;
                  var G__11088 = chunk__11054_11083;
                  var G__11089 = count__11055_11084;
                  var G__11090 = i__11056_11085 + 1;
                  seq__11053_11082 = G__11087;
                  chunk__11054_11083 = G__11088;
                  count__11055_11084 = G__11089;
                  i__11056_11085 = G__11090;
                  continue;
                } else {
                  var temp__4126__auto___11091 = cljs.core.seq(seq__11053_11082);
                  if (temp__4126__auto___11091) {
                    var seq__11053_11092__$1 = temp__4126__auto___11091;
                    if (cljs.core.chunked_seq_QMARK_(seq__11053_11092__$1)) {
                      var c__4907__auto___11093 = cljs.core.chunk_first(seq__11053_11092__$1);
                      var G__11094 = cljs.core.chunk_rest(seq__11053_11092__$1);
                      var G__11095 = c__4907__auto___11093;
                      var G__11096 = cljs.core.count(c__4907__auto___11093);
                      var G__11097 = 0;
                      seq__11053_11082 = G__11094;
                      chunk__11054_11083 = G__11095;
                      count__11055_11084 = G__11096;
                      i__11056_11085 = G__11097;
                      continue;
                    } else {
                      var x_11098__$1 = cljs.core.first(seq__11053_11092__$1);
                      arr.push(x_11098__$1);
                      var G__11099 = cljs.core.next(seq__11053_11092__$1);
                      var G__11100 = null;
                      var G__11101 = 0;
                      var G__11102 = 0;
                      seq__11053_11082 = G__11099;
                      chunk__11054_11083 = G__11100;
                      count__11055_11084 = G__11101;
                      i__11056_11085 = G__11102;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj11104 = {};
  return obj11104;
}();
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = cljs.core._js__GT_clj[function() {
        var G__11108 = x__4758__auto__;
        return goog.typeOf(G__11108);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var cljs$core$js__GT_clj = null;
  var cljs$core$js__GT_clj__1 = function(x) {
    return cljs$core$js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
  };
  var cljs$core$js__GT_clj__2 = function() {
    var G__11165__delegate = function(x, opts) {
      var map__11138 = opts;
      var map__11138__$1 = cljs.core.seq_QMARK_(map__11138) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__11138) : map__11138;
      var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11138__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
      var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
      var f = function(map__11138, map__11138__$1, keywordize_keys, keyfn) {
        return function cljs$core$js__GT_clj_$_thisfn(x__$1) {
          if (function() {
            var G__11154 = x__$1;
            if (G__11154) {
              var bit__4796__auto__ = null;
              if (cljs.core.truth_(function() {
                var or__4122__auto__ = bit__4796__auto__;
                if (cljs.core.truth_(or__4122__auto__)) {
                  return or__4122__auto__;
                } else {
                  return G__11154.cljs$core$IEncodeClojure$;
                }
              }())) {
                return true;
              } else {
                if (!G__11154.cljs$lang$protocol_mask$partition$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__11154);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__11154);
            }
          }()) {
            return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
          } else {
            if (cljs.core.seq_QMARK_(x__$1)) {
              return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$js__GT_clj_$_thisfn, x__$1));
            } else {
              if (cljs.core.coll_QMARK_(x__$1)) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$js__GT_clj_$_thisfn, x__$1));
              } else {
                if (cljs.core.array_QMARK_(x__$1)) {
                  return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$js__GT_clj_$_thisfn, x__$1));
                } else {
                  if (cljs.core.type(x__$1) === Object) {
                    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                      var iter__4876__auto__ = function(map__11138, map__11138__$1, keywordize_keys, keyfn) {
                        return function cljs$core$js__GT_clj_$_thisfn_$_iter__11155(s__11156) {
                          return new cljs.core.LazySeq(null, function(map__11138, map__11138__$1, keywordize_keys, keyfn) {
                            return function() {
                              var s__11156__$1 = s__11156;
                              while (true) {
                                var temp__4126__auto__ = cljs.core.seq(s__11156__$1);
                                if (temp__4126__auto__) {
                                  var s__11156__$2 = temp__4126__auto__;
                                  if (cljs.core.chunked_seq_QMARK_(s__11156__$2)) {
                                    var c__4874__auto__ = cljs.core.chunk_first(s__11156__$2);
                                    var size__4875__auto__ = cljs.core.count(c__4874__auto__);
                                    var b__11158 = cljs.core.chunk_buffer(size__4875__auto__);
                                    if (function() {
                                      var i__11157 = 0;
                                      while (true) {
                                        if (i__11157 < size__4875__auto__) {
                                          var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4874__auto__, i__11157);
                                          cljs.core.chunk_append(b__11158, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                            var G__11163 = k;
                                            return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__11163) : keyfn.call(null, G__11163);
                                          }(), cljs$core$js__GT_clj_$_thisfn(x__$1[k])], null));
                                          var G__11166 = i__11157 + 1;
                                          i__11157 = G__11166;
                                          continue;
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__11158), cljs$core$js__GT_clj_$_thisfn_$_iter__11155(cljs.core.chunk_rest(s__11156__$2)));
                                    } else {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__11158), null);
                                    }
                                  } else {
                                    var k = cljs.core.first(s__11156__$2);
                                    return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                      var G__11164 = k;
                                      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__11164) : keyfn.call(null, G__11164);
                                    }(), cljs$core$js__GT_clj_$_thisfn(x__$1[k])], null), cljs$core$js__GT_clj_$_thisfn_$_iter__11155(cljs.core.rest(s__11156__$2)));
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(map__11138, map__11138__$1, keywordize_keys, keyfn), null, null);
                        };
                      }(map__11138, map__11138__$1, keywordize_keys, keyfn);
                      return iter__4876__auto__(cljs.core.js_keys(x__$1));
                    }());
                  } else {
                    return x__$1;
                  }
                }
              }
            }
          }
        };
      }(map__11138, map__11138__$1, keywordize_keys, keyfn);
      return f(x);
    };
    var G__11165 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        var G__11167__i = 0, G__11167__a = new Array(arguments.length - 1);
        while (G__11167__i < G__11167__a.length) {
          G__11167__a[G__11167__i] = arguments[G__11167__i + 1];
          ++G__11167__i;
        }
        opts = new cljs.core.IndexedSeq(G__11167__a, 0);
      }
      return G__11165__delegate.call(this, x, opts);
    };
    G__11165.cljs$lang$maxFixedArity = 1;
    G__11165.cljs$lang$applyTo = function(arglist__11168) {
      var x = cljs.core.first(arglist__11168);
      var opts = cljs.core.rest(arglist__11168);
      return G__11165__delegate(x, opts);
    };
    G__11165.cljs$core$IFn$_invoke$arity$variadic = G__11165__delegate;
    return G__11165;
  }();
  cljs$core$js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$js__GT_clj__1.call(this, x);
      default:
        var G__11169 = null;
        if (arguments.length > 1) {
          var G__11170__i = 0, G__11170__a = new Array(arguments.length - 1);
          while (G__11170__i < G__11170__a.length) {
            G__11170__a[G__11170__i] = arguments[G__11170__i + 1];
            ++G__11170__i;
          }
          G__11169 = new cljs.core.IndexedSeq(G__11170__a, 0);
        }
        return cljs$core$js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, G__11169);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$js__GT_clj.cljs$lang$maxFixedArity = 1;
  cljs$core$js__GT_clj.cljs$lang$applyTo = cljs$core$js__GT_clj__2.cljs$lang$applyTo;
  cljs$core$js__GT_clj.cljs$core$IFn$_invoke$arity$1 = cljs$core$js__GT_clj__1;
  cljs$core$js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = cljs$core$js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$js__GT_clj;
}();
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__11173 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__11173) : cljs.core.atom.call(null, G__11173);
  }();
  return function(mem) {
    return function() {
      var G__11175__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(function() {
          var G__11174 = mem;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11174) : cljs.core.deref.call(null, G__11174);
        }(), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__11175 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__11176__i = 0, G__11176__a = new Array(arguments.length - 0);
          while (G__11176__i < G__11176__a.length) {
            G__11176__a[G__11176__i] = arguments[G__11176__i + 0];
            ++G__11176__i;
          }
          args = new cljs.core.IndexedSeq(G__11176__a, 0);
        }
        return G__11175__delegate.call(this, args);
      };
      G__11175.cljs$lang$maxFixedArity = 0;
      G__11175.cljs$lang$applyTo = function(arglist__11177) {
        var args = cljs.core.seq(arglist__11177);
        return G__11175__delegate(args);
      };
      G__11175.cljs$core$IFn$_invoke$arity$variadic = G__11175__delegate;
      return G__11175;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var cljs$core$trampoline = null;
  var cljs$core$trampoline__1 = function(f) {
    while (true) {
      var ret = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }();
      if (cljs.core.fn_QMARK_(ret)) {
        var G__11179 = ret;
        f = G__11179;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var cljs$core$trampoline__2 = function() {
    var G__11180__delegate = function(f, args) {
      return cljs$core$trampoline.cljs$core$IFn$_invoke$arity$1(function() {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
      });
    };
    var G__11180 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        var G__11181__i = 0, G__11181__a = new Array(arguments.length - 1);
        while (G__11181__i < G__11181__a.length) {
          G__11181__a[G__11181__i] = arguments[G__11181__i + 1];
          ++G__11181__i;
        }
        args = new cljs.core.IndexedSeq(G__11181__a, 0);
      }
      return G__11180__delegate.call(this, f, args);
    };
    G__11180.cljs$lang$maxFixedArity = 1;
    G__11180.cljs$lang$applyTo = function(arglist__11182) {
      var f = cljs.core.first(arglist__11182);
      var args = cljs.core.rest(arglist__11182);
      return G__11180__delegate(f, args);
    };
    G__11180.cljs$core$IFn$_invoke$arity$variadic = G__11180__delegate;
    return G__11180;
  }();
  cljs$core$trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$trampoline__1.call(this, f);
      default:
        var G__11183 = null;
        if (arguments.length > 1) {
          var G__11184__i = 0, G__11184__a = new Array(arguments.length - 1);
          while (G__11184__i < G__11184__a.length) {
            G__11184__a[G__11184__i] = arguments[G__11184__i + 1];
            ++G__11184__i;
          }
          G__11183 = new cljs.core.IndexedSeq(G__11184__a, 0);
        }
        return cljs$core$trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, G__11183);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$trampoline.cljs$lang$maxFixedArity = 1;
  cljs$core$trampoline.cljs$lang$applyTo = cljs$core$trampoline__2.cljs$lang$applyTo;
  cljs$core$trampoline.cljs$core$IFn$_invoke$arity$1 = cljs$core$trampoline__1;
  cljs$core$trampoline.cljs$core$IFn$_invoke$arity$variadic = cljs$core$trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$trampoline;
}();
cljs.core.rand = function() {
  var cljs$core$rand = null;
  var cljs$core$rand__0 = function() {
    return cljs$core$rand.cljs$core$IFn$_invoke$arity$1(1);
  };
  var cljs$core$rand__1 = function(n) {
    return function() {
      return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
    }() * n;
  };
  cljs$core$rand = function(n) {
    switch(arguments.length) {
      case 0:
        return cljs$core$rand__0.call(this);
      case 1:
        return cljs$core$rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$rand.cljs$core$IFn$_invoke$arity$0 = cljs$core$rand__0;
  cljs$core$rand.cljs$core$IFn$_invoke$arity$1 = cljs$core$rand__1;
  return cljs$core$rand;
}();
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__11187 = function() {
    return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
  }() * n;
  return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__11187) : Math.floor.call(null, G__11187);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = function() {
      var G__11189 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__11189) : f.call(null, G__11189);
    }();
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__11191 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__11191) : cljs.core.atom.call(null, G__11191);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var cljs$core$swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
  };
  var cljs$core$swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      var G__11192__i = 0, G__11192__a = new Array(arguments.length - 1);
      while (G__11192__i < G__11192__a.length) {
        G__11192__a[G__11192__i] = arguments[G__11192__i + 1];
        ++G__11192__i;
      }
      args = new cljs.core.IndexedSeq(G__11192__a, 0);
    }
    return cljs$core$swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  cljs$core$swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  cljs$core$swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__11193) {
    var f = cljs.core.first(arglist__11193);
    var args = cljs.core.rest(arglist__11193);
    return cljs$core$swap_global_hierarchy_BANG___delegate(f, args);
  };
  cljs$core$swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$swap_global_hierarchy_BANG___delegate;
  return cljs$core$swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var cljs$core$isa_QMARK_ = null;
  var cljs$core$isa_QMARK___2 = function(child, parent) {
    return cljs$core$isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__11258 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11258) : cljs.core.deref.call(null, G__11258);
    }(), child, parent);
  };
  var cljs$core$isa_QMARK___3 = function(h, child, parent) {
    var or__4122__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
    if (or__4122__auto__) {
      return or__4122__auto__;
    } else {
      var or__4122__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__4122__auto____$1) {
        return or__4122__auto____$1;
      } else {
        var and__4110__auto__ = cljs.core.vector_QMARK_(parent);
        if (and__4110__auto__) {
          var and__4110__auto____$1 = cljs.core.vector_QMARK_(child);
          if (and__4110__auto____$1) {
            var and__4110__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
            if (and__4110__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count(parent)) {
                  return ret;
                } else {
                  var G__11283 = cljs$core$isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, function() {
                    var G__11281 = i;
                    return child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(G__11281) : child.call(null, G__11281);
                  }(), function() {
                    var G__11282 = i;
                    return parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(G__11282) : parent.call(null, G__11282);
                  }());
                  var G__11284 = i + 1;
                  ret = G__11283;
                  i = G__11284;
                  continue;
                }
                break;
              }
            } else {
              return and__4110__auto____$2;
            }
          } else {
            return and__4110__auto____$1;
          }
        } else {
          return and__4110__auto__;
        }
      }
    }
  };
  cljs$core$isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return cljs$core$isa_QMARK___2.call(this, h, child);
      case 3:
        return cljs$core$isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = cljs$core$isa_QMARK___2;
  cljs$core$isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = cljs$core$isa_QMARK___3;
  return cljs$core$isa_QMARK_;
}();
cljs.core.parents = function() {
  var cljs$core$parents = null;
  var cljs$core$parents__1 = function(tag) {
    return cljs$core$parents.cljs$core$IFn$_invoke$arity$2(function() {
      var G__11288 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11288) : cljs.core.deref.call(null, G__11288);
    }(), tag);
  };
  var cljs$core$parents__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  cljs$core$parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return cljs$core$parents__1.call(this, h);
      case 2:
        return cljs$core$parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$parents.cljs$core$IFn$_invoke$arity$1 = cljs$core$parents__1;
  cljs$core$parents.cljs$core$IFn$_invoke$arity$2 = cljs$core$parents__2;
  return cljs$core$parents;
}();
cljs.core.ancestors = function() {
  var cljs$core$ancestors = null;
  var cljs$core$ancestors__1 = function(tag) {
    return cljs$core$ancestors.cljs$core$IFn$_invoke$arity$2(function() {
      var G__11292 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11292) : cljs.core.deref.call(null, G__11292);
    }(), tag);
  };
  var cljs$core$ancestors__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  cljs$core$ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return cljs$core$ancestors__1.call(this, h);
      case 2:
        return cljs$core$ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$ancestors.cljs$core$IFn$_invoke$arity$1 = cljs$core$ancestors__1;
  cljs$core$ancestors.cljs$core$IFn$_invoke$arity$2 = cljs$core$ancestors__2;
  return cljs$core$ancestors;
}();
cljs.core.descendants = function() {
  var cljs$core$descendants = null;
  var cljs$core$descendants__1 = function(tag) {
    return cljs$core$descendants.cljs$core$IFn$_invoke$arity$2(function() {
      var G__11296 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11296) : cljs.core.deref.call(null, G__11296);
    }(), tag);
  };
  var cljs$core$descendants__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  cljs$core$descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return cljs$core$descendants__1.call(this, h);
      case 2:
        return cljs$core$descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$descendants.cljs$core$IFn$_invoke$arity$1 = cljs$core$descendants__1;
  cljs$core$descendants.cljs$core$IFn$_invoke$arity$2 = cljs$core$descendants__2;
  return cljs$core$descendants;
}();
cljs.core.derive = function() {
  var cljs$core$derive = null;
  var cljs$core$derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace(parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs$core$derive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var cljs$core$derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, function() {
              var G__11305 = target;
              return targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(G__11305) : targets.call(null, G__11305);
            }())));
          };
        }(tp, td, ta), m, cljs.core.cons(source, function() {
          var G__11306 = source;
          return sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(G__11306) : sources.call(null, G__11306);
        }()));
      };
    }(tp, td, ta);
    var or__4122__auto__ = cljs.core.contains_QMARK_(function() {
      var G__11310 = tag;
      return tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(G__11310) : tp.call(null, G__11310);
    }(), parent) ? null : function() {
      if (cljs.core.contains_QMARK_(function() {
        var G__11311 = tag;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__11311) : ta.call(null, G__11311);
      }(), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_(function() {
        var G__11312 = parent;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__11312) : ta.call(null, G__11312);
      }(), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
      "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return h;
    }
  };
  cljs$core$derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return cljs$core$derive__2.call(this, h, tag);
      case 3:
        return cljs$core$derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$derive.cljs$core$IFn$_invoke$arity$2 = cljs$core$derive__2;
  cljs$core$derive.cljs$core$IFn$_invoke$arity$3 = cljs$core$derive__3;
  return cljs$core$derive;
}();
cljs.core.underive = function() {
  var cljs$core$underive = null;
  var cljs$core$underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs$core$underive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var cljs$core$underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(function() {
      var G__11319 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__11319) : parentMap.call(null, G__11319);
    }()) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(function() {
      var G__11320 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__11320) : parentMap.call(null, G__11320);
    }(), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
    var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
      return function(p1__11313_SHARP_) {
        return cljs.core.cons(cljs.core.first(p1__11313_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__11313_SHARP_), cljs.core.second(p1__11313_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
    if (cljs.core.contains_QMARK_(function() {
      var G__11321 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__11321) : parentMap.call(null, G__11321);
    }(), parent)) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__11314_SHARP_, p2__11315_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__11314_SHARP_, p2__11315_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
    } else {
      return h;
    }
  };
  cljs$core$underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return cljs$core$underive__2.call(this, h, tag);
      case 3:
        return cljs$core$underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$underive.cljs$core$IFn$_invoke$arity$2 = cljs$core$underive__2;
  cljs$core$underive.cljs$core$IFn$_invoke$arity$3 = cljs$core$underive__3;
  return cljs$core$underive;
}();
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    var G__11324 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11324) : cljs.core.deref.call(null, G__11324);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    var G__11325 = hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11325) : cljs.core.deref.call(null, G__11325);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = function() {
    var G__11341 = prefer_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11341) : cljs.core.deref.call(null, G__11341);
  }().call(null, x);
  var or__4122__auto__ = cljs.core.truth_(function() {
    var and__4110__auto__ = xprefs;
    if (cljs.core.truth_(and__4110__auto__)) {
      var G__11343 = y;
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(G__11343) : xprefs.call(null, G__11343);
    } else {
      return and__4110__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    var or__4122__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(cljs$core$prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__11344 = cljs.core.rest(ps);
          ps = G__11344;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__4122__auto____$1)) {
      return or__4122__auto____$1;
    } else {
      var or__4122__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(cljs$core$prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__11345 = cljs.core.rest(ps);
            ps = G__11345;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__4122__auto____$2)) {
        return or__4122__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table) {
  var or__4122__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__11359) {
    var vec__11360 = p__11359;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11360, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11360, 1, null);
    var e = vec__11360;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__11361 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11361) : cljs.core.deref.call(null, G__11361);
    }(), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__4122__auto__ = be == null;
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, function() {
    var G__11362 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11362) : cljs.core.deref.call(null, G__11362);
  }());
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
      var G__11363 = cached_hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11363) : cljs.core.deref.call(null, G__11363);
    }(), function() {
      var G__11364 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11364) : cljs.core.deref.call(null, G__11364);
    }())) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj11366 = {};
  return obj11366;
}();
cljs.core._reset = function cljs$core$_reset(mf) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._reset[function() {
        var G__11370 = x__4758__auto__;
        return goog.typeOf(G__11370);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._reset["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._add_method[function() {
        var G__11374 = x__4758__auto__;
        return goog.typeOf(G__11374);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._add_method["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._remove_method[function() {
        var G__11378 = x__4758__auto__;
        return goog.typeOf(G__11378);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._remove_method["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._prefer_method[function() {
        var G__11382 = x__4758__auto__;
        return goog.typeOf(G__11382);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._prefer_method["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._get_method[function() {
        var G__11386 = x__4758__auto__;
        return goog.typeOf(G__11386);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._get_method["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._methods[function() {
        var G__11390 = x__4758__auto__;
        return goog.typeOf(G__11390);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._methods["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._prefers[function() {
        var G__11394 = x__4758__auto__;
        return goog.typeOf(G__11394);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._prefers["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__11396 = this$__$1;
  return goog.getUid(G__11396);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
    var G__11397 = self__.cached_hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11397) : cljs.core.deref.call(null, G__11397);
  }(), function() {
    var G__11398 = self__.hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11398) : cljs.core.deref.call(null, G__11398);
  }())) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = function() {
    var G__11399 = self__.method_cache;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11399) : cljs.core.deref.call(null, G__11399);
  }().call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return function() {
        var G__11400 = self__.method_table;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11400) : cljs.core.deref.call(null, G__11400);
      }().call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__11401 = self__.method_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11401) : cljs.core.deref.call(null, G__11401);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__11402 = self__.prefer_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11402) : cljs.core.deref.call(null, G__11402);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__12243 = null;
  var G__12243__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__12243__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11403 = a;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__11403) : self__.dispatch_fn.call(null, G__11403);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11404 = a;
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__11404) : target_fn.call(null, G__11404);
  };
  var G__12243__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11405 = a;
      var G__11406 = b;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__11405, G__11406) : self__.dispatch_fn.call(null, G__11405, G__11406);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11407 = a;
    var G__11408 = b;
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__11407, G__11408) : target_fn.call(null, G__11407, G__11408);
  };
  var G__12243__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11409 = a;
      var G__11410 = b;
      var G__11411 = c;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__11409, G__11410, G__11411) : self__.dispatch_fn.call(null, G__11409, G__11410, G__11411);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11412 = a;
    var G__11413 = b;
    var G__11414 = c;
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__11412, G__11413, G__11414) : target_fn.call(null, G__11412, G__11413, G__11414);
  };
  var G__12243__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11415 = a;
      var G__11416 = b;
      var G__11417 = c;
      var G__11418 = d;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__11415, G__11416, G__11417, G__11418) : self__.dispatch_fn.call(null, G__11415, G__11416, G__11417, G__11418);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11419 = a;
    var G__11420 = b;
    var G__11421 = c;
    var G__11422 = d;
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__11419, G__11420, G__11421, G__11422) : target_fn.call(null, G__11419, G__11420, G__11421, G__11422);
  };
  var G__12243__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11423 = a;
      var G__11424 = b;
      var G__11425 = c;
      var G__11426 = d;
      var G__11427 = e;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__11423, G__11424, G__11425, G__11426, G__11427) : self__.dispatch_fn.call(null, G__11423, G__11424, G__11425, G__11426, G__11427);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11428 = a;
    var G__11429 = b;
    var G__11430 = c;
    var G__11431 = d;
    var G__11432 = e;
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__11428, G__11429, G__11430, G__11431, G__11432) : target_fn.call(null, G__11428, G__11429, G__11430, G__11431, G__11432);
  };
  var G__12243__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11433 = a;
      var G__11434 = b;
      var G__11435 = c;
      var G__11436 = d;
      var G__11437 = e;
      var G__11438 = f;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__11433, G__11434, G__11435, G__11436, G__11437, G__11438) : self__.dispatch_fn.call(null, G__11433, G__11434, G__11435, G__11436, G__11437, G__11438);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11439 = a;
    var G__11440 = b;
    var G__11441 = c;
    var G__11442 = d;
    var G__11443 = e;
    var G__11444 = f;
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__11439, G__11440, G__11441, G__11442, G__11443, G__11444) : target_fn.call(null, G__11439, G__11440, G__11441, G__11442, G__11443, G__11444);
  };
  var G__12243__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11445 = a;
      var G__11446 = b;
      var G__11447 = c;
      var G__11448 = d;
      var G__11449 = e;
      var G__11450 = f;
      var G__11451 = g;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__11445, G__11446, G__11447, G__11448, G__11449, G__11450, G__11451) : self__.dispatch_fn.call(null, G__11445, G__11446, G__11447, G__11448, G__11449, G__11450, G__11451);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11452 = a;
    var G__11453 = b;
    var G__11454 = c;
    var G__11455 = d;
    var G__11456 = e;
    var G__11457 = f;
    var G__11458 = g;
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__11452, G__11453, G__11454, G__11455, G__11456, G__11457, G__11458) : target_fn.call(null, G__11452, G__11453, G__11454, G__11455, G__11456, G__11457, G__11458);
  };
  var G__12243__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11459 = a;
      var G__11460 = b;
      var G__11461 = c;
      var G__11462 = d;
      var G__11463 = e;
      var G__11464 = f;
      var G__11465 = g;
      var G__11466 = h;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__11459, G__11460, G__11461, G__11462, G__11463, G__11464, G__11465, G__11466) : self__.dispatch_fn.call(null, G__11459, G__11460, G__11461, G__11462, G__11463, G__11464, G__11465, G__11466);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11467 = a;
    var G__11468 = b;
    var G__11469 = c;
    var G__11470 = d;
    var G__11471 = e;
    var G__11472 = f;
    var G__11473 = g;
    var G__11474 = h;
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__11467, G__11468, G__11469, G__11470, G__11471, G__11472, G__11473, G__11474) : target_fn.call(null, G__11467, G__11468, G__11469, G__11470, G__11471, G__11472, G__11473, G__11474);
  };
  var G__12243__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11475 = a;
      var G__11476 = b;
      var G__11477 = c;
      var G__11478 = d;
      var G__11479 = e;
      var G__11480 = f;
      var G__11481 = g;
      var G__11482 = h;
      var G__11483 = i;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__11475, G__11476, G__11477, G__11478, G__11479, G__11480, G__11481, G__11482, G__11483) : self__.dispatch_fn.call(null, G__11475, G__11476, G__11477, G__11478, G__11479, G__11480, G__11481, G__11482, G__11483);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11484 = a;
    var G__11485 = b;
    var G__11486 = c;
    var G__11487 = d;
    var G__11488 = e;
    var G__11489 = f;
    var G__11490 = g;
    var G__11491 = h;
    var G__11492 = i;
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__11484, G__11485, G__11486, G__11487, G__11488, G__11489, G__11490, G__11491, G__11492) : target_fn.call(null, G__11484, G__11485, G__11486, G__11487, G__11488, G__11489, G__11490, G__11491, G__11492);
  };
  var G__12243__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11493 = a;
      var G__11494 = b;
      var G__11495 = c;
      var G__11496 = d;
      var G__11497 = e;
      var G__11498 = f;
      var G__11499 = g;
      var G__11500 = h;
      var G__11501 = i;
      var G__11502 = j;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__11493, G__11494, G__11495, G__11496, G__11497, G__11498, G__11499, G__11500, G__11501, G__11502) : self__.dispatch_fn.call(null, G__11493, G__11494, G__11495, G__11496, G__11497, G__11498, G__11499, G__11500, G__11501, G__11502);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11503 = a;
    var G__11504 = b;
    var G__11505 = c;
    var G__11506 = d;
    var G__11507 = e;
    var G__11508 = f;
    var G__11509 = g;
    var G__11510 = h;
    var G__11511 = i;
    var G__11512 = j;
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__11503, G__11504, G__11505, G__11506, G__11507, G__11508, G__11509, G__11510, G__11511, G__11512) : target_fn.call(null, G__11503, G__11504, G__11505, G__11506, G__11507, G__11508, G__11509, G__11510, G__11511, G__11512);
  };
  var G__12243__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11513 = a;
      var G__11514 = b;
      var G__11515 = c;
      var G__11516 = d;
      var G__11517 = e;
      var G__11518 = f;
      var G__11519 = g;
      var G__11520 = h;
      var G__11521 = i;
      var G__11522 = j;
      var G__11523 = k;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__11513, G__11514, G__11515, G__11516, G__11517, G__11518, G__11519, G__11520, G__11521, G__11522, G__11523) : self__.dispatch_fn.call(null, G__11513, G__11514, G__11515, G__11516, G__11517, G__11518, G__11519, G__11520, G__11521, G__11522, G__11523);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11524 = a;
    var G__11525 = b;
    var G__11526 = c;
    var G__11527 = d;
    var G__11528 = e;
    var G__11529 = f;
    var G__11530 = g;
    var G__11531 = h;
    var G__11532 = i;
    var G__11533 = j;
    var G__11534 = k;
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__11524, G__11525, G__11526, G__11527, G__11528, G__11529, G__11530, G__11531, G__11532, G__11533, G__11534) : target_fn.call(null, G__11524, G__11525, G__11526, G__11527, G__11528, G__11529, G__11530, G__11531, G__11532, G__11533, G__11534);
  };
  var G__12243__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11535 = a;
      var G__11536 = b;
      var G__11537 = c;
      var G__11538 = d;
      var G__11539 = e;
      var G__11540 = f;
      var G__11541 = g;
      var G__11542 = h;
      var G__11543 = i;
      var G__11544 = j;
      var G__11545 = k;
      var G__11546 = l;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__11535, G__11536, G__11537, G__11538, G__11539, G__11540, G__11541, G__11542, G__11543, G__11544, G__11545, G__11546) : self__.dispatch_fn.call(null, G__11535, G__11536, G__11537, G__11538, G__11539, G__11540, G__11541, G__11542, G__11543, G__11544, G__11545, G__11546);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11547 = a;
    var G__11548 = b;
    var G__11549 = c;
    var G__11550 = d;
    var G__11551 = e;
    var G__11552 = f;
    var G__11553 = g;
    var G__11554 = h;
    var G__11555 = i;
    var G__11556 = j;
    var G__11557 = k;
    var G__11558 = l;
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__11547, G__11548, G__11549, G__11550, G__11551, G__11552, G__11553, G__11554, G__11555, G__11556, G__11557, G__11558) : target_fn.call(null, G__11547, G__11548, G__11549, G__11550, G__11551, G__11552, G__11553, G__11554, G__11555, G__11556, G__11557, G__11558);
  };
  var G__12243__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11559 = a;
      var G__11560 = b;
      var G__11561 = c;
      var G__11562 = d;
      var G__11563 = e;
      var G__11564 = f;
      var G__11565 = g;
      var G__11566 = h;
      var G__11567 = i;
      var G__11568 = j;
      var G__11569 = k;
      var G__11570 = l;
      var G__11571 = m;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__11559, G__11560, G__11561, G__11562, G__11563, G__11564, G__11565, G__11566, G__11567, G__11568, G__11569, G__11570, G__11571) : self__.dispatch_fn.call(null, G__11559, G__11560, G__11561, G__11562, G__11563, G__11564, G__11565, G__11566, G__11567, G__11568, G__11569, G__11570, G__11571);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11572 = a;
    var G__11573 = b;
    var G__11574 = c;
    var G__11575 = d;
    var G__11576 = e;
    var G__11577 = f;
    var G__11578 = g;
    var G__11579 = h;
    var G__11580 = i;
    var G__11581 = j;
    var G__11582 = k;
    var G__11583 = l;
    var G__11584 = m;
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__11572, G__11573, G__11574, G__11575, G__11576, G__11577, G__11578, G__11579, G__11580, G__11581, G__11582, G__11583, G__11584) : target_fn.call(null, G__11572, G__11573, G__11574, G__11575, G__11576, G__11577, G__11578, G__11579, G__11580, G__11581, G__11582, G__11583, G__11584);
  };
  var G__12243__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11585 = a;
      var G__11586 = b;
      var G__11587 = c;
      var G__11588 = d;
      var G__11589 = e;
      var G__11590 = f;
      var G__11591 = g;
      var G__11592 = h;
      var G__11593 = i;
      var G__11594 = j;
      var G__11595 = k;
      var G__11596 = l;
      var G__11597 = m;
      var G__11598 = n;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__11585, G__11586, G__11587, G__11588, G__11589, G__11590, G__11591, G__11592, G__11593, G__11594, G__11595, G__11596, G__11597, G__11598) : self__.dispatch_fn.call(null, G__11585, G__11586, G__11587, G__11588, G__11589, G__11590, G__11591, G__11592, G__11593, G__11594, G__11595, G__11596, G__11597, G__11598);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11599 = a;
    var G__11600 = b;
    var G__11601 = c;
    var G__11602 = d;
    var G__11603 = e;
    var G__11604 = f;
    var G__11605 = g;
    var G__11606 = h;
    var G__11607 = i;
    var G__11608 = j;
    var G__11609 = k;
    var G__11610 = l;
    var G__11611 = m;
    var G__11612 = n;
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__11599, G__11600, G__11601, G__11602, G__11603, G__11604, G__11605, G__11606, G__11607, G__11608, G__11609, G__11610, G__11611, G__11612) : target_fn.call(null, G__11599, G__11600, G__11601, G__11602, G__11603, G__11604, G__11605, G__11606, G__11607, G__11608, G__11609, G__11610, G__11611, G__11612);
  };
  var G__12243__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11613 = a;
      var G__11614 = b;
      var G__11615 = c;
      var G__11616 = d;
      var G__11617 = e;
      var G__11618 = f;
      var G__11619 = g;
      var G__11620 = h;
      var G__11621 = i;
      var G__11622 = j;
      var G__11623 = k;
      var G__11624 = l;
      var G__11625 = m;
      var G__11626 = n;
      var G__11627 = o;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__11613, G__11614, G__11615, G__11616, G__11617, G__11618, G__11619, G__11620, G__11621, G__11622, G__11623, G__11624, G__11625, G__11626, G__11627) : self__.dispatch_fn.call(null, G__11613, G__11614, G__11615, G__11616, G__11617, G__11618, G__11619, G__11620, G__11621, G__11622, G__11623, G__11624, G__11625, G__11626, G__11627);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11628 = a;
    var G__11629 = b;
    var G__11630 = c;
    var G__11631 = d;
    var G__11632 = e;
    var G__11633 = f;
    var G__11634 = g;
    var G__11635 = h;
    var G__11636 = i;
    var G__11637 = j;
    var G__11638 = k;
    var G__11639 = l;
    var G__11640 = m;
    var G__11641 = n;
    var G__11642 = o;
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__11628, G__11629, G__11630, G__11631, G__11632, G__11633, G__11634, G__11635, G__11636, G__11637, G__11638, G__11639, G__11640, G__11641, G__11642) : target_fn.call(null, G__11628, G__11629, G__11630, G__11631, G__11632, G__11633, G__11634, G__11635, G__11636, G__11637, G__11638, G__11639, G__11640, G__11641, G__11642);
  };
  var G__12243__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11643 = a;
      var G__11644 = b;
      var G__11645 = c;
      var G__11646 = d;
      var G__11647 = e;
      var G__11648 = f;
      var G__11649 = g;
      var G__11650 = h;
      var G__11651 = i;
      var G__11652 = j;
      var G__11653 = k;
      var G__11654 = l;
      var G__11655 = m;
      var G__11656 = n;
      var G__11657 = o;
      var G__11658 = p;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__11643, G__11644, G__11645, G__11646, G__11647, G__11648, G__11649, G__11650, G__11651, G__11652, G__11653, G__11654, G__11655, G__11656, G__11657, G__11658) : self__.dispatch_fn.call(null, G__11643, G__11644, G__11645, G__11646, G__11647, G__11648, G__11649, G__11650, G__11651, G__11652, G__11653, G__11654, G__11655, G__11656, G__11657, G__11658);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11659 = a;
    var G__11660 = b;
    var G__11661 = c;
    var G__11662 = d;
    var G__11663 = e;
    var G__11664 = f;
    var G__11665 = g;
    var G__11666 = h;
    var G__11667 = i;
    var G__11668 = j;
    var G__11669 = k;
    var G__11670 = l;
    var G__11671 = m;
    var G__11672 = n;
    var G__11673 = o;
    var G__11674 = p;
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__11659, G__11660, G__11661, G__11662, G__11663, G__11664, G__11665, G__11666, G__11667, G__11668, G__11669, G__11670, G__11671, G__11672, G__11673, G__11674) : target_fn.call(null, G__11659, G__11660, G__11661, G__11662, G__11663, G__11664, G__11665, G__11666, G__11667, G__11668, G__11669, G__11670, G__11671, G__11672, G__11673, G__11674);
  };
  var G__12243__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11675 = a;
      var G__11676 = b;
      var G__11677 = c;
      var G__11678 = d;
      var G__11679 = e;
      var G__11680 = f;
      var G__11681 = g;
      var G__11682 = h;
      var G__11683 = i;
      var G__11684 = j;
      var G__11685 = k;
      var G__11686 = l;
      var G__11687 = m;
      var G__11688 = n;
      var G__11689 = o;
      var G__11690 = p;
      var G__11691 = q;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__11675, G__11676, G__11677, G__11678, G__11679, G__11680, G__11681, G__11682, G__11683, G__11684, G__11685, G__11686, G__11687, G__11688, G__11689, G__11690, G__11691) : self__.dispatch_fn.call(null, G__11675, G__11676, G__11677, G__11678, G__11679, G__11680, G__11681, G__11682, G__11683, G__11684, G__11685, G__11686, G__11687, G__11688, G__11689, G__11690, G__11691);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11692 = a;
    var G__11693 = b;
    var G__11694 = c;
    var G__11695 = d;
    var G__11696 = e;
    var G__11697 = f;
    var G__11698 = g;
    var G__11699 = h;
    var G__11700 = i;
    var G__11701 = j;
    var G__11702 = k;
    var G__11703 = l;
    var G__11704 = m;
    var G__11705 = n;
    var G__11706 = o;
    var G__11707 = p;
    var G__11708 = q;
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__11692, G__11693, G__11694, G__11695, G__11696, G__11697, G__11698, G__11699, G__11700, G__11701, G__11702, G__11703, G__11704, G__11705, G__11706, G__11707, G__11708) : target_fn.call(null, G__11692, G__11693, G__11694, G__11695, G__11696, G__11697, G__11698, G__11699, G__11700, G__11701, G__11702, G__11703, G__11704, G__11705, G__11706, G__11707, G__11708);
  };
  var G__12243__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11709 = a;
      var G__11710 = b;
      var G__11711 = c;
      var G__11712 = d;
      var G__11713 = e;
      var G__11714 = f;
      var G__11715 = g;
      var G__11716 = h;
      var G__11717 = i;
      var G__11718 = j;
      var G__11719 = k;
      var G__11720 = l;
      var G__11721 = m;
      var G__11722 = n;
      var G__11723 = o;
      var G__11724 = p;
      var G__11725 = q;
      var G__11726 = r;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__11709, G__11710, G__11711, G__11712, G__11713, G__11714, G__11715, G__11716, G__11717, G__11718, G__11719, G__11720, G__11721, G__11722, G__11723, G__11724, G__11725, G__11726) : self__.dispatch_fn.call(null, G__11709, G__11710, G__11711, G__11712, G__11713, G__11714, G__11715, G__11716, G__11717, G__11718, G__11719, G__11720, G__11721, G__11722, G__11723, G__11724, G__11725, G__11726);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11727 = a;
    var G__11728 = b;
    var G__11729 = c;
    var G__11730 = d;
    var G__11731 = e;
    var G__11732 = f;
    var G__11733 = g;
    var G__11734 = h;
    var G__11735 = i;
    var G__11736 = j;
    var G__11737 = k;
    var G__11738 = l;
    var G__11739 = m;
    var G__11740 = n;
    var G__11741 = o;
    var G__11742 = p;
    var G__11743 = q;
    var G__11744 = r;
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__11727, G__11728, G__11729, G__11730, G__11731, G__11732, G__11733, G__11734, G__11735, G__11736, G__11737, G__11738, G__11739, G__11740, G__11741, G__11742, G__11743, G__11744) : target_fn.call(null, G__11727, G__11728, G__11729, G__11730, G__11731, G__11732, G__11733, G__11734, G__11735, G__11736, G__11737, G__11738, G__11739, G__11740, G__11741, G__11742, G__11743, G__11744);
  };
  var G__12243__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11745 = a;
      var G__11746 = b;
      var G__11747 = c;
      var G__11748 = d;
      var G__11749 = e;
      var G__11750 = f;
      var G__11751 = g;
      var G__11752 = h;
      var G__11753 = i;
      var G__11754 = j;
      var G__11755 = k;
      var G__11756 = l;
      var G__11757 = m;
      var G__11758 = n;
      var G__11759 = o;
      var G__11760 = p;
      var G__11761 = q;
      var G__11762 = r;
      var G__11763 = s;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__11745, G__11746, G__11747, G__11748, G__11749, G__11750, G__11751, G__11752, G__11753, G__11754, G__11755, G__11756, G__11757, G__11758, G__11759, G__11760, G__11761, G__11762, G__11763) : self__.dispatch_fn.call(null, G__11745, G__11746, G__11747, G__11748, G__11749, G__11750, G__11751, G__11752, G__11753, G__11754, G__11755, G__11756, G__11757, G__11758, G__11759, G__11760, G__11761, 
      G__11762, G__11763);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11764 = a;
    var G__11765 = b;
    var G__11766 = c;
    var G__11767 = d;
    var G__11768 = e;
    var G__11769 = f;
    var G__11770 = g;
    var G__11771 = h;
    var G__11772 = i;
    var G__11773 = j;
    var G__11774 = k;
    var G__11775 = l;
    var G__11776 = m;
    var G__11777 = n;
    var G__11778 = o;
    var G__11779 = p;
    var G__11780 = q;
    var G__11781 = r;
    var G__11782 = s;
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__11764, G__11765, G__11766, G__11767, G__11768, G__11769, G__11770, G__11771, G__11772, G__11773, G__11774, G__11775, G__11776, G__11777, G__11778, G__11779, G__11780, G__11781, G__11782) : target_fn.call(null, G__11764, G__11765, G__11766, G__11767, G__11768, G__11769, G__11770, G__11771, G__11772, G__11773, G__11774, G__11775, G__11776, G__11777, G__11778, G__11779, G__11780, G__11781, G__11782);
  };
  var G__12243__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11783 = a;
      var G__11784 = b;
      var G__11785 = c;
      var G__11786 = d;
      var G__11787 = e;
      var G__11788 = f;
      var G__11789 = g;
      var G__11790 = h;
      var G__11791 = i;
      var G__11792 = j;
      var G__11793 = k;
      var G__11794 = l;
      var G__11795 = m;
      var G__11796 = n;
      var G__11797 = o;
      var G__11798 = p;
      var G__11799 = q;
      var G__11800 = r;
      var G__11801 = s;
      var G__11802 = t;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__11783, G__11784, G__11785, G__11786, G__11787, G__11788, G__11789, G__11790, G__11791, G__11792, G__11793, G__11794, G__11795, G__11796, G__11797, G__11798, G__11799, G__11800, G__11801, G__11802) : self__.dispatch_fn.call(null, G__11783, G__11784, G__11785, G__11786, G__11787, G__11788, G__11789, G__11790, G__11791, G__11792, G__11793, G__11794, G__11795, G__11796, G__11797, G__11798, 
      G__11799, G__11800, G__11801, G__11802);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11803 = a;
    var G__11804 = b;
    var G__11805 = c;
    var G__11806 = d;
    var G__11807 = e;
    var G__11808 = f;
    var G__11809 = g;
    var G__11810 = h;
    var G__11811 = i;
    var G__11812 = j;
    var G__11813 = k;
    var G__11814 = l;
    var G__11815 = m;
    var G__11816 = n;
    var G__11817 = o;
    var G__11818 = p;
    var G__11819 = q;
    var G__11820 = r;
    var G__11821 = s;
    var G__11822 = t;
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__11803, G__11804, G__11805, G__11806, G__11807, G__11808, G__11809, G__11810, G__11811, G__11812, G__11813, G__11814, G__11815, G__11816, G__11817, G__11818, G__11819, G__11820, G__11821, G__11822) : target_fn.call(null, G__11803, G__11804, G__11805, G__11806, G__11807, G__11808, G__11809, G__11810, G__11811, G__11812, G__11813, G__11814, G__11815, G__11816, G__11817, G__11818, G__11819, G__11820, G__11821, 
    G__11822);
  };
  var G__12243__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__12243 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__12243__1.call(this, self__);
      case 2:
        return G__12243__2.call(this, self__, a);
      case 3:
        return G__12243__3.call(this, self__, a, b);
      case 4:
        return G__12243__4.call(this, self__, a, b, c);
      case 5:
        return G__12243__5.call(this, self__, a, b, c, d);
      case 6:
        return G__12243__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__12243__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__12243__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__12243__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__12243__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__12243__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__12243__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__12243__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__12243__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__12243__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__12243__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__12243__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__12243__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__12243__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__12243__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__12243__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__12243__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12243.cljs$core$IFn$_invoke$arity$1 = G__12243__1;
  G__12243.cljs$core$IFn$_invoke$arity$2 = G__12243__2;
  G__12243.cljs$core$IFn$_invoke$arity$3 = G__12243__3;
  G__12243.cljs$core$IFn$_invoke$arity$4 = G__12243__4;
  G__12243.cljs$core$IFn$_invoke$arity$5 = G__12243__5;
  G__12243.cljs$core$IFn$_invoke$arity$6 = G__12243__6;
  G__12243.cljs$core$IFn$_invoke$arity$7 = G__12243__7;
  G__12243.cljs$core$IFn$_invoke$arity$8 = G__12243__8;
  G__12243.cljs$core$IFn$_invoke$arity$9 = G__12243__9;
  G__12243.cljs$core$IFn$_invoke$arity$10 = G__12243__10;
  G__12243.cljs$core$IFn$_invoke$arity$11 = G__12243__11;
  G__12243.cljs$core$IFn$_invoke$arity$12 = G__12243__12;
  G__12243.cljs$core$IFn$_invoke$arity$13 = G__12243__13;
  G__12243.cljs$core$IFn$_invoke$arity$14 = G__12243__14;
  G__12243.cljs$core$IFn$_invoke$arity$15 = G__12243__15;
  G__12243.cljs$core$IFn$_invoke$arity$16 = G__12243__16;
  G__12243.cljs$core$IFn$_invoke$arity$17 = G__12243__17;
  G__12243.cljs$core$IFn$_invoke$arity$18 = G__12243__18;
  G__12243.cljs$core$IFn$_invoke$arity$19 = G__12243__19;
  G__12243.cljs$core$IFn$_invoke$arity$20 = G__12243__20;
  G__12243.cljs$core$IFn$_invoke$arity$21 = G__12243__21;
  G__12243.cljs$core$IFn$_invoke$arity$22 = G__12243__22;
  return G__12243;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args11395) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11395)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11823 = a;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__11823) : self__.dispatch_fn.call(null, G__11823);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11824 = a;
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__11824) : target_fn.call(null, G__11824);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11825 = a;
    var G__11826 = b;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__11825, G__11826) : self__.dispatch_fn.call(null, G__11825, G__11826);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11827 = a;
  var G__11828 = b;
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__11827, G__11828) : target_fn.call(null, G__11827, G__11828);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11829 = a;
    var G__11830 = b;
    var G__11831 = c;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__11829, G__11830, G__11831) : self__.dispatch_fn.call(null, G__11829, G__11830, G__11831);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11832 = a;
  var G__11833 = b;
  var G__11834 = c;
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__11832, G__11833, G__11834) : target_fn.call(null, G__11832, G__11833, G__11834);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11835 = a;
    var G__11836 = b;
    var G__11837 = c;
    var G__11838 = d;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__11835, G__11836, G__11837, G__11838) : self__.dispatch_fn.call(null, G__11835, G__11836, G__11837, G__11838);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11839 = a;
  var G__11840 = b;
  var G__11841 = c;
  var G__11842 = d;
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__11839, G__11840, G__11841, G__11842) : target_fn.call(null, G__11839, G__11840, G__11841, G__11842);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11843 = a;
    var G__11844 = b;
    var G__11845 = c;
    var G__11846 = d;
    var G__11847 = e;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__11843, G__11844, G__11845, G__11846, G__11847) : self__.dispatch_fn.call(null, G__11843, G__11844, G__11845, G__11846, G__11847);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11848 = a;
  var G__11849 = b;
  var G__11850 = c;
  var G__11851 = d;
  var G__11852 = e;
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__11848, G__11849, G__11850, G__11851, G__11852) : target_fn.call(null, G__11848, G__11849, G__11850, G__11851, G__11852);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11853 = a;
    var G__11854 = b;
    var G__11855 = c;
    var G__11856 = d;
    var G__11857 = e;
    var G__11858 = f;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__11853, G__11854, G__11855, G__11856, G__11857, G__11858) : self__.dispatch_fn.call(null, G__11853, G__11854, G__11855, G__11856, G__11857, G__11858);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11859 = a;
  var G__11860 = b;
  var G__11861 = c;
  var G__11862 = d;
  var G__11863 = e;
  var G__11864 = f;
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__11859, G__11860, G__11861, G__11862, G__11863, G__11864) : target_fn.call(null, G__11859, G__11860, G__11861, G__11862, G__11863, G__11864);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11865 = a;
    var G__11866 = b;
    var G__11867 = c;
    var G__11868 = d;
    var G__11869 = e;
    var G__11870 = f;
    var G__11871 = g;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__11865, G__11866, G__11867, G__11868, G__11869, G__11870, G__11871) : self__.dispatch_fn.call(null, G__11865, G__11866, G__11867, G__11868, G__11869, G__11870, G__11871);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11872 = a;
  var G__11873 = b;
  var G__11874 = c;
  var G__11875 = d;
  var G__11876 = e;
  var G__11877 = f;
  var G__11878 = g;
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__11872, G__11873, G__11874, G__11875, G__11876, G__11877, G__11878) : target_fn.call(null, G__11872, G__11873, G__11874, G__11875, G__11876, G__11877, G__11878);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11879 = a;
    var G__11880 = b;
    var G__11881 = c;
    var G__11882 = d;
    var G__11883 = e;
    var G__11884 = f;
    var G__11885 = g;
    var G__11886 = h;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__11879, G__11880, G__11881, G__11882, G__11883, G__11884, G__11885, G__11886) : self__.dispatch_fn.call(null, G__11879, G__11880, G__11881, G__11882, G__11883, G__11884, G__11885, G__11886);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11887 = a;
  var G__11888 = b;
  var G__11889 = c;
  var G__11890 = d;
  var G__11891 = e;
  var G__11892 = f;
  var G__11893 = g;
  var G__11894 = h;
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__11887, G__11888, G__11889, G__11890, G__11891, G__11892, G__11893, G__11894) : target_fn.call(null, G__11887, G__11888, G__11889, G__11890, G__11891, G__11892, G__11893, G__11894);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11895 = a;
    var G__11896 = b;
    var G__11897 = c;
    var G__11898 = d;
    var G__11899 = e;
    var G__11900 = f;
    var G__11901 = g;
    var G__11902 = h;
    var G__11903 = i;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__11895, G__11896, G__11897, G__11898, G__11899, G__11900, G__11901, G__11902, G__11903) : self__.dispatch_fn.call(null, G__11895, G__11896, G__11897, G__11898, G__11899, G__11900, G__11901, G__11902, G__11903);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11904 = a;
  var G__11905 = b;
  var G__11906 = c;
  var G__11907 = d;
  var G__11908 = e;
  var G__11909 = f;
  var G__11910 = g;
  var G__11911 = h;
  var G__11912 = i;
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__11904, G__11905, G__11906, G__11907, G__11908, G__11909, G__11910, G__11911, G__11912) : target_fn.call(null, G__11904, G__11905, G__11906, G__11907, G__11908, G__11909, G__11910, G__11911, G__11912);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11913 = a;
    var G__11914 = b;
    var G__11915 = c;
    var G__11916 = d;
    var G__11917 = e;
    var G__11918 = f;
    var G__11919 = g;
    var G__11920 = h;
    var G__11921 = i;
    var G__11922 = j;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__11913, G__11914, G__11915, G__11916, G__11917, G__11918, G__11919, G__11920, G__11921, G__11922) : self__.dispatch_fn.call(null, G__11913, G__11914, G__11915, G__11916, G__11917, G__11918, G__11919, G__11920, G__11921, G__11922);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11923 = a;
  var G__11924 = b;
  var G__11925 = c;
  var G__11926 = d;
  var G__11927 = e;
  var G__11928 = f;
  var G__11929 = g;
  var G__11930 = h;
  var G__11931 = i;
  var G__11932 = j;
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__11923, G__11924, G__11925, G__11926, G__11927, G__11928, G__11929, G__11930, G__11931, G__11932) : target_fn.call(null, G__11923, G__11924, G__11925, G__11926, G__11927, G__11928, G__11929, G__11930, G__11931, G__11932);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11933 = a;
    var G__11934 = b;
    var G__11935 = c;
    var G__11936 = d;
    var G__11937 = e;
    var G__11938 = f;
    var G__11939 = g;
    var G__11940 = h;
    var G__11941 = i;
    var G__11942 = j;
    var G__11943 = k;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__11933, G__11934, G__11935, G__11936, G__11937, G__11938, G__11939, G__11940, G__11941, G__11942, G__11943) : self__.dispatch_fn.call(null, G__11933, G__11934, G__11935, G__11936, G__11937, G__11938, G__11939, G__11940, G__11941, G__11942, G__11943);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11944 = a;
  var G__11945 = b;
  var G__11946 = c;
  var G__11947 = d;
  var G__11948 = e;
  var G__11949 = f;
  var G__11950 = g;
  var G__11951 = h;
  var G__11952 = i;
  var G__11953 = j;
  var G__11954 = k;
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__11944, G__11945, G__11946, G__11947, G__11948, G__11949, G__11950, G__11951, G__11952, G__11953, G__11954) : target_fn.call(null, G__11944, G__11945, G__11946, G__11947, G__11948, G__11949, G__11950, G__11951, G__11952, G__11953, G__11954);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11955 = a;
    var G__11956 = b;
    var G__11957 = c;
    var G__11958 = d;
    var G__11959 = e;
    var G__11960 = f;
    var G__11961 = g;
    var G__11962 = h;
    var G__11963 = i;
    var G__11964 = j;
    var G__11965 = k;
    var G__11966 = l;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__11955, G__11956, G__11957, G__11958, G__11959, G__11960, G__11961, G__11962, G__11963, G__11964, G__11965, G__11966) : self__.dispatch_fn.call(null, G__11955, G__11956, G__11957, G__11958, G__11959, G__11960, G__11961, G__11962, G__11963, G__11964, G__11965, G__11966);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11967 = a;
  var G__11968 = b;
  var G__11969 = c;
  var G__11970 = d;
  var G__11971 = e;
  var G__11972 = f;
  var G__11973 = g;
  var G__11974 = h;
  var G__11975 = i;
  var G__11976 = j;
  var G__11977 = k;
  var G__11978 = l;
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__11967, G__11968, G__11969, G__11970, G__11971, G__11972, G__11973, G__11974, G__11975, G__11976, G__11977, G__11978) : target_fn.call(null, G__11967, G__11968, G__11969, G__11970, G__11971, G__11972, G__11973, G__11974, G__11975, G__11976, G__11977, G__11978);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11979 = a;
    var G__11980 = b;
    var G__11981 = c;
    var G__11982 = d;
    var G__11983 = e;
    var G__11984 = f;
    var G__11985 = g;
    var G__11986 = h;
    var G__11987 = i;
    var G__11988 = j;
    var G__11989 = k;
    var G__11990 = l;
    var G__11991 = m;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__11979, G__11980, G__11981, G__11982, G__11983, G__11984, G__11985, G__11986, G__11987, G__11988, G__11989, G__11990, G__11991) : self__.dispatch_fn.call(null, G__11979, G__11980, G__11981, G__11982, G__11983, G__11984, G__11985, G__11986, G__11987, G__11988, G__11989, G__11990, G__11991);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11992 = a;
  var G__11993 = b;
  var G__11994 = c;
  var G__11995 = d;
  var G__11996 = e;
  var G__11997 = f;
  var G__11998 = g;
  var G__11999 = h;
  var G__12000 = i;
  var G__12001 = j;
  var G__12002 = k;
  var G__12003 = l;
  var G__12004 = m;
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__11992, G__11993, G__11994, G__11995, G__11996, G__11997, G__11998, G__11999, G__12000, G__12001, G__12002, G__12003, G__12004) : target_fn.call(null, G__11992, G__11993, G__11994, G__11995, G__11996, G__11997, G__11998, G__11999, G__12000, G__12001, G__12002, G__12003, G__12004);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__12005 = a;
    var G__12006 = b;
    var G__12007 = c;
    var G__12008 = d;
    var G__12009 = e;
    var G__12010 = f;
    var G__12011 = g;
    var G__12012 = h;
    var G__12013 = i;
    var G__12014 = j;
    var G__12015 = k;
    var G__12016 = l;
    var G__12017 = m;
    var G__12018 = n;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__12005, G__12006, G__12007, G__12008, G__12009, G__12010, G__12011, G__12012, G__12013, G__12014, G__12015, G__12016, G__12017, G__12018) : self__.dispatch_fn.call(null, G__12005, G__12006, G__12007, G__12008, G__12009, G__12010, G__12011, G__12012, G__12013, G__12014, G__12015, G__12016, G__12017, G__12018);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__12019 = a;
  var G__12020 = b;
  var G__12021 = c;
  var G__12022 = d;
  var G__12023 = e;
  var G__12024 = f;
  var G__12025 = g;
  var G__12026 = h;
  var G__12027 = i;
  var G__12028 = j;
  var G__12029 = k;
  var G__12030 = l;
  var G__12031 = m;
  var G__12032 = n;
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__12019, G__12020, G__12021, G__12022, G__12023, G__12024, G__12025, G__12026, G__12027, G__12028, G__12029, G__12030, G__12031, G__12032) : target_fn.call(null, G__12019, G__12020, G__12021, G__12022, G__12023, G__12024, G__12025, G__12026, G__12027, G__12028, G__12029, G__12030, G__12031, G__12032);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__12033 = a;
    var G__12034 = b;
    var G__12035 = c;
    var G__12036 = d;
    var G__12037 = e;
    var G__12038 = f;
    var G__12039 = g;
    var G__12040 = h;
    var G__12041 = i;
    var G__12042 = j;
    var G__12043 = k;
    var G__12044 = l;
    var G__12045 = m;
    var G__12046 = n;
    var G__12047 = o;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__12033, G__12034, G__12035, G__12036, G__12037, G__12038, G__12039, G__12040, G__12041, G__12042, G__12043, G__12044, G__12045, G__12046, G__12047) : self__.dispatch_fn.call(null, G__12033, G__12034, G__12035, G__12036, G__12037, G__12038, G__12039, G__12040, G__12041, G__12042, G__12043, G__12044, G__12045, G__12046, G__12047);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__12048 = a;
  var G__12049 = b;
  var G__12050 = c;
  var G__12051 = d;
  var G__12052 = e;
  var G__12053 = f;
  var G__12054 = g;
  var G__12055 = h;
  var G__12056 = i;
  var G__12057 = j;
  var G__12058 = k;
  var G__12059 = l;
  var G__12060 = m;
  var G__12061 = n;
  var G__12062 = o;
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__12048, G__12049, G__12050, G__12051, G__12052, G__12053, G__12054, G__12055, G__12056, G__12057, G__12058, G__12059, G__12060, G__12061, G__12062) : target_fn.call(null, G__12048, G__12049, G__12050, G__12051, G__12052, G__12053, G__12054, G__12055, G__12056, G__12057, G__12058, G__12059, G__12060, G__12061, G__12062);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__12063 = a;
    var G__12064 = b;
    var G__12065 = c;
    var G__12066 = d;
    var G__12067 = e;
    var G__12068 = f;
    var G__12069 = g;
    var G__12070 = h;
    var G__12071 = i;
    var G__12072 = j;
    var G__12073 = k;
    var G__12074 = l;
    var G__12075 = m;
    var G__12076 = n;
    var G__12077 = o;
    var G__12078 = p;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__12063, G__12064, G__12065, G__12066, G__12067, G__12068, G__12069, G__12070, G__12071, G__12072, G__12073, G__12074, G__12075, G__12076, G__12077, G__12078) : self__.dispatch_fn.call(null, G__12063, G__12064, G__12065, G__12066, G__12067, G__12068, G__12069, G__12070, G__12071, G__12072, G__12073, G__12074, G__12075, G__12076, G__12077, G__12078);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__12079 = a;
  var G__12080 = b;
  var G__12081 = c;
  var G__12082 = d;
  var G__12083 = e;
  var G__12084 = f;
  var G__12085 = g;
  var G__12086 = h;
  var G__12087 = i;
  var G__12088 = j;
  var G__12089 = k;
  var G__12090 = l;
  var G__12091 = m;
  var G__12092 = n;
  var G__12093 = o;
  var G__12094 = p;
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__12079, G__12080, G__12081, G__12082, G__12083, G__12084, G__12085, G__12086, G__12087, G__12088, G__12089, G__12090, G__12091, G__12092, G__12093, G__12094) : target_fn.call(null, G__12079, G__12080, G__12081, G__12082, G__12083, G__12084, G__12085, G__12086, G__12087, G__12088, G__12089, G__12090, G__12091, G__12092, G__12093, G__12094);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__12095 = a;
    var G__12096 = b;
    var G__12097 = c;
    var G__12098 = d;
    var G__12099 = e;
    var G__12100 = f;
    var G__12101 = g;
    var G__12102 = h;
    var G__12103 = i;
    var G__12104 = j;
    var G__12105 = k;
    var G__12106 = l;
    var G__12107 = m;
    var G__12108 = n;
    var G__12109 = o;
    var G__12110 = p;
    var G__12111 = q;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__12095, G__12096, G__12097, G__12098, G__12099, G__12100, G__12101, G__12102, G__12103, G__12104, G__12105, G__12106, G__12107, G__12108, G__12109, G__12110, G__12111) : self__.dispatch_fn.call(null, G__12095, G__12096, G__12097, G__12098, G__12099, G__12100, G__12101, G__12102, G__12103, G__12104, G__12105, G__12106, G__12107, G__12108, G__12109, G__12110, G__12111);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__12112 = a;
  var G__12113 = b;
  var G__12114 = c;
  var G__12115 = d;
  var G__12116 = e;
  var G__12117 = f;
  var G__12118 = g;
  var G__12119 = h;
  var G__12120 = i;
  var G__12121 = j;
  var G__12122 = k;
  var G__12123 = l;
  var G__12124 = m;
  var G__12125 = n;
  var G__12126 = o;
  var G__12127 = p;
  var G__12128 = q;
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__12112, G__12113, G__12114, G__12115, G__12116, G__12117, G__12118, G__12119, G__12120, G__12121, G__12122, G__12123, G__12124, G__12125, G__12126, G__12127, G__12128) : target_fn.call(null, G__12112, G__12113, G__12114, G__12115, G__12116, G__12117, G__12118, G__12119, G__12120, G__12121, G__12122, G__12123, G__12124, G__12125, G__12126, G__12127, G__12128);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__12129 = a;
    var G__12130 = b;
    var G__12131 = c;
    var G__12132 = d;
    var G__12133 = e;
    var G__12134 = f;
    var G__12135 = g;
    var G__12136 = h;
    var G__12137 = i;
    var G__12138 = j;
    var G__12139 = k;
    var G__12140 = l;
    var G__12141 = m;
    var G__12142 = n;
    var G__12143 = o;
    var G__12144 = p;
    var G__12145 = q;
    var G__12146 = r;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__12129, G__12130, G__12131, G__12132, G__12133, G__12134, G__12135, G__12136, G__12137, G__12138, G__12139, G__12140, G__12141, G__12142, G__12143, G__12144, G__12145, G__12146) : self__.dispatch_fn.call(null, G__12129, G__12130, G__12131, G__12132, G__12133, G__12134, G__12135, G__12136, G__12137, G__12138, G__12139, G__12140, G__12141, G__12142, G__12143, G__12144, G__12145, G__12146);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__12147 = a;
  var G__12148 = b;
  var G__12149 = c;
  var G__12150 = d;
  var G__12151 = e;
  var G__12152 = f;
  var G__12153 = g;
  var G__12154 = h;
  var G__12155 = i;
  var G__12156 = j;
  var G__12157 = k;
  var G__12158 = l;
  var G__12159 = m;
  var G__12160 = n;
  var G__12161 = o;
  var G__12162 = p;
  var G__12163 = q;
  var G__12164 = r;
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__12147, G__12148, G__12149, G__12150, G__12151, G__12152, G__12153, G__12154, G__12155, G__12156, G__12157, G__12158, G__12159, G__12160, G__12161, G__12162, G__12163, G__12164) : target_fn.call(null, G__12147, G__12148, G__12149, G__12150, G__12151, G__12152, G__12153, G__12154, G__12155, G__12156, G__12157, G__12158, G__12159, G__12160, G__12161, G__12162, G__12163, G__12164);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__12165 = a;
    var G__12166 = b;
    var G__12167 = c;
    var G__12168 = d;
    var G__12169 = e;
    var G__12170 = f;
    var G__12171 = g;
    var G__12172 = h;
    var G__12173 = i;
    var G__12174 = j;
    var G__12175 = k;
    var G__12176 = l;
    var G__12177 = m;
    var G__12178 = n;
    var G__12179 = o;
    var G__12180 = p;
    var G__12181 = q;
    var G__12182 = r;
    var G__12183 = s;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__12165, G__12166, G__12167, G__12168, G__12169, G__12170, G__12171, G__12172, G__12173, G__12174, G__12175, G__12176, G__12177, G__12178, G__12179, G__12180, G__12181, G__12182, G__12183) : self__.dispatch_fn.call(null, G__12165, G__12166, G__12167, G__12168, G__12169, G__12170, G__12171, G__12172, G__12173, G__12174, G__12175, G__12176, G__12177, G__12178, G__12179, G__12180, G__12181, 
    G__12182, G__12183);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__12184 = a;
  var G__12185 = b;
  var G__12186 = c;
  var G__12187 = d;
  var G__12188 = e;
  var G__12189 = f;
  var G__12190 = g;
  var G__12191 = h;
  var G__12192 = i;
  var G__12193 = j;
  var G__12194 = k;
  var G__12195 = l;
  var G__12196 = m;
  var G__12197 = n;
  var G__12198 = o;
  var G__12199 = p;
  var G__12200 = q;
  var G__12201 = r;
  var G__12202 = s;
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__12184, G__12185, G__12186, G__12187, G__12188, G__12189, G__12190, G__12191, G__12192, G__12193, G__12194, G__12195, G__12196, G__12197, G__12198, G__12199, G__12200, G__12201, G__12202) : target_fn.call(null, G__12184, G__12185, G__12186, G__12187, G__12188, G__12189, G__12190, G__12191, G__12192, G__12193, G__12194, G__12195, G__12196, G__12197, G__12198, G__12199, G__12200, G__12201, G__12202);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__12203 = a;
    var G__12204 = b;
    var G__12205 = c;
    var G__12206 = d;
    var G__12207 = e;
    var G__12208 = f;
    var G__12209 = g;
    var G__12210 = h;
    var G__12211 = i;
    var G__12212 = j;
    var G__12213 = k;
    var G__12214 = l;
    var G__12215 = m;
    var G__12216 = n;
    var G__12217 = o;
    var G__12218 = p;
    var G__12219 = q;
    var G__12220 = r;
    var G__12221 = s;
    var G__12222 = t;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__12203, G__12204, G__12205, G__12206, G__12207, G__12208, G__12209, G__12210, G__12211, G__12212, G__12213, G__12214, G__12215, G__12216, G__12217, G__12218, G__12219, G__12220, G__12221, G__12222) : self__.dispatch_fn.call(null, G__12203, G__12204, G__12205, G__12206, G__12207, G__12208, G__12209, G__12210, G__12211, G__12212, G__12213, G__12214, G__12215, G__12216, G__12217, G__12218, 
    G__12219, G__12220, G__12221, G__12222);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__12223 = a;
  var G__12224 = b;
  var G__12225 = c;
  var G__12226 = d;
  var G__12227 = e;
  var G__12228 = f;
  var G__12229 = g;
  var G__12230 = h;
  var G__12231 = i;
  var G__12232 = j;
  var G__12233 = k;
  var G__12234 = l;
  var G__12235 = m;
  var G__12236 = n;
  var G__12237 = o;
  var G__12238 = p;
  var G__12239 = q;
  var G__12240 = r;
  var G__12241 = s;
  var G__12242 = t;
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__12223, G__12224, G__12225, G__12226, G__12227, G__12228, G__12229, G__12230, G__12231, G__12232, G__12233, G__12234, G__12235, G__12236, G__12237, G__12238, G__12239, G__12240, G__12241, G__12242) : target_fn.call(null, G__12223, G__12224, G__12225, G__12226, G__12227, G__12228, G__12229, G__12230, G__12231, G__12232, G__12233, G__12234, G__12235, G__12236, G__12237, G__12238, G__12239, G__12240, G__12241, 
  G__12242);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__12244 = self__.uuid;
  var G__12245 = other.uuid;
  return goog.array.defaultCompare(G__12244, G__12245);
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__12246 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([this$__$1], 0));
  return goog.string.hashCode(G__12246);
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#ExceptionInfo{:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error;
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function() {
  var cljs$core$ex_info = null;
  var cljs$core$ex_info__2 = function(msg, data) {
    return cljs$core$ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
  };
  var cljs$core$ex_info__3 = function(msg, data, cause) {
    return new cljs.core.ExceptionInfo(msg, data, cause);
  };
  cljs$core$ex_info = function(msg, data, cause) {
    switch(arguments.length) {
      case 2:
        return cljs$core$ex_info__2.call(this, msg, data);
      case 3:
        return cljs$core$ex_info__3.call(this, msg, data, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$ex_info.cljs$core$IFn$_invoke$arity$2 = cljs$core$ex_info__2;
  cljs$core$ex_info.cljs$core$IFn$_invoke$arity$3 = cljs$core$ex_info__3;
  return cljs$core$ex_info;
}();
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(function() {
      var G__12254 = x;
      var G__12255 = y;
      return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__12254, G__12255) : pred.call(null, G__12254, G__12255);
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(function() {
        var G__12256 = y;
        var G__12257 = x;
        return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__12256, G__12257) : pred.call(null, G__12256, G__12257);
      }())) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
goog.provide("com.cognitect.transit.util");
goog.require("goog.object");
goog.scope(function() {
  var util = com.cognitect.transit.util, gobject = goog.object;
  if (typeof Object.keys != "undefined") {
    util.objectKeys = function(obj) {
      return Object.keys(obj);
    };
  } else {
    util.objectKeys = function(obj) {
      return gobject.getKeys(obj);
    };
  }
  if (typeof Array.isArray != "undefined") {
    util.isArray = function(obj) {
      return Array.isArray(obj);
    };
  } else {
    util.isArray = function(obj) {
      return goog.typeOf(obj) === "array";
    };
  }
  util.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x3d";
  util.randInt = function(ub) {
    return Math.round(Math.random() * ub);
  };
  util.randHex = function() {
    return util.randInt(15).toString(16);
  };
  util.randomUUID = function() {
    var rhex = (8 | 3 & util.randInt(14)).toString(16), ret = util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + "4" + util.randHex() + util.randHex() + util.randHex() + "-" + rhex + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + 
    util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex();
    return ret;
  };
  util.btoa = function(input) {
    if (typeof btoa != "undefined") {
      return btoa(input);
    } else {
      var str = String(input);
      for (var block, charCode, idx = 0, map = util.chars, output = "";str.charAt(idx | 0) || (map = "\x3d", idx % 1);output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
        charCode = str.charCodeAt(idx += 3 / 4);
        if (charCode > 255) {
          throw new Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
        }
        block = block << 8 | charCode;
      }
      return output;
    }
  };
  util.atob = function(input) {
    if (typeof atob != "undefined") {
      return atob(input);
    } else {
      var str = String(input).replace(/=+$/, "");
      if (str.length % 4 == 1) {
        throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
      }
      for (var bc = 0, bs, buffer, idx = 0, output = "";buffer = str.charAt(idx++);~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
        buffer = util.chars.indexOf(buffer);
      }
      return output;
    }
  };
  util.Uint8ToBase64 = function(u8Arr) {
    var CHUNK_SIZE = 32768, index = 0, length = u8Arr.length, result = "", slice = null;
    while (index < length) {
      slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));
      result += String.fromCharCode.apply(null, slice);
      index += CHUNK_SIZE;
    }
    return util.btoa(result);
  };
  util.Base64ToUint8 = function(base64) {
    var binary_string = util.atob(base64), len = binary_string.length, bytes = new Uint8Array(len);
    for (var i = 0;i < len;i++) {
      var ascii = binary_string.charCodeAt(i);
      bytes[i] = ascii;
    }
    return bytes;
  };
});
goog.provide("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.util");
goog.scope(function() {
  var eq = com.cognitect.transit.eq, util = com.cognitect.transit.util;
  eq.hashCodeProperty = "transit$hashCode$";
  eq.hashCodeCounter = 1;
  eq.equals = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      if (x === y) {
        return true;
      } else {
        if (typeof x === "object") {
          if (util.isArray(x)) {
            if (util.isArray(y)) {
              if (x.length === y.length) {
                for (var i = 0;i < x.length;i++) {
                  if (!eq.equals(x[i], y[i])) {
                    return false;
                  }
                }
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          } else {
            if (x.com$cognitect$transit$equals) {
              return x.com$cognitect$transit$equals(y);
            } else {
              if (y != null && typeof y === "object") {
                if (y.com$cognitect$transit$equals) {
                  return y.com$cognitect$transit$equals(x);
                } else {
                  var xklen = 0, yklen = util.objectKeys(y).length;
                  for (var p in x) {
                    if (!x.hasOwnProperty(p)) {
                      continue;
                    }
                    xklen++;
                    if (!y.hasOwnProperty(p)) {
                      return false;
                    } else {
                      if (!eq.equals(x[p], y[p])) {
                        return false;
                      }
                    }
                  }
                  return xklen === yklen;
                }
              } else {
                return false;
              }
            }
          }
        } else {
          return false;
        }
      }
    }
  };
  eq.hashCombine = function(seed, hash) {
    return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
  };
  eq.stringCodeCache = {};
  eq.stringCodeCacheSize = 0;
  eq.STR_CACHE_MAX = 256;
  eq.hashString = function(str) {
    var cached = eq.stringCodeCache[str];
    if (cached != null) {
      return cached;
    }
    var code = 0;
    for (var i = 0;i < str.length;++i) {
      code = 31 * code + str.charCodeAt(i);
      code %= 4294967296;
    }
    eq.stringCodeCacheSize++;
    if (eq.stringCodeCacheSize >= eq.STR_CACHE_MAX) {
      eq.stringCodeCache = {};
      eq.stringCodeCacheSize = 1;
    }
    eq.stringCodeCache[str] = code;
    return code;
  };
  eq.hashMapLike = function(m) {
    var code = 0;
    if (m.forEach != null) {
      m.forEach(function(val, key, m) {
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      });
    } else {
      var keys = util.objectKeys(m);
      for (var i = 0;i < keys.length;i++) {
        var key = keys[i];
        var val = m[key];
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      }
    }
    return code;
  };
  eq.hashArrayLike = function(arr) {
    var code = 0;
    if (util.isArray(arr)) {
      for (var i = 0;i < arr.length;i++) {
        code = eq.hashCombine(code, eq.hashCode(arr[i]));
      }
    } else {
      if (arr.forEach) {
        arr.forEach(function(x, i) {
          code = eq.hashCombine(code, eq.hashCode(x));
        });
      }
    }
    return code;
  };
  eq.hashCode = function(x) {
    if (x == null) {
      return 0;
    } else {
      switch(typeof x) {
        case "number":
          return x;
          break;
        case "boolean":
          return x === true ? 1 : 0;
          break;
        case "string":
          return eq.hashString(x);
          break;
        case "function":
          var code = x[eq.hashCodeProperty];
          if (code) {
            return code;
          } else {
            code = eq.hashCodeCounter;
            if (typeof Object.defineProperty != "undefined") {
              Object.defineProperty(x, eq.hashCodeProperty, {value:code, enumerable:false});
            } else {
              x[eq.hashCodeProperty] = code;
            }
            eq.hashCodeCounter++;
            return code;
          }
          break;
        default:
          if (x instanceof Date) {
            return x.valueOf();
          } else {
            if (util.isArray(x)) {
              return eq.hashArrayLike(x);
            }
          }
          if (x.com$cognitect$transit$hashCode) {
            return x.com$cognitect$transit$hashCode();
          } else {
            return eq.hashMapLike(x);
          }
          break;
      }
    }
  };
  eq.extendToEQ = function(obj, opts) {
    obj.com$cognitect$transit$hashCode = opts["hashCode"];
    obj.com$cognitect$transit$equals = opts["equals"];
    return obj;
  };
});
goog.provide("goog.math.Long");
goog.math.Long = function(low, high) {
  this.low_ = low | 0;
  this.high_ = high | 0;
};
goog.math.Long.IntCache_ = {};
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Long.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }
  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
};
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Long.ZERO;
  } else {
    if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
        return goog.math.Long.MAX_VALUE;
      } else {
        if (value < 0) {
          return goog.math.Long.fromNumber(-value).negate();
        } else {
          return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
        }
      }
    }
  }
};
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Long.ZERO;
  for (var i = 0;i < str.length;i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
goog.math.Long.ZERO = goog.math.Long.fromInt(0);
goog.math.Long.ONE = goog.math.Long.fromInt(1);
goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
goog.math.Long.MAX_VALUE = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 2147483648 | 0);
goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
};
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  }
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31;bit > 0;bit--) {
      if ((val & 1 << bit) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};
goog.math.Long.prototype.isOdd = function() {
  return(this.low_ & 1) == 1;
};
goog.math.Long.prototype.equals = function(other) {
  return this.high_ == other.high_ && this.low_ == other.low_;
};
goog.math.Long.prototype.notEquals = function(other) {
  return this.high_ != other.high_ || this.low_ != other.low_;
};
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }
  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return-1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }
  if (this.subtract(other).isNegative()) {
    return-1;
  } else {
    return 1;
  }
};
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return goog.math.Long.MIN_VALUE;
  } else {
    return this.not().add(goog.math.Long.ONE);
  }
};
goog.math.Long.prototype.add = function(other) {
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.ZERO;
  } else {
    if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Long.TWO_PWR_24_) && other.lessThan(goog.math.Long.TWO_PWR_24_)) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error("division by zero");
  } else {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    if (other.equals(goog.math.Long.ONE) || other.equals(goog.math.Long.NEG_ONE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    }
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
  }
  var res = goog.math.Long.ZERO;
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.ONE;
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
};
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
};
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
};
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
    } else {
      return goog.math.Long.fromBits(0, low << numBits - 32);
    }
  }
};
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
    } else {
      return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
    }
  }
};
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
    } else {
      if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> numBits - 32, 0);
      }
    }
  }
};
goog.provide("com.cognitect.transit.types");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
goog.scope(function() {
  var types = com.cognitect.transit.types, util = com.cognitect.transit.util, eq = com.cognitect.transit.eq, Long = goog.math.Long;
  types.TaggedValue = function(tag, rep) {
    this.tag = tag;
    this.rep = rep;
    this.hashCode = -1;
  };
  types.TaggedValue.prototype.toString = function() {
    return "[TaggedValue: " + this.tag + ", " + this.rep + "]";
  };
  types.TaggedValue.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.TaggedValue.prototype["equiv"] = types.TaggedValue.prototype.equiv;
  types.TaggedValue.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TaggedValue) {
      return this.tag === other.tag && eq.equals(this.rep, other.rep);
    } else {
      return false;
    }
  };
  types.TaggedValue.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCombine(eq.hashCode(this.tag), eq.hashCode(this.rep));
    }
    return this.hashCode;
  };
  types.taggedValue = function(tag, rep) {
    return new types.TaggedValue(tag, rep);
  };
  types.isTaggedValue = function(x) {
    return x instanceof types.TaggedValue;
  };
  types.nullValue = function() {
    return null;
  };
  types.boolValue = function(s) {
    return s === "t";
  };
  types.MAX_INT = Long.fromString("9007199254740992");
  types.MIN_INT = Long.fromString("-9007199254740992");
  types.intValue = function(s) {
    if (typeof s === "number") {
      return s;
    } else {
      if (s instanceof Long) {
        return s;
      } else {
        var n = Long.fromString(s, 10);
        if (n.greaterThan(types.MAX_INT) || n.lessThan(types.MIN_INT)) {
          return n;
        } else {
          return n.toNumber();
        }
      }
    }
  };
  Long.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  Long.prototype["equiv"] = Long.prototype.equiv;
  Long.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof Long && this.equals(other);
  };
  Long.prototype.com$cognitect$transit$hashCode = function() {
    return this.toInt();
  };
  types.isInteger = function(x) {
    if (x instanceof Long) {
      return true;
    } else {
      return typeof x === "number" && !isNaN(x) && !(x === Infinity) && parseFloat(x) === parseInt(x);
    }
  };
  types.floatValue = function(s) {
    return parseFloat(s);
  };
  types.bigInteger = function(s) {
    return types.taggedValue("n", s);
  };
  types.isBigInteger = function(x) {
    return x instanceof types.TaggedValue && x.tag === "n";
  };
  types.bigDecimalValue = function(s) {
    return types.taggedValue("f", s);
  };
  types.isBigDecimal = function(x) {
    return x instanceof types.TaggedValue && x.tag === "f";
  };
  types.charValue = function(s) {
    return s;
  };
  types.Keyword = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Keyword.prototype.toString = function() {
    return ":" + this.name;
  };
  types.Keyword.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Keyword.prototype["equiv"] = types.Keyword.prototype.equiv;
  types.Keyword.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Keyword && this.name == other.name;
  };
  types.Keyword.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.keyword = function(s) {
    return new types.Keyword(s);
  };
  types.isKeyword = function(x) {
    return x instanceof types.Keyword;
  };
  types.Symbol = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Symbol.prototype.toString = function() {
    return "[Symbol: " + this.name + "]";
  };
  types.Symbol.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Symbol.prototype["equiv"] = types.Symbol.prototype.equiv;
  types.Symbol.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Symbol && this.name == other.name;
  };
  types.Symbol.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.symbol = function(s) {
    return new types.Symbol(s);
  };
  types.isSymbol = function(x) {
    return x instanceof types.Symbol;
  };
  types.hexFor = function(aLong, sidx, eidx) {
    var ret = "", eidx = eidx || sidx + 1;
    for (var i = sidx, shift = (7 - i) * 8, mask = Long.fromInt(255).shiftLeft(shift);i < eidx;i++, shift -= 8, mask = mask.shiftRightUnsigned(8)) {
      var s = aLong.and(mask).shiftRightUnsigned(shift).toString(16);
      if (s.length == 1) {
        s = "0" + s;
      }
      ret += s;
    }
    return ret;
  };
  types.UUID = function(high, low) {
    this.high = high;
    this.low = low;
    this.hashCode = -1;
  };
  types.UUID.prototype.getLeastSignificantBits = function() {
    return this.low;
  };
  types.UUID.prototype.getMostSignificantBits = function() {
    return this.high;
  };
  types.UUID.prototype.toString = function(s) {
    var s = "", hi64 = this.high, lo64 = this.low;
    s += types.hexFor(hi64, 0, 4) + "-";
    s += types.hexFor(hi64, 4, 6) + "-";
    s += types.hexFor(hi64, 6, 8) + "-";
    s += types.hexFor(lo64, 0, 2) + "-";
    s += types.hexFor(lo64, 2, 8);
    return s;
  };
  types.UUID.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.UUID.prototype["equiv"] = types.UUID.prototype.equiv;
  types.UUID.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.UUID && this.high.equals(other.high) && this.low.equals(other.low);
  };
  types.UUID.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.toString());
    }
    return this.hashCode;
  };
  types.UUIDfromString = function uuidFromString(s) {
    var s = s.replace(/-/g, ""), hi64 = null, lo64 = null, hi32 = 0, lo32 = 0, off = 24, i = 0;
    for (hi32 = 0, i = 0, off = 24;i < 8;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 8, off = 24;i < 16;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    hi64 = Long.fromBits(lo32, hi32);
    for (hi32 = 0, i = 16, off = 24;i < 24;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 24, off = 24;i < 32;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    lo64 = Long.fromBits(lo32, hi32);
    return new types.UUID(hi64, lo64);
  };
  types.uuid = function(s) {
    return types.UUIDfromString(s);
  };
  types.isUUID = function(x) {
    return x instanceof types.UUID;
  };
  types.date = function(s) {
    s = typeof s === "number" ? s : parseInt(s, 10);
    return new Date(s);
  };
  types.verboseDate = function(s) {
    return new Date(s);
  };
  Date.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof Date) {
      return this.valueOf() === other.valueOf();
    } else {
      return false;
    }
  };
  Date.prototype.com$cognitect$transit$hashCode = function() {
    return this.valueOf();
  };
  types.binary = function(str, decoder) {
    if ((!decoder || decoder.preferBuffers !== false) && typeof Buffer != "undefined") {
      return new Buffer(str, "base64");
    } else {
      if (typeof Uint8Array != "undefined") {
        return util.Base64ToUint8(str);
      } else {
        return types.taggedValue("b", str);
      }
    }
  };
  types.isBinary = function(x) {
    if (typeof Buffer != "undefined" && x instanceof Buffer) {
      return true;
    } else {
      if (typeof Uint8Array != "undefined" && x instanceof Uint8Array) {
        return true;
      } else {
        return x instanceof types.TaggedValue && x.tag === "b";
      }
    }
  };
  types.uri = function(s) {
    return types.taggedValue("r", s);
  };
  types.isURI = function(x) {
    return x instanceof types.TaggedValue && x.tag === "r";
  };
  types.KEYS = 0;
  types.VALUES = 1;
  types.ENTRIES = 2;
  types.TransitArrayMapIterator = function(entries, type) {
    this.entries = entries;
    this.type = type || types.KEYS;
    this.idx = 0;
  };
  types.TransitArrayMapIterator.prototype.next = function(map, type) {
    if (this.idx < this.entries.length) {
      var value = null;
      if (this.type === types.KEYS) {
        value = this.entries[this.idx];
      } else {
        if (this.type === types.VALUES) {
          value = this.entries[this.idx + 1];
        } else {
          value = [this.entries[this.idx], this.entries[this.idx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx += 2;
      return ret;
    } else {
      return{"value":null, "done":true};
    }
  };
  types.TransitArrayMapIterator.prototype["next"] = types.TransitArrayMapIterator.prototype.next;
  types.TransitMapIterator = function(map, type) {
    this.map = map;
    this.type = type || types.KEYS;
    this.keys = this.map.getKeys();
    this.idx = 0;
    this.bucket = null;
    this.bucketIdx = 0;
  };
  types.TransitMapIterator.prototype.next = function() {
    if (this.idx < this.map.size) {
      if (this.bucket == null || !(this.bucketIdx < this.bucket.length)) {
        this.bucket = this.map.map[this.keys[this.idx]];
        this.bucketIdx = 0;
      }
      var value = null;
      if (this.type === types.KEYS) {
        value = this.bucket[this.bucketIdx];
      } else {
        if (this.type === types.VALUES) {
          value = this.bucket[this.bucketIdx + 1];
        } else {
          value = [this.bucket[this.bucketIdx], this.bucket[this.bucketIdx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx++;
      this.bucketIdx += 2;
      return ret;
    } else {
      return{"value":null, "done":true};
    }
  };
  types.TransitMapIterator.prototype["next"] = types.TransitMapIterator.prototype.next;
  types.mapEquals = function(me, you) {
    if ((you instanceof types.TransitMap || you instanceof types.TransitArrayMap) && me.size === you.size) {
      for (var code in me.map) {
        var bucket = me.map[code];
        for (var j = 0;j < bucket.length;j += 2) {
          if (!eq.equals(bucket[j + 1], you.get(bucket[j]))) {
            return false;
          }
        }
      }
      return true;
    } else {
      if (you != null && typeof you === "object") {
        var ks = util.objectKeys(you), kslen = ks.length;
        if (me.size === kslen) {
          for (var i = 0;i < kslen;i++) {
            var k = ks[i];
            if (!me.has(k) || !eq.equals(you[k], me.get(k))) {
              return false;
            }
          }
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  };
  types.SMALL_ARRAY_MAP_THRESHOLD = 8;
  types.ARRAY_MAP_THRESHOLD = 32;
  types.ARRAY_MAP_ACCESS_THRESHOLD = 32;
  types.TransitArrayMap = function(entries) {
    this._entries = entries;
    this.backingMap = null;
    this.hashCode = -1;
    this.size = entries.length / 2;
    this.accesses = 0;
  };
  types.TransitArrayMap.prototype.toString = function() {
    return "[TransitArrayMap]";
  };
  types.TransitArrayMap.prototype.convert = function() {
    if (this.backingMap) {
      throw Error("Invalid operation, already converted");
    }
    if (this.size < types.SMALL_ARRAY_MAP_THRESHOLD) {
      return false;
    }
    this.accesses++;
    if (this.accesses > types.ARRAY_MAP_ACCESS_THRESHOLD) {
      this.backingMap = types.map(this._entries, false, true);
      this._entries = [];
      return true;
    } else {
      return false;
    }
  };
  types.TransitArrayMap.prototype.clear = function() {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.clear();
      this.size = 0;
    } else {
      this._entries = [];
      this.size = 0;
    }
  };
  types.TransitArrayMap.prototype["clear"] = types.TransitArrayMap.prototype.clear;
  types.TransitArrayMap.prototype.keys = function() {
    if (this.backingMap) {
      return this.backingMap.keys();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.KEYS);
    }
  };
  types.TransitArrayMap.prototype["keys"] = types.TransitArrayMap.prototype.keys;
  types.TransitArrayMap.prototype.keySet = function() {
    if (this.backingMap) {
      return this.backingMap.keySet();
    } else {
      var ret = [];
      for (var i = 0, j = 0;j < this._entries.length;i++, j += 2) {
        ret[i] = this._entries[j];
      }
      return ret;
    }
  };
  types.TransitArrayMap.prototype["keySet"] = types.TransitArrayMap.prototype.keySet;
  types.TransitArrayMap.prototype.entries = function() {
    if (this.backingMap) {
      return this.backingMap.entries();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.ENTRIES);
    }
  };
  types.TransitArrayMap.prototype["entries"] = types.TransitArrayMap.prototype.entries;
  types.TransitArrayMap.prototype.values = function() {
    if (this.backingMap) {
      return this.backingMap.values();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.VALUES);
    }
  };
  types.TransitArrayMap.prototype["values"] = types.TransitArrayMap.prototype.values;
  types.TransitArrayMap.prototype.forEach = function(f) {
    if (this.backingMap) {
      this.backingMap.forEach(f);
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        f(this._entries[i + 1], this._entries[i]);
      }
    }
  };
  types.TransitArrayMap.prototype["forEach"] = types.TransitArrayMap.prototype.forEach;
  types.TransitArrayMap.prototype.get = function(k, notFound) {
    if (this.backingMap) {
      return this.backingMap.get(k);
    } else {
      if (this.convert()) {
        return this.get(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return this._entries[i + 1];
          }
        }
        return notFound;
      }
    }
  };
  types.TransitArrayMap.prototype["get"] = types.TransitArrayMap.prototype.get;
  types.TransitArrayMap.prototype.has = function(k) {
    if (this.backingMap) {
      return this.backingMap.has(k);
    } else {
      if (this.convert()) {
        return this.has(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return true;
          }
        }
        return false;
      }
    }
  };
  types.TransitArrayMap.prototype["has"] = types.TransitArrayMap.prototype.has;
  types.TransitArrayMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.set(k, v);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries[i + 1] = v;
          return;
        }
      }
      this._entries.push(k);
      this._entries.push(v);
      this.size++;
      if (this.size > types.ARRAY_MAP_THRESHOLD) {
        this.backingMap = types.map(this._entries, false, true);
        this._entries = null;
      }
    }
  };
  types.TransitArrayMap.prototype["set"] = types.TransitArrayMap.prototype.set;
  types.TransitArrayMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap["delete"](k);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries.splice(i, 2);
          this.size--;
          return;
        }
      }
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.backingMap) {
      return this.backingMap.com$cognitect$transit$hashCode();
    } else {
      if (this.hashCode === -1) {
        this.hashCode = eq.hashMapLike(this);
      }
      return this.hashCode;
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$equals = function(other) {
    if (this.backingMap) {
      return types.mapEquals(this.backingMap, other);
    } else {
      return types.mapEquals(this, other);
    }
  };
  types.TransitMap = function(keys, map, size) {
    this.map = map || {};
    this._keys = keys || [];
    this.size = size || 0;
    this.hashCode = -1;
  };
  types.TransitMap.prototype.toString = function() {
    return "[TransitMap]";
  };
  types.TransitMap.prototype.clear = function() {
    this.hashCode = -1;
    this.map = {};
    this._keys = [];
    this.size = 0;
  };
  types.TransitMap.prototype["clear"] = types.TransitMap.prototype.clear;
  types.TransitMap.prototype.getKeys = function() {
    if (this._keys != null) {
      return this._keys;
    } else {
      return util.objectKeys(this.map);
    }
  };
  types.TransitMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    this._keys = null;
    var code = eq.hashCode(k), bucket = this.map[code];
    for (var i = 0;i < bucket.length;i += 2) {
      if (eq.equals(k, bucket[i])) {
        bucket.splice(i, 2);
        if (bucket.length === 0) {
          delete this.map[code];
        }
        this.size--;
        break;
      }
    }
  };
  types.TransitMap.prototype.entries = function() {
    return new types.TransitMapIterator(this, types.ENTRIES);
  };
  types.TransitMap.prototype["entries"] = types.TransitMap.prototype.entries;
  types.TransitMap.prototype.forEach = function(callback) {
    var ks = this.getKeys();
    for (var i = 0;i < ks.length;i++) {
      var bucket = this.map[ks[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        callback(bucket[j + 1], bucket[j], this);
      }
    }
  };
  types.TransitMap.prototype["forEach"] = types.TransitMap.prototype.forEach;
  types.TransitMap.prototype.get = function(k, notFound) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return bucket[i + 1];
        }
      }
    } else {
      return notFound;
    }
  };
  types.TransitMap.prototype["get"] = types.TransitMap.prototype.get;
  types.TransitMap.prototype.has = function(k) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return true;
        }
      }
      return false;
    } else {
      return false;
    }
  };
  types.TransitMap.prototype["has"] = types.TransitMap.prototype.has;
  types.TransitMap.prototype.keys = function() {
    return new types.TransitMapIterator(this, types.KEYS);
  };
  types.TransitMap.prototype["keys"] = types.TransitMap.prototype.keys;
  types.TransitMap.prototype.keySet = function() {
    var keys = this.getKeys(), ret = [];
    for (var i = 0;i < keys.length;i++) {
      var bucket = this.map[keys[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        ret.push(bucket[j]);
      }
    }
    return ret;
  };
  types.TransitMap.prototype["keySet"] = types.TransitMap.prototype.keySet;
  types.TransitMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket == null) {
      if (this._keys) {
        this._keys.push(code);
      }
      this.map[code] = [k, v];
      this.size++;
    } else {
      var newEntry = true;
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(v, bucket[i])) {
          newEntry = false;
          bucket[i] = v;
          break;
        }
      }
      if (newEntry) {
        bucket.push(k);
        bucket.push(v);
        this.size++;
      }
    }
  };
  types.TransitMap.prototype["set"] = types.TransitMap.prototype.set;
  types.TransitMap.prototype.values = function() {
    return new types.TransitMapIterator(this, types.VALUES);
  };
  types.TransitMap.prototype["values"] = types.TransitMap.prototype.values;
  types.TransitMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashMapLike(this);
    }
    return this.hashCode;
  };
  types.TransitMap.prototype.com$cognitect$transit$equals = function(other) {
    return types.mapEquals(this, other);
  };
  types.map = function(arr, checkDups, hashMap) {
    arr = arr || [];
    checkDups = checkDups === false ? checkDups : true;
    hashMap = hashMap === true ? hashMap : false;
    if (!hashMap && arr.length <= types.ARRAY_MAP_THRESHOLD * 2) {
      if (checkDups) {
        var t = arr;
        arr = [];
        for (var i = 0;i < t.length;i += 2) {
          var seen = false;
          for (var j = 0;j < arr.length;j += 2) {
            if (eq.equals(arr[j], t[i])) {
              arr[j + 1] = t[i + 1];
              seen = true;
              break;
            }
          }
          if (!seen) {
            arr.push(t[i]);
            arr.push(t[i + 1]);
          }
        }
      }
      return new types.TransitArrayMap(arr);
    } else {
      var map = {}, keys = [], size = 0;
      for (var i = 0;i < arr.length;i += 2) {
        var code = eq.hashCode(arr[i]), bucket = map[code];
        if (bucket == null) {
          keys.push(code);
          map[code] = [arr[i], arr[i + 1]];
          size++;
        } else {
          var newEntry = true;
          for (var j = 0;j < bucket.length;j += 2) {
            if (eq.equals(bucket[j], arr[i])) {
              bucket[j + 1] = arr[i + 1];
              newEntry = false;
              break;
            }
          }
          if (newEntry) {
            bucket.push(arr[i]);
            bucket.push(arr[i + 1]);
            size++;
          }
        }
      }
      return new types.TransitMap(keys, map, size);
    }
  };
  types.isArrayMap = function(x) {
    return x instanceof types.TransitArrayMap;
  };
  types.isMap = function(x) {
    return x instanceof types.TransitArrayMap || x instanceof types.TransitMap;
  };
  types.TransitSet = function(map) {
    this.map = map;
    this.size = map.size;
  };
  types.TransitSet.prototype.toString = function() {
    return "[TransitSet]";
  };
  types.TransitSet.prototype.add = function(value) {
    this.map.set(value, value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype["add"] = types.TransitSet.prototype.add;
  types.TransitSet.prototype.clear = function() {
    this.map = new types.TransitMap;
    this.size = 0;
  };
  types.TransitSet.prototype["clear"] = types.TransitSet.prototype.clear;
  types.TransitSet.prototype["delete"] = function(value) {
    this.map["delete"](value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype.entries = function() {
    return this.map.entries();
  };
  types.TransitSet.prototype["entries"] = types.TransitSet.prototype.entries;
  types.TransitSet.prototype.forEach = function(iterator, thisArg) {
    var self = this;
    this.map.forEach(function(v, k, m) {
      iterator(k, self);
    });
  };
  types.TransitSet.prototype["forEach"] = types.TransitSet.prototype.forEach;
  types.TransitSet.prototype.has = function(value) {
    return this.map.has(value);
  };
  types.TransitSet.prototype["has"] = types.TransitSet.prototype.has;
  types.TransitSet.prototype.keys = function() {
    return this.map.keys();
  };
  types.TransitSet.prototype["keys"] = types.TransitSet.prototype.keys;
  types.TransitSet.prototype.keySet = function() {
    return this.map.keySet();
  };
  types.TransitSet.prototype["keySet"] = types.TransitSet.prototype.keySet;
  types.TransitSet.prototype.values = function() {
    return this.map.values();
  };
  types.TransitSet.prototype["values"] = types.TransitSet.prototype.values;
  types.TransitSet.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TransitSet) {
      if (this.size === other.size) {
        return eq.equals(this.map, other.map);
      }
    } else {
      return false;
    }
  };
  types.TransitSet.prototype.com$cognitect$transit$hashCode = function(other) {
    return eq.hashCode(this.map);
  };
  types.set = function(arr) {
    arr = arr || [];
    var map = {}, keys = [], size = 0;
    for (var i = 0;i < arr.length;i++) {
      var code = eq.hashCode(arr[i]), vals = map[code];
      if (vals == null) {
        keys.push(code);
        map[code] = [arr[i], arr[i]];
        size++;
      } else {
        var newEntry = true;
        for (var j = 0;j < vals.length;j += 2) {
          if (eq.equals(vals[j], arr[i])) {
            newEntry = false;
            break;
          }
        }
        if (newEntry) {
          vals.push(arr[i]);
          vals.push(arr[i]);
          size++;
        }
      }
    }
    return new types.TransitSet(new types.TransitMap(keys, map, size));
  };
  types.isSet = function(x) {
    return x instanceof types.TransitSet;
  };
  types.quoted = function(obj) {
    return types.taggedValue("'", obj);
  };
  types.isQuoted = function(x) {
    return x instanceof types.TaggedValue && x.tag === "'";
  };
  types.list = function(xs) {
    return types.taggedValue("list", xs);
  };
  types.isList = function(x) {
    return x instanceof types.List && x.tag === "list";
  };
  types.link = function(rep) {
    return types.taggedValue("link", rep);
  };
  types.isLink = function(x) {
    return x instanceof types.TaggedValue && x.tag === "link";
  };
  types.specialDouble = function(v) {
    switch(v) {
      case "-INF":
        return-Infinity;
      case "INF":
        return Infinity;
      case "NaN":
        return NaN;
      default:
        throw new Error("Invalid special double value " + v);break;
    }
  };
});
goog.provide("com.cognitect.transit.delimiters");
goog.scope(function() {
  var delimiters = com.cognitect.transit.delimiters;
  delimiters.ESC = "~";
  delimiters.TAG = "#";
  delimiters.SUB = "^";
  delimiters.RES = "`";
  delimiters.ESC_TAG = "~#";
});
goog.provide("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.delimiters");
goog.scope(function() {
  var caching = com.cognitect.transit.caching, d = com.cognitect.transit.delimiters;
  caching.MIN_SIZE_CACHEABLE = 3;
  caching.BASE_CHAR_IDX = 48;
  caching.CACHE_CODE_DIGITS = 44;
  caching.MAX_CACHE_ENTRIES = caching.CACHE_CODE_DIGITS * caching.CACHE_CODE_DIGITS;
  caching.MAX_CACHE_SIZE = 4096;
  caching.isCacheable = function(string, asMapKey) {
    if (string.length > caching.MIN_SIZE_CACHEABLE) {
      if (asMapKey) {
        return true;
      } else {
        var c0 = string.charAt(0), c1 = string.charAt(1);
        if (c0 === d.ESC) {
          return c1 === ":" || c1 === "$" || c1 === "#";
        } else {
          return false;
        }
      }
    } else {
      return false;
    }
  };
  caching.idxToCode = function(idx) {
    var hi = Math.floor(idx / caching.CACHE_CODE_DIGITS), lo = idx % caching.CACHE_CODE_DIGITS, loc = String.fromCharCode(lo + caching.BASE_CHAR_IDX);
    if (hi === 0) {
      return d.SUB + loc;
    } else {
      return d.SUB + String.fromCharCode(hi + caching.BASE_CHAR_IDX) + loc;
    }
  };
  caching.WriteCache = function() {
    this.idx = 0;
    this.gen = 0;
    this.cacheSize = 0;
    this.cache = {};
  };
  caching.WriteCache.prototype.write = function(string, asMapKey) {
    if (caching.isCacheable(string, asMapKey)) {
      if (this.cacheSize === caching.MAX_CACHE_SIZE) {
        this.clear();
        this.gen = 0;
        this.cache = {};
      } else {
        if (this.idx === caching.MAX_CACHE_ENTRIES) {
          this.clear();
        }
      }
      var entry = this.cache[string];
      if (entry == null) {
        this.cache[string] = [caching.idxToCode(this.idx), this.gen];
        this.idx++;
        return string;
      } else {
        if (entry[1] != this.gen) {
          entry[1] = this.gen;
          entry[0] = caching.idxToCode(this.idx);
          this.idx++;
          return string;
        } else {
          return entry[0];
        }
      }
    } else {
      return string;
    }
  };
  caching.WriteCache.prototype.clear = function() {
    this.idx = 0;
    this.gen++;
  };
  caching.writeCache = function() {
    return new caching.WriteCache;
  };
  caching.isCacheCode = function(string) {
    return string.charAt(0) === d.SUB && string.charAt(1) !== " ";
  };
  caching.codeToIdx = function(code) {
    if (code.length === 2) {
      return code.charCodeAt(1) - caching.BASE_CHAR_IDX;
    } else {
      var hi = (code.charCodeAt(1) - caching.BASE_CHAR_IDX) * caching.CACHE_CODE_DIGITS, lo = code.charCodeAt(2) - caching.BASE_CHAR_IDX;
      return hi + lo;
    }
  };
  caching.ReadCache = function() {
    this.idx = 0;
    this.cache = [];
  };
  caching.ReadCache.prototype.write = function(obj, asMapKey) {
    if (this.idx == caching.MAX_CACHE_ENTRIES) {
      this.idx = 0;
    }
    this.cache[this.idx] = obj;
    this.idx++;
    return obj;
  };
  caching.ReadCache.prototype.read = function(string, asMapKey) {
    return this.cache[caching.codeToIdx(string)];
  };
  caching.ReadCache.prototype.clear = function() {
    this.idx = 0;
  };
  caching.readCache = function() {
    return new caching.ReadCache;
  };
});
goog.provide("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.delimiters");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.types");
goog.scope(function() {
  var decoder = com.cognitect.transit.impl.decoder, util = com.cognitect.transit.util, d = com.cognitect.transit.delimiters, caching = com.cognitect.transit.caching, types = com.cognitect.transit.types;
  decoder.Tag = function(s) {
    this.str = s;
  };
  decoder.tag = function(s) {
    return new decoder.Tag(s);
  };
  decoder.isTag = function(x) {
    return x && x instanceof decoder.Tag;
  };
  decoder.isGroundHandler = function(handler) {
    switch(handler) {
      case "_":
      ;
      case "s":
      ;
      case "?":
      ;
      case "i":
      ;
      case "d":
      ;
      case "b":
      ;
      case "'":
      ;
      case "array":
      ;
      case "map":
        return true;
    }
    return false;
  };
  decoder.Decoder = function(options) {
    this.options = options || {};
    this.handlers = {};
    for (var h in this.defaults.handlers) {
      this.handlers[h] = this.defaults.handlers[h];
    }
    for (var h in this.options["handlers"]) {
      if (decoder.isGroundHandler(h)) {
        throw new Error('Cannot override handler for ground type "' + h + '"');
      }
      this.handlers[h] = this.options["handlers"][h];
    }
    this.preferStrings = this.options["preferStrings"] != null ? this.options["preferStrings"] : this.defaults.preferStrings;
    this.preferBuffers = this.options["preferBuffers"] != null ? this.options["preferBuffers"] : this.defaults.preferBuffers;
    this.defaultHandler = this.options["defaultHandler"] || this.defaults.defaultHandler;
    this.mapBuilder = this.options["mapBuilder"];
    this.arrayBuilder = this.options["arrayBuilder"];
  };
  decoder.Decoder.prototype.defaults = {handlers:{"_":function(v, d) {
    return types.nullValue();
  }, "?":function(v, d) {
    return types.boolValue(v);
  }, "b":function(v, d) {
    return types.binary(v, d);
  }, "i":function(v, d) {
    return types.intValue(v);
  }, "n":function(v, d) {
    return types.bigInteger(v);
  }, "d":function(v, d) {
    return types.floatValue(v);
  }, "f":function(v, d) {
    return types.bigDecimalValue(v);
  }, "c":function(v, d) {
    return types.charValue(v);
  }, ":":function(v, d) {
    return types.keyword(v);
  }, "$":function(v, d) {
    return types.symbol(v);
  }, "r":function(v, d) {
    return types.uri(v);
  }, "z":function(v, d) {
    return types.specialDouble(v);
  }, "'":function(v, d) {
    return v;
  }, "m":function(v, d) {
    return types.date(v);
  }, "t":function(v, d) {
    return types.verboseDate(v);
  }, "u":function(v, d) {
    return types.uuid(v);
  }, "set":function(v, d) {
    return types.set(v);
  }, "list":function(v, d) {
    return types.list(v);
  }, "link":function(v, d) {
    return types.link(v);
  }, "cmap":function(v, d) {
    return types.map(v, false);
  }}, defaultHandler:function(c, val) {
    return types.taggedValue(c, val);
  }, preferStrings:true, preferBuffers:true};
  decoder.Decoder.prototype.decode = function(node, cache, asMapKey, tagValue) {
    if (node == null) {
      return null;
    }
    var t = typeof node;
    switch(t) {
      case "string":
        return this.decodeString(node, cache, asMapKey, tagValue);
        break;
      case "object":
        if (util.isArray(node)) {
          if (node[0] === "^ ") {
            return this.decodeArrayHash(node, cache, asMapKey, tagValue);
          } else {
            return this.decodeArray(node, cache, asMapKey, tagValue);
          }
        } else {
          return this.decodeHash(node, cache, asMapKey, tagValue);
        }
        break;
    }
    return node;
  };
  decoder.Decoder.prototype["decode"] = decoder.Decoder.prototype.decode;
  decoder.Decoder.prototype.decodeString = function(string, cache, asMapKey, tagValue) {
    if (caching.isCacheable(string, asMapKey)) {
      var val = this.parseString(string, cache, false);
      if (cache) {
        cache.write(val, asMapKey);
      }
      return val;
    } else {
      if (caching.isCacheCode(string)) {
        return cache.read(string, asMapKey);
      } else {
        return this.parseString(string, cache, asMapKey);
      }
    }
  };
  decoder.Decoder.prototype.decodeHash = function(hash, cache, asMapKey, tagValue) {
    var ks = util.objectKeys(hash), key = ks[0], tag = ks.length == 1 ? this.decode(key, cache, false, false) : null;
    if (decoder.isTag(tag)) {
      var val = hash[key], handler = this.handlers[tag.str];
      if (handler != null) {
        return handler(this.decode(val, cache, false, true), this);
      } else {
        return types.taggedValue(tag.str, this.decode(val, cache, false, false));
      }
    } else {
      if (this.mapBuilder) {
        if (ks.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 && this.mapBuilder.fromArray) {
          var nodep = [];
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            nodep.push(this.decode(strKey, cache, true, false));
            nodep.push(this.decode(hash[strKey], cache, false, false));
          }
          return this.mapBuilder.fromArray(nodep, hash);
        } else {
          var ret = this.mapBuilder.init(hash);
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            ret = this.mapBuilder.add(ret, this.decode(strKey, cache, true, false), this.decode(hash[strKey], cache, false, false), hash);
          }
          return this.mapBuilder.finalize(ret, hash);
        }
      } else {
        var nodep = [];
        for (var i = 0;i < ks.length;i++) {
          var strKey = ks[i];
          nodep.push(this.decode(strKey, cache, true, false));
          nodep.push(this.decode(hash[strKey], cache, false, false));
        }
        return types.map(nodep, false);
      }
    }
  };
  decoder.Decoder.prototype.decodeArrayHash = function(node, cache, asMapKey, tagValue) {
    if (this.mapBuilder) {
      if (node.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 + 1 && this.mapBuilder.fromArray) {
        var nodep = [];
        for (var i = 1;i < node.length;i += 2) {
          nodep.push(this.decode(node[i], cache, true, false));
          nodep.push(this.decode(node[i + 1], cache, false, false));
        }
        return this.mapBuilder.fromArray(nodep, node);
      } else {
        var ret = this.mapBuilder.init(node);
        for (var i = 1;i < node.length;i += 2) {
          ret = this.mapBuilder.add(ret, this.decode(node[i], cache, true, false), this.decode(node[i + 1], cache, false, false), node);
        }
        return this.mapBuilder.finalize(ret, node);
      }
    } else {
      var nodep = [];
      for (var i = 1;i < node.length;i += 2) {
        nodep.push(this.decode(node[i], cache, true, false));
        nodep.push(this.decode(node[i + 1], cache, false, false));
      }
      return types.map(nodep, false);
    }
  };
  decoder.Decoder.prototype.decodeArray = function(node, cache, asMapKey, tagValue) {
    if (tagValue) {
      var ret = [];
      for (var i = 0;i < node.length;i++) {
        ret.push(this.decode(node[i], cache, asMapKey, false));
      }
      return ret;
    } else {
      var cacheIdx = cache && cache.idx;
      if (node.length === 2 && typeof node[0] === "string") {
        var tag = this.decode(node[0], cache, false, false);
        if (decoder.isTag(tag)) {
          var val = node[1], handler = this.handlers[tag.str];
          if (handler != null) {
            var ret = handler(this.decode(val, cache, asMapKey, true), this);
            return ret;
          } else {
            return types.taggedValue(tag.str, this.decode(val, cache, asMapKey, false));
          }
        }
      }
      if (cache && cacheIdx != cache.idx) {
        cache.idx = cacheIdx;
      }
      if (this.arrayBuilder) {
        if (node.length <= 32 && this.arrayBuilder.fromArray) {
          var arr = [];
          for (var i = 0;i < node.length;i++) {
            arr.push(this.decode(node[i], cache, asMapKey, false));
          }
          return this.arrayBuilder.fromArray(arr, node);
        } else {
          var ret = this.arrayBuilder.init();
          for (var i = 0;i < node.length;i++) {
            ret = this.arrayBuilder.add(ret, this.decode(node[i], cache, asMapKey, false), node);
          }
          return this.arrayBuilder.finalize(ret, node);
        }
      } else {
        var ret = [];
        for (var i = 0;i < node.length;i++) {
          ret.push(this.decode(node[i], cache, asMapKey, false));
        }
        return ret;
      }
    }
  };
  decoder.Decoder.prototype.parseString = function(string, cache, asMapKey) {
    if (string.charAt(0) === d.ESC) {
      var c = string.charAt(1);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return string.substring(1);
      } else {
        if (c === d.TAG) {
          return decoder.tag(string.substring(2));
        } else {
          var handler = this.handlers[c];
          if (handler == null) {
            return this.defaultHandler(c, string.substring(2));
          } else {
            return handler(string.substring(2), this);
          }
        }
      }
    } else {
      return string;
    }
  };
  decoder.decoder = function(options) {
    return new decoder.Decoder(options);
  };
});
goog.provide("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
goog.scope(function() {
  var reader = com.cognitect.transit.impl.reader, decoder = com.cognitect.transit.impl.decoder, caching = com.cognitect.transit.caching;
  reader.JSONUnmarshaller = function(opts) {
    this.decoder = new decoder.Decoder(opts);
  };
  reader.JSONUnmarshaller.prototype.unmarshal = function(str, cache) {
    return this.decoder.decode(JSON.parse(str), cache);
  };
  reader.Reader = function(unmarshaller, options) {
    this.unmarshaller = unmarshaller;
    this.options = options || {};
    this.cache = this.options["cache"] ? this.options["cache"] : new caching.ReadCache;
  };
  reader.Reader.prototype.read = function(str) {
    var ret = this.unmarshaller.unmarshal(str, this.cache);
    this.cache.clear();
    return ret;
  };
  reader.Reader.prototype["read"] = reader.Reader.prototype.read;
});
goog.provide("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.types");
goog.require("goog.math.Long");
goog.scope(function() {
  var handlers = com.cognitect.transit.handlers, util = com.cognitect.transit.util, types = com.cognitect.transit.types, Long = goog.math.Long;
  handlers.ctorGuid = 0;
  handlers.ctorGuidProperty = "transit$guid$" + util.randomUUID();
  handlers.typeTag = function(ctor) {
    if (ctor == null) {
      return "null";
    } else {
      if (ctor === String) {
        return "string";
      } else {
        if (ctor === Boolean) {
          return "boolean";
        } else {
          if (ctor === Number) {
            return "number";
          } else {
            if (ctor === Array) {
              return "array";
            } else {
              if (ctor === Object) {
                return "map";
              } else {
                var tag = ctor[handlers.ctorGuidProperty];
                if (tag == null) {
                  if (typeof Object.defineProperty != "undefined") {
                    tag = ++handlers.ctorGuid;
                    Object.defineProperty(ctor, handlers.ctorGuidProperty, {value:tag, enumerable:false});
                  } else {
                    ctor[handlers.ctorGuidProperty] = tag = ++handlers.ctorGuid;
                  }
                }
                return tag;
              }
            }
          }
        }
      }
    }
  };
  handlers.constructor = function(x) {
    if (x == null) {
      return null;
    } else {
      return x.constructor;
    }
  };
  handlers.padZeros = function(n, m) {
    var s = n.toString();
    for (var i = s.length;i < m;i++) {
      s = "0" + s;
    }
    return s;
  };
  handlers.stringableKeys = function(m) {
    var stringable = false, ks = util.objectKeys(m);
    for (var i = 0;i < ks.length;i++) {
    }
    return true;
  };
  handlers.NilHandler = function() {
  };
  handlers.NilHandler.prototype.tag = function(v) {
    return "_";
  };
  handlers.NilHandler.prototype.rep = function(v) {
    return null;
  };
  handlers.NilHandler.prototype.stringRep = function(v) {
    return "null";
  };
  handlers.StringHandler = function() {
  };
  handlers.StringHandler.prototype.tag = function(v) {
    return "s";
  };
  handlers.StringHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.StringHandler.prototype.stringRep = function(v) {
    return v;
  };
  handlers.NumberHandler = function() {
  };
  handlers.NumberHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.NumberHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.NumberHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler = function() {
  };
  handlers.IntegerHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.IntegerHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.BooleanHandler = function() {
  };
  handlers.BooleanHandler.prototype.tag = function(v) {
    return "?";
  };
  handlers.BooleanHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.BooleanHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.ArrayHandler = function() {
  };
  handlers.ArrayHandler.prototype.tag = function(v) {
    return "array";
  };
  handlers.ArrayHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.ArrayHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.MapHandler = function() {
  };
  handlers.MapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.MapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.MapHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.VerboseDateHandler = function() {
  };
  handlers.VerboseDateHandler.prototype.tag = function(v) {
    return "t";
  };
  handlers.VerboseDateHandler.prototype.rep = function(v) {
    return v.getUTCFullYear() + "-" + handlers.padZeros(v.getUTCMonth() + 1, 2) + "-" + handlers.padZeros(v.getUTCDate(), 2) + "T" + handlers.padZeros(v.getUTCHours(), 2) + ":" + handlers.padZeros(v.getUTCMinutes(), 2) + ":" + handlers.padZeros(v.getUTCSeconds(), 2) + "." + handlers.padZeros(v.getUTCMilliseconds(), 3) + "Z";
  };
  handlers.VerboseDateHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.DateHandler = function() {
  };
  handlers.DateHandler.prototype.tag = function(v) {
    return "m";
  };
  handlers.DateHandler.prototype.rep = function(v) {
    return v.valueOf();
  };
  handlers.DateHandler.prototype.stringRep = function(v) {
    return v.valueOf().toString();
  };
  handlers.DateHandler.prototype.getVerboseHandler = function(v) {
    return new handlers.VerboseDateHandler;
  };
  handlers.UUIDHandler = function() {
  };
  handlers.UUIDHandler.prototype.tag = function(v) {
    return "u";
  };
  handlers.UUIDHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.UUIDHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.KeywordHandler = function() {
  };
  handlers.KeywordHandler.prototype.tag = function(v) {
    return ":";
  };
  handlers.KeywordHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.KeywordHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.SymbolHandler = function() {
  };
  handlers.SymbolHandler.prototype.tag = function(v) {
    return "$";
  };
  handlers.SymbolHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.SymbolHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.TaggedHandler = function() {
  };
  handlers.TaggedHandler.prototype.tag = function(v) {
    return v.tag;
  };
  handlers.TaggedHandler.prototype.rep = function(v) {
    return v.rep;
  };
  handlers.TaggedHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitSetHandler = function() {
  };
  handlers.TransitSetHandler.prototype.tag = function(v) {
    return "set";
  };
  handlers.TransitSetHandler.prototype.rep = function(v) {
    var arr = [];
    v.forEach(function(key, set) {
      arr.push(key);
    });
    return types.taggedValue("array", arr);
  };
  handlers.TransitSetHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitArrayMapHandler = function() {
  };
  handlers.TransitArrayMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitArrayMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitArrayMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitMapHandler = function() {
  };
  handlers.TransitMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.BufferHandler = function() {
  };
  handlers.BufferHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.BufferHandler.prototype.rep = function(v) {
    return v.toString("base64");
  };
  handlers.BufferHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.Uint8ArrayHandler = function() {
  };
  handlers.Uint8ArrayHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.Uint8ArrayHandler.prototype.rep = function(v) {
    return util.Uint8ToBase64(v);
  };
  handlers.Uint8ArrayHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.defaultHandlers = function(hs) {
    hs.set(null, new handlers.NilHandler);
    hs.set(String, new handlers.StringHandler);
    hs.set(Number, new handlers.NumberHandler);
    hs.set(Long, new handlers.IntegerHandler);
    hs.set(Boolean, new handlers.BooleanHandler);
    hs.set(Array, new handlers.ArrayHandler);
    hs.set(Object, new handlers.MapHandler);
    hs.set(Date, new handlers.DateHandler);
    hs.set(types.UUID, new handlers.UUIDHandler);
    hs.set(types.Keyword, new handlers.KeywordHandler);
    hs.set(types.Symbol, new handlers.SymbolHandler);
    hs.set(types.TaggedValue, new handlers.TaggedHandler);
    hs.set(types.TransitSet, new handlers.TransitSetHandler);
    hs.set(types.TransitArrayMap, new handlers.TransitArrayMapHandler);
    hs.set(types.TransitMap, new handlers.TransitMapHandler);
    if (typeof Buffer != "undefined") {
      hs.set(Buffer, new handlers.BufferHandler);
    }
    if (typeof Uint8Array != "undefined") {
      hs.set(Uint8Array, new handlers.Uint8ArrayHandler);
    }
    return hs;
  };
  handlers.Handlers = function() {
    this.handlers = {};
    handlers.defaultHandlers(this);
  };
  handlers.Handlers.prototype.get = function(ctor) {
    var h = null;
    if (typeof ctor === "string") {
      h = this.handlers[ctor];
    } else {
      h = this.handlers[handlers.typeTag(ctor)];
    }
    if (h != null) {
      return h;
    } else {
      return this.handlers["default"];
    }
  };
  handlers.Handlers.prototype["get"] = handlers.Handlers.prototype.get;
  handlers.validTag = function(tag) {
    switch(tag) {
      case "null":
      ;
      case "string":
      ;
      case "boolean":
      ;
      case "number":
      ;
      case "array":
      ;
      case "map":
        return false;
        break;
    }
    return true;
  };
  handlers.Handlers.prototype.set = function(ctor, handler) {
    if (typeof ctor === "string" && handlers.validTag(ctor)) {
      this.handlers[ctor] = handler;
    } else {
      this.handlers[handlers.typeTag(ctor)] = handler;
    }
  };
});
goog.provide("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.delimiters");
goog.require("goog.math.Long");
goog.scope(function() {
  var writer = com.cognitect.transit.impl.writer, util = com.cognitect.transit.util, caching = com.cognitect.transit.caching, handlers = com.cognitect.transit.handlers, types = com.cognitect.transit.types, d = com.cognitect.transit.delimiters, Long = goog.math.Long;
  writer.escape = function(string) {
    if (string.length > 0) {
      var c = string.charAt(0);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return d.ESC + string;
      } else {
        return string;
      }
    } else {
      return string;
    }
  };
  writer.JSONMarshaller = function(opts) {
    this.opts = opts || {};
    this.preferStrings = this.opts["preferStrings"] != null ? this.opts["preferStrings"] : true;
    this.objectBuilder = this.opts["objectBuilder"] || null;
    this.handlers = new handlers.Handlers;
    var optsHandlers = this.opts["handlers"];
    if (optsHandlers) {
      if (util.isArray(optsHandlers) || !optsHandlers.forEach) {
        throw new Error('transit writer "handlers" option must be a map');
      }
      var self = this;
      optsHandlers.forEach(function(v, k) {
        self.handlers.set(k, v);
      });
    }
    this.handlerForForeign = this.opts["handlerForForeign"];
    this.unpack = this.opts["unpack"] || function(x) {
      if (types.isArrayMap(x) && x.backingMap === null) {
        return x._entries;
      } else {
        return false;
      }
    };
    this.verbose = this.opts && this.opts["verbose"] || false;
  };
  writer.JSONMarshaller.prototype.handler = function(obj) {
    var h = this.handlers.get(handlers.constructor(obj));
    if (h != null) {
      return h;
    } else {
      var tag = obj && obj["transitTag"];
      if (tag) {
        return this.handlers.get(tag);
      } else {
        return null;
      }
    }
  };
  writer.JSONMarshaller.prototype.registerHandler = function(ctor, handler) {
    this.handlers.set(ctor, handler);
  };
  writer.JSONMarshaller.prototype.emitNil = function(asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "_", "", asMapKey, cache);
    } else {
      return null;
    }
  };
  writer.JSONMarshaller.prototype.emitString = function(prefix, tag, s, asMapKey, cache) {
    var string = prefix + tag + s;
    if (cache) {
      return cache.write(string, asMapKey);
    } else {
      return string;
    }
  };
  writer.JSONMarshaller.prototype.emitBoolean = function(b, asMapKey, cache) {
    if (asMapKey) {
      var s = b.toString();
      return this.emitString(d.ESC, "?", s[0], asMapKey, cache);
    } else {
      return b;
    }
  };
  writer.JSONMarshaller.prototype.emitInteger = function(i, asMapKey, cache) {
    if (i === Infinity) {
      return this.emitString(d.ESC, "z", "INF", asMapKey, cache);
    } else {
      if (i === -Infinity) {
        return this.emitString(d.ESC, "z", "-INF", asMapKey, cache);
      } else {
        if (isNaN(i)) {
          return this.emitString(d.ESC, "z", "NaN", asMapKey, cache);
        } else {
          if (asMapKey || typeof i === "string" || i instanceof Long) {
            return this.emitString(d.ESC, "i", i.toString(), asMapKey, cache);
          } else {
            return i;
          }
        }
      }
    }
  };
  writer.JSONMarshaller.prototype.emitDouble = function(d, asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "d", d, asMapKey, cache);
    } else {
      return d;
    }
  };
  writer.JSONMarshaller.prototype.emitBinary = function(b, asMapKey, cache) {
    return this.emitString(d.ESC, "b", b, asMapKey, cache);
  };
  writer.JSONMarshaller.prototype.emitQuoted = function(em, obj, cache) {
    if (em.verbose) {
      var ret = {}, k = this.emitString(d.ESC_TAG, "'", "", true, cache);
      ret[k] = writer.marshal(this, obj, false, cache);
      return ret;
    } else {
      return[this.emitString(d.ESC_TAG, "'", "", true, cache), writer.marshal(this, obj, false, cache)];
    }
  };
  writer.emitObjects = function(em, iterable, cache) {
    var ret = [];
    if (util.isArray(iterable)) {
      for (var i = 0;i < iterable.length;i++) {
        ret.push(writer.marshal(em, iterable[i], false, cache));
      }
    } else {
      iterable.forEach(function(v, i) {
        ret.push(writer.marshal(em, v, false, cache));
      });
    }
    return ret;
  };
  writer.emitArray = function(em, iterable, skip, cache) {
    return writer.emitObjects(em, iterable, cache);
  };
  writer.isStringableKey = function(em, k) {
    if (typeof k !== "string") {
      var h = em.handler(k);
      return h && h.tag(k).length === 1;
    } else {
      return true;
    }
  };
  writer.stringableKeys = function(em, obj) {
    var arr = em.unpack(obj), stringableKeys = true;
    if (arr) {
      for (var i = 0;i < arr.length;i += 2) {
        stringableKeys = writer.isStringableKey(em, arr[i]);
        if (!stringableKeys) {
          break;
        }
      }
      return stringableKeys;
    } else {
      if (obj.keys) {
        var iter = obj.keys(), step = null;
        if (iter.next) {
          step = iter.next();
          while (!step.done) {
            stringableKeys = writer.isStringableKey(em, step.value);
            if (!stringableKeys) {
              break;
            }
            step = iter.next();
          }
          return stringableKeys;
        }
      }
    }
    if (obj.forEach) {
      obj.forEach(function(v, k) {
        stringableKeys = stringableKeys && writer.isStringableKey(em, k);
      });
      return stringableKeys;
    } else {
      throw new Error("Cannot walk keys of object type " + handlers.constructor(obj).name);
    }
  };
  writer.isForeignObject = function(x) {
    if (x.constructor["transit$isObject"]) {
      return true;
    }
    var ret = x.constructor.toString(), ret = ret.substr("function ".length), ret = ret.substr(0, ret.indexOf("(")), isObject = ret == "Object";
    if (typeof Object.defineProperty != "undefined") {
      Object.defineProperty(x.constructor, "transit$isObject", {value:isObject, enumerable:false});
    } else {
      x.constructor["transit$isObject"] = isObject;
    }
    return isObject;
  };
  writer.emitMap = function(em, obj, skip, cache) {
    if (obj.constructor === Object || obj.forEach != null || em.handlerForForeign && writer.isForeignObject(obj)) {
      if (em.verbose) {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var ret = {};
            obj.forEach(function(v, k) {
              ret[writer.marshal(em, k, true, false)] = writer.marshal(em, v, false, cache);
            });
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, false));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, false));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            var ret = {};
            ret[tag] = rep;
            return ret;
          }
        } else {
          var ret = {}, ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret[writer.marshal(em, ks[i], true, false)] = writer.marshal(em, obj[ks[i]], false, cache);
          }
          return ret;
        }
      } else {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var arr = em.unpack(obj), ret = ["^ "];
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                ret.push(writer.marshal(em, arr[i], true, cache));
                ret.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                ret.push(writer.marshal(em, k, true, cache));
                ret.push(writer.marshal(em, v, false, cache));
              });
            }
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, cache));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, cache));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            return[tag, rep];
          }
        } else {
          var ret = ["^ "], ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret.push(writer.marshal(em, ks[i], true, cache));
            ret.push(writer.marshal(em, obj[ks[i]], false, cache));
          }
          return ret;
        }
      }
    } else {
      if (em.objectBuilder != null) {
        return em.objectBuilder(obj, function(k) {
          return writer.marshal(em, k, true, cache);
        }, function(v) {
          return writer.marshal(em, v, false, cache);
        });
      } else {
        var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
        err.data = {obj:obj, type:name};
        throw err;
      }
    }
  };
  writer.emitTaggedMap = function(em, tag, rep, skip, cache) {
    if (em.verbose) {
      var ret = {};
      ret[em.emitString(d.ESC_TAG, tag, "", true, cache)] = writer.marshal(em, rep, false, cache);
      return ret;
    } else {
      return[em.emitString(d.ESC_TAG, tag, "", true, cache), writer.marshal(em, rep, false, cache)];
    }
  };
  writer.emitEncoded = function(em, h, tag, rep, obj, asMapKey, cache) {
    if (tag.length === 1) {
      if (typeof rep === "string") {
        return em.emitString(d.ESC, tag, rep, asMapKey, cache);
      } else {
        if (asMapKey || em.preferStrings) {
          var vh = em.verbose && h.getVerboseHandler();
          if (vh) {
            tag = vh.tag(obj);
            rep = vh.stringRep(obj, vh);
          } else {
            rep = h.stringRep(obj, h);
          }
          if (rep !== null) {
            return em.emitString(d.ESC, tag, rep, asMapKey, cache);
          } else {
            var err = new Error('Tag "' + tag + '" cannot be encoded as string');
            err.data = {tag:tag, rep:rep, obj:obj};
            throw err;
          }
        } else {
          return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
        }
      }
    } else {
      return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
    }
  };
  writer.marshal = function(em, obj, asMapKey, cache) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null), tag = h ? h.tag(obj) : null, rep = h ? h.rep(obj) : null;
    if (h != null && tag != null) {
      switch(tag) {
        case "_":
          return em.emitNil(asMapKey, cache);
          break;
        case "s":
          return em.emitString("", "", writer.escape(rep), asMapKey, cache);
          break;
        case "?":
          return em.emitBoolean(rep, asMapKey, cache);
          break;
        case "i":
          return em.emitInteger(rep, asMapKey, cache);
          break;
        case "d":
          return em.emitDouble(rep, asMapKey, cache);
          break;
        case "b":
          return em.emitBinary(rep, asMapKey, cache);
          break;
        case "'":
          return em.emitQuoted(em, rep, cache);
          break;
        case "array":
          return writer.emitArray(em, rep, asMapKey, cache);
          break;
        case "map":
          return writer.emitMap(em, rep, asMapKey, cache);
          break;
        default:
          return writer.emitEncoded(em, h, tag, rep, obj, asMapKey, cache);
          break;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.maybeQuoted = function(em, obj) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null);
    if (h != null) {
      if (h.tag(obj).length === 1) {
        return types.quoted(obj);
      } else {
        return obj;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.marshalTop = function(em, obj, asMapKey, cache) {
    return JSON.stringify(writer.marshal(em, writer.maybeQuoted(em, obj), asMapKey, cache));
  };
  writer.Writer = function(marshaller, options) {
    this._marshaller = marshaller;
    this.options = options || {};
    if (this.options["cache"] === false) {
      this.cache = null;
    } else {
      this.cache = this.options["cache"] ? this.options["cache"] : new caching.WriteCache;
    }
  };
  writer.Writer.prototype.marshaller = function() {
    return this._marshaller;
  };
  writer.Writer.prototype["marshaller"] = writer.Writer.prototype.marshaller;
  writer.Writer.prototype.write = function(obj, opts) {
    var ret = null, ropts = opts || {}, asMapKey = ropts["asMapKey"] || false, cache = this._marshaller.verbose ? false : this.cache;
    if (ropts["marshalTop"] === false) {
      ret = writer.marshal(this._marshaller, obj, asMapKey, cache);
    } else {
      ret = writer.marshalTop(this._marshaller, obj, asMapKey, cache);
    }
    if (this.cache != null) {
      this.cache.clear();
    }
    return ret;
  };
  writer.Writer.prototype["write"] = writer.Writer.prototype.write;
  writer.Writer.prototype.register = function(type, handler) {
    this._marshaller.registerHandler(type, handler);
  };
  writer.Writer.prototype["register"] = writer.Writer.prototype.register;
});
goog.provide("com.cognitect.transit");
goog.require("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
var TRANSIT_DEV = true;
var TRANSIT_NODE_TARGET = false;
var TRANSIT_BROWSER_TARGET = false;
var TRANSIT_BROWSER_AMD_TARGET = false;
goog.scope(function() {
  var transit = com.cognitect.transit;
  var reader = com.cognitect.transit.impl.reader, writer = com.cognitect.transit.impl.writer, decoder = com.cognitect.transit.impl.decoder, types = com.cognitect.transit.types, eq = com.cognitect.transit.eq, caching = com.cognitect.transit.caching;
  transit.reader = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      type = "json";
      var unmarshaller = new reader.JSONUnmarshaller(opts);
      return new reader.Reader(unmarshaller, opts);
    } else {
      throw new Error("Cannot create reader of type " + type);
    }
  };
  transit.writer = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      if (type === "json-verbose") {
        if (opts == null) {
          opts = {};
        }
        opts["verbose"] = true;
      }
      type = "json";
      var marshaller = new writer.JSONMarshaller(opts);
      return new writer.Writer(marshaller, opts);
    } else {
      var err = new Error('Type must be "json"');
      err.data = {type:type};
      throw err;
    }
  };
  transit.makeWriteHandler = function(obj) {
    var Handler = function() {
    };
    Handler.prototype.tag = obj["tag"];
    Handler.prototype.rep = obj["rep"];
    Handler.prototype.stringRep = obj["stringRep"];
    Handler.prototype.getVerboseHandler = obj["getVerboseHandler"];
    return new Handler;
  };
  transit.makeBuilder = function(obj) {
    var Builder = function() {
    };
    Builder.prototype.init = obj["init"];
    Builder.prototype.add = obj["add"];
    Builder.prototype.finalize = obj["finalize"];
    Builder.prototype.fromArray = obj["fromArray"];
    return new Builder;
  };
  transit.date = types.date;
  transit.integer = types.intValue;
  transit.isInteger = types.isInteger;
  transit.uuid = types.uuid;
  transit.isUUID = types.isUUID;
  transit.bigInt = types.bigInteger;
  transit.isBigInt = types.isBigInteger;
  transit.bigDec = types.bigDecimalValue;
  transit.isBigDec = types.isBigDecimal;
  transit.keyword = types.keyword;
  transit.isKeyword = types.isKeyword;
  transit.symbol = types.symbol;
  transit.isSymbol = types.isSymbol;
  transit.binary = types.binary;
  transit.isBinary = types.isBinary;
  transit.uri = types.uri;
  transit.isURI = types.isURI;
  transit.map = types.map;
  transit.isMap = types.isMap;
  transit.set = types.set;
  transit.isSet = types.isSet;
  transit.list = types.list;
  transit.isList = types.isList;
  transit.quoted = types.quoted;
  transit.isQuoted = types.isQuoted;
  transit.tagged = types.taggedValue;
  transit.isTaggedValue = types.isTaggedValue;
  transit.link = types.link;
  transit.isLink = types.isLink;
  transit.hash = eq.hashCode;
  transit.hashMapLike = eq.hashMapLike;
  transit.hashMapLike = eq.hashArrayLike;
  transit.equals = eq.equals;
  transit.extendToEQ = eq.extendToEQ;
  transit.mapToObject = function(m) {
    var ret = {};
    m.forEach(function(v, k) {
      if (typeof k !== "string") {
        throw Error("Cannot convert map with non-string keys");
      } else {
        ret[k] = v;
      }
    });
    return ret;
  };
  transit.decoder = decoder.decoder;
  transit.readCache = caching.readCache;
  transit.writeCache = caching.writeCache;
  transit.UUIDfromString = types.UUIDfromString;
  transit.randomUUID = types.randomUUID;
  transit.stringableKeys = writer.stringableKeys;
  if (TRANSIT_BROWSER_TARGET) {
    goog.exportSymbol("transit.reader", transit.reader);
    goog.exportSymbol("transit.writer", transit.writer);
    goog.exportSymbol("transit.makeBuilder", transit.makeBuilder);
    goog.exportSymbol("transit.makeWriteHandler", transit.makeWriteHandler);
    goog.exportSymbol("transit.date", types.date);
    goog.exportSymbol("transit.integer", types.intValue);
    goog.exportSymbol("transit.isInteger", types.isInteger);
    goog.exportSymbol("transit.uuid", types.uuid);
    goog.exportSymbol("transit.isUUID", types.isUUID);
    goog.exportSymbol("transit.bigInt", types.bigInteger);
    goog.exportSymbol("transit.isBigInt", types.isBigInteger);
    goog.exportSymbol("transit.bigDec", types.bigDecimalValue);
    goog.exportSymbol("transit.isBigDec", types.isBigDecimal);
    goog.exportSymbol("transit.keyword", types.keyword);
    goog.exportSymbol("transit.isKeyword", types.isKeyword);
    goog.exportSymbol("transit.symbol", types.symbol);
    goog.exportSymbol("transit.isSymbol", types.isSymbol);
    goog.exportSymbol("transit.binary", types.binary);
    goog.exportSymbol("transit.isBinary", types.isBinary);
    goog.exportSymbol("transit.uri", types.uri);
    goog.exportSymbol("transit.isURI", types.isURI);
    goog.exportSymbol("transit.map", types.map);
    goog.exportSymbol("transit.isMap", types.isMap);
    goog.exportSymbol("transit.set", types.set);
    goog.exportSymbol("transit.isSet", types.isSet);
    goog.exportSymbol("transit.list", types.list);
    goog.exportSymbol("transit.isList", types.isList);
    goog.exportSymbol("transit.quoted", types.quoted);
    goog.exportSymbol("transit.isQuoted", types.isQuoted);
    goog.exportSymbol("transit.tagged", types.taggedValue);
    goog.exportSymbol("transit.isTaggedValue", types.isTaggedValue);
    goog.exportSymbol("transit.link", types.link);
    goog.exportSymbol("transit.isLink", types.isLink);
    goog.exportSymbol("transit.hash", eq.hashCode);
    goog.exportSymbol("transit.hashMapLike", eq.hashMapLike);
    goog.exportSymbol("transit.hashArrayLike", eq.hashArrayLike);
    goog.exportSymbol("transit.equals", eq.equals);
    goog.exportSymbol("transit.extendToEQ", eq.extendToEQ);
    goog.exportSymbol("transit.mapToObject", transit.mapToObject);
    goog.exportSymbol("transit.decoder", decoder.decoder);
    goog.exportSymbol("transit.UUIDfromString", types.UUIDfromString);
    goog.exportSymbol("transit.randomUUID", types.randomUUID);
    goog.exportSymbol("transit.stringableKeys", writer.stringableKeys);
    goog.exportSymbol("transit.readCache", caching.readCache);
    goog.exportSymbol("transit.writeCache", caching.writeCache);
  }
  if (TRANSIT_NODE_TARGET) {
    module.exports = {reader:transit.reader, writer:transit.writer, makeBuilder:transit.makeBuilder, makeWriteHandler:transit.makeWriteHandler, date:types.date, integer:types.intValue, isInteger:types.isInteger, uuid:types.uuid, isUUID:types.isUUID, bigInt:types.bigInteger, isBigInt:types.isBigInteger, bigDec:types.bigDecimalValue, isBigDec:types.isBigDecimal, keyword:types.keyword, isKeyword:types.isKeyword, symbol:types.symbol, isSymbol:types.isSymbol, binary:types.binary, isBinary:types.isBinary, 
    uri:types.uri, isURI:types.isURI, map:types.map, isMap:types.isMap, set:types.set, isSet:types.isSet, list:types.list, isList:types.isList, quoted:types.quoted, isQuoted:types.isQuoted, tagged:types.taggedValue, isTaggedValue:types.isTaggedValue, link:types.link, isLink:types.isLink, hash:eq.hashCode, hashArrayLike:eq.hashArrayLike, hashMapLike:eq.hashMapLike, equals:eq.equals, extendToEQ:eq.extendToEQ, mapToObject:transit.mapToObject, decoder:decoder.decoder, UUIDfromString:types.UUIDfromString, 
    randomUUID:types.randomUUID, stringableKeys:writer.stringableKeys, readCache:caching.readCache, writeCache:caching.writeCache};
  }
});
goog.provide("cognitect.transit");
goog.require("cljs.core");
goog.require("goog.math.Long");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit");
cljs.core.UUID.prototype.cljs$core$IEquiv$ = true;
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return this$__$1.uuid === other.uuid;
  } else {
    if (other instanceof com.cognitect.transit.types.UUID) {
      return this$__$1.uuid === other.toString();
    } else {
      return false;
    }
  }
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return cljs.core._equiv.call(null, other, this$__$1);
  } else {
    return this$__$1.equiv(other);
  }
};
goog.math.Long.prototype.cljs$core$IEquiv$ = true;
goog.math.Long.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
goog.math.Long.prototype.cljs$core$IHash$ = true;
goog.math.Long.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(uuid, writer, _) {
  var uuid__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(uuid__$1.toString()), cljs.core.str('"')].join(""));
};
cognitect.transit.opts_merge = function cognitect$transit$opts_merge(a, b) {
  var seq__6641_6645 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, b));
  var chunk__6642_6646 = null;
  var count__6643_6647 = 0;
  var i__6644_6648 = 0;
  while (true) {
    if (i__6644_6648 < count__6643_6647) {
      var k_6649 = cljs.core._nth.call(null, chunk__6642_6646, i__6644_6648);
      var v_6650 = b[k_6649];
      a[k_6649] = v_6650;
      var G__6651 = seq__6641_6645;
      var G__6652 = chunk__6642_6646;
      var G__6653 = count__6643_6647;
      var G__6654 = i__6644_6648 + 1;
      seq__6641_6645 = G__6651;
      chunk__6642_6646 = G__6652;
      count__6643_6647 = G__6653;
      i__6644_6648 = G__6654;
      continue;
    } else {
      var temp__4126__auto___6655 = cljs.core.seq.call(null, seq__6641_6645);
      if (temp__4126__auto___6655) {
        var seq__6641_6656__$1 = temp__4126__auto___6655;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6641_6656__$1)) {
          var c__4907__auto___6657 = cljs.core.chunk_first.call(null, seq__6641_6656__$1);
          var G__6658 = cljs.core.chunk_rest.call(null, seq__6641_6656__$1);
          var G__6659 = c__4907__auto___6657;
          var G__6660 = cljs.core.count.call(null, c__4907__auto___6657);
          var G__6661 = 0;
          seq__6641_6645 = G__6658;
          chunk__6642_6646 = G__6659;
          count__6643_6647 = G__6660;
          i__6644_6648 = G__6661;
          continue;
        } else {
          var k_6662 = cljs.core.first.call(null, seq__6641_6656__$1);
          var v_6663 = b[k_6662];
          a[k_6662] = v_6663;
          var G__6664 = cljs.core.next.call(null, seq__6641_6656__$1);
          var G__6665 = null;
          var G__6666 = 0;
          var G__6667 = 0;
          seq__6641_6645 = G__6664;
          chunk__6642_6646 = G__6665;
          count__6643_6647 = G__6666;
          i__6644_6648 = G__6667;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return a;
};
cognitect.transit.MapBuilder = function() {
};
cognitect.transit.MapBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.MapBuilder.prototype.add = function(m, k, v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.assoc_BANG_.call(null, m, k, v);
};
cognitect.transit.MapBuilder.prototype.finalize = function(m, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, m);
};
cognitect.transit.MapBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentArrayMap.fromArray.call(null, arr, true, true);
};
cognitect.transit.MapBuilder.cljs$lang$type = true;
cognitect.transit.MapBuilder.cljs$lang$ctorStr = "cognitect.transit/MapBuilder";
cognitect.transit.MapBuilder.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/MapBuilder");
};
cognitect.transit.__GT_MapBuilder = function cognitect$transit$__GT_MapBuilder() {
  return new cognitect.transit.MapBuilder;
};
cognitect.transit.VectorBuilder = function() {
};
cognitect.transit.VectorBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
};
cognitect.transit.VectorBuilder.prototype.add = function(v, x, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.conj_BANG_.call(null, v, x);
};
cognitect.transit.VectorBuilder.prototype.finalize = function(v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, v);
};
cognitect.transit.VectorBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentVector.fromArray.call(null, arr, true);
};
cognitect.transit.VectorBuilder.cljs$lang$type = true;
cognitect.transit.VectorBuilder.cljs$lang$ctorStr = "cognitect.transit/VectorBuilder";
cognitect.transit.VectorBuilder.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/VectorBuilder");
};
cognitect.transit.__GT_VectorBuilder = function cognitect$transit$__GT_VectorBuilder() {
  return new cognitect.transit.VectorBuilder;
};
cognitect.transit.reader = function() {
  var cognitect$transit$reader = null;
  var cognitect$transit$reader__1 = function(type) {
    return cognitect$transit$reader.call(null, type, null);
  };
  var cognitect$transit$reader__2 = function(type, opts) {
    return com.cognitect.transit.reader.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"prefersStrings":false, "arrayBuilder":new cognitect.transit.VectorBuilder, "mapBuilder":new cognitect.transit.MapBuilder, "handlers":cljs.core.clj__GT_js.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, ["$", function(v) {
      return cljs.core.symbol.call(null, v);
    }, ":", function(v) {
      return cljs.core.keyword.call(null, v);
    }, "set", function(v) {
      return cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, v);
    }, "list", function(v) {
      return cljs.core.into.call(null, cljs.core.List.EMPTY, v.reverse());
    }, "cmap", function(v) {
      var i = 0;
      var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
      while (true) {
        if (i < v.length) {
          var G__6668 = i + 2;
          var G__6669 = cljs.core.assoc_BANG_.call(null, ret, v[i], v[i + 1]);
          i = G__6668;
          ret = G__6669;
          continue;
        } else {
          return cljs.core.persistent_BANG_.call(null, ret);
        }
        break;
      }
    }], null), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts)))}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
  };
  cognitect$transit$reader = function(type, opts) {
    switch(arguments.length) {
      case 1:
        return cognitect$transit$reader__1.call(this, type);
      case 2:
        return cognitect$transit$reader__2.call(this, type, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cognitect$transit$reader.cljs$core$IFn$_invoke$arity$1 = cognitect$transit$reader__1;
  cognitect$transit$reader.cljs$core$IFn$_invoke$arity$2 = cognitect$transit$reader__2;
  return cognitect$transit$reader;
}();
cognitect.transit.read = function cognitect$transit$read(r, str) {
  return r.read(str);
};
cognitect.transit.KeywordHandler = function() {
};
cognitect.transit.KeywordHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return ":";
};
cognitect.transit.KeywordHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.cljs$lang$type = true;
cognitect.transit.KeywordHandler.cljs$lang$ctorStr = "cognitect.transit/KeywordHandler";
cognitect.transit.KeywordHandler.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/KeywordHandler");
};
cognitect.transit.__GT_KeywordHandler = function cognitect$transit$__GT_KeywordHandler() {
  return new cognitect.transit.KeywordHandler;
};
cognitect.transit.SymbolHandler = function() {
};
cognitect.transit.SymbolHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "$";
};
cognitect.transit.SymbolHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.cljs$lang$type = true;
cognitect.transit.SymbolHandler.cljs$lang$ctorStr = "cognitect.transit/SymbolHandler";
cognitect.transit.SymbolHandler.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/SymbolHandler");
};
cognitect.transit.__GT_SymbolHandler = function cognitect$transit$__GT_SymbolHandler() {
  return new cognitect.transit.SymbolHandler;
};
cognitect.transit.ListHandler = function() {
};
cognitect.transit.ListHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "list";
};
cognitect.transit.ListHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__6670_6674 = cljs.core.seq.call(null, v);
  var chunk__6671_6675 = null;
  var count__6672_6676 = 0;
  var i__6673_6677 = 0;
  while (true) {
    if (i__6673_6677 < count__6672_6676) {
      var x_6678 = cljs.core._nth.call(null, chunk__6671_6675, i__6673_6677);
      ret.push(x_6678);
      var G__6679 = seq__6670_6674;
      var G__6680 = chunk__6671_6675;
      var G__6681 = count__6672_6676;
      var G__6682 = i__6673_6677 + 1;
      seq__6670_6674 = G__6679;
      chunk__6671_6675 = G__6680;
      count__6672_6676 = G__6681;
      i__6673_6677 = G__6682;
      continue;
    } else {
      var temp__4126__auto___6683 = cljs.core.seq.call(null, seq__6670_6674);
      if (temp__4126__auto___6683) {
        var seq__6670_6684__$1 = temp__4126__auto___6683;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6670_6684__$1)) {
          var c__4907__auto___6685 = cljs.core.chunk_first.call(null, seq__6670_6684__$1);
          var G__6686 = cljs.core.chunk_rest.call(null, seq__6670_6684__$1);
          var G__6687 = c__4907__auto___6685;
          var G__6688 = cljs.core.count.call(null, c__4907__auto___6685);
          var G__6689 = 0;
          seq__6670_6674 = G__6686;
          chunk__6671_6675 = G__6687;
          count__6672_6676 = G__6688;
          i__6673_6677 = G__6689;
          continue;
        } else {
          var x_6690 = cljs.core.first.call(null, seq__6670_6684__$1);
          ret.push(x_6690);
          var G__6691 = cljs.core.next.call(null, seq__6670_6684__$1);
          var G__6692 = null;
          var G__6693 = 0;
          var G__6694 = 0;
          seq__6670_6674 = G__6691;
          chunk__6671_6675 = G__6692;
          count__6672_6676 = G__6693;
          i__6673_6677 = G__6694;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.ListHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.ListHandler.cljs$lang$type = true;
cognitect.transit.ListHandler.cljs$lang$ctorStr = "cognitect.transit/ListHandler";
cognitect.transit.ListHandler.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/ListHandler");
};
cognitect.transit.__GT_ListHandler = function cognitect$transit$__GT_ListHandler() {
  return new cognitect.transit.ListHandler;
};
cognitect.transit.MapHandler = function() {
};
cognitect.transit.MapHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "map";
};
cognitect.transit.MapHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v;
};
cognitect.transit.MapHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.MapHandler.cljs$lang$type = true;
cognitect.transit.MapHandler.cljs$lang$ctorStr = "cognitect.transit/MapHandler";
cognitect.transit.MapHandler.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/MapHandler");
};
cognitect.transit.__GT_MapHandler = function cognitect$transit$__GT_MapHandler() {
  return new cognitect.transit.MapHandler;
};
cognitect.transit.SetHandler = function() {
};
cognitect.transit.SetHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "set";
};
cognitect.transit.SetHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__6695_6699 = cljs.core.seq.call(null, v);
  var chunk__6696_6700 = null;
  var count__6697_6701 = 0;
  var i__6698_6702 = 0;
  while (true) {
    if (i__6698_6702 < count__6697_6701) {
      var x_6703 = cljs.core._nth.call(null, chunk__6696_6700, i__6698_6702);
      ret.push(x_6703);
      var G__6704 = seq__6695_6699;
      var G__6705 = chunk__6696_6700;
      var G__6706 = count__6697_6701;
      var G__6707 = i__6698_6702 + 1;
      seq__6695_6699 = G__6704;
      chunk__6696_6700 = G__6705;
      count__6697_6701 = G__6706;
      i__6698_6702 = G__6707;
      continue;
    } else {
      var temp__4126__auto___6708 = cljs.core.seq.call(null, seq__6695_6699);
      if (temp__4126__auto___6708) {
        var seq__6695_6709__$1 = temp__4126__auto___6708;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6695_6709__$1)) {
          var c__4907__auto___6710 = cljs.core.chunk_first.call(null, seq__6695_6709__$1);
          var G__6711 = cljs.core.chunk_rest.call(null, seq__6695_6709__$1);
          var G__6712 = c__4907__auto___6710;
          var G__6713 = cljs.core.count.call(null, c__4907__auto___6710);
          var G__6714 = 0;
          seq__6695_6699 = G__6711;
          chunk__6696_6700 = G__6712;
          count__6697_6701 = G__6713;
          i__6698_6702 = G__6714;
          continue;
        } else {
          var x_6715 = cljs.core.first.call(null, seq__6695_6709__$1);
          ret.push(x_6715);
          var G__6716 = cljs.core.next.call(null, seq__6695_6709__$1);
          var G__6717 = null;
          var G__6718 = 0;
          var G__6719 = 0;
          seq__6695_6699 = G__6716;
          chunk__6696_6700 = G__6717;
          count__6697_6701 = G__6718;
          i__6698_6702 = G__6719;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.SetHandler.prototype.stringRep = function() {
  var self__ = this;
  var v = this;
  return null;
};
cognitect.transit.SetHandler.cljs$lang$type = true;
cognitect.transit.SetHandler.cljs$lang$ctorStr = "cognitect.transit/SetHandler";
cognitect.transit.SetHandler.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/SetHandler");
};
cognitect.transit.__GT_SetHandler = function cognitect$transit$__GT_SetHandler() {
  return new cognitect.transit.SetHandler;
};
cognitect.transit.VectorHandler = function() {
};
cognitect.transit.VectorHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "array";
};
cognitect.transit.VectorHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__6720_6724 = cljs.core.seq.call(null, v);
  var chunk__6721_6725 = null;
  var count__6722_6726 = 0;
  var i__6723_6727 = 0;
  while (true) {
    if (i__6723_6727 < count__6722_6726) {
      var x_6728 = cljs.core._nth.call(null, chunk__6721_6725, i__6723_6727);
      ret.push(x_6728);
      var G__6729 = seq__6720_6724;
      var G__6730 = chunk__6721_6725;
      var G__6731 = count__6722_6726;
      var G__6732 = i__6723_6727 + 1;
      seq__6720_6724 = G__6729;
      chunk__6721_6725 = G__6730;
      count__6722_6726 = G__6731;
      i__6723_6727 = G__6732;
      continue;
    } else {
      var temp__4126__auto___6733 = cljs.core.seq.call(null, seq__6720_6724);
      if (temp__4126__auto___6733) {
        var seq__6720_6734__$1 = temp__4126__auto___6733;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6720_6734__$1)) {
          var c__4907__auto___6735 = cljs.core.chunk_first.call(null, seq__6720_6734__$1);
          var G__6736 = cljs.core.chunk_rest.call(null, seq__6720_6734__$1);
          var G__6737 = c__4907__auto___6735;
          var G__6738 = cljs.core.count.call(null, c__4907__auto___6735);
          var G__6739 = 0;
          seq__6720_6724 = G__6736;
          chunk__6721_6725 = G__6737;
          count__6722_6726 = G__6738;
          i__6723_6727 = G__6739;
          continue;
        } else {
          var x_6740 = cljs.core.first.call(null, seq__6720_6734__$1);
          ret.push(x_6740);
          var G__6741 = cljs.core.next.call(null, seq__6720_6734__$1);
          var G__6742 = null;
          var G__6743 = 0;
          var G__6744 = 0;
          seq__6720_6724 = G__6741;
          chunk__6721_6725 = G__6742;
          count__6722_6726 = G__6743;
          i__6723_6727 = G__6744;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return ret;
};
cognitect.transit.VectorHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.VectorHandler.cljs$lang$type = true;
cognitect.transit.VectorHandler.cljs$lang$ctorStr = "cognitect.transit/VectorHandler";
cognitect.transit.VectorHandler.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/VectorHandler");
};
cognitect.transit.__GT_VectorHandler = function cognitect$transit$__GT_VectorHandler() {
  return new cognitect.transit.VectorHandler;
};
cognitect.transit.UUIDHandler = function() {
};
cognitect.transit.UUIDHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "u";
};
cognitect.transit.UUIDHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.uuid;
};
cognitect.transit.UUIDHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var this$ = this;
  return this$.rep(v);
};
cognitect.transit.UUIDHandler.cljs$lang$type = true;
cognitect.transit.UUIDHandler.cljs$lang$ctorStr = "cognitect.transit/UUIDHandler";
cognitect.transit.UUIDHandler.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/UUIDHandler");
};
cognitect.transit.__GT_UUIDHandler = function cognitect$transit$__GT_UUIDHandler() {
  return new cognitect.transit.UUIDHandler;
};
cognitect.transit.writer = function() {
  var cognitect$transit$writer = null;
  var cognitect$transit$writer__1 = function(type) {
    return cognitect$transit$writer.call(null, type, null);
  };
  var cognitect$transit$writer__2 = function(type, opts) {
    var keyword_handler = new cognitect.transit.KeywordHandler;
    var symbol_handler = new cognitect.transit.SymbolHandler;
    var list_handler = new cognitect.transit.ListHandler;
    var map_handler = new cognitect.transit.MapHandler;
    var set_handler = new cognitect.transit.SetHandler;
    var vector_handler = new cognitect.transit.VectorHandler;
    var uuid_handler = new cognitect.transit.UUIDHandler;
    var handlers = cljs.core.merge.call(null, cljs.core.PersistentHashMap.fromArrays([cljs.core.PersistentHashMap, cljs.core.Cons, cljs.core.PersistentArrayMap, cljs.core.NodeSeq, cljs.core.PersistentQueue, cljs.core.IndexedSeq, cljs.core.Keyword, cljs.core.EmptyList, cljs.core.LazySeq, cljs.core.Subvec, cljs.core.PersistentQueueSeq, cljs.core.ArrayNodeSeq, cljs.core.ValSeq, cljs.core.PersistentArrayMapSeq, cljs.core.PersistentVector, cljs.core.List, cljs.core.RSeq, cljs.core.PersistentHashSet, cljs.core.PersistentTreeMap, 
    cljs.core.KeySeq, cljs.core.ChunkedSeq, cljs.core.PersistentTreeSet, cljs.core.ChunkedCons, cljs.core.Symbol, cljs.core.UUID, cljs.core.Range, cljs.core.PersistentTreeMapSeq], [map_handler, list_handler, map_handler, list_handler, list_handler, list_handler, keyword_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, set_handler, map_handler, list_handler, list_handler, set_handler, list_handler, 
    symbol_handler, uuid_handler, list_handler, list_handler]), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts));
    return com.cognitect.transit.writer.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"unpack":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(x) {
        if (x instanceof cljs.core.PersistentArrayMap) {
          return x.arr;
        } else {
          return false;
        }
      };
    }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), "handlers":function() {
      var x6754 = cljs.core.clone.call(null, handlers);
      x6754.forEach = function(x6754, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
        return function(f) {
          var coll = this;
          var seq__6755 = cljs.core.seq.call(null, coll);
          var chunk__6756 = null;
          var count__6757 = 0;
          var i__6758 = 0;
          while (true) {
            if (i__6758 < count__6757) {
              var vec__6759 = cljs.core._nth.call(null, chunk__6756, i__6758);
              var k = cljs.core.nth.call(null, vec__6759, 0, null);
              var v = cljs.core.nth.call(null, vec__6759, 1, null);
              f.call(null, v, k);
              var G__6761 = seq__6755;
              var G__6762 = chunk__6756;
              var G__6763 = count__6757;
              var G__6764 = i__6758 + 1;
              seq__6755 = G__6761;
              chunk__6756 = G__6762;
              count__6757 = G__6763;
              i__6758 = G__6764;
              continue;
            } else {
              var temp__4126__auto__ = cljs.core.seq.call(null, seq__6755);
              if (temp__4126__auto__) {
                var seq__6755__$1 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__6755__$1)) {
                  var c__4907__auto__ = cljs.core.chunk_first.call(null, seq__6755__$1);
                  var G__6765 = cljs.core.chunk_rest.call(null, seq__6755__$1);
                  var G__6766 = c__4907__auto__;
                  var G__6767 = cljs.core.count.call(null, c__4907__auto__);
                  var G__6768 = 0;
                  seq__6755 = G__6765;
                  chunk__6756 = G__6766;
                  count__6757 = G__6767;
                  i__6758 = G__6768;
                  continue;
                } else {
                  var vec__6760 = cljs.core.first.call(null, seq__6755__$1);
                  var k = cljs.core.nth.call(null, vec__6760, 0, null);
                  var v = cljs.core.nth.call(null, vec__6760, 1, null);
                  f.call(null, v, k);
                  var G__6769 = cljs.core.next.call(null, seq__6755__$1);
                  var G__6770 = null;
                  var G__6771 = 0;
                  var G__6772 = 0;
                  seq__6755 = G__6769;
                  chunk__6756 = G__6770;
                  count__6757 = G__6771;
                  i__6758 = G__6772;
                  continue;
                }
              } else {
                return null;
              }
            }
            break;
          }
        };
      }(x6754, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers);
      return x6754;
    }(), "objectBuilder":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(m, kfn, vfn) {
        return cljs.core.reduce_kv.call(null, function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
          return function(obj, k, v) {
            var G__6753 = obj;
            G__6753.push(kfn.call(null, k), vfn.call(null, v));
            return G__6753;
          };
        }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), ["^ "], m);
      };
    }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers)}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
  };
  cognitect$transit$writer = function(type, opts) {
    switch(arguments.length) {
      case 1:
        return cognitect$transit$writer__1.call(this, type);
      case 2:
        return cognitect$transit$writer__2.call(this, type, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cognitect$transit$writer.cljs$core$IFn$_invoke$arity$1 = cognitect$transit$writer__1;
  cognitect$transit$writer.cljs$core$IFn$_invoke$arity$2 = cognitect$transit$writer__2;
  return cognitect$transit$writer;
}();
cognitect.transit.write = function cognitect$transit$write(w, o) {
  return w.write(o);
};
cognitect.transit.read_handler = function cognitect$transit$read_handler(from_rep) {
  return from_rep;
};
cognitect.transit.write_handler = function() {
  var cognitect$transit$write_handler = null;
  var cognitect$transit$write_handler__2 = function(tag_fn, rep_fn) {
    return cognitect$transit$write_handler.call(null, tag_fn, rep_fn, null, null);
  };
  var cognitect$transit$write_handler__3 = function(tag_fn, rep_fn, str_rep_fn) {
    return cognitect$transit$write_handler.call(null, tag_fn, rep_fn, str_rep_fn, null);
  };
  var cognitect$transit$write_handler__4 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
    if (typeof cognitect.transit.t6776 !== "undefined") {
    } else {
      cognitect.transit.t6776 = function(verbose_handler_fn, str_rep_fn, rep_fn, tag_fn, write_handler, meta6777) {
        this.verbose_handler_fn = verbose_handler_fn;
        this.str_rep_fn = str_rep_fn;
        this.rep_fn = rep_fn;
        this.tag_fn = tag_fn;
        this.write_handler = write_handler;
        this.meta6777 = meta6777;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cognitect.transit.t6776.prototype.tag = function(o) {
        var self__ = this;
        var _ = this;
        return self__.tag_fn.call(null, o);
      };
      cognitect.transit.t6776.prototype.rep = function(o) {
        var self__ = this;
        var _ = this;
        return self__.rep_fn.call(null, o);
      };
      cognitect.transit.t6776.prototype.stringRep = function(o) {
        var self__ = this;
        var _ = this;
        if (cljs.core.truth_(self__.str_rep_fn)) {
          return self__.str_rep_fn.call(null, o);
        } else {
          return null;
        }
      };
      cognitect.transit.t6776.prototype.getVerboseHandler = function() {
        var self__ = this;
        var _ = this;
        if (cljs.core.truth_(self__.verbose_handler_fn)) {
          return self__.verbose_handler_fn.call(null);
        } else {
          return null;
        }
      };
      cognitect.transit.t6776.prototype.cljs$core$IMeta$_meta$arity$1 = function(_6778) {
        var self__ = this;
        var _6778__$1 = this;
        return self__.meta6777;
      };
      cognitect.transit.t6776.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_6778, meta6777__$1) {
        var self__ = this;
        var _6778__$1 = this;
        return new cognitect.transit.t6776(self__.verbose_handler_fn, self__.str_rep_fn, self__.rep_fn, self__.tag_fn, self__.write_handler, meta6777__$1);
      };
      cognitect.transit.t6776.cljs$lang$type = true;
      cognitect.transit.t6776.cljs$lang$ctorStr = "cognitect.transit/t6776";
      cognitect.transit.t6776.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
        return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/t6776");
      };
      cognitect.transit.__GT_t6776 = function cognitect$transit$write_handler_$___GT_t6776(verbose_handler_fn__$1, str_rep_fn__$1, rep_fn__$1, tag_fn__$1, write_handler__$1, meta6777) {
        return new cognitect.transit.t6776(verbose_handler_fn__$1, str_rep_fn__$1, rep_fn__$1, tag_fn__$1, write_handler__$1, meta6777);
      };
    }
    return new cognitect.transit.t6776(verbose_handler_fn, str_rep_fn, rep_fn, tag_fn, cognitect$transit$write_handler, cljs.core.PersistentArrayMap.EMPTY);
  };
  cognitect$transit$write_handler = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
    switch(arguments.length) {
      case 2:
        return cognitect$transit$write_handler__2.call(this, tag_fn, rep_fn);
      case 3:
        return cognitect$transit$write_handler__3.call(this, tag_fn, rep_fn, str_rep_fn);
      case 4:
        return cognitect$transit$write_handler__4.call(this, tag_fn, rep_fn, str_rep_fn, verbose_handler_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cognitect$transit$write_handler.cljs$core$IFn$_invoke$arity$2 = cognitect$transit$write_handler__2;
  cognitect$transit$write_handler.cljs$core$IFn$_invoke$arity$3 = cognitect$transit$write_handler__3;
  cognitect$transit$write_handler.cljs$core$IFn$_invoke$arity$4 = cognitect$transit$write_handler__4;
  return cognitect$transit$write_handler;
}();
cognitect.transit.tagged_value = function cognitect$transit$tagged_value(tag, rep) {
  return com.cognitect.transit.types.taggedValue.call(null, tag, rep);
};
cognitect.transit.tagged_value_QMARK_ = function cognitect$transit$tagged_value_QMARK_(x) {
  return com.cognitect.transit.types.isTaggedValue.call(null, x);
};
cognitect.transit.integer = function cognitect$transit$integer(s) {
  return com.cognitect.transit.types.integer.call(null, s);
};
cognitect.transit.integer_QMARK_ = function cognitect$transit$integer_QMARK_(x) {
  return com.cognitect.transit.types.isInteger.call(null, x);
};
cognitect.transit.bigint = function cognitect$transit$bigint(s) {
  return com.cognitect.transit.types.bigInteger.call(null, s);
};
cognitect.transit.bigint_QMARK_ = function cognitect$transit$bigint_QMARK_(x) {
  return com.cognitect.transit.types.isBigInteger.call(null, x);
};
cognitect.transit.bigdec = function cognitect$transit$bigdec(s) {
  return com.cognitect.transit.types.bigDecimalValue.call(null, s);
};
cognitect.transit.bigdec_QMARK_ = function cognitect$transit$bigdec_QMARK_(x) {
  return com.cognitect.transit.types.isBigDecimal.call(null, x);
};
cognitect.transit.uri = function cognitect$transit$uri(s) {
  return com.cognitect.transit.types.uri.call(null, s);
};
cognitect.transit.uri_QMARK_ = function cognitect$transit$uri_QMARK_(x) {
  return com.cognitect.transit.types.isURI.call(null, x);
};
cognitect.transit.uuid = function cognitect$transit$uuid(s) {
  return com.cognitect.transit.types.uuid.call(null, s);
};
cognitect.transit.uuid_QMARK_ = function cognitect$transit$uuid_QMARK_(x) {
  return com.cognitect.transit.types.isUUID.call(null, x);
};
cognitect.transit.binary = function cognitect$transit$binary(s) {
  return com.cognitect.transit.types.binary.call(null, s);
};
cognitect.transit.binary_QMARK_ = function cognitect$transit$binary_QMARK_(x) {
  return com.cognitect.transit.types.isBinary.call(null, x);
};
cognitect.transit.quoted = function cognitect$transit$quoted(x) {
  return com.cognitect.transit.types.quoted.call(null, x);
};
cognitect.transit.quoted_QMARK_ = function cognitect$transit$quoted_QMARK_(x) {
  return com.cognitect.transit.types.isQuoted.call(null, x);
};
cognitect.transit.link = function cognitect$transit$link(x) {
  return com.cognitect.transit.types.link.call(null, x);
};
cognitect.transit.link_QMARK_ = function cognitect$transit$link_QMARK_(x) {
  return com.cognitect.transit.types.isLink.call(null, x);
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
clojure.string.seq_reverse = function clojure$string$seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function clojure$string$reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace = function clojure$string$replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (match instanceof RegExp) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function clojure$string$replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var clojure$string$join = null;
  var clojure$string$join__1 = function(coll) {
    var sb = new goog.string.StringBuffer;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var G__5894 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
        var G__5895 = cljs.core.next.call(null, coll__$1);
        sb = G__5894;
        coll__$1 = G__5895;
        continue;
      } else {
        return sb.toString();
      }
      break;
    }
  };
  var clojure$string$join__2 = function(separator, coll) {
    var sb = new goog.string.StringBuffer;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
        var coll__$2 = cljs.core.next.call(null, coll__$1);
        if (coll__$2 == null) {
        } else {
          sb.append(separator);
        }
        var G__5896 = sb;
        var G__5897 = coll__$2;
        sb = G__5896;
        coll__$1 = G__5897;
        continue;
      } else {
        return sb.toString();
      }
      break;
    }
  };
  clojure$string$join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return clojure$string$join__1.call(this, separator);
      case 2:
        return clojure$string$join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clojure$string$join.cljs$core$IFn$_invoke$arity$1 = clojure$string$join__1;
  clojure$string$join.cljs$core$IFn$_invoke$arity$2 = clojure$string$join__2;
  return clojure$string$join;
}();
clojure.string.upper_case = function clojure$string$upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function clojure$string$lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function clojure$string$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function clojure$string$pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__5898 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__5898;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function clojure$string$discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function clojure$string$split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__5902 = cljs.core._EQ_;
    var expr__5903 = limit;
    if (cljs.core.truth_(pred__5902.call(null, 1, expr__5903))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__5902.call(null, 2, expr__5903))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var clojure$string$split = null;
  var clojure$string$split__2 = function(s, re) {
    return clojure$string$split.call(null, s, re, 0);
  };
  var clojure$string$split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__5905 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__5906 = limit__$1 - 1;
            var G__5907 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__5905;
            limit__$1 = G__5906;
            parts = G__5907;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  clojure$string$split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return clojure$string$split__2.call(this, s, re);
      case 3:
        return clojure$string$split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clojure$string$split.cljs$core$IFn$_invoke$arity$2 = clojure$string$split__2;
  clojure$string$split.cljs$core$IFn$_invoke$arity$3 = clojure$string$split__3;
  return clojure$string$split;
}();
clojure.string.split_lines = function clojure$string$split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function clojure$string$trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function clojure$string$triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function clojure$string$trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function clojure$string$trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__5908 = index - 1;
        index = G__5908;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function clojure$string$blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function clojure$string$escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___5909 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___5909)) {
        var replacement_5910 = temp__4124__auto___5909;
        buffer.append([cljs.core.str(replacement_5910)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__5911 = index + 1;
      index = G__5911;
      continue;
    }
    break;
  }
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj6524 = {};
  return obj6524;
}();
cljs.reader.read_char = function cljs$reader$read_char(reader) {
  if (function() {
    var and__4110__auto__ = reader;
    if (and__4110__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4758__auto__ = reader == null ? null : reader;
    return function() {
      var or__4122__auto__ = cljs.reader.read_char[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.reader.read_char["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function cljs$reader$unread(reader, ch) {
  if (function() {
    var and__4110__auto__ = reader;
    if (and__4110__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4758__auto__ = reader == null ? null : reader;
    return function() {
      var or__4122__auto__ = cljs.reader.unread[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.reader.unread["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function cljs$reader$__GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function cljs$reader$push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function cljs$reader$whitespace_QMARK_(ch) {
  var or__4122__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function cljs$reader$numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function cljs$reader$comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function cljs$reader$number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var cljs$reader$reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var cljs$reader$reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      var G__6525__i = 0, G__6525__a = new Array(arguments.length - 1);
      while (G__6525__i < G__6525__a.length) {
        G__6525__a[G__6525__i] = arguments[G__6525__i + 1];
        ++G__6525__i;
      }
      msg = new cljs.core.IndexedSeq(G__6525__a, 0);
    }
    return cljs$reader$reader_error__delegate.call(this, rdr, msg);
  };
  cljs$reader$reader_error.cljs$lang$maxFixedArity = 1;
  cljs$reader$reader_error.cljs$lang$applyTo = function(arglist__6526) {
    var rdr = cljs.core.first(arglist__6526);
    var msg = cljs.core.rest(arglist__6526);
    return cljs$reader$reader_error__delegate(rdr, msg);
  };
  cljs$reader$reader_error.cljs$core$IFn$_invoke$arity$variadic = cljs$reader$reader_error__delegate;
  return cljs$reader$reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function cljs$reader$macro_terminating_QMARK_(ch) {
  var and__4110__auto__ = !(ch === "#");
  if (and__4110__auto__) {
    var and__4110__auto____$1 = !(ch === "'");
    if (and__4110__auto____$1) {
      var and__4110__auto____$2 = !(ch === ":");
      if (and__4110__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__4110__auto____$2;
      }
    } else {
      return and__4110__auto____$1;
    }
  } else {
    return and__4110__auto__;
  }
};
cljs.reader.read_token = function cljs$reader$read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__6527 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__6528 = cljs.reader.read_char.call(null, rdr);
      sb = G__6527;
      ch = G__6528;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function cljs$reader$skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function cljs$reader$re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function cljs$reader$match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function cljs$reader$match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function cljs$reader$match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function cljs$reader$match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function cljs$reader$escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function cljs$reader$read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function cljs$reader$read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function cljs$reader$validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function cljs$reader$make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function cljs$reader$escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function cljs$reader$read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__6529 = cljs.reader.read_char.call(null, rdr);
      ch = G__6529;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function cljs$reader$read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__6530 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__6530;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__6531 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__6531;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function cljs$reader$not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function cljs$reader$read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function cljs$reader$read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function cljs$reader$read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function cljs$reader$read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function cljs$reader$read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function cljs$reader$read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__4122__auto__ = ch == null;
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__4122__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__6532 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__6533 = cljs.reader.read_char.call(null, reader);
      buffer = G__6532;
      ch = G__6533;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function cljs$reader$read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__6534 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__6535 = cljs.reader.read_char.call(null, reader);
        buffer = G__6534;
        ch = G__6535;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__6536 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__6537 = cljs.reader.read_char.call(null, reader);
          buffer = G__6536;
          ch = G__6537;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function cljs$reader$read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__6542 = function() {
            var G__6540 = buffer;
            G__6540.append(nch);
            return G__6540;
          }();
          var G__6543 = cljs.reader.read_char.call(null, reader);
          buffer = G__6542;
          ch = G__6543;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__6544 = function() {
            var G__6541 = buffer;
            G__6541.append(ch);
            return G__6541;
          }();
          var G__6545 = cljs.reader.read_char.call(null, reader);
          buffer = G__6544;
          ch = G__6545;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function cljs$reader$special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function cljs$reader$read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__4110__auto__)) {
      return!(token.length === 1);
    } else {
      return and__4110__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function cljs$reader$read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function cljs$reader$desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function cljs$reader$wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function cljs$reader$throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function cljs$reader$read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__6547 = o;
    if (G__6547) {
      var bit__4796__auto__ = G__6547.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4796__auto__ || G__6547.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__6547.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__6547);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__6547);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function cljs$reader$read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function cljs$reader$read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function cljs$reader$read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function cljs$reader$macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function cljs$reader$dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function cljs$reader$read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__6548 = reader;
        var G__6549 = eof_is_error;
        var G__6550 = sentinel;
        var G__6551 = is_recursive;
        reader = G__6548;
        eof_is_error = G__6549;
        sentinel = G__6550;
        is_recursive = G__6551;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__6552 = cljs.reader.read_comment.call(null, reader, ch);
          var G__6553 = eof_is_error;
          var G__6554 = sentinel;
          var G__6555 = is_recursive;
          reader = G__6552;
          eof_is_error = G__6553;
          sentinel = G__6554;
          is_recursive = G__6555;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__6556 = reader;
            var G__6557 = eof_is_error;
            var G__6558 = sentinel;
            var G__6559 = is_recursive;
            reader = G__6556;
            eof_is_error = G__6557;
            sentinel = G__6558;
            is_recursive = G__6559;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function cljs$reader$read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function cljs$reader$zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__6560 = b.append("0");
          b = G__6560;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function cljs$reader$divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function cljs$reader$indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function cljs$reader$leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function cljs$reader$parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function cljs$reader$check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function cljs$reader$parse_and_validate_timestamp(s) {
  var vec__6562 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__6562, 0, null);
  var years = cljs.core.nth.call(null, vec__6562, 1, null);
  var months = cljs.core.nth.call(null, vec__6562, 2, null);
  var days = cljs.core.nth.call(null, vec__6562, 3, null);
  var hours = cljs.core.nth.call(null, vec__6562, 4, null);
  var minutes = cljs.core.nth.call(null, vec__6562, 5, null);
  var seconds = cljs.core.nth.call(null, vec__6562, 6, null);
  var fraction = cljs.core.nth.call(null, vec__6562, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__6562, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__6562, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__6562, 10, null);
  var v = vec__6562;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__4122__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__4122__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__4122__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__4122__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__4122__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__4122__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__4122__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__4122__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function cljs$reader$parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__6564 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__6564, 0, null);
    var months = cljs.core.nth.call(null, vec__6564, 1, null);
    var days = cljs.core.nth.call(null, vec__6564, 2, null);
    var hours = cljs.core.nth.call(null, vec__6564, 3, null);
    var minutes = cljs.core.nth.call(null, vec__6564, 4, null);
    var seconds = cljs.core.nth.call(null, vec__6564, 5, null);
    var ms = cljs.core.nth.call(null, vec__6564, 6, null);
    var offset = cljs.core.nth.call(null, vec__6564, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function cljs$reader$read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function cljs$reader$read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function cljs$reader$read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__6577_6589 = cljs.core.seq.call(null, form);
    var chunk__6578_6590 = null;
    var count__6579_6591 = 0;
    var i__6580_6592 = 0;
    while (true) {
      if (i__6580_6592 < count__6579_6591) {
        var x_6593 = cljs.core._nth.call(null, chunk__6578_6590, i__6580_6592);
        arr.push(x_6593);
        var G__6594 = seq__6577_6589;
        var G__6595 = chunk__6578_6590;
        var G__6596 = count__6579_6591;
        var G__6597 = i__6580_6592 + 1;
        seq__6577_6589 = G__6594;
        chunk__6578_6590 = G__6595;
        count__6579_6591 = G__6596;
        i__6580_6592 = G__6597;
        continue;
      } else {
        var temp__4126__auto___6598 = cljs.core.seq.call(null, seq__6577_6589);
        if (temp__4126__auto___6598) {
          var seq__6577_6599__$1 = temp__4126__auto___6598;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__6577_6599__$1)) {
            var c__4907__auto___6600 = cljs.core.chunk_first.call(null, seq__6577_6599__$1);
            var G__6601 = cljs.core.chunk_rest.call(null, seq__6577_6599__$1);
            var G__6602 = c__4907__auto___6600;
            var G__6603 = cljs.core.count.call(null, c__4907__auto___6600);
            var G__6604 = 0;
            seq__6577_6589 = G__6601;
            chunk__6578_6590 = G__6602;
            count__6579_6591 = G__6603;
            i__6580_6592 = G__6604;
            continue;
          } else {
            var x_6605 = cljs.core.first.call(null, seq__6577_6599__$1);
            arr.push(x_6605);
            var G__6606 = cljs.core.next.call(null, seq__6577_6599__$1);
            var G__6607 = null;
            var G__6608 = 0;
            var G__6609 = 0;
            seq__6577_6589 = G__6606;
            chunk__6578_6590 = G__6607;
            count__6579_6591 = G__6608;
            i__6580_6592 = G__6609;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj6582 = {};
        return obj6582;
      }();
      var seq__6583_6610 = cljs.core.seq.call(null, form);
      var chunk__6584_6611 = null;
      var count__6585_6612 = 0;
      var i__6586_6613 = 0;
      while (true) {
        if (i__6586_6613 < count__6585_6612) {
          var vec__6587_6614 = cljs.core._nth.call(null, chunk__6584_6611, i__6586_6613);
          var k_6615 = cljs.core.nth.call(null, vec__6587_6614, 0, null);
          var v_6616 = cljs.core.nth.call(null, vec__6587_6614, 1, null);
          obj[cljs.core.name.call(null, k_6615)] = v_6616;
          var G__6617 = seq__6583_6610;
          var G__6618 = chunk__6584_6611;
          var G__6619 = count__6585_6612;
          var G__6620 = i__6586_6613 + 1;
          seq__6583_6610 = G__6617;
          chunk__6584_6611 = G__6618;
          count__6585_6612 = G__6619;
          i__6586_6613 = G__6620;
          continue;
        } else {
          var temp__4126__auto___6621 = cljs.core.seq.call(null, seq__6583_6610);
          if (temp__4126__auto___6621) {
            var seq__6583_6622__$1 = temp__4126__auto___6621;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__6583_6622__$1)) {
              var c__4907__auto___6623 = cljs.core.chunk_first.call(null, seq__6583_6622__$1);
              var G__6624 = cljs.core.chunk_rest.call(null, seq__6583_6622__$1);
              var G__6625 = c__4907__auto___6623;
              var G__6626 = cljs.core.count.call(null, c__4907__auto___6623);
              var G__6627 = 0;
              seq__6583_6610 = G__6624;
              chunk__6584_6611 = G__6625;
              count__6585_6612 = G__6626;
              i__6586_6613 = G__6627;
              continue;
            } else {
              var vec__6588_6628 = cljs.core.first.call(null, seq__6583_6622__$1);
              var k_6629 = cljs.core.nth.call(null, vec__6588_6628, 0, null);
              var v_6630 = cljs.core.nth.call(null, vec__6588_6628, 1, null);
              obj[cljs.core.name.call(null, k_6629)] = v_6630;
              var G__6631 = cljs.core.next.call(null, seq__6583_6622__$1);
              var G__6632 = null;
              var G__6633 = 0;
              var G__6634 = 0;
              seq__6583_6610 = G__6631;
              chunk__6584_6611 = G__6632;
              count__6585_6612 = G__6633;
              i__6586_6613 = G__6634;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function cljs$reader$read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function cljs$reader$maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function cljs$reader$register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function cljs$reader$deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function cljs$reader$register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function cljs$reader$deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("ajax.core");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("cognitect.transit");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrManager");
goog.require("goog.json");
goog.require("goog.Uri.QueryData");
goog.require("goog.net.EventType");
goog.require("goog.events");
goog.require("goog.structs");
goog.require("goog.json.Serializer");
goog.require("clojure.string");
goog.require("cljs.reader");
goog.require("goog.net.ErrorCode");
ajax.core.AjaxImpl = function() {
  var obj6394 = {};
  return obj6394;
}();
ajax.core._js_ajax_request = function ajax$core$_js_ajax_request(this$, uri, method, body, headers, handler, opts) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7(this$, uri, method, body, headers, handler, opts);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = ajax.core._js_ajax_request[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = ajax.core._js_ajax_request["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxImpl.-js-ajax-request", this$);
        }
      }
    }().call(null, this$, uri, method, body, headers, handler, opts);
  }
};
ajax.core.AjaxRequest = function() {
  var obj6396 = {};
  return obj6396;
}();
ajax.core._abort = function ajax$core$_abort(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.ajax$core$AjaxRequest$_abort$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxRequest$_abort$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = ajax.core._abort[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = ajax.core._abort["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxRequest.-abort", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core.DirectlySubmittable = function() {
  var obj6398 = {};
  return obj6398;
}();
ajax.core.AjaxResponse = function() {
  var obj6400 = {};
  return obj6400;
}();
ajax.core._status = function ajax$core$_status(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.ajax$core$AjaxResponse$_status$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_status$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = ajax.core._status[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = ajax.core._status["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-status", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core._status_text = function ajax$core$_status_text(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.ajax$core$AjaxResponse$_status_text$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_status_text$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = ajax.core._status_text[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = ajax.core._status_text["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-status-text", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core._body = function ajax$core$_body(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.ajax$core$AjaxResponse$_body$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_body$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = ajax.core._body[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = ajax.core._body["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-body", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core._get_response_header = function ajax$core$_get_response_header(this$, header) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.ajax$core$AjaxResponse$_get_response_header$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_get_response_header$arity$2(this$, header);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = ajax.core._get_response_header[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = ajax.core._get_response_header["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-get-response-header", this$);
        }
      }
    }().call(null, this$, header);
  }
};
ajax.core._was_aborted = function ajax$core$_was_aborted(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.ajax$core$AjaxResponse$_was_aborted$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_was_aborted$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = ajax.core._was_aborted[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = ajax.core._was_aborted["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-was-aborted", this$);
        }
      }
    }().call(null, this$);
  }
};
if (typeof FormData !== "undefined") {
  FormData.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
if (typeof ArrayBufferView !== "undefined") {
  ArrayBufferView.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
if (typeof Blob !== "undefined") {
  Blob.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
if (typeof Document !== "undefined") {
  Document.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
ajax.core.submittable_QMARK_ = function ajax$core$submittable_QMARK_(params) {
  var or__4122__auto__ = function() {
    var G__6404 = params;
    if (G__6404) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__6404.ajax$core$DirectlySubmittable$;
        }
      }())) {
        return true;
      } else {
        if (!G__6404.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, ajax.core.DirectlySubmittable, G__6404);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, ajax.core.DirectlySubmittable, G__6404);
    }
  }();
  if (or__4122__auto__) {
    return or__4122__auto__;
  } else {
    return typeof params === "string";
  }
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_body$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getResponseText();
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_status$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getStatus();
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_status_text$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getStatusText();
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_get_response_header$arity$2 = function(this$, header) {
  var this$__$1 = this;
  return this$__$1.getResponseHeader(header);
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_was_aborted$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._EQ_.call(null, this$__$1.getLastErrorCode(), goog.net.ErrorCode.ABORT);
};
goog.net.XhrIo.prototype.ajax$core$AjaxRequest$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxRequest$_abort$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.abort(goog.net.ErrorCode.ABORT);
};
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__6406) {
  var map__6407 = p__6406;
  var map__6407__$1 = cljs.core.seq_QMARK_.call(null, map__6407) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6407) : map__6407;
  var with_credentials = cljs.core.get.call(null, map__6407__$1, new cljs.core.Keyword(null, "with-credentials", "with-credentials", -1163127235), false);
  var timeout = cljs.core.get.call(null, map__6407__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318), 0);
  var this$__$1 = this;
  var G__6408 = this$__$1;
  goog.events.listen(G__6408, goog.net.EventType.COMPLETE, function(G__6408, this$__$1, map__6407, map__6407__$1, with_credentials, timeout) {
    return function(p1__6405_SHARP_) {
      return handler.call(null, p1__6405_SHARP_.target);
    };
  }(G__6408, this$__$1, map__6407, map__6407__$1, with_credentials, timeout));
  G__6408.setTimeoutInterval(timeout);
  G__6408.setWithCredentials(with_credentials);
  G__6408.send(uri, method, body, cljs.core.clj__GT_js.call(null, headers));
  return G__6408;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$ = true;
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_body$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.response;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_status$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.status;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_status_text$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.statusText;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_get_response_header$arity$2 = function(this$, header) {
  var this$__$1 = this;
  return this$__$1.getResponseHeader(header);
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_was_aborted$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._EQ_.call(null, 0, this$__$1.readyState);
};
XMLHttpRequest.prototype.ajax$core$AjaxRequest$ = true;
XMLHttpRequest.prototype.ajax$core$AjaxRequest$_abort$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.abort();
};
XMLHttpRequest.prototype.ajax$core$AjaxImpl$ = true;
XMLHttpRequest.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__6409) {
  var map__6410 = p__6409;
  var map__6410__$1 = cljs.core.seq_QMARK_.call(null, map__6410) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6410) : map__6410;
  var with_credentials = cljs.core.get.call(null, map__6410__$1, new cljs.core.Keyword(null, "with-credentials", "with-credentials", -1163127235), false);
  var timeout = cljs.core.get.call(null, map__6410__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318), 0);
  var this$__$1 = this;
  this$__$1.timeout = timeout;
  this$__$1.withCredentials = with_credentials;
  this$__$1.onreadystatechange = function(this$__$1, map__6410, map__6410__$1, with_credentials, timeout) {
    return function() {
      return handler.call(null, this$__$1);
    };
  }(this$__$1, map__6410, map__6410__$1, with_credentials, timeout);
  var G__6411 = this$__$1;
  G__6411.open(method, uri, true);
  var t_6418 = G__6411;
  var t_6419__$1 = function() {
    var seq__6412 = cljs.core.seq.call(null, headers);
    var chunk__6413 = null;
    var count__6414 = 0;
    var i__6415 = 0;
    while (true) {
      if (i__6415 < count__6414) {
        var vec__6416 = cljs.core._nth.call(null, chunk__6413, i__6415);
        var k = cljs.core.nth.call(null, vec__6416, 0, null);
        var v = cljs.core.nth.call(null, vec__6416, 1, null);
        t_6418.setRequestHeader(k, v);
        var G__6420 = seq__6412;
        var G__6421 = chunk__6413;
        var G__6422 = count__6414;
        var G__6423 = i__6415 + 1;
        seq__6412 = G__6420;
        chunk__6413 = G__6421;
        count__6414 = G__6422;
        i__6415 = G__6423;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__6412);
        if (temp__4126__auto__) {
          var seq__6412__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__6412__$1)) {
            var c__4907__auto__ = cljs.core.chunk_first.call(null, seq__6412__$1);
            var G__6424 = cljs.core.chunk_rest.call(null, seq__6412__$1);
            var G__6425 = c__4907__auto__;
            var G__6426 = cljs.core.count.call(null, c__4907__auto__);
            var G__6427 = 0;
            seq__6412 = G__6424;
            chunk__6413 = G__6425;
            count__6414 = G__6426;
            i__6415 = G__6427;
            continue;
          } else {
            var vec__6417 = cljs.core.first.call(null, seq__6412__$1);
            var k = cljs.core.nth.call(null, vec__6417, 0, null);
            var v = cljs.core.nth.call(null, vec__6417, 1, null);
            t_6418.setRequestHeader(k, v);
            var G__6428 = cljs.core.next.call(null, seq__6412__$1);
            var G__6429 = null;
            var G__6430 = 0;
            var G__6431 = 0;
            seq__6412 = G__6428;
            chunk__6413 = G__6429;
            count__6414 = G__6430;
            i__6415 = G__6431;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  }();
  G__6411.send(function() {
    var or__4122__auto__ = body;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return "";
    }
  }());
  return G__6411;
};
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__6432) {
  var map__6433 = p__6432;
  var map__6433__$1 = cljs.core.seq_QMARK_.call(null, map__6433) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6433) : map__6433;
  var max_retries = cljs.core.get.call(null, map__6433__$1, new cljs.core.Keyword(null, "max-retries", "max-retries", -1933762121));
  var priority = cljs.core.get.call(null, map__6433__$1, new cljs.core.Keyword(null, "priority", "priority", 1431093715));
  var timeout = cljs.core.get.call(null, map__6433__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
  var id = cljs.core.get.call(null, map__6433__$1, new cljs.core.Keyword(null, "id", "id", -1388402092));
  var this$__$1 = this;
  return this$__$1.send(id, uri, method, body, cljs.core.clj__GT_js.call(null, headers), priority, handler, max_retries);
};
ajax.core.abort = function ajax$core$abort(this$) {
  return ajax.core._abort.call(null, this$);
};
ajax.core.success_QMARK_ = function ajax$core$success_QMARK_(status) {
  return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([status], true), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [200, 201, 202, 204, 205, 206], null));
};
ajax.core.read_edn = function ajax$core$read_edn(xhrio) {
  return cljs.reader.read_string.call(null, ajax.core._body.call(null, xhrio));
};
ajax.core.edn_response_format = function() {
  var ajax$core$edn_response_format = null;
  var ajax$core$edn_response_format__0 = function() {
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.read_edn, new cljs.core.Keyword(null, "description", "description", -1428560544), "EDN", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/edn"], null);
  };
  var ajax$core$edn_response_format__1 = function(opts) {
    return ajax$core$edn_response_format.call(null);
  };
  ajax$core$edn_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return ajax$core$edn_response_format__0.call(this);
      case 1:
        return ajax$core$edn_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$edn_response_format.cljs$core$IFn$_invoke$arity$0 = ajax$core$edn_response_format__0;
  ajax$core$edn_response_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$edn_response_format__1;
  return ajax$core$edn_response_format;
}();
ajax.core.edn_request_format = function ajax$core$edn_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), cljs.core.pr_str, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/edn"], null);
};
ajax.core.transit_content_type = "application/transit+json; charset\x3dutf-8";
ajax.core.transit_write = function() {
  var ajax$core$transit_write = null;
  var ajax$core$transit_write__1 = function(writer) {
    return function(params) {
      return cognitect.transit.write.call(null, writer, params);
    };
  };
  var ajax$core$transit_write__2 = function(writer, params) {
    return cognitect.transit.write.call(null, writer, params);
  };
  ajax$core$transit_write = function(writer, params) {
    switch(arguments.length) {
      case 1:
        return ajax$core$transit_write__1.call(this, writer);
      case 2:
        return ajax$core$transit_write__2.call(this, writer, params);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$transit_write.cljs$core$IFn$_invoke$arity$1 = ajax$core$transit_write__1;
  ajax$core$transit_write.cljs$core$IFn$_invoke$arity$2 = ajax$core$transit_write__2;
  return ajax$core$transit_write;
}();
ajax.core.transit_request_format = function() {
  var ajax$core$transit_request_format = null;
  var ajax$core$transit_request_format__0 = function() {
    return ajax$core$transit_request_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var ajax$core$transit_request_format__1 = function(p__6434) {
    var map__6436 = p__6434;
    var map__6436__$1 = cljs.core.seq_QMARK_.call(null, map__6436) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6436) : map__6436;
    var opts = map__6436__$1;
    var writer = cljs.core.get.call(null, map__6436__$1, new cljs.core.Keyword(null, "writer", "writer", -277568236));
    var type = cljs.core.get.call(null, map__6436__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
    var writer__$1 = function() {
      var or__4122__auto__ = writer;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return cognitect.transit.writer.call(null, function() {
          var or__4122__auto____$1 = type;
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            return new cljs.core.Keyword(null, "json", "json", 1279968570);
          }
        }(), opts);
      }
    }();
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.transit_write.call(null, writer__$1), new cljs.core.Keyword(null, "content-type", "content-type", -508222634), ajax.core.transit_content_type], null);
  };
  ajax$core$transit_request_format = function(p__6434) {
    switch(arguments.length) {
      case 0:
        return ajax$core$transit_request_format__0.call(this);
      case 1:
        return ajax$core$transit_request_format__1.call(this, p__6434);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$transit_request_format.cljs$core$IFn$_invoke$arity$0 = ajax$core$transit_request_format__0;
  ajax$core$transit_request_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$transit_request_format__1;
  return ajax$core$transit_request_format;
}();
ajax.core.transit_read = function() {
  var ajax$core$transit_read = null;
  var ajax$core$transit_read__1 = function(reader) {
    return function(raw, xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var data = cognitect.transit.read.call(null, reader, text);
      if (cljs.core.truth_(raw)) {
        return data;
      } else {
        return cljs.core.js__GT_clj.call(null, data);
      }
    };
  };
  var ajax$core$transit_read__2 = function(reader, raw) {
    return function(xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var data = cognitect.transit.read.call(null, reader, text);
      if (cljs.core.truth_(raw)) {
        return data;
      } else {
        return cljs.core.js__GT_clj.call(null, data);
      }
    };
  };
  var ajax$core$transit_read__3 = function(reader, raw, xhrio) {
    var text = ajax.core._body.call(null, xhrio);
    var data = cognitect.transit.read.call(null, reader, text);
    if (cljs.core.truth_(raw)) {
      return data;
    } else {
      return cljs.core.js__GT_clj.call(null, data);
    }
  };
  ajax$core$transit_read = function(reader, raw, xhrio) {
    switch(arguments.length) {
      case 1:
        return ajax$core$transit_read__1.call(this, reader);
      case 2:
        return ajax$core$transit_read__2.call(this, reader, raw);
      case 3:
        return ajax$core$transit_read__3.call(this, reader, raw, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$transit_read.cljs$core$IFn$_invoke$arity$1 = ajax$core$transit_read__1;
  ajax$core$transit_read.cljs$core$IFn$_invoke$arity$2 = ajax$core$transit_read__2;
  ajax$core$transit_read.cljs$core$IFn$_invoke$arity$3 = ajax$core$transit_read__3;
  return ajax$core$transit_read;
}();
ajax.core.transit_response_format = function() {
  var ajax$core$transit_response_format = null;
  var ajax$core$transit_response_format__0 = function() {
    return ajax$core$transit_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var ajax$core$transit_response_format__1 = function(p__6437) {
    var map__6439 = p__6437;
    var map__6439__$1 = cljs.core.seq_QMARK_.call(null, map__6439) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6439) : map__6439;
    var opts = map__6439__$1;
    var raw = cljs.core.get.call(null, map__6439__$1, new cljs.core.Keyword(null, "raw", "raw", 1604651272));
    var reader = cljs.core.get.call(null, map__6439__$1, new cljs.core.Keyword(null, "reader", "reader", 169660853));
    var type = cljs.core.get.call(null, map__6439__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
    var reader__$1 = function() {
      var or__4122__auto__ = reader;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return cognitect.transit.reader.call(null, function() {
          var or__4122__auto____$1 = type;
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            return new cljs.core.Keyword(null, "json", "json", 1279968570);
          }
        }(), opts);
      }
    }();
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.transit_read.call(null, reader__$1, raw), new cljs.core.Keyword(null, "description", "description", -1428560544), "Transit", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/transit+json"], null);
  };
  ajax$core$transit_response_format = function(p__6437) {
    switch(arguments.length) {
      case 0:
        return ajax$core$transit_response_format__0.call(this);
      case 1:
        return ajax$core$transit_response_format__1.call(this, p__6437);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$transit_response_format.cljs$core$IFn$_invoke$arity$0 = ajax$core$transit_response_format__0;
  ajax$core$transit_response_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$transit_response_format__1;
  return ajax$core$transit_response_format;
}();
ajax.core.params_to_str = function ajax$core$params_to_str(params) {
  if (cljs.core.truth_(params)) {
    return goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, params))).toString();
  } else {
    return null;
  }
};
ajax.core.url_request_format = function ajax$core$url_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.params_to_str, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/x-www-form-urlencoded"], null);
};
ajax.core.raw_response_format = function() {
  var ajax$core$raw_response_format = null;
  var ajax$core$raw_response_format__0 = function() {
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core._body, new cljs.core.Keyword(null, "description", "description", -1428560544), "raw text", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "*/*"], null);
  };
  var ajax$core$raw_response_format__1 = function(opts) {
    return ajax$core$raw_response_format.call(null);
  };
  ajax$core$raw_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return ajax$core$raw_response_format__0.call(this);
      case 1:
        return ajax$core$raw_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$raw_response_format.cljs$core$IFn$_invoke$arity$0 = ajax$core$raw_response_format__0;
  ajax$core$raw_response_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$raw_response_format__1;
  return ajax$core$raw_response_format;
}();
ajax.core.write_json = function ajax$core$write_json(data) {
  return(new goog.json.Serializer).serialize(cljs.core.clj__GT_js.call(null, data));
};
ajax.core.json_request_format = function ajax$core$json_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.write_json, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/json"], null);
};
ajax.core.json_read = function() {
  var ajax$core$json_read = null;
  var ajax$core$json_read__1 = function(prefix) {
    return function(raw, keywords_QMARK_, xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var text__$1 = cljs.core.truth_(function() {
        var and__4110__auto__ = prefix;
        if (cljs.core.truth_(and__4110__auto__)) {
          return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
        } else {
          return and__4110__auto__;
        }
      }()) ? text.substring(prefix.length()) : text;
      var json = goog.json.parse(text__$1);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var ajax$core$json_read__2 = function(prefix, raw) {
    return function(keywords_QMARK_, xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var text__$1 = cljs.core.truth_(function() {
        var and__4110__auto__ = prefix;
        if (cljs.core.truth_(and__4110__auto__)) {
          return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
        } else {
          return and__4110__auto__;
        }
      }()) ? text.substring(prefix.length()) : text;
      var json = goog.json.parse(text__$1);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var ajax$core$json_read__3 = function(prefix, raw, keywords_QMARK_) {
    return function(xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var text__$1 = cljs.core.truth_(function() {
        var and__4110__auto__ = prefix;
        if (cljs.core.truth_(and__4110__auto__)) {
          return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
        } else {
          return and__4110__auto__;
        }
      }()) ? text.substring(prefix.length()) : text;
      var json = goog.json.parse(text__$1);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var ajax$core$json_read__4 = function(prefix, raw, keywords_QMARK_, xhrio) {
    var text = ajax.core._body.call(null, xhrio);
    var text__$1 = cljs.core.truth_(function() {
      var and__4110__auto__ = prefix;
      if (cljs.core.truth_(and__4110__auto__)) {
        return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
      } else {
        return and__4110__auto__;
      }
    }()) ? text.substring(prefix.length()) : text;
    var json = goog.json.parse(text__$1);
    if (cljs.core.truth_(raw)) {
      return json;
    } else {
      return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
    }
  };
  ajax$core$json_read = function(prefix, raw, keywords_QMARK_, xhrio) {
    switch(arguments.length) {
      case 1:
        return ajax$core$json_read__1.call(this, prefix);
      case 2:
        return ajax$core$json_read__2.call(this, prefix, raw);
      case 3:
        return ajax$core$json_read__3.call(this, prefix, raw, keywords_QMARK_);
      case 4:
        return ajax$core$json_read__4.call(this, prefix, raw, keywords_QMARK_, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$json_read.cljs$core$IFn$_invoke$arity$1 = ajax$core$json_read__1;
  ajax$core$json_read.cljs$core$IFn$_invoke$arity$2 = ajax$core$json_read__2;
  ajax$core$json_read.cljs$core$IFn$_invoke$arity$3 = ajax$core$json_read__3;
  ajax$core$json_read.cljs$core$IFn$_invoke$arity$4 = ajax$core$json_read__4;
  return ajax$core$json_read;
}();
ajax.core.json_response_format = function() {
  var ajax$core$json_response_format = null;
  var ajax$core$json_response_format__0 = function() {
    return ajax$core$json_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var ajax$core$json_response_format__1 = function(p__6440) {
    var map__6442 = p__6440;
    var map__6442__$1 = cljs.core.seq_QMARK_.call(null, map__6442) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6442) : map__6442;
    var raw = cljs.core.get.call(null, map__6442__$1, new cljs.core.Keyword(null, "raw", "raw", 1604651272));
    var keywords_QMARK_ = cljs.core.get.call(null, map__6442__$1, new cljs.core.Keyword(null, "keywords?", "keywords?", 764949733));
    var prefix = cljs.core.get.call(null, map__6442__$1, new cljs.core.Keyword(null, "prefix", "prefix", -265908465));
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.json_read.call(null, prefix, raw, keywords_QMARK_), new cljs.core.Keyword(null, "description", "description", -1428560544), [cljs.core.str("JSON"), cljs.core.str(cljs.core.truth_(prefix) ? [cljs.core.str(" prefix '"), cljs.core.str(prefix), cljs.core.str("'")].join("") : null), cljs.core.str(cljs.core.truth_(keywords_QMARK_) ? " keywordize" : null)].join(""), new cljs.core.Keyword(null, 
    "content-type", "content-type", -508222634), "application/json"], null);
  };
  ajax$core$json_response_format = function(p__6440) {
    switch(arguments.length) {
      case 0:
        return ajax$core$json_response_format__0.call(this);
      case 1:
        return ajax$core$json_response_format__1.call(this, p__6440);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$json_response_format.cljs$core$IFn$_invoke$arity$0 = ajax$core$json_response_format__0;
  ajax$core$json_response_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$json_response_format__1;
  return ajax$core$json_response_format;
}();
ajax.core.default_formats = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [ajax.core.json_response_format, ajax.core.edn_response_format, ajax.core.transit_response_format, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["text/plain", ajax.core.raw_response_format], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["text/html", ajax.core.raw_response_format], null), ajax.core.raw_response_format], 
null);
ajax.core.get_format = function() {
  var ajax$core$get_format = null;
  var ajax$core$get_format__1 = function(opts) {
    return function(format_entry) {
      if (cljs.core.vector_QMARK_.call(null, format_entry)) {
        return ajax$core$get_format.call(null, opts, cljs.core.second.call(null, format_entry));
      } else {
        if (cljs.core.map_QMARK_.call(null, format_entry)) {
          return format_entry;
        } else {
          return format_entry.call(null, opts);
        }
      }
    };
  };
  var ajax$core$get_format__2 = function(opts, format_entry) {
    if (cljs.core.vector_QMARK_.call(null, format_entry)) {
      return ajax$core$get_format.call(null, opts, cljs.core.second.call(null, format_entry));
    } else {
      if (cljs.core.map_QMARK_.call(null, format_entry)) {
        return format_entry;
      } else {
        return format_entry.call(null, opts);
      }
    }
  };
  ajax$core$get_format = function(opts, format_entry) {
    switch(arguments.length) {
      case 1:
        return ajax$core$get_format__1.call(this, opts);
      case 2:
        return ajax$core$get_format__2.call(this, opts, format_entry);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$get_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$get_format__1;
  ajax$core$get_format.cljs$core$IFn$_invoke$arity$2 = ajax$core$get_format__2;
  return ajax$core$get_format;
}();
ajax.core.accept_entry = function() {
  var ajax$core$accept_entry = null;
  var ajax$core$accept_entry__1 = function(opts) {
    return function(format_entry) {
      var or__4122__auto__ = cljs.core.vector_QMARK_.call(null, format_entry) ? cljs.core.first.call(null, format_entry) : (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_format.call(null, opts, format_entry));
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return "*/*";
      }
    };
  };
  var ajax$core$accept_entry__2 = function(opts, format_entry) {
    var or__4122__auto__ = cljs.core.vector_QMARK_.call(null, format_entry) ? cljs.core.first.call(null, format_entry) : (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_format.call(null, opts, format_entry));
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return "*/*";
    }
  };
  ajax$core$accept_entry = function(opts, format_entry) {
    switch(arguments.length) {
      case 1:
        return ajax$core$accept_entry__1.call(this, opts);
      case 2:
        return ajax$core$accept_entry__2.call(this, opts, format_entry);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$accept_entry.cljs$core$IFn$_invoke$arity$1 = ajax$core$accept_entry__1;
  ajax$core$accept_entry.cljs$core$IFn$_invoke$arity$2 = ajax$core$accept_entry__2;
  return ajax$core$accept_entry;
}();
ajax.core.detect_content_type = function() {
  var ajax$core$detect_content_type = null;
  var ajax$core$detect_content_type__1 = function(content_type) {
    return function(opts, format_entry) {
      var accept = ajax.core.accept_entry.call(null, opts, format_entry);
      return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
    };
  };
  var ajax$core$detect_content_type__2 = function(content_type, opts) {
    return function(format_entry) {
      var accept = ajax.core.accept_entry.call(null, opts, format_entry);
      return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
    };
  };
  var ajax$core$detect_content_type__3 = function(content_type, opts, format_entry) {
    var accept = ajax.core.accept_entry.call(null, opts, format_entry);
    return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
  };
  ajax$core$detect_content_type = function(content_type, opts, format_entry) {
    switch(arguments.length) {
      case 1:
        return ajax$core$detect_content_type__1.call(this, content_type);
      case 2:
        return ajax$core$detect_content_type__2.call(this, content_type, opts);
      case 3:
        return ajax$core$detect_content_type__3.call(this, content_type, opts, format_entry);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$detect_content_type.cljs$core$IFn$_invoke$arity$1 = ajax$core$detect_content_type__1;
  ajax$core$detect_content_type.cljs$core$IFn$_invoke$arity$2 = ajax$core$detect_content_type__2;
  ajax$core$detect_content_type.cljs$core$IFn$_invoke$arity$3 = ajax$core$detect_content_type__3;
  return ajax$core$detect_content_type;
}();
ajax.core.get_default_format = function ajax$core$get_default_format(xhrio, p__6443) {
  var map__6445 = p__6443;
  var map__6445__$1 = cljs.core.seq_QMARK_.call(null, map__6445) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6445) : map__6445;
  var opts = map__6445__$1;
  var response_format = cljs.core.get.call(null, map__6445__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  var f = ajax.core.detect_content_type.call(null, function() {
    var or__4122__auto__ = ajax.core._get_response_header.call(null, xhrio, "Content-Type");
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return "";
    }
  }(), opts);
  return ajax.core.get_format.call(null, opts, cljs.core.first.call(null, cljs.core.filter.call(null, f, response_format)));
};
ajax.core.detect_response_format_read = function() {
  var ajax$core$detect_response_format_read = null;
  var ajax$core$detect_response_format_read__1 = function(opts) {
    return function(xhrio) {
      return(new cljs.core.Keyword(null, "read", "read", 1140058661)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_default_format.call(null, xhrio, opts)).call(null, xhrio);
    };
  };
  var ajax$core$detect_response_format_read__2 = function(opts, xhrio) {
    return(new cljs.core.Keyword(null, "read", "read", 1140058661)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_default_format.call(null, xhrio, opts)).call(null, xhrio);
  };
  ajax$core$detect_response_format_read = function(opts, xhrio) {
    switch(arguments.length) {
      case 1:
        return ajax$core$detect_response_format_read__1.call(this, opts);
      case 2:
        return ajax$core$detect_response_format_read__2.call(this, opts, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$detect_response_format_read.cljs$core$IFn$_invoke$arity$1 = ajax$core$detect_response_format_read__1;
  ajax$core$detect_response_format_read.cljs$core$IFn$_invoke$arity$2 = ajax$core$detect_response_format_read__2;
  return ajax$core$detect_response_format_read;
}();
ajax.core.accept_header = function ajax$core$accept_header(p__6446) {
  var map__6448 = p__6446;
  var map__6448__$1 = cljs.core.seq_QMARK_.call(null, map__6448) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6448) : map__6448;
  var opts = map__6448__$1;
  var response_format = cljs.core.get.call(null, map__6448__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  if (cljs.core.vector_QMARK_.call(null, response_format)) {
    return clojure.string.join.call(null, ", ", cljs.core.map.call(null, ajax.core.accept_entry.call(null, opts), response_format));
  } else {
    return ajax.core.accept_entry.call(null, opts, response_format);
  }
};
ajax.core.detect_response_format = function() {
  var ajax$core$detect_response_format = null;
  var ajax$core$detect_response_format__0 = function() {
    return ajax$core$detect_response_format.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), ajax.core.default_formats], null));
  };
  var ajax$core$detect_response_format__1 = function(opts) {
    var accept = ajax.core.accept_header.call(null, opts);
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.detect_response_format_read.call(null, opts), new cljs.core.Keyword(null, "format", "format", -1306924766), [cljs.core.str("(from "), cljs.core.str(accept), cljs.core.str(")")].join(""), new cljs.core.Keyword(null, "content-type", "content-type", -508222634), accept], null);
  };
  ajax$core$detect_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return ajax$core$detect_response_format__0.call(this);
      case 1:
        return ajax$core$detect_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$detect_response_format.cljs$core$IFn$_invoke$arity$0 = ajax$core$detect_response_format__0;
  ajax$core$detect_response_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$detect_response_format__1;
  return ajax$core$detect_response_format;
}();
ajax.core.get_response_format = function ajax$core$get_response_format(p__6449) {
  var map__6451 = p__6449;
  var map__6451__$1 = cljs.core.seq_QMARK_.call(null, map__6451) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6451) : map__6451;
  var opts = map__6451__$1;
  var response_format = cljs.core.get.call(null, map__6451__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  if (cljs.core.vector_QMARK_.call(null, response_format)) {
    return ajax.core.detect_response_format.call(null, opts);
  } else {
    if (cljs.core.map_QMARK_.call(null, response_format)) {
      return response_format;
    } else {
      if (cljs.core.ifn_QMARK_.call(null, response_format)) {
        return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), response_format, new cljs.core.Keyword(null, "description", "description", -1428560544), "custom", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "*/*"], null);
      } else {
        throw new Error([cljs.core.str("unrecognized response format: "), cljs.core.str(response_format)].join(""));
      }
    }
  }
};
ajax.core.exception_response = function ajax$core$exception_response(e, status, p__6452, xhrio) {
  var map__6454 = p__6452;
  var map__6454__$1 = cljs.core.seq_QMARK_.call(null, map__6454) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6454) : map__6454;
  var description = cljs.core.get.call(null, map__6454__$1, new cljs.core.Keyword(null, "description", "description", -1428560544));
  var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), status, new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "response", "response", -1068424192), null], null);
  var status_text = [cljs.core.str(e.message), cljs.core.str("  Format should have been "), cljs.core.str(description)].join("");
  var parse_error = cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), status_text, new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "parse", "parse", -1162164619), new cljs.core.Keyword(null, "original-text", "original-text", 744448452), ajax.core._body.call(null, xhrio));
  if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
    return parse_error;
  } else {
    return cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), ajax.core._status_text.call(null, xhrio), new cljs.core.Keyword(null, "parse-error", "parse-error", 255902478), parse_error);
  }
};
ajax.core.fail = function() {
  var ajax$core$fail__delegate = function(status, status_text, failure, params) {
    var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), status, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), status_text, new cljs.core.Keyword(null, "failure", "failure", 720415879), failure], null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, cljs.core.reduce.call(null, cljs.core.conj, response, cljs.core.map.call(null, cljs.core.vec, cljs.core.partition.call(null, 2, params)))], null);
  };
  var ajax$core$fail = function(status, status_text, failure, var_args) {
    var params = null;
    if (arguments.length > 3) {
      var G__6455__i = 0, G__6455__a = new Array(arguments.length - 3);
      while (G__6455__i < G__6455__a.length) {
        G__6455__a[G__6455__i] = arguments[G__6455__i + 3];
        ++G__6455__i;
      }
      params = new cljs.core.IndexedSeq(G__6455__a, 0);
    }
    return ajax$core$fail__delegate.call(this, status, status_text, failure, params);
  };
  ajax$core$fail.cljs$lang$maxFixedArity = 3;
  ajax$core$fail.cljs$lang$applyTo = function(arglist__6456) {
    var status = cljs.core.first(arglist__6456);
    arglist__6456 = cljs.core.next(arglist__6456);
    var status_text = cljs.core.first(arglist__6456);
    arglist__6456 = cljs.core.next(arglist__6456);
    var failure = cljs.core.first(arglist__6456);
    var params = cljs.core.rest(arglist__6456);
    return ajax$core$fail__delegate(status, status_text, failure, params);
  };
  ajax$core$fail.cljs$core$IFn$_invoke$arity$variadic = ajax$core$fail__delegate;
  return ajax$core$fail;
}();
ajax.core.interpret_response = function ajax$core$interpret_response(p__6457, xhrio) {
  var map__6461 = p__6457;
  var map__6461__$1 = cljs.core.seq_QMARK_.call(null, map__6461) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6461) : map__6461;
  var format = map__6461__$1;
  var read = cljs.core.get.call(null, map__6461__$1, new cljs.core.Keyword(null, "read", "read", 1140058661));
  try {
    var status = ajax.core._status.call(null, xhrio);
    var fail = cljs.core.partial.call(null, ajax.core.fail, status);
    if (cljs.core._EQ_.call(null, -1, status)) {
      if (cljs.core.truth_(ajax.core._was_aborted.call(null, xhrio))) {
        return fail.call(null, "Request aborted by client.", new cljs.core.Keyword(null, "aborted", "aborted", 1775972619));
      } else {
        return fail.call(null, "Request timed out.", new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
      }
    } else {
      try {
        var response = read.call(null, xhrio);
        if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, response], null);
        } else {
          return fail.call(null, ajax.core._status_text.call(null, xhrio), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "response", "response", -1068424192), response);
        }
      } catch (e6463) {
        if (e6463 instanceof Object) {
          var e = e6463;
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, ajax.core.exception_response.call(null, e, status, format, xhrio)], null);
        } else {
          throw e6463;
        }
      }
    }
  } catch (e6462) {
    if (e6462 instanceof Object) {
      var e = e6462;
      return ajax.core.fail.call(null, 0, e.message, new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "exception", "exception", -335277064), e);
    } else {
      throw e6462;
    }
  }
};
ajax.core.no_format = function ajax$core$no_format(xhrio) {
  throw new Error("No response format was supplied.");
};
ajax.core.uri_with_params = function ajax$core$uri_with_params(uri, params) {
  if (cljs.core.truth_(params)) {
    return[cljs.core.str(uri), cljs.core.str("?"), cljs.core.str(ajax.core.params_to_str.call(null, params))].join("");
  } else {
    return uri;
  }
};
ajax.core.get_request_format = function ajax$core$get_request_format(format) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.ifn_QMARK_.call(null, format)) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), format, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "text/plain"], null);
    } else {
      return null;
    }
  }
};
ajax.core.normalize_method = function ajax$core$normalize_method(method) {
  if (method instanceof cljs.core.Keyword) {
    return clojure.string.upper_case.call(null, cljs.core.name.call(null, method));
  } else {
    return method;
  }
};
ajax.core.process_inputs = function ajax$core$process_inputs(p__6464, p__6465) {
  var map__6469 = p__6464;
  var map__6469__$1 = cljs.core.seq_QMARK_.call(null, map__6469) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6469) : map__6469;
  var headers = cljs.core.get.call(null, map__6469__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
  var params = cljs.core.get.call(null, map__6469__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var format = cljs.core.get.call(null, map__6469__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
  var method = cljs.core.get.call(null, map__6469__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var uri = cljs.core.get.call(null, map__6469__$1, new cljs.core.Keyword(null, "uri", "uri", -774711847));
  var map__6470 = p__6465;
  var map__6470__$1 = cljs.core.seq_QMARK_.call(null, map__6470) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6470) : map__6470;
  var content_type = cljs.core.get.call(null, map__6470__$1, new cljs.core.Keyword(null, "content-type", "content-type", -508222634));
  var headers__$1 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["Accept", content_type], null), function() {
    var or__4122__auto__ = headers;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }());
  if (cljs.core._EQ_.call(null, ajax.core.normalize_method.call(null, method), "GET")) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ajax.core.uri_with_params.call(null, uri, params), null, headers__$1], null);
  } else {
    var map__6471 = ajax.core.get_request_format.call(null, format);
    var map__6471__$1 = cljs.core.seq_QMARK_.call(null, map__6471) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6471) : map__6471;
    var content_type__$1 = cljs.core.get.call(null, map__6471__$1, new cljs.core.Keyword(null, "content-type", "content-type", -508222634));
    var write = cljs.core.get.call(null, map__6471__$1, new cljs.core.Keyword(null, "write", "write", -1857649168));
    var body = !(write == null) ? write.call(null, params) : ajax.core.submittable_QMARK_.call(null, params) ? params : function() {
      throw new Error([cljs.core.str("unrecognized request format: "), cljs.core.str(format)].join(""));
    }();
    var content_type__$2 = cljs.core.truth_(content_type__$1) ? new cljs.core.PersistentArrayMap(null, 1, ["Content-Type", content_type__$1], null) : null;
    var headers__$2 = cljs.core.merge.call(null, headers__$1, content_type__$2);
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [uri, body, headers__$2], null);
  }
};
ajax.core.js_handler = function() {
  var ajax$core$js_handler = null;
  var ajax$core$js_handler__1 = function(response_format) {
    return function(handler, xhrio) {
      var response = ajax.core.interpret_response.call(null, response_format, xhrio);
      return handler.call(null, response);
    };
  };
  var ajax$core$js_handler__2 = function(response_format, handler) {
    return function(xhrio) {
      var response = ajax.core.interpret_response.call(null, response_format, xhrio);
      return handler.call(null, response);
    };
  };
  var ajax$core$js_handler__3 = function(response_format, handler, xhrio) {
    var response = ajax.core.interpret_response.call(null, response_format, xhrio);
    return handler.call(null, response);
  };
  ajax$core$js_handler = function(response_format, handler, xhrio) {
    switch(arguments.length) {
      case 1:
        return ajax$core$js_handler__1.call(this, response_format);
      case 2:
        return ajax$core$js_handler__2.call(this, response_format, handler);
      case 3:
        return ajax$core$js_handler__3.call(this, response_format, handler, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$js_handler.cljs$core$IFn$_invoke$arity$1 = ajax$core$js_handler__1;
  ajax$core$js_handler.cljs$core$IFn$_invoke$arity$2 = ajax$core$js_handler__2;
  ajax$core$js_handler.cljs$core$IFn$_invoke$arity$3 = ajax$core$js_handler__3;
  return ajax$core$js_handler;
}();
ajax.core.base_handler = function ajax$core$base_handler(response_format, p__6472) {
  var map__6474 = p__6472;
  var map__6474__$1 = cljs.core.seq_QMARK_.call(null, map__6474) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6474) : map__6474;
  var handler = cljs.core.get.call(null, map__6474__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
  if (cljs.core.truth_(handler)) {
    return ajax.core.js_handler.call(null, response_format, handler);
  } else {
    throw new Error("No ajax handler provided.");
  }
};
ajax.core.ajax_request = function ajax$core$ajax_request(p__6475) {
  var map__6478 = p__6475;
  var map__6478__$1 = cljs.core.seq_QMARK_.call(null, map__6478) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6478) : map__6478;
  var opts = map__6478__$1;
  var api = cljs.core.get.call(null, map__6478__$1, new cljs.core.Keyword(null, "api", "api", -899839580));
  var method = cljs.core.get.call(null, map__6478__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var response_format = ajax.core.get_response_format.call(null, opts);
  var method__$1 = ajax.core.normalize_method.call(null, method);
  var vec__6479 = ajax.core.process_inputs.call(null, opts, response_format);
  var uri = cljs.core.nth.call(null, vec__6479, 0, null);
  var body = cljs.core.nth.call(null, vec__6479, 1, null);
  var headers = cljs.core.nth.call(null, vec__6479, 2, null);
  var handler = ajax.core.base_handler.call(null, response_format, opts);
  var api__$1 = function() {
    var or__4122__auto__ = api;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return new goog.net.XhrIo;
    }
  }();
  return ajax.core._js_ajax_request.call(null, api__$1, uri, method__$1, body, headers, handler, opts);
};
ajax.core.keyword_request_format = function ajax$core$keyword_request_format(format, format_params) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.fn_QMARK_.call(null, format)) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "write", "write", -1857649168), format], null);
    } else {
      if (format == null) {
        return ajax.core.transit_request_format.call(null, format_params);
      } else {
        var G__6481 = format instanceof cljs.core.Keyword ? format.fqn : null;
        switch(G__6481) {
          case "url":
            return ajax.core.url_request_format.call(null);
            break;
          case "raw":
            return ajax.core.url_request_format.call(null);
            break;
          case "edn":
            return ajax.core.edn_request_format.call(null);
            break;
          case "json":
            return ajax.core.json_request_format.call(null);
            break;
          case "transit":
            return ajax.core.transit_request_format.call(null, format_params);
            break;
          default:
            return null;
        }
      }
    }
  }
};
ajax.core.keyword_response_format_2 = function ajax$core$keyword_response_format_2(format, format_params) {
  if (cljs.core.vector_QMARK_.call(null, format)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, format), ajax$core$keyword_response_format_2.call(null, cljs.core.second.call(null, format), format_params)], null);
  } else {
    if (cljs.core.map_QMARK_.call(null, format)) {
      return format;
    } else {
      if (cljs.core.fn_QMARK_.call(null, format)) {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1140058661), format, new cljs.core.Keyword(null, "description", "description", -1428560544), "custom"], null);
      } else {
        if (format == null) {
          return ajax.core.detect_response_format.call(null);
        } else {
          var G__6484 = format instanceof cljs.core.Keyword ? format.fqn : null;
          switch(G__6484) {
            case "detect":
              return ajax.core.detect_response_format.call(null);
              break;
            case "raw":
              return ajax.core.raw_response_format.call(null);
              break;
            case "edn":
              return ajax.core.edn_response_format.call(null);
              break;
            case "json":
              return ajax.core.json_response_format.call(null, format_params);
              break;
            case "transit":
              return ajax.core.transit_response_format.call(null, format_params);
              break;
            default:
              return null;
          }
        }
      }
    }
  }
};
ajax.core.keyword_response_format = function ajax$core$keyword_response_format(format, format_params) {
  if (cljs.core.vector_QMARK_.call(null, format)) {
    return cljs.core.apply.call(null, cljs.core.vector, cljs.core.map.call(null, function(p1__6486_SHARP_) {
      return ajax.core.keyword_response_format_2.call(null, p1__6486_SHARP_, format_params);
    }, format));
  } else {
    return ajax.core.keyword_response_format_2.call(null, format, format_params);
  }
};
ajax.core.transform_handler = function() {
  var ajax$core$transform_handler = null;
  var ajax$core$transform_handler__1 = function(p__6489) {
    var map__6497 = p__6489;
    var map__6497__$1 = cljs.core.seq_QMARK_.call(null, map__6497) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6497) : map__6497;
    var finally$ = cljs.core.get.call(null, map__6497__$1, new cljs.core.Keyword(null, "finally", "finally", 1589088705));
    var error_handler = cljs.core.get.call(null, map__6497__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776));
    var handler = cljs.core.get.call(null, map__6497__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
    return function(map__6497, map__6497__$1, finally$, error_handler, handler) {
      return function(p__6498) {
        var vec__6499 = p__6498;
        var ok = cljs.core.nth.call(null, vec__6499, 0, null);
        var result = cljs.core.nth.call(null, vec__6499, 1, null);
        var temp__4124__auto___6500 = cljs.core.truth_(ok) ? handler : error_handler;
        if (cljs.core.truth_(temp__4124__auto___6500)) {
          var h_6501 = temp__4124__auto___6500;
          h_6501.call(null, result);
        } else {
        }
        if (cljs.core.fn_QMARK_.call(null, finally$)) {
          return finally$.call(null);
        } else {
          return null;
        }
      };
    }(map__6497, map__6497__$1, finally$, error_handler, handler);
  };
  var ajax$core$transform_handler__2 = function(p__6487, p__6488) {
    var map__6495 = p__6487;
    var map__6495__$1 = cljs.core.seq_QMARK_.call(null, map__6495) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6495) : map__6495;
    var finally$ = cljs.core.get.call(null, map__6495__$1, new cljs.core.Keyword(null, "finally", "finally", 1589088705));
    var error_handler = cljs.core.get.call(null, map__6495__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776));
    var handler = cljs.core.get.call(null, map__6495__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
    var vec__6496 = p__6488;
    var ok = cljs.core.nth.call(null, vec__6496, 0, null);
    var result = cljs.core.nth.call(null, vec__6496, 1, null);
    var temp__4124__auto___6502 = cljs.core.truth_(ok) ? handler : error_handler;
    if (cljs.core.truth_(temp__4124__auto___6502)) {
      var h_6503 = temp__4124__auto___6502;
      h_6503.call(null, result);
    } else {
    }
    if (cljs.core.fn_QMARK_.call(null, finally$)) {
      return finally$.call(null);
    } else {
      return null;
    }
  };
  ajax$core$transform_handler = function(p__6487, p__6488) {
    switch(arguments.length) {
      case 1:
        return ajax$core$transform_handler__1.call(this, p__6487);
      case 2:
        return ajax$core$transform_handler__2.call(this, p__6487, p__6488);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$transform_handler.cljs$core$IFn$_invoke$arity$1 = ajax$core$transform_handler__1;
  ajax$core$transform_handler.cljs$core$IFn$_invoke$arity$2 = ajax$core$transform_handler__2;
  return ajax$core$transform_handler;
}();
ajax.core.transform_opts = function ajax$core$transform_opts(p__6504) {
  var map__6506 = p__6504;
  var map__6506__$1 = cljs.core.seq_QMARK_.call(null, map__6506) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6506) : map__6506;
  var opts = map__6506__$1;
  var params = cljs.core.get.call(null, map__6506__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var response_format = cljs.core.get.call(null, map__6506__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  var format = cljs.core.get.call(null, map__6506__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
  var method = cljs.core.get.call(null, map__6506__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var needs_format = !(ajax.core.submittable_QMARK_.call(null, params) || cljs.core._EQ_.call(null, method, "GET"));
  var rf = cljs.core.truth_(function() {
    var or__4122__auto__ = format;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return needs_format;
    }
  }()) ? ajax.core.keyword_request_format.call(null, format, opts) : null;
  return cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "handler", "handler", -195596612), ajax.core.transform_handler.call(null, opts), new cljs.core.Keyword(null, "format", "format", -1306924766), rf, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), ajax.core.keyword_response_format.call(null, response_format, opts));
};
ajax.core.easy_ajax_request = function ajax$core$easy_ajax_request(uri, method, opts) {
  return ajax.core.ajax_request.call(null, ajax.core.transform_opts.call(null, cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "uri", "uri", -774711847), uri, new cljs.core.Keyword(null, "method", "method", 55703592), method)));
};
ajax.core.GET = function() {
  var ajax$core$GET__delegate = function(uri, opts) {
    var f__6378__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "GET", f__6378__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6378__auto__);
  };
  var ajax$core$GET = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__6507__i = 0, G__6507__a = new Array(arguments.length - 1);
      while (G__6507__i < G__6507__a.length) {
        G__6507__a[G__6507__i] = arguments[G__6507__i + 1];
        ++G__6507__i;
      }
      opts = new cljs.core.IndexedSeq(G__6507__a, 0);
    }
    return ajax$core$GET__delegate.call(this, uri, opts);
  };
  ajax$core$GET.cljs$lang$maxFixedArity = 1;
  ajax$core$GET.cljs$lang$applyTo = function(arglist__6508) {
    var uri = cljs.core.first(arglist__6508);
    var opts = cljs.core.rest(arglist__6508);
    return ajax$core$GET__delegate(uri, opts);
  };
  ajax$core$GET.cljs$core$IFn$_invoke$arity$variadic = ajax$core$GET__delegate;
  return ajax$core$GET;
}();
ajax.core.HEAD = function() {
  var ajax$core$HEAD__delegate = function(uri, opts) {
    var f__6378__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "HEAD", f__6378__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6378__auto__);
  };
  var ajax$core$HEAD = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__6509__i = 0, G__6509__a = new Array(arguments.length - 1);
      while (G__6509__i < G__6509__a.length) {
        G__6509__a[G__6509__i] = arguments[G__6509__i + 1];
        ++G__6509__i;
      }
      opts = new cljs.core.IndexedSeq(G__6509__a, 0);
    }
    return ajax$core$HEAD__delegate.call(this, uri, opts);
  };
  ajax$core$HEAD.cljs$lang$maxFixedArity = 1;
  ajax$core$HEAD.cljs$lang$applyTo = function(arglist__6510) {
    var uri = cljs.core.first(arglist__6510);
    var opts = cljs.core.rest(arglist__6510);
    return ajax$core$HEAD__delegate(uri, opts);
  };
  ajax$core$HEAD.cljs$core$IFn$_invoke$arity$variadic = ajax$core$HEAD__delegate;
  return ajax$core$HEAD;
}();
ajax.core.POST = function() {
  var ajax$core$POST__delegate = function(uri, opts) {
    var f__6378__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "POST", f__6378__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6378__auto__);
  };
  var ajax$core$POST = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__6511__i = 0, G__6511__a = new Array(arguments.length - 1);
      while (G__6511__i < G__6511__a.length) {
        G__6511__a[G__6511__i] = arguments[G__6511__i + 1];
        ++G__6511__i;
      }
      opts = new cljs.core.IndexedSeq(G__6511__a, 0);
    }
    return ajax$core$POST__delegate.call(this, uri, opts);
  };
  ajax$core$POST.cljs$lang$maxFixedArity = 1;
  ajax$core$POST.cljs$lang$applyTo = function(arglist__6512) {
    var uri = cljs.core.first(arglist__6512);
    var opts = cljs.core.rest(arglist__6512);
    return ajax$core$POST__delegate(uri, opts);
  };
  ajax$core$POST.cljs$core$IFn$_invoke$arity$variadic = ajax$core$POST__delegate;
  return ajax$core$POST;
}();
ajax.core.PUT = function() {
  var ajax$core$PUT__delegate = function(uri, opts) {
    var f__6378__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "PUT", f__6378__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6378__auto__);
  };
  var ajax$core$PUT = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__6513__i = 0, G__6513__a = new Array(arguments.length - 1);
      while (G__6513__i < G__6513__a.length) {
        G__6513__a[G__6513__i] = arguments[G__6513__i + 1];
        ++G__6513__i;
      }
      opts = new cljs.core.IndexedSeq(G__6513__a, 0);
    }
    return ajax$core$PUT__delegate.call(this, uri, opts);
  };
  ajax$core$PUT.cljs$lang$maxFixedArity = 1;
  ajax$core$PUT.cljs$lang$applyTo = function(arglist__6514) {
    var uri = cljs.core.first(arglist__6514);
    var opts = cljs.core.rest(arglist__6514);
    return ajax$core$PUT__delegate(uri, opts);
  };
  ajax$core$PUT.cljs$core$IFn$_invoke$arity$variadic = ajax$core$PUT__delegate;
  return ajax$core$PUT;
}();
ajax.core.DELETE = function() {
  var ajax$core$DELETE__delegate = function(uri, opts) {
    var f__6378__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "DELETE", f__6378__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6378__auto__);
  };
  var ajax$core$DELETE = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__6515__i = 0, G__6515__a = new Array(arguments.length - 1);
      while (G__6515__i < G__6515__a.length) {
        G__6515__a[G__6515__i] = arguments[G__6515__i + 1];
        ++G__6515__i;
      }
      opts = new cljs.core.IndexedSeq(G__6515__a, 0);
    }
    return ajax$core$DELETE__delegate.call(this, uri, opts);
  };
  ajax$core$DELETE.cljs$lang$maxFixedArity = 1;
  ajax$core$DELETE.cljs$lang$applyTo = function(arglist__6516) {
    var uri = cljs.core.first(arglist__6516);
    var opts = cljs.core.rest(arglist__6516);
    return ajax$core$DELETE__delegate(uri, opts);
  };
  ajax$core$DELETE.cljs$core$IFn$_invoke$arity$variadic = ajax$core$DELETE__delegate;
  return ajax$core$DELETE;
}();
ajax.core.OPTIONS = function() {
  var ajax$core$OPTIONS__delegate = function(uri, opts) {
    var f__6378__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "OPTIONS", f__6378__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6378__auto__);
  };
  var ajax$core$OPTIONS = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__6517__i = 0, G__6517__a = new Array(arguments.length - 1);
      while (G__6517__i < G__6517__a.length) {
        G__6517__a[G__6517__i] = arguments[G__6517__i + 1];
        ++G__6517__i;
      }
      opts = new cljs.core.IndexedSeq(G__6517__a, 0);
    }
    return ajax$core$OPTIONS__delegate.call(this, uri, opts);
  };
  ajax$core$OPTIONS.cljs$lang$maxFixedArity = 1;
  ajax$core$OPTIONS.cljs$lang$applyTo = function(arglist__6518) {
    var uri = cljs.core.first(arglist__6518);
    var opts = cljs.core.rest(arglist__6518);
    return ajax$core$OPTIONS__delegate(uri, opts);
  };
  ajax$core$OPTIONS.cljs$core$IFn$_invoke$arity$variadic = ajax$core$OPTIONS__delegate;
  return ajax$core$OPTIONS;
}();
ajax.core.TRACE = function() {
  var ajax$core$TRACE__delegate = function(uri, opts) {
    var f__6378__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "TRACE", f__6378__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6378__auto__);
  };
  var ajax$core$TRACE = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__6519__i = 0, G__6519__a = new Array(arguments.length - 1);
      while (G__6519__i < G__6519__a.length) {
        G__6519__a[G__6519__i] = arguments[G__6519__i + 1];
        ++G__6519__i;
      }
      opts = new cljs.core.IndexedSeq(G__6519__a, 0);
    }
    return ajax$core$TRACE__delegate.call(this, uri, opts);
  };
  ajax$core$TRACE.cljs$lang$maxFixedArity = 1;
  ajax$core$TRACE.cljs$lang$applyTo = function(arglist__6520) {
    var uri = cljs.core.first(arglist__6520);
    var opts = cljs.core.rest(arglist__6520);
    return ajax$core$TRACE__delegate(uri, opts);
  };
  ajax$core$TRACE.cljs$core$IFn$_invoke$arity$variadic = ajax$core$TRACE__delegate;
  return ajax$core$TRACE;
}();
goog.provide("reagent.interop");
goog.require("cljs.core");
goog.provide("reagent.debug");
goog.require("cljs.core");
goog.provide("reagent.impl.util");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("reagent.interop");
goog.require("reagent.debug");
reagent.impl.util.is_client = typeof window !== "undefined" && !(window["document"] == null);
reagent.impl.util.extract_props = function reagent$impl$util$extract_props(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  if (cljs.core.map_QMARK_.call(null, p)) {
    return p;
  } else {
    return null;
  }
};
reagent.impl.util.extract_children = function reagent$impl$util$extract_children(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  var first_child = p == null || cljs.core.map_QMARK_.call(null, p) ? 2 : 1;
  if (cljs.core.count.call(null, v) > first_child) {
    return cljs.core.subvec.call(null, v, first_child);
  } else {
    return null;
  }
};
reagent.impl.util.get_argv = function reagent$impl$util$get_argv(c) {
  return c["props"]["argv"];
};
reagent.impl.util.get_props = function reagent$impl$util$get_props(c) {
  return reagent.impl.util.extract_props.call(null, c["props"]["argv"]);
};
reagent.impl.util.get_children = function reagent$impl$util$get_children(c) {
  return reagent.impl.util.extract_children.call(null, c["props"]["argv"]);
};
reagent.impl.util.reagent_component_QMARK_ = function reagent$impl$util$reagent_component_QMARK_(c) {
  return!(c["props"]["argv"] == null);
};
reagent.impl.util.cached_react_class = function reagent$impl$util$cached_react_class(c) {
  return c["cljsReactClass"];
};
reagent.impl.util.cache_react_class = function reagent$impl$util$cache_react_class(c, constructor) {
  return c["cljsReactClass"] = constructor;
};
reagent.impl.util.memoize_1 = function reagent$impl$util$memoize_1(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function(arg) {
      var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), arg);
      if (!(v == null)) {
        return v;
      } else {
        var ret = f.call(null, arg);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, arg, ret);
        return ret;
      }
    };
  }(mem);
};
reagent.impl.util.dont_camel_case = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["aria", null, "data", null], null), null);
reagent.impl.util.capitalize = function reagent$impl$util$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(cljs.core.subs.call(null, s, 1))].join("");
  }
};
reagent.impl.util.dash_to_camel = function reagent$impl$util$dash_to_camel(dashed) {
  if (typeof dashed === "string") {
    return dashed;
  } else {
    var name_str = cljs.core.name.call(null, dashed);
    var vec__6069 = clojure.string.split.call(null, name_str, /-/);
    var start = cljs.core.nth.call(null, vec__6069, 0, null);
    var parts = cljs.core.nthnext.call(null, vec__6069, 1);
    if (cljs.core.truth_(reagent.impl.util.dont_camel_case.call(null, start))) {
      return name_str;
    } else {
      return cljs.core.apply.call(null, cljs.core.str, start, cljs.core.map.call(null, reagent.impl.util.capitalize, parts));
    }
  }
};
reagent.impl.util.partial_ifn = function(f, args, p) {
  this.f = f;
  this.args = args;
  this.p = p;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 6291457;
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.f, self__.args], null));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._EQ_.call(null, self__.f, other.f) && cljs.core._EQ_.call(null, self__.args, other.args);
};
reagent.impl.util.partial_ifn.prototype.call = function() {
  var G__6071__delegate = function(self__, a) {
    var self____$1 = this;
    var _ = self____$1;
    var or__4122__auto___6072 = self__.p;
    if (cljs.core.truth_(or__4122__auto___6072)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__6071 = function(self__, var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 1) {
      var G__6073__i = 0, G__6073__a = new Array(arguments.length - 1);
      while (G__6073__i < G__6073__a.length) {
        G__6073__a[G__6073__i] = arguments[G__6073__i + 1];
        ++G__6073__i;
      }
      a = new cljs.core.IndexedSeq(G__6073__a, 0);
    }
    return G__6071__delegate.call(this, self__, a);
  };
  G__6071.cljs$lang$maxFixedArity = 1;
  G__6071.cljs$lang$applyTo = function(arglist__6074) {
    var self__ = cljs.core.first(arglist__6074);
    var a = cljs.core.rest(arglist__6074);
    return G__6071__delegate(self__, a);
  };
  G__6071.cljs$core$IFn$_invoke$arity$variadic = G__6071__delegate;
  return G__6071;
}();
reagent.impl.util.partial_ifn.prototype.apply = function(self__, args6070) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6070)));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
  var G__6075__delegate = function(a) {
    var _ = this;
    var or__4122__auto___6076 = self__.p;
    if (cljs.core.truth_(or__4122__auto___6076)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__6075 = function(var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 0) {
      var G__6077__i = 0, G__6077__a = new Array(arguments.length - 0);
      while (G__6077__i < G__6077__a.length) {
        G__6077__a[G__6077__i] = arguments[G__6077__i + 0];
        ++G__6077__i;
      }
      a = new cljs.core.IndexedSeq(G__6077__a, 0);
    }
    return G__6075__delegate.call(this, a);
  };
  G__6075.cljs$lang$maxFixedArity = 0;
  G__6075.cljs$lang$applyTo = function(arglist__6078) {
    var a = cljs.core.seq(arglist__6078);
    return G__6075__delegate(a);
  };
  G__6075.cljs$core$IFn$_invoke$arity$variadic = G__6075__delegate;
  return G__6075;
}();
reagent.impl.util.partial_ifn.cljs$lang$type = true;
reagent.impl.util.partial_ifn.cljs$lang$ctorStr = "reagent.impl.util/partial-ifn";
reagent.impl.util.partial_ifn.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "reagent.impl.util/partial-ifn");
};
reagent.impl.util.__GT_partial_ifn = function reagent$impl$util$__GT_partial_ifn(f, args, p) {
  return new reagent.impl.util.partial_ifn(f, args, p);
};
reagent.impl.util.merge_class = function reagent$impl$util$merge_class(p1, p2) {
  var class$ = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var c1 = temp__4126__auto__;
      var temp__4126__auto____$1 = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var c2 = temp__4126__auto____$1;
        return[cljs.core.str(c1), cljs.core.str(" "), cljs.core.str(c2)].join("");
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (class$ == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "class", "class", -2030961996), class$);
  }
};
reagent.impl.util.merge_style = function reagent$impl$util$merge_style(p1, p2) {
  var style = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var s1 = temp__4126__auto__;
      var temp__4126__auto____$1 = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var s2 = temp__4126__auto____$1;
        return cljs.core.merge.call(null, s1, s2);
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (style == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "style", "style", -496642736), style);
  }
};
reagent.impl.util.merge_props = function reagent$impl$util$merge_props(p1, p2) {
  if (p1 == null) {
    return p2;
  } else {
    if (cljs.core.map_QMARK_.call(null, p1)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "p1", "p1", 703771573, null))))].join(""));
    }
    return reagent.impl.util.merge_style.call(null, p1, reagent.impl.util.merge_class.call(null, p1, cljs.core.merge.call(null, p1, p2)));
  }
};
reagent.impl.util._STAR_always_update_STAR_ = false;
if (typeof reagent.impl.util.roots !== "undefined") {
} else {
  reagent.impl.util.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
}
reagent.impl.util.clear_container = function reagent$impl$util$clear_container(node) {
  try {
    return React["unmountComponentAtNode"](node);
  } catch (e6080) {
    if (e6080 instanceof Object) {
      var e = e6080;
      if (typeof console !== "undefined") {
        console.warn([cljs.core.str("Warning: "), cljs.core.str("Error unmounting:")].join(""));
      } else {
      }
      if (typeof console !== "undefined") {
        return console.log(e);
      } else {
        return null;
      }
    } else {
      throw e6080;
    }
  }
};
reagent.impl.util.render_component = function reagent$impl$util$render_component(comp, container, callback) {
  try {
    var _STAR_always_update_STAR_6085 = reagent.impl.util._STAR_always_update_STAR_;
    reagent.impl.util._STAR_always_update_STAR_ = true;
    try {
      return React["render"](comp.call(null), container, function(_STAR_always_update_STAR_6085) {
        return function() {
          var _STAR_always_update_STAR_6086 = reagent.impl.util._STAR_always_update_STAR_;
          reagent.impl.util._STAR_always_update_STAR_ = false;
          try {
            cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.assoc, container, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp, container], null));
            if (cljs.core.some_QMARK_.call(null, callback)) {
              return callback.call(null);
            } else {
              return null;
            }
          } finally {
            reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_6086;
          }
        };
      }(_STAR_always_update_STAR_6085));
    } finally {
      reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_6085;
    }
  } catch (e6084) {
    if (e6084 instanceof Object) {
      var e = e6084;
      reagent.impl.util.clear_container.call(null, container);
      throw e;
    } else {
      throw e6084;
    }
  }
};
reagent.impl.util.re_render_component = function reagent$impl$util$re_render_component(comp, container) {
  return reagent.impl.util.render_component.call(null, comp, container, null);
};
reagent.impl.util.unmount_component_at_node = function reagent$impl$util$unmount_component_at_node(container) {
  cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.dissoc, container);
  return React["unmountComponentAtNode"](container);
};
reagent.impl.util.force_update_all = function reagent$impl$util$force_update_all() {
  var seq__6091_6095 = cljs.core.seq.call(null, cljs.core.vals.call(null, cljs.core.deref.call(null, reagent.impl.util.roots)));
  var chunk__6092_6096 = null;
  var count__6093_6097 = 0;
  var i__6094_6098 = 0;
  while (true) {
    if (i__6094_6098 < count__6093_6097) {
      var v_6099 = cljs.core._nth.call(null, chunk__6092_6096, i__6094_6098);
      cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_6099);
      var G__6100 = seq__6091_6095;
      var G__6101 = chunk__6092_6096;
      var G__6102 = count__6093_6097;
      var G__6103 = i__6094_6098 + 1;
      seq__6091_6095 = G__6100;
      chunk__6092_6096 = G__6101;
      count__6093_6097 = G__6102;
      i__6094_6098 = G__6103;
      continue;
    } else {
      var temp__4126__auto___6104 = cljs.core.seq.call(null, seq__6091_6095);
      if (temp__4126__auto___6104) {
        var seq__6091_6105__$1 = temp__4126__auto___6104;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6091_6105__$1)) {
          var c__4907__auto___6106 = cljs.core.chunk_first.call(null, seq__6091_6105__$1);
          var G__6107 = cljs.core.chunk_rest.call(null, seq__6091_6105__$1);
          var G__6108 = c__4907__auto___6106;
          var G__6109 = cljs.core.count.call(null, c__4907__auto___6106);
          var G__6110 = 0;
          seq__6091_6095 = G__6107;
          chunk__6092_6096 = G__6108;
          count__6093_6097 = G__6109;
          i__6094_6098 = G__6110;
          continue;
        } else {
          var v_6111 = cljs.core.first.call(null, seq__6091_6105__$1);
          cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_6111);
          var G__6112 = cljs.core.next.call(null, seq__6091_6105__$1);
          var G__6113 = null;
          var G__6114 = 0;
          var G__6115 = 0;
          seq__6091_6095 = G__6112;
          chunk__6092_6096 = G__6113;
          count__6093_6097 = G__6114;
          i__6094_6098 = G__6115;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return "Updated";
};
goog.provide("reagent.ratom");
goog.require("cljs.core");
goog.require("reagent.impl.util");
if (typeof reagent.ratom.debug !== "undefined") {
} else {
  reagent.ratom.debug = false;
}
if (typeof reagent.ratom._running !== "undefined") {
} else {
  reagent.ratom._running = cljs.core.atom.call(null, 0);
}
reagent.ratom.running = function reagent$ratom$running() {
  return cljs.core.deref.call(null, reagent.ratom._running);
};
reagent.ratom.capture_derefed = function reagent$ratom$capture_derefed(f, obj) {
  obj.cljsCaptured = null;
  var _STAR_ratom_context_STAR_5949 = reagent.ratom._STAR_ratom_context_STAR_;
  reagent.ratom._STAR_ratom_context_STAR_ = obj;
  try {
    return f.call(null);
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_5949;
  }
};
reagent.ratom.captured = function reagent$ratom$captured(obj) {
  var c = obj.cljsCaptured;
  obj.cljsCaptured = null;
  return c;
};
reagent.ratom.notify_deref_watcher_BANG_ = function reagent$ratom$notify_deref_watcher_BANG_(derefable) {
  var obj = reagent.ratom._STAR_ratom_context_STAR_;
  if (obj == null) {
    return null;
  } else {
    var captured = obj.cljsCaptured;
    return obj.cljsCaptured = cljs.core.conj.call(null, captured == null ? cljs.core.PersistentHashSet.EMPTY : captured, derefable);
  }
};
reagent.ratom.IReactiveAtom = function() {
  var obj5951 = {};
  return obj5951;
}();
reagent.ratom.RAtom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RAtom.prototype.reagent$ratom$IReactiveAtom$ = true;
reagent.ratom.RAtom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RAtom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
reagent.ratom.RAtom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.RAtom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.RAtom.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  if (self__.validator == null) {
  } else {
    if (cljs.core.truth_(self__.validator.call(null, new_value))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null))))].join(""));
    }
  }
  var old_value = self__.state;
  self__.state = new_value;
  if (self__.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a__$1, old_value, new_value);
  }
  return new_value;
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f) {
      f.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
reagent.ratom.RAtom.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
  return self__.state;
};
reagent.ratom.RAtom.cljs$lang$type = true;
reagent.ratom.RAtom.cljs$lang$ctorStr = "reagent.ratom/RAtom";
reagent.ratom.RAtom.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "reagent.ratom/RAtom");
};
reagent.ratom.__GT_RAtom = function reagent$ratom$__GT_RAtom(state, meta, validator, watches) {
  return new reagent.ratom.RAtom(state, meta, validator, watches);
};
reagent.ratom.atom = function() {
  var reagent$ratom$atom = null;
  var reagent$ratom$atom__1 = function(x) {
    return new reagent.ratom.RAtom(x, null, null, null);
  };
  var reagent$ratom$atom__2 = function() {
    var G__5955__delegate = function(x, p__5952) {
      var map__5954 = p__5952;
      var map__5954__$1 = cljs.core.seq_QMARK_.call(null, map__5954) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5954) : map__5954;
      var validator = cljs.core.get.call(null, map__5954__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__5954__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new reagent.ratom.RAtom(x, meta, validator, null);
    };
    var G__5955 = function(x, var_args) {
      var p__5952 = null;
      if (arguments.length > 1) {
        var G__5956__i = 0, G__5956__a = new Array(arguments.length - 1);
        while (G__5956__i < G__5956__a.length) {
          G__5956__a[G__5956__i] = arguments[G__5956__i + 1];
          ++G__5956__i;
        }
        p__5952 = new cljs.core.IndexedSeq(G__5956__a, 0);
      }
      return G__5955__delegate.call(this, x, p__5952);
    };
    G__5955.cljs$lang$maxFixedArity = 1;
    G__5955.cljs$lang$applyTo = function(arglist__5957) {
      var x = cljs.core.first(arglist__5957);
      var p__5952 = cljs.core.rest(arglist__5957);
      return G__5955__delegate(x, p__5952);
    };
    G__5955.cljs$core$IFn$_invoke$arity$variadic = G__5955__delegate;
    return G__5955;
  }();
  reagent$ratom$atom = function(x, var_args) {
    var p__5952 = var_args;
    switch(arguments.length) {
      case 1:
        return reagent$ratom$atom__1.call(this, x);
      default:
        var G__5958 = null;
        if (arguments.length > 1) {
          var G__5959__i = 0, G__5959__a = new Array(arguments.length - 1);
          while (G__5959__i < G__5959__a.length) {
            G__5959__a[G__5959__i] = arguments[G__5959__i + 1];
            ++G__5959__i;
          }
          G__5958 = new cljs.core.IndexedSeq(G__5959__a, 0);
        }
        return reagent$ratom$atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__5958);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reagent$ratom$atom.cljs$lang$maxFixedArity = 1;
  reagent$ratom$atom.cljs$lang$applyTo = reagent$ratom$atom__2.cljs$lang$applyTo;
  reagent$ratom$atom.cljs$core$IFn$_invoke$arity$1 = reagent$ratom$atom__1;
  reagent$ratom$atom.cljs$core$IFn$_invoke$arity$variadic = reagent$ratom$atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return reagent$ratom$atom;
}();
reagent.ratom.RCursor = function(ratom, path, reaction) {
  this.ratom = ratom;
  this.path = path;
  this.reaction = reaction;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RCursor.prototype._reaction = function() {
  var self__ = this;
  var this$ = this;
  if (self__.reaction == null) {
    return self__.reaction = function() {
      var G__5966 = self__.ratom;
      if (G__5966) {
        var bit__4796__auto__ = G__5966.cljs$lang$protocol_mask$partition0$ & 32768;
        if (bit__4796__auto__ || G__5966.cljs$core$IDeref$) {
          return true;
        } else {
          if (!G__5966.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__5966);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__5966);
      }
    }() ? reagent.ratom.make_reaction.call(null, function(this$) {
      return function() {
        return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.ratom), self__.path);
      };
    }(this$), new cljs.core.Keyword(null, "on-set", "on-set", -140953470), cljs.core._EQ_.call(null, self__.path, cljs.core.PersistentVector.EMPTY) ? function(this$) {
      return function(p1__5961_SHARP_, p2__5960_SHARP_) {
        return cljs.core.reset_BANG_.call(null, self__.ratom, p2__5960_SHARP_);
      };
    }(this$) : function(this$) {
      return function(p1__5963_SHARP_, p2__5962_SHARP_) {
        return cljs.core.swap_BANG_.call(null, self__.ratom, cljs.core.assoc_in, self__.path, p2__5962_SHARP_);
      };
    }(this$)) : reagent.ratom.make_reaction.call(null, function(this$) {
      return function() {
        return self__.ratom.call(null, self__.path);
      };
    }(this$), new cljs.core.Keyword(null, "on-set", "on-set", -140953470), function(this$) {
      return function(p1__5965_SHARP_, p2__5964_SHARP_) {
        return self__.ratom.call(null, self__.path, p2__5964_SHARP_);
      };
    }(this$));
  } else {
    return self__.reaction;
  }
};
reagent.ratom.RCursor.prototype._peek = function() {
  var self__ = this;
  var this$ = this;
  var _STAR_ratom_context_STAR_5967 = reagent.ratom._STAR_ratom_context_STAR_;
  reagent.ratom._STAR_ratom_context_STAR_ = null;
  try {
    return cljs.core._deref.call(null, this$._reaction());
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_5967;
  }
};
reagent.ratom.RCursor.prototype.reagent$ratom$IReactiveAtom$ = true;
reagent.ratom.RCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, [cljs.core.str("#\x3cCursor: "), cljs.core.str(self__.path), cljs.core.str(" ")].join(""));
  cljs.core.pr_writer.call(null, a__$1._peek(), writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.ratom, self__.path], null));
};
reagent.ratom.RCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return other instanceof reagent.ratom.RCursor && cljs.core._EQ_.call(null, self__.path, other.path) && cljs.core._EQ_.call(null, self__.ratom, other.ratom);
};
reagent.ratom.RCursor.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(this$, new_value) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._reset_BANG_.call(null, this$__$1._reaction(), new_value);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f, x);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f, x, y);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f, x, y, more);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._notify_watches.call(null, this$__$1._reaction(), oldval, newval);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._add_watch.call(null, this$__$1._reaction(), key, f);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._remove_watch.call(null, this$__$1._reaction(), key);
};
reagent.ratom.RCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._deref.call(null, this$__$1._reaction());
};
reagent.ratom.RCursor.cljs$lang$type = true;
reagent.ratom.RCursor.cljs$lang$ctorStr = "reagent.ratom/RCursor";
reagent.ratom.RCursor.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "reagent.ratom/RCursor");
};
reagent.ratom.__GT_RCursor = function reagent$ratom$__GT_RCursor(ratom, path, reaction) {
  return new reagent.ratom.RCursor(ratom, path, reaction);
};
reagent.ratom.cursor = function reagent$ratom$cursor(src, path) {
  if (function() {
    var G__5972 = path;
    if (G__5972) {
      var bit__4796__auto__ = G__5972.cljs$lang$protocol_mask$partition0$ & 32768;
      if (bit__4796__auto__ || G__5972.cljs$core$IDeref$) {
        return true;
      } else {
        if (!G__5972.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__5972);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__5972);
    }
  }()) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("Calling cursor with an atom as the second arg is "), cljs.core.str("deprecated, in (cursor "), cljs.core.str(src), cljs.core.str(" "), cljs.core.str(cljs.core.pr_str.call(null, path)), cljs.core.str(")")].join(""));
    } else {
    }
    if (function() {
      var G__5973 = path;
      if (G__5973) {
        var bit__4796__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4122__auto__ = bit__4796__auto__;
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return G__5973.reagent$ratom$IReactiveAtom$;
          }
        }())) {
          return true;
        } else {
          if (!G__5973.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__5973);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__5973);
      }
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("src must be a reactive atom, not "), cljs.core.str(cljs.core.pr_str.call(null, path))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IReactiveAtom", "IReactiveAtom", -991158427, null), new cljs.core.Symbol(null, "path", "path", 1452340359, null))))].join(""));
    }
    return new reagent.ratom.RCursor(path, src, null);
  } else {
    if (function() {
      var or__4122__auto__ = function() {
        var G__5975 = src;
        if (G__5975) {
          var bit__4796__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4122__auto__ = bit__4796__auto__;
            if (cljs.core.truth_(or__4122__auto__)) {
              return or__4122__auto__;
            } else {
              return G__5975.reagent$ratom$IReactiveAtom$;
            }
          }())) {
            return true;
          } else {
            if (!G__5975.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__5975);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__5975);
        }
      }();
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        return cljs.core.ifn_QMARK_.call(null, src) && !cljs.core.vector_QMARK_.call(null, src);
      }
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("src must be a reactive atom or a function, not "), cljs.core.str(cljs.core.pr_str.call(null, src))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IReactiveAtom", "IReactiveAtom", -991158427, null), 
      new cljs.core.Symbol(null, "src", "src", -10544524, null)), cljs.core.list(new cljs.core.Symbol(null, "and", "and", 668631710, null), cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "src", "src", -10544524, null)), cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "vector?", "vector?", -61367869, null), new cljs.core.Symbol(null, "src", "src", -10544524, null)))))))].join(""));
    }
    return new reagent.ratom.RCursor(src, path, null);
  }
};
reagent.ratom.IDisposable = function() {
  var obj5977 = {};
  return obj5977;
}();
reagent.ratom.dispose_BANG_ = function reagent$ratom$dispose_BANG_(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = reagent.ratom.dispose_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = reagent.ratom.dispose_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDisposable.dispose!", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IRunnable = function() {
  var obj5979 = {};
  return obj5979;
}();
reagent.ratom.run = function reagent$ratom$run(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.reagent$ratom$IRunnable$run$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.reagent$ratom$IRunnable$run$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = reagent.ratom.run[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = reagent.ratom.run["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRunnable.run", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IComputedImpl = function() {
  var obj5981 = {};
  return obj5981;
}();
reagent.ratom._update_watching = function reagent$ratom$_update_watching(this$, derefed) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2(this$, derefed);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = reagent.ratom._update_watching[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = reagent.ratom._update_watching["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-update-watching", this$);
        }
      }
    }().call(null, this$, derefed);
  }
};
reagent.ratom._handle_change = function reagent$ratom$_handle_change(k, sender, oldval, newval) {
  if (function() {
    var and__4110__auto__ = k;
    if (and__4110__auto__) {
      return k.reagent$ratom$IComputedImpl$_handle_change$arity$4;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return k.reagent$ratom$IComputedImpl$_handle_change$arity$4(k, sender, oldval, newval);
  } else {
    var x__4758__auto__ = k == null ? null : k;
    return function() {
      var or__4122__auto__ = reagent.ratom._handle_change[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = reagent.ratom._handle_change["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-handle-change", k);
        }
      }
    }().call(null, k, sender, oldval, newval);
  }
};
reagent.ratom._peek_at = function reagent$ratom$_peek_at(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.reagent$ratom$IComputedImpl$_peek_at$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.reagent$ratom$IComputedImpl$_peek_at$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = reagent.ratom._peek_at[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = reagent.ratom._peek_at["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-peek-at", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.Reaction = function(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  this.f = f;
  this.state = state;
  this.dirty_QMARK_ = dirty_QMARK_;
  this.active_QMARK_ = active_QMARK_;
  this.watching = watching;
  this.watches = watches;
  this.auto_run = auto_run;
  this.on_set = on_set;
  this.on_dispose = on_dispose;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_handle_change$arity$4 = function(this$, sender, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = self__.active_QMARK_;
    if (cljs.core.truth_(and__4110__auto__)) {
      return cljs.core.not.call(null, self__.dirty_QMARK_) && !(oldval === newval);
    } else {
      return and__4110__auto__;
    }
  }())) {
    self__.dirty_QMARK_ = true;
    return function() {
      var or__4122__auto__ = self__.auto_run;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return reagent.ratom.run;
      }
    }().call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_update_watching$arity$2 = function(this$, derefed) {
  var self__ = this;
  var this$__$1 = this;
  var seq__5982_5995 = cljs.core.seq.call(null, derefed);
  var chunk__5983_5996 = null;
  var count__5984_5997 = 0;
  var i__5985_5998 = 0;
  while (true) {
    if (i__5985_5998 < count__5984_5997) {
      var w_5999 = cljs.core._nth.call(null, chunk__5983_5996, i__5985_5998);
      if (cljs.core.contains_QMARK_.call(null, self__.watching, w_5999)) {
      } else {
        cljs.core.add_watch.call(null, w_5999, this$__$1, reagent.ratom._handle_change);
      }
      var G__6000 = seq__5982_5995;
      var G__6001 = chunk__5983_5996;
      var G__6002 = count__5984_5997;
      var G__6003 = i__5985_5998 + 1;
      seq__5982_5995 = G__6000;
      chunk__5983_5996 = G__6001;
      count__5984_5997 = G__6002;
      i__5985_5998 = G__6003;
      continue;
    } else {
      var temp__4126__auto___6004 = cljs.core.seq.call(null, seq__5982_5995);
      if (temp__4126__auto___6004) {
        var seq__5982_6005__$1 = temp__4126__auto___6004;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__5982_6005__$1)) {
          var c__4907__auto___6006 = cljs.core.chunk_first.call(null, seq__5982_6005__$1);
          var G__6007 = cljs.core.chunk_rest.call(null, seq__5982_6005__$1);
          var G__6008 = c__4907__auto___6006;
          var G__6009 = cljs.core.count.call(null, c__4907__auto___6006);
          var G__6010 = 0;
          seq__5982_5995 = G__6007;
          chunk__5983_5996 = G__6008;
          count__5984_5997 = G__6009;
          i__5985_5998 = G__6010;
          continue;
        } else {
          var w_6011 = cljs.core.first.call(null, seq__5982_6005__$1);
          if (cljs.core.contains_QMARK_.call(null, self__.watching, w_6011)) {
          } else {
            cljs.core.add_watch.call(null, w_6011, this$__$1, reagent.ratom._handle_change);
          }
          var G__6012 = cljs.core.next.call(null, seq__5982_6005__$1);
          var G__6013 = null;
          var G__6014 = 0;
          var G__6015 = 0;
          seq__5982_5995 = G__6012;
          chunk__5983_5996 = G__6013;
          count__5984_5997 = G__6014;
          i__5985_5998 = G__6015;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__5986_6016 = cljs.core.seq.call(null, self__.watching);
  var chunk__5987_6017 = null;
  var count__5988_6018 = 0;
  var i__5989_6019 = 0;
  while (true) {
    if (i__5989_6019 < count__5988_6018) {
      var w_6020 = cljs.core._nth.call(null, chunk__5987_6017, i__5989_6019);
      if (cljs.core.contains_QMARK_.call(null, derefed, w_6020)) {
      } else {
        cljs.core.remove_watch.call(null, w_6020, this$__$1);
      }
      var G__6021 = seq__5986_6016;
      var G__6022 = chunk__5987_6017;
      var G__6023 = count__5988_6018;
      var G__6024 = i__5989_6019 + 1;
      seq__5986_6016 = G__6021;
      chunk__5987_6017 = G__6022;
      count__5988_6018 = G__6023;
      i__5989_6019 = G__6024;
      continue;
    } else {
      var temp__4126__auto___6025 = cljs.core.seq.call(null, seq__5986_6016);
      if (temp__4126__auto___6025) {
        var seq__5986_6026__$1 = temp__4126__auto___6025;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__5986_6026__$1)) {
          var c__4907__auto___6027 = cljs.core.chunk_first.call(null, seq__5986_6026__$1);
          var G__6028 = cljs.core.chunk_rest.call(null, seq__5986_6026__$1);
          var G__6029 = c__4907__auto___6027;
          var G__6030 = cljs.core.count.call(null, c__4907__auto___6027);
          var G__6031 = 0;
          seq__5986_6016 = G__6028;
          chunk__5987_6017 = G__6029;
          count__5988_6018 = G__6030;
          i__5989_6019 = G__6031;
          continue;
        } else {
          var w_6032 = cljs.core.first.call(null, seq__5986_6026__$1);
          if (cljs.core.contains_QMARK_.call(null, derefed, w_6032)) {
          } else {
            cljs.core.remove_watch.call(null, w_6032, this$__$1);
          }
          var G__6033 = cljs.core.next.call(null, seq__5986_6026__$1);
          var G__6034 = null;
          var G__6035 = 0;
          var G__6036 = 0;
          seq__5986_6016 = G__6033;
          chunk__5987_6017 = G__6034;
          count__5988_6018 = G__6035;
          i__5989_6019 = G__6036;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return self__.watching = derefed;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_peek_at$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, self__.dirty_QMARK_)) {
    return self__.state;
  } else {
    var _STAR_ratom_context_STAR_5990 = reagent.ratom._STAR_ratom_context_STAR_;
    reagent.ratom._STAR_ratom_context_STAR_ = null;
    try {
      return cljs.core._deref.call(null, this$__$1);
    } finally {
      reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_5990;
    }
  }
};
reagent.ratom.Reaction.prototype.reagent$ratom$IReactiveAtom$ = true;
reagent.ratom.Reaction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  cljs.core._write.call(null, writer, [cljs.core.str("#\x3cReaction "), cljs.core.str(cljs.core.hash.call(null, this$__$1)), cljs.core.str(": ")].join(""));
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.Reaction.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.Reaction.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$dispose_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var seq__5991_6037 = cljs.core.seq.call(null, self__.watching);
  var chunk__5992_6038 = null;
  var count__5993_6039 = 0;
  var i__5994_6040 = 0;
  while (true) {
    if (i__5994_6040 < count__5993_6039) {
      var w_6041 = cljs.core._nth.call(null, chunk__5992_6038, i__5994_6040);
      cljs.core.remove_watch.call(null, w_6041, this$__$1);
      var G__6042 = seq__5991_6037;
      var G__6043 = chunk__5992_6038;
      var G__6044 = count__5993_6039;
      var G__6045 = i__5994_6040 + 1;
      seq__5991_6037 = G__6042;
      chunk__5992_6038 = G__6043;
      count__5993_6039 = G__6044;
      i__5994_6040 = G__6045;
      continue;
    } else {
      var temp__4126__auto___6046 = cljs.core.seq.call(null, seq__5991_6037);
      if (temp__4126__auto___6046) {
        var seq__5991_6047__$1 = temp__4126__auto___6046;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__5991_6047__$1)) {
          var c__4907__auto___6048 = cljs.core.chunk_first.call(null, seq__5991_6047__$1);
          var G__6049 = cljs.core.chunk_rest.call(null, seq__5991_6047__$1);
          var G__6050 = c__4907__auto___6048;
          var G__6051 = cljs.core.count.call(null, c__4907__auto___6048);
          var G__6052 = 0;
          seq__5991_6037 = G__6049;
          chunk__5992_6038 = G__6050;
          count__5993_6039 = G__6051;
          i__5994_6040 = G__6052;
          continue;
        } else {
          var w_6053 = cljs.core.first.call(null, seq__5991_6047__$1);
          cljs.core.remove_watch.call(null, w_6053, this$__$1);
          var G__6054 = cljs.core.next.call(null, seq__5991_6047__$1);
          var G__6055 = null;
          var G__6056 = 0;
          var G__6057 = 0;
          seq__5991_6037 = G__6054;
          chunk__5992_6038 = G__6055;
          count__5993_6039 = G__6056;
          i__5994_6040 = G__6057;
          continue;
        }
      } else {
      }
    }
    break;
  }
  self__.watching = null;
  self__.state = null;
  self__.dirty_QMARK_ = true;
  if (cljs.core.truth_(self__.active_QMARK_)) {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.dec);
    } else {
    }
    self__.active_QMARK_ = false;
  } else {
  }
  if (cljs.core.truth_(self__.on_dispose)) {
    return self__.on_dispose.call(null);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, newval) {
  var self__ = this;
  var a__$1 = this;
  var oldval = self__.state;
  self__.state = newval;
  if (cljs.core.truth_(self__.on_set)) {
    self__.dirty_QMARK_ = true;
    self__.on_set.call(null, oldval, newval);
  } else {
  }
  cljs.core._notify_watches.call(null, a__$1, oldval, newval);
  return newval;
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f__$1) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, reagent.ratom._peek_at.call(null, a__$1)));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f__$1, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, reagent.ratom._peek_at.call(null, a__$1), x));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f__$1, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, reagent.ratom._peek_at.call(null, a__$1), x, y));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f__$1, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f__$1, reagent.ratom._peek_at.call(null, a__$1), x, y, more));
};
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$run$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var oldstate = self__.state;
  var res = reagent.ratom.capture_derefed.call(null, self__.f, this$__$1);
  var derefed = reagent.ratom.captured.call(null, this$__$1);
  if (cljs.core.not_EQ_.call(null, derefed, self__.watching)) {
    reagent.ratom._update_watching.call(null, this$__$1, derefed);
  } else {
  }
  if (cljs.core.truth_(self__.active_QMARK_)) {
  } else {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
    } else {
    }
    self__.active_QMARK_ = true;
  }
  self__.dirty_QMARK_ = false;
  self__.state = res;
  cljs.core._notify_watches.call(null, this$__$1, oldstate, self__.state);
  return res;
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f__$1) {
      f__$1.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, k, wf) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, k, wf);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  self__.watches = cljs.core.dissoc.call(null, self__.watches, k);
  if (cljs.core.empty_QMARK_.call(null, self__.watches) && cljs.core.not.call(null, self__.auto_run)) {
    return reagent.ratom.dispose_BANG_.call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var or__4122__auto__ = self__.auto_run;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return cljs.core.some_QMARK_.call(null, reagent.ratom._STAR_ratom_context_STAR_);
    }
  }())) {
    reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
    if (cljs.core.truth_(self__.dirty_QMARK_)) {
      return reagent.ratom.run.call(null, this$__$1);
    } else {
      return self__.state;
    }
  } else {
    if (cljs.core.truth_(self__.dirty_QMARK_)) {
      var oldstate_6058 = self__.state;
      self__.state = self__.f.call(null);
      if (oldstate_6058 === self__.state) {
      } else {
        cljs.core._notify_watches.call(null, this$__$1, oldstate_6058, self__.state);
      }
    } else {
    }
    return self__.state;
  }
};
reagent.ratom.Reaction.cljs$lang$type = true;
reagent.ratom.Reaction.cljs$lang$ctorStr = "reagent.ratom/Reaction";
reagent.ratom.Reaction.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "reagent.ratom/Reaction");
};
reagent.ratom.__GT_Reaction = function reagent$ratom$__GT_Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  return new reagent.ratom.Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose);
};
reagent.ratom.make_reaction = function() {
  var reagent$ratom$make_reaction__delegate = function(f, p__6059) {
    var map__6061 = p__6059;
    var map__6061__$1 = cljs.core.seq_QMARK_.call(null, map__6061) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6061) : map__6061;
    var derefed = cljs.core.get.call(null, map__6061__$1, new cljs.core.Keyword(null, "derefed", "derefed", 590684583));
    var on_dispose = cljs.core.get.call(null, map__6061__$1, new cljs.core.Keyword(null, "on-dispose", "on-dispose", 2105306360));
    var on_set = cljs.core.get.call(null, map__6061__$1, new cljs.core.Keyword(null, "on-set", "on-set", -140953470));
    var auto_run = cljs.core.get.call(null, map__6061__$1, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437));
    var runner = cljs.core._EQ_.call(null, auto_run, true) ? reagent.ratom.run : auto_run;
    var active = !(derefed == null);
    var dirty = !active;
    var reaction = new reagent.ratom.Reaction(f, null, dirty, active, null, null, runner, on_set, on_dispose);
    if (derefed == null) {
    } else {
      if (cljs.core.truth_(reagent.ratom.debug)) {
        cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
      } else {
      }
      reagent.ratom._update_watching.call(null, reaction, derefed);
    }
    return reaction;
  };
  var reagent$ratom$make_reaction = function(f, var_args) {
    var p__6059 = null;
    if (arguments.length > 1) {
      var G__6062__i = 0, G__6062__a = new Array(arguments.length - 1);
      while (G__6062__i < G__6062__a.length) {
        G__6062__a[G__6062__i] = arguments[G__6062__i + 1];
        ++G__6062__i;
      }
      p__6059 = new cljs.core.IndexedSeq(G__6062__a, 0);
    }
    return reagent$ratom$make_reaction__delegate.call(this, f, p__6059);
  };
  reagent$ratom$make_reaction.cljs$lang$maxFixedArity = 1;
  reagent$ratom$make_reaction.cljs$lang$applyTo = function(arglist__6063) {
    var f = cljs.core.first(arglist__6063);
    var p__6059 = cljs.core.rest(arglist__6063);
    return reagent$ratom$make_reaction__delegate(f, p__6059);
  };
  reagent$ratom$make_reaction.cljs$core$IFn$_invoke$arity$variadic = reagent$ratom$make_reaction__delegate;
  return reagent$ratom$make_reaction;
}();
reagent.ratom.Wrapper = function(state, callback, changed, watches) {
  this.state = state;
  this.callback = callback;
  this.changed = changed;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2149613568;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.Wrapper.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  cljs.core._write.call(null, writer, "#\x3cwrap: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.Wrapper.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f) {
      f.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.Wrapper.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
reagent.ratom.Wrapper.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
reagent.ratom.Wrapper.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof reagent.ratom.Wrapper && cljs.core.not.call(null, self__.changed) && cljs.core.not.call(null, other.changed) && cljs.core._EQ_.call(null, self__.state, other.state) && cljs.core._EQ_.call(null, self__.callback, other.callback);
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.ratom.Wrapper.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(this$, newval) {
  var self__ = this;
  var this$__$1 = this;
  var oldval = self__.state;
  self__.changed = true;
  self__.state = newval;
  if (self__.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, this$__$1, oldval, newval);
  }
  self__.callback.call(null, newval);
  return newval;
};
reagent.ratom.Wrapper.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = self__.changed;
    if (cljs.core.truth_(and__4110__auto__)) {
      return cljs.core.some_QMARK_.call(null, reagent.ratom._STAR_ratom_context_STAR_);
    } else {
      return and__4110__auto__;
    }
  }())) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("derefing stale wrap: "), cljs.core.str(cljs.core.pr_str.call(null, this$__$1))].join(""));
    } else {
    }
  } else {
  }
  return self__.state;
};
reagent.ratom.Wrapper.cljs$lang$type = true;
reagent.ratom.Wrapper.cljs$lang$ctorStr = "reagent.ratom/Wrapper";
reagent.ratom.Wrapper.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "reagent.ratom/Wrapper");
};
reagent.ratom.__GT_Wrapper = function reagent$ratom$__GT_Wrapper(state, callback, changed, watches) {
  return new reagent.ratom.Wrapper(state, callback, changed, watches);
};
reagent.ratom.make_wrapper = function reagent$ratom$make_wrapper(value, callback_fn, args) {
  return new reagent.ratom.Wrapper(value, new reagent.impl.util.partial_ifn(callback_fn, args, null), false, null);
};
goog.provide("reagent.impl.batching");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("reagent.impl.util");
goog.require("reagent.ratom");
goog.require("reagent.interop");
goog.require("reagent.debug");
if (typeof reagent.impl.batching.mount_count !== "undefined") {
} else {
  reagent.impl.batching.mount_count = 0;
}
reagent.impl.batching.next_mount_count = function reagent$impl$batching$next_mount_count() {
  return reagent.impl.batching.mount_count = reagent.impl.batching.mount_count + 1;
};
reagent.impl.batching.fake_raf = function reagent$impl$batching$fake_raf(f) {
  return setTimeout(f, 16);
};
reagent.impl.batching.next_tick = cljs.core.not.call(null, reagent.impl.util.is_client) ? reagent.impl.batching.fake_raf : function() {
  var w = window;
  var or__4122__auto__ = w["requestAnimationFrame"];
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    var or__4122__auto____$1 = w["webkitRequestAnimationFrame"];
    if (cljs.core.truth_(or__4122__auto____$1)) {
      return or__4122__auto____$1;
    } else {
      var or__4122__auto____$2 = w["mozRequestAnimationFrame"];
      if (cljs.core.truth_(or__4122__auto____$2)) {
        return or__4122__auto____$2;
      } else {
        var or__4122__auto____$3 = w["msRequestAnimationFrame"];
        if (cljs.core.truth_(or__4122__auto____$3)) {
          return or__4122__auto____$3;
        } else {
          return reagent.impl.batching.fake_raf;
        }
      }
    }
  }
}();
reagent.impl.batching.compare_mount_order = function reagent$impl$batching$compare_mount_order(c1, c2) {
  return c1["cljsMountOrder"] - c2["cljsMountOrder"];
};
reagent.impl.batching.run_queue = function reagent$impl$batching$run_queue(a) {
  a.sort(reagent.impl.batching.compare_mount_order);
  var n__5007__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__5007__auto__) {
      var c_5883 = a[i];
      if (cljs.core.truth_(c_5883["cljsIsDirty"])) {
        c_5883["forceUpdate"]();
      } else {
      }
      var G__5884 = i + 1;
      i = G__5884;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.run_funs = function reagent$impl$batching$run_funs(a) {
  var n__5007__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__5007__auto__) {
      a[i].call(null);
      var G__5885 = i + 1;
      i = G__5885;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.RenderQueue = function(queue, scheduled_QMARK_, after_render) {
  this.queue = queue;
  this.scheduled_QMARK_ = scheduled_QMARK_;
  this.after_render = after_render;
};
reagent.impl.batching.RenderQueue.prototype.queue_render = function(c) {
  var self__ = this;
  var this$ = this;
  self__.queue.push(c);
  return this$.schedule();
};
reagent.impl.batching.RenderQueue.prototype.add_after_render = function(f) {
  var self__ = this;
  var _ = this;
  return self__.after_render.push(f);
};
reagent.impl.batching.RenderQueue.prototype.schedule = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.truth_(self__.scheduled_QMARK_)) {
    return null;
  } else {
    self__.scheduled_QMARK_ = true;
    return reagent.impl.batching.next_tick.call(null, function(this$) {
      return function() {
        return this$.run_queue();
      };
    }(this$));
  }
};
reagent.impl.batching.RenderQueue.prototype.run_queue = function() {
  var self__ = this;
  var _ = this;
  var q = self__.queue;
  var aq = self__.after_render;
  self__.queue = [];
  self__.after_render = [];
  self__.scheduled_QMARK_ = false;
  reagent.impl.batching.run_queue.call(null, q);
  return reagent.impl.batching.run_funs.call(null, aq);
};
reagent.impl.batching.RenderQueue.cljs$lang$type = true;
reagent.impl.batching.RenderQueue.cljs$lang$ctorStr = "reagent.impl.batching/RenderQueue";
reagent.impl.batching.RenderQueue.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "reagent.impl.batching/RenderQueue");
};
reagent.impl.batching.__GT_RenderQueue = function reagent$impl$batching$__GT_RenderQueue(queue, scheduled_QMARK_, after_render) {
  return new reagent.impl.batching.RenderQueue(queue, scheduled_QMARK_, after_render);
};
reagent.impl.batching.render_queue = new reagent.impl.batching.RenderQueue([], false, []);
reagent.impl.batching.flush = function reagent$impl$batching$flush() {
  return reagent.impl.batching.render_queue.run_queue();
};
reagent.impl.batching.queue_render = function reagent$impl$batching$queue_render(c) {
  c["cljsIsDirty"] = true;
  return reagent.impl.batching.render_queue.queue_render(c);
};
reagent.impl.batching.mark_rendered = function reagent$impl$batching$mark_rendered(c) {
  return c["cljsIsDirty"] = false;
};
reagent.impl.batching.do_after_flush = function reagent$impl$batching$do_after_flush(f) {
  return reagent.impl.batching.render_queue.add_after_render(f);
};
reagent.impl.batching.do_later = function reagent$impl$batching$do_later(f) {
  reagent.impl.batching.do_after_flush.call(null, f);
  return reagent.impl.batching.render_queue.schedule();
};
reagent.impl.batching.is_reagent_component = function reagent$impl$batching$is_reagent_component(c) {
  var G__5887 = c;
  var G__5887__$1 = G__5887 == null ? null : G__5887["props"];
  var G__5887__$2 = G__5887__$1 == null ? null : G__5887__$1["argv"];
  return G__5887__$2;
};
reagent.impl.batching.run_reactively = function reagent$impl$batching$run_reactively(c, run) {
  if (cljs.core.truth_(reagent.impl.batching.is_reagent_component.call(null, c))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "is-reagent-component", "is-reagent-component", -1856228005, null), new cljs.core.Symbol(null, "c", "c", -122660552, null))))].join(""));
  }
  reagent.impl.batching.mark_rendered.call(null, c);
  var rat = c["cljsRatom"];
  if (rat == null) {
    var res = reagent.ratom.capture_derefed.call(null, run, c);
    var derefed = reagent.ratom.captured.call(null, c);
    if (!(derefed == null)) {
      c["cljsRatom"] = reagent.ratom.make_reaction.call(null, run, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437), function(res, derefed, rat) {
        return function() {
          return reagent.impl.batching.queue_render.call(null, c);
        };
      }(res, derefed, rat), new cljs.core.Keyword(null, "derefed", "derefed", 590684583), derefed);
    } else {
    }
    return res;
  } else {
    return reagent.ratom.run.call(null, rat);
  }
};
reagent.impl.batching.dispose = function reagent$impl$batching$dispose(c) {
  var G__5889_5890 = c["cljsRatom"];
  var G__5889_5891__$1 = G__5889_5890 == null ? null : reagent.ratom.dispose_BANG_.call(null, G__5889_5890);
  return reagent.impl.batching.mark_rendered.call(null, c);
};
goog.provide("reagent.impl.component");
goog.require("cljs.core");
goog.require("reagent.debug");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("reagent.impl.util");
reagent.impl.component.state_atom = function reagent$impl$component$state_atom(this$) {
  var sa = this$["cljsState"];
  if (!(sa == null)) {
    return sa;
  } else {
    return this$["cljsState"] = reagent.ratom.atom.call(null, null);
  }
};
reagent.impl.component.as_element = function reagent$impl$component$as_element(x) {
  return reagent.impl.template.as_element(x);
};
reagent.impl.component.do_render = function reagent$impl$component$do_render(c) {
  var _STAR_current_component_STAR_5846 = reagent.impl.component._STAR_current_component_STAR_;
  reagent.impl.component._STAR_current_component_STAR_ = c;
  try {
    var f = c["cljsRender"];
    var _ = cljs.core.ifn_QMARK_.call(null, f) ? null : function() {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }();
    var p = c["props"];
    var res = c["reagentRender"] == null ? f.call(null, c) : function() {
      var argv = p["argv"];
      var n = cljs.core.count.call(null, argv);
      var G__5847 = n;
      switch(G__5847) {
        case 1:
          return f.call(null);
          break;
        case 2:
          return f.call(null, cljs.core.nth.call(null, argv, 1));
          break;
        case 3:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2));
          break;
        case 4:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3));
          break;
        case 5:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3), cljs.core.nth.call(null, argv, 4));
          break;
        default:
          return cljs.core.apply.call(null, f, cljs.core.subvec.call(null, argv, 1));
      }
    }();
    if (cljs.core.vector_QMARK_.call(null, res)) {
      return reagent.impl.component.as_element.call(null, res);
    } else {
      if (cljs.core.ifn_QMARK_.call(null, res)) {
        c["cljsRender"] = res;
        return reagent$impl$component$do_render.call(null, c);
      } else {
        return res;
      }
    }
  } finally {
    reagent.impl.component._STAR_current_component_STAR_ = _STAR_current_component_STAR_5846;
  }
};
reagent.impl.component.static_fns = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "render", "render", -1408033454), function() {
  var c = this;
  if (cljs.core.not.call(null, reagent.impl.component._STAR_non_reactive_STAR_)) {
    return reagent.impl.batching.run_reactively.call(null, c, function(c) {
      return function() {
        return reagent.impl.component.do_render.call(null, c);
      };
    }(c));
  } else {
    return reagent.impl.component.do_render.call(null, c);
  }
}], null);
reagent.impl.component.custom_wrapper = function reagent$impl$component$custom_wrapper(key, f) {
  var G__5850 = key instanceof cljs.core.Keyword ? key.fqn : null;
  switch(G__5850) {
    case "componentWillUnmount":
      return function(G__5850) {
        return function() {
          var c = this;
          reagent.impl.batching.dispose.call(null, c);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__5850);
      break;
    case "componentWillMount":
      return function(G__5850) {
        return function() {
          var c = this;
          c["cljsMountOrder"] = reagent.impl.batching.next_mount_count.call(null);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__5850);
      break;
    case "componentDidUpdate":
      return function(G__5850) {
        return function(oldprops) {
          var c = this;
          return f.call(null, c, oldprops["argv"]);
        };
      }(G__5850);
      break;
    case "componentWillUpdate":
      return function(G__5850) {
        return function(nextprops) {
          var c = this;
          return f.call(null, c, nextprops["argv"]);
        };
      }(G__5850);
      break;
    case "shouldComponentUpdate":
      return function(G__5850) {
        return function(nextprops, nextstate) {
          var or__4122__auto__ = reagent.impl.util._STAR_always_update_STAR_;
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            var c = this;
            var old_argv = c["props"]["argv"];
            var new_argv = nextprops["argv"];
            if (f == null) {
              return old_argv == null || new_argv == null || cljs.core.not_EQ_.call(null, old_argv, new_argv);
            } else {
              return f.call(null, c, old_argv, new_argv);
            }
          }
        };
      }(G__5850);
      break;
    case "componentWillReceiveProps":
      return function(G__5850) {
        return function(props) {
          var c = this;
          return f.call(null, c, props["argv"]);
        };
      }(G__5850);
      break;
    case "getInitialState":
      return function(G__5850) {
        return function() {
          var c = this;
          return cljs.core.reset_BANG_.call(null, reagent.impl.component.state_atom.call(null, c), f.call(null, c));
        };
      }(G__5850);
      break;
    case "getDefaultProps":
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("getDefaultProps not supported yet"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, false))].join(""));break;
    default:
      return null;
  }
};
reagent.impl.component.default_wrapper = function reagent$impl$component$default_wrapper(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
    return function() {
      var G__5852__delegate = function(args) {
        var c = this;
        return cljs.core.apply.call(null, f, c, args);
      };
      var G__5852 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__5853__i = 0, G__5853__a = new Array(arguments.length - 0);
          while (G__5853__i < G__5853__a.length) {
            G__5853__a[G__5853__i] = arguments[G__5853__i + 0];
            ++G__5853__i;
          }
          args = new cljs.core.IndexedSeq(G__5853__a, 0);
        }
        return G__5852__delegate.call(this, args);
      };
      G__5852.cljs$lang$maxFixedArity = 0;
      G__5852.cljs$lang$applyTo = function(arglist__5854) {
        var args = cljs.core.seq(arglist__5854);
        return G__5852__delegate(args);
      };
      G__5852.cljs$core$IFn$_invoke$arity$variadic = G__5852__delegate;
      return G__5852;
    }();
  } else {
    return f;
  }
};
reagent.impl.component.dont_wrap = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), null, new cljs.core.Keyword(null, "reagentRender", "reagentRender", -358306383), null, new cljs.core.Keyword(null, "render", "render", -1408033454), null, new cljs.core.Keyword(null, "cljsName", "cljsName", 999824949), null], null), null);
reagent.impl.component.dont_bind = function reagent$impl$component$dont_bind(f) {
  if (cljs.core.fn_QMARK_.call(null, f)) {
    var G__5856 = f;
    G__5856["__reactDontBind"] = true;
    return G__5856;
  } else {
    return f;
  }
};
reagent.impl.component.get_wrapper = function reagent$impl$component$get_wrapper(key, f, name) {
  if (cljs.core.truth_(reagent.impl.component.dont_wrap.call(null, key))) {
    return reagent.impl.component.dont_bind.call(null, f);
  } else {
    var wrap = reagent.impl.component.custom_wrapper.call(null, key, f);
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = wrap;
      if (cljs.core.truth_(and__4110__auto__)) {
        return f;
      } else {
        return and__4110__auto__;
      }
    }())) {
      if (cljs.core.ifn_QMARK_.call(null, f)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Expected function in "), cljs.core.str(name), cljs.core.str(key), cljs.core.str(" but got "), cljs.core.str(f)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
      }
    } else {
    }
    var or__4122__auto__ = wrap;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return reagent.impl.component.default_wrapper.call(null, f);
    }
  }
};
reagent.impl.component.obligatory = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 1795750960), null, new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619), null, new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), null], null);
reagent.impl.component.dash_to_camel = reagent.impl.util.memoize_1.call(null, reagent.impl.util.dash_to_camel);
reagent.impl.component.camelify_map_keys = function reagent$impl$component$camelify_map_keys(fun_map) {
  return cljs.core.reduce_kv.call(null, function(m, k, v) {
    return cljs.core.assoc.call(null, m, cljs.core.keyword.call(null, reagent.impl.component.dash_to_camel.call(null, k)), v);
  }, cljs.core.PersistentArrayMap.EMPTY, fun_map);
};
reagent.impl.component.add_obligatory = function reagent$impl$component$add_obligatory(fun_map) {
  return cljs.core.merge.call(null, reagent.impl.component.obligatory, fun_map);
};
reagent.impl.component.add_render = function reagent$impl$component$add_render(fun_map, render_f, name) {
  var fm = cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), render_f, new cljs.core.Keyword(null, "render", "render", -1408033454), (new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(reagent.impl.component.static_fns));
  return cljs.core.assoc.call(null, fm, new cljs.core.Keyword(null, "cljsName", "cljsName", 999824949), function(fm) {
    return function() {
      return name;
    };
  }(fm));
};
reagent.impl.component.fun_name = function reagent$impl$component$fun_name(f) {
  var or__4122__auto__ = function() {
    var and__4110__auto__ = cljs.core.fn_QMARK_.call(null, f);
    if (and__4110__auto__) {
      var or__4122__auto__ = f["displayName"];
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return f["name"];
      }
    } else {
      return and__4110__auto__;
    }
  }();
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    var or__4122__auto____$1 = function() {
      var and__4110__auto__ = function() {
        var G__5864 = f;
        if (G__5864) {
          var bit__4789__auto__ = G__5864.cljs$lang$protocol_mask$partition1$ & 4096;
          if (bit__4789__auto__ || G__5864.cljs$core$INamed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }();
      if (and__4110__auto__) {
        return cljs.core.name.call(null, f);
      } else {
        return and__4110__auto__;
      }
    }();
    if (cljs.core.truth_(or__4122__auto____$1)) {
      return or__4122__auto____$1;
    } else {
      var m = cljs.core.meta.call(null, f);
      if (cljs.core.map_QMARK_.call(null, m)) {
        return(new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(m);
      } else {
        return null;
      }
    }
  }
};
reagent.impl.component.wrap_funs = function reagent$impl$component$wrap_funs(fmap) {
  var fun_map = function() {
    var temp__4128__auto__ = (new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104)).cljs$core$IFn$_invoke$arity$1(fmap);
    if (temp__4128__auto__ == null) {
      return fmap;
    } else {
      var cf = temp__4128__auto__;
      return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, fmap, new cljs.core.Keyword(null, "reagentRender", "reagentRender", -358306383), cf), new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104));
    }
  }();
  var render_fun = function() {
    var or__4122__auto__ = (new cljs.core.Keyword(null, "reagentRender", "reagentRender", -358306383)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return(new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(fun_map);
    }
  }();
  var _ = cljs.core.ifn_QMARK_.call(null, render_fun) ? null : function() {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Render must be a function, not "), cljs.core.str(cljs.core.pr_str.call(null, render_fun))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "render-fun", "render-fun", -1209513086, null))))].join(""));
  }();
  var name = [cljs.core.str(function() {
    var or__4122__auto__ = (new cljs.core.Keyword(null, "displayName", "displayName", -809144601)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return reagent.impl.component.fun_name.call(null, render_fun);
    }
  }())].join("");
  var name_SINGLEQUOTE_ = cljs.core.empty_QMARK_.call(null, name) ? [cljs.core.str(cljs.core.gensym.call(null, "reagent"))].join("") : name;
  var fmap__$1 = reagent.impl.component.add_render.call(null, cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "displayName", "displayName", -809144601), name_SINGLEQUOTE_), render_fun, name_SINGLEQUOTE_);
  return cljs.core.reduce_kv.call(null, function(fun_map, render_fun, _, name, name_SINGLEQUOTE_, fmap__$1) {
    return function(m, k, v) {
      return cljs.core.assoc.call(null, m, k, reagent.impl.component.get_wrapper.call(null, k, v, name_SINGLEQUOTE_));
    };
  }(fun_map, render_fun, _, name, name_SINGLEQUOTE_, fmap__$1), cljs.core.PersistentArrayMap.EMPTY, fmap__$1);
};
reagent.impl.component.map_to_js = function reagent$impl$component$map_to_js(m) {
  return cljs.core.reduce_kv.call(null, function(o, k, v) {
    var G__5866 = o;
    G__5866[cljs.core.name.call(null, k)] = v;
    return G__5866;
  }, {}, m);
};
reagent.impl.component.cljsify = function reagent$impl$component$cljsify(body) {
  return reagent.impl.component.map_to_js.call(null, reagent.impl.component.wrap_funs.call(null, reagent.impl.component.add_obligatory.call(null, reagent.impl.component.camelify_map_keys.call(null, body))));
};
reagent.impl.component.create_class = function reagent$impl$component$create_class(body) {
  if (cljs.core.map_QMARK_.call(null, body)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "body", "body", -408674142, null))))].join(""));
  }
  var spec = reagent.impl.component.cljsify.call(null, body);
  var res = React["createClass"](spec);
  var f = function(spec, res) {
    return function() {
      var G__5867__delegate = function(args) {
        return reagent.impl.component.as_element.call(null, cljs.core.apply.call(null, cljs.core.vector, res, args));
      };
      var G__5867 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__5868__i = 0, G__5868__a = new Array(arguments.length - 0);
          while (G__5868__i < G__5868__a.length) {
            G__5868__a[G__5868__i] = arguments[G__5868__i + 0];
            ++G__5868__i;
          }
          args = new cljs.core.IndexedSeq(G__5868__a, 0);
        }
        return G__5867__delegate.call(this, args);
      };
      G__5867.cljs$lang$maxFixedArity = 0;
      G__5867.cljs$lang$applyTo = function(arglist__5869) {
        var args = cljs.core.seq(arglist__5869);
        return G__5867__delegate(args);
      };
      G__5867.cljs$core$IFn$_invoke$arity$variadic = G__5867__delegate;
      return G__5867;
    }();
  }(spec, res);
  reagent.impl.util.cache_react_class.call(null, f, res);
  reagent.impl.util.cache_react_class.call(null, res, res);
  return f;
};
reagent.impl.component.comp_name = function reagent$impl$component$comp_name() {
  var n = function() {
    var G__5871 = reagent.impl.component._STAR_current_component_STAR_;
    var G__5871__$1 = G__5871 == null ? null : G__5871["cljsName"]();
    return G__5871__$1;
  }();
  if (!cljs.core.empty_QMARK_.call(null, n)) {
    return[cljs.core.str(" (in "), cljs.core.str(n), cljs.core.str(")")].join("");
  } else {
    return "";
  }
};
reagent.impl.component.shallow_obj_to_map = function reagent$impl$component$shallow_obj_to_map(o) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4876__auto__ = function reagent$impl$component$shallow_obj_to_map_$_iter__5876(s__5877) {
      return new cljs.core.LazySeq(null, function() {
        var s__5877__$1 = s__5877;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__5877__$1);
          if (temp__4126__auto__) {
            var s__5877__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__5877__$2)) {
              var c__4874__auto__ = cljs.core.chunk_first.call(null, s__5877__$2);
              var size__4875__auto__ = cljs.core.count.call(null, c__4874__auto__);
              var b__5879 = cljs.core.chunk_buffer.call(null, size__4875__auto__);
              if (function() {
                var i__5878 = 0;
                while (true) {
                  if (i__5878 < size__4875__auto__) {
                    var k = cljs.core._nth.call(null, c__4874__auto__, i__5878);
                    cljs.core.chunk_append.call(null, b__5879, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), o[k]], null));
                    var G__5880 = i__5878 + 1;
                    i__5878 = G__5880;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__5879), reagent$impl$component$shallow_obj_to_map_$_iter__5876.call(null, cljs.core.chunk_rest.call(null, s__5877__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__5879), null);
              }
            } else {
              var k = cljs.core.first.call(null, s__5877__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), o[k]], null), reagent$impl$component$shallow_obj_to_map_$_iter__5876.call(null, cljs.core.rest.call(null, s__5877__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4876__auto__.call(null, cljs.core.js_keys.call(null, o));
  }());
};
reagent.impl.component.elem_counter = 0;
reagent.impl.component.reactify_component = function reagent$impl$component$reactify_component(comp) {
  return React["createClass"]({"render":function() {
    var this$ = this;
    return reagent.impl.component.as_element.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp, cljs.core.assoc.call(null, reagent.impl.component.shallow_obj_to_map.call(null, this$["props"]), new cljs.core.Keyword(null, "-elem-count", "-elem-count", 663797079), reagent.impl.component.elem_counter = reagent.impl.component.elem_counter + 1)], null));
  }, "displayName":"react-wrapper"});
};
goog.provide("reagent.impl.template");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("clojure.string");
goog.require("reagent.debug");
reagent.impl.template.re_tag = /([^\s\.#]+)(?:#([^\s\.#]+))?(?:\.([^\s#]+))?/;
reagent.impl.template.NativeWrapper = function(comp) {
  this.comp = comp;
};
reagent.impl.template.NativeWrapper.cljs$lang$type = true;
reagent.impl.template.NativeWrapper.cljs$lang$ctorStr = "reagent.impl.template/NativeWrapper";
reagent.impl.template.NativeWrapper.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "reagent.impl.template/NativeWrapper");
};
reagent.impl.template.__GT_NativeWrapper = function reagent$impl$template$__GT_NativeWrapper(comp) {
  return new reagent.impl.template.NativeWrapper(comp);
};
reagent.impl.template.named_QMARK_ = function reagent$impl$template$named_QMARK_(x) {
  return x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol;
};
reagent.impl.template.hiccup_tag_QMARK_ = function reagent$impl$template$hiccup_tag_QMARK_(x) {
  return reagent.impl.template.named_QMARK_.call(null, x) || typeof x === "string";
};
reagent.impl.template.valid_tag_QMARK_ = function reagent$impl$template$valid_tag_QMARK_(x) {
  return reagent.impl.template.hiccup_tag_QMARK_.call(null, x) || cljs.core.ifn_QMARK_.call(null, x) || x instanceof reagent.impl.template.NativeWrapper;
};
reagent.impl.template.prop_name_cache = {"charset":"charSet", "for":"htmlFor", "class":"className"};
reagent.impl.template.obj_get = function reagent$impl$template$obj_get(o, k) {
  if (cljs.core.truth_(o.hasOwnProperty(k))) {
    return o[k];
  } else {
    return null;
  }
};
reagent.impl.template.cached_prop_name = function reagent$impl$template$cached_prop_name(k) {
  if (reagent.impl.template.named_QMARK_.call(null, k)) {
    var temp__4128__auto__ = reagent.impl.template.obj_get.call(null, reagent.impl.template.prop_name_cache, cljs.core.name.call(null, k));
    if (temp__4128__auto__ == null) {
      return reagent.impl.template.prop_name_cache[cljs.core.name.call(null, k)] = reagent.impl.util.dash_to_camel.call(null, k);
    } else {
      var k_SINGLEQUOTE_ = temp__4128__auto__;
      return k_SINGLEQUOTE_;
    }
  } else {
    return k;
  }
};
reagent.impl.template.convert_prop_value = function reagent$impl$template$convert_prop_value(x) {
  if (typeof x === "string" || typeof x === "number" || cljs.core.fn_QMARK_.call(null, x)) {
    return x;
  } else {
    if (reagent.impl.template.named_QMARK_.call(null, x)) {
      return cljs.core.name.call(null, x);
    } else {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.reduce_kv.call(null, function(o, k, v) {
          var G__5915 = o;
          G__5915[reagent.impl.template.cached_prop_name.call(null, k)] = reagent$impl$template$convert_prop_value.call(null, v);
          return G__5915;
        }, {}, x);
      } else {
        if (cljs.core.coll_QMARK_.call(null, x)) {
          return cljs.core.clj__GT_js.call(null, x);
        } else {
          if (cljs.core.ifn_QMARK_.call(null, x)) {
            return function() {
              var G__5916__delegate = function(args) {
                return cljs.core.apply.call(null, x, args);
              };
              var G__5916 = function(var_args) {
                var args = null;
                if (arguments.length > 0) {
                  var G__5917__i = 0, G__5917__a = new Array(arguments.length - 0);
                  while (G__5917__i < G__5917__a.length) {
                    G__5917__a[G__5917__i] = arguments[G__5917__i + 0];
                    ++G__5917__i;
                  }
                  args = new cljs.core.IndexedSeq(G__5917__a, 0);
                }
                return G__5916__delegate.call(this, args);
              };
              G__5916.cljs$lang$maxFixedArity = 0;
              G__5916.cljs$lang$applyTo = function(arglist__5918) {
                var args = cljs.core.seq(arglist__5918);
                return G__5916__delegate(args);
              };
              G__5916.cljs$core$IFn$_invoke$arity$variadic = G__5916__delegate;
              return G__5916;
            }();
          } else {
            return cljs.core.clj__GT_js.call(null, x);
          }
        }
      }
    }
  }
};
reagent.impl.template.set_id_class = function reagent$impl$template$set_id_class(props, id, class$) {
  var p = props == null ? {} : props;
  if (cljs.core.some_QMARK_.call(null, id) && p["id"] == null) {
    p["id"] = id;
  } else {
  }
  if (cljs.core.some_QMARK_.call(null, class$)) {
    var old_5919 = p["className"];
    p["className"] = cljs.core.some_QMARK_.call(null, old_5919) ? [cljs.core.str(class$), cljs.core.str(" "), cljs.core.str(old_5919)].join("") : class$;
  } else {
  }
  return p;
};
reagent.impl.template.convert_props = function reagent$impl$template$convert_props(props, id_class) {
  var id = id_class["id"];
  var class$ = id_class["className"];
  var no_id_class = id == null && class$ == null;
  if (no_id_class && cljs.core.empty_QMARK_.call(null, props)) {
    return null;
  } else {
    var objprops = reagent.impl.template.convert_prop_value.call(null, props);
    if (no_id_class) {
      return objprops;
    } else {
      return reagent.impl.template.set_id_class.call(null, objprops, id, class$);
    }
  }
};
reagent.impl.template.input_unmount = function reagent$impl$template$input_unmount(this$) {
  return this$["cljsInputValue"] = null;
};
reagent.impl.template.input_set_value = function reagent$impl$template$input_set_value(this$) {
  var temp__4130__auto__ = this$["cljsInputValue"];
  if (temp__4130__auto__ == null) {
    return null;
  } else {
    var value = temp__4130__auto__;
    this$["cljsInputDirty"] = false;
    var node = this$["getDOMNode"]();
    if (cljs.core.not_EQ_.call(null, value, node["value"])) {
      return node["value"] = value;
    } else {
      return null;
    }
  }
};
reagent.impl.template.input_handle_change = function reagent$impl$template$input_handle_change(this$, on_change, e) {
  var res = on_change.call(null, e);
  if (cljs.core.truth_(this$["cljsInputDirty"])) {
  } else {
    this$["cljsInputDirty"] = true;
    reagent.impl.batching.do_later.call(null, function(res) {
      return function() {
        return reagent.impl.template.input_set_value.call(null, this$);
      };
    }(res));
  }
  return res;
};
reagent.impl.template.input_render_setup = function reagent$impl$template$input_render_setup(this$, jsprops) {
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = jsprops["hasOwnProperty"]("onChange");
    if (cljs.core.truth_(and__4110__auto__)) {
      return jsprops["hasOwnProperty"]("value");
    } else {
      return and__4110__auto__;
    }
  }())) {
    var v = jsprops["value"];
    var value = v == null ? "" : v;
    var on_change = jsprops["onChange"];
    this$["cljsInputValue"] = value;
    delete jsprops["value"];
    var G__5922 = jsprops;
    G__5922["defaultValue"] = value;
    G__5922["onChange"] = function(G__5922, v, value, on_change) {
      return function(p1__5920_SHARP_) {
        return reagent.impl.template.input_handle_change.call(null, this$, on_change, p1__5920_SHARP_);
      };
    }(G__5922, v, value, on_change);
    return G__5922;
  } else {
    return this$["cljsInputValue"] = null;
  }
};
reagent.impl.template.input_component_QMARK_ = function reagent$impl$template$input_component_QMARK_(x) {
  return x === "input" || x === "textarea";
};
reagent.impl.template.reagent_input_class = null;
reagent.impl.template.input_spec = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "display-name", "display-name", 694513143), "ReagentInput", new cljs.core.Keyword(null, "component-did-update", "component-did-update", -1468549173), reagent.impl.template.input_set_value, new cljs.core.Keyword(null, "component-will-unmount", "component-will-unmount", -2058314698), reagent.impl.template.input_unmount, new cljs.core.Keyword(null, "reagent-render", "reagent-render", -985383853), 
function(argv, comp, jsprops, first_child) {
  var this$ = reagent.impl.component._STAR_current_component_STAR_;
  reagent.impl.template.input_render_setup.call(null, this$, jsprops);
  return reagent.impl.template.make_element.call(null, argv, comp, jsprops, first_child);
}], null);
reagent.impl.template.reagent_input = function reagent$impl$template$reagent_input(argv, comp, jsprops, first_child) {
  if (reagent.impl.template.reagent_input_class == null) {
    reagent.impl.template.reagent_input_class = reagent.impl.component.create_class.call(null, reagent.impl.template.input_spec);
  } else {
  }
  return reagent.impl.template.reagent_input_class.call(null, argv, comp, jsprops, first_child);
};
reagent.impl.template.parse_tag = function reagent$impl$template$parse_tag(hiccup_tag) {
  var vec__5924 = cljs.core.next.call(null, cljs.core.re_matches.call(null, reagent.impl.template.re_tag, cljs.core.name.call(null, hiccup_tag)));
  var tag = cljs.core.nth.call(null, vec__5924, 0, null);
  var id = cljs.core.nth.call(null, vec__5924, 1, null);
  var class$ = cljs.core.nth.call(null, vec__5924, 2, null);
  var class_SINGLEQUOTE_ = cljs.core.truth_(class$) ? clojure.string.replace.call(null, class$, /\./, " ") : null;
  if (cljs.core.truth_(tag)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid tag: '"), cljs.core.str(hiccup_tag), cljs.core.str("'"), cljs.core.str(reagent.impl.component.comp_name.call(null))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "tag", "tag", 350170304, null)))].join(""));
  }
  return{"className":class_SINGLEQUOTE_, "id":id, "name":tag};
};
reagent.impl.template.fn_to_class = function reagent$impl$template$fn_to_class(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Expected a function, not "), cljs.core.str(cljs.core.pr_str.call(null, f))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  if (!!(cljs.core.fn_QMARK_.call(null, f) && cljs.core.some_QMARK_.call(null, f["type"])) && typeof console !== "undefined") {
    console.warn([cljs.core.str("Warning: "), cljs.core.str("Using native React classes directly in Hiccup forms "), cljs.core.str("is not supported. Use create-element or "), cljs.core.str("adapt-react-class instead: "), cljs.core.str(f["type"]), cljs.core.str(reagent.impl.component.comp_name.call(null))].join(""));
  } else {
  }
  var spec = cljs.core.meta.call(null, f);
  var withrender = cljs.core.assoc.call(null, spec, new cljs.core.Keyword(null, "reagent-render", "reagent-render", -985383853), f);
  var res = reagent.impl.component.create_class.call(null, withrender);
  var wrapf = reagent.impl.util.cached_react_class.call(null, res);
  reagent.impl.util.cache_react_class.call(null, f, wrapf);
  return wrapf;
};
reagent.impl.template.as_class = function reagent$impl$template$as_class(tag) {
  var temp__4128__auto__ = reagent.impl.util.cached_react_class.call(null, tag);
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.fn_to_class.call(null, tag);
  } else {
    var cached_class = temp__4128__auto__;
    return cached_class;
  }
};
reagent.impl.template.get_key = function reagent$impl$template$get_key(x) {
  if (cljs.core.map_QMARK_.call(null, x)) {
    return cljs.core.get.call(null, x, new cljs.core.Keyword(null, "key", "key", -1516042587));
  } else {
    return null;
  }
};
reagent.impl.template.key_from_vec = function reagent$impl$template$key_from_vec(v) {
  var temp__4128__auto__ = function() {
    var G__5926 = cljs.core.meta.call(null, v);
    var G__5926__$1 = G__5926 == null ? null : reagent.impl.template.get_key.call(null, G__5926);
    return G__5926__$1;
  }();
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.get_key.call(null, cljs.core.nth.call(null, v, 1, null));
  } else {
    var k = temp__4128__auto__;
    return k;
  }
};
reagent.impl.template.reag_element = function reagent$impl$template$reag_element(tag, v) {
  var c = reagent.impl.template.as_class.call(null, tag);
  var jsprops = {"argv":v};
  var G__5928_5929 = v;
  var G__5928_5930__$1 = G__5928_5929 == null ? null : reagent.impl.template.key_from_vec.call(null, G__5928_5929);
  var G__5928_5931__$2 = G__5928_5930__$1 == null ? null : jsprops["key"] = G__5928_5930__$1;
  return React["createElement"](c, jsprops);
};
reagent.impl.template.adapt_react_class = function reagent$impl$template$adapt_react_class(c) {
  return new reagent.impl.template.NativeWrapper({"class":null, "id":null, "name":c});
};
reagent.impl.template.tag_name_cache = {};
reagent.impl.template.cached_parse = function reagent$impl$template$cached_parse(x) {
  if (reagent.impl.template.hiccup_tag_QMARK_.call(null, x)) {
    var temp__4128__auto__ = reagent.impl.template.obj_get.call(null, reagent.impl.template.tag_name_cache, cljs.core.name.call(null, x));
    if (temp__4128__auto__ == null) {
      return reagent.impl.template.tag_name_cache[cljs.core.name.call(null, x)] = reagent.impl.template.parse_tag.call(null, x);
    } else {
      var s = temp__4128__auto__;
      return s;
    }
  } else {
    if (x instanceof reagent.impl.template.NativeWrapper) {
      return x.comp;
    } else {
      return null;
    }
  }
};
reagent.impl.template.native_element = function reagent$impl$template$native_element(tag, argv) {
  var temp__4126__auto__ = reagent.impl.template.cached_parse.call(null, tag);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var parsed = temp__4126__auto__;
    var comp = parsed["name"];
    var props = cljs.core.nth.call(null, argv, 1, null);
    var hasprops = props == null || cljs.core.map_QMARK_.call(null, props);
    var jsprops = reagent.impl.template.convert_props.call(null, hasprops ? props : null, parsed);
    var first_child = hasprops ? 2 : 1;
    if (reagent.impl.template.input_component_QMARK_.call(null, comp)) {
      return reagent.impl.template.as_element.call(null, cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagent.impl.template.reagent_input, argv, comp, jsprops, first_child], null), cljs.core.meta.call(null, argv)));
    } else {
      var p = function() {
        var temp__4128__auto__ = function() {
          var G__5934 = cljs.core.meta.call(null, argv);
          var G__5934__$1 = G__5934 == null ? null : reagent.impl.template.get_key.call(null, G__5934);
          return G__5934__$1;
        }();
        if (temp__4128__auto__ == null) {
          return jsprops;
        } else {
          var key = temp__4128__auto__;
          var G__5935 = jsprops == null ? {} : jsprops;
          G__5935["key"] = key;
          return G__5935;
        }
      }();
      return reagent.impl.template.make_element.call(null, argv, comp, p, first_child);
    }
  } else {
    return null;
  }
};
reagent.impl.template.vec_to_elem = function reagent$impl$template$vec_to_elem(v) {
  if (cljs.core.count.call(null, v) > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Hiccup form should not be empty: "), cljs.core.str(cljs.core.pr_str.call(null, v)), cljs.core.str(reagent.impl.component.comp_name.call(null))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "v", "v", 1661996586, 
    null)))))].join(""));
  }
  var tag = cljs.core.nth.call(null, v, 0);
  if (reagent.impl.template.valid_tag_QMARK_.call(null, tag)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid Hiccup form: "), cljs.core.str(cljs.core.pr_str.call(null, v)), cljs.core.str(reagent.impl.component.comp_name.call(null))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-tag?", "valid-tag?", 1243064160, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null))))].join(""));
  }
  var temp__4128__auto__ = reagent.impl.template.native_element.call(null, tag, v);
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.reag_element.call(null, tag, v);
  } else {
    var ne = temp__4128__auto__;
    return ne;
  }
};
reagent.impl.template.as_element = function reagent$impl$template$as_element(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (cljs.core.vector_QMARK_.call(null, x)) {
      return reagent.impl.template.vec_to_elem.call(null, x);
    } else {
      if (cljs.core.seq_QMARK_.call(null, x)) {
        return reagent.impl.template.expand_seq_check.call(null, x);
      } else {
        return x;
      }
    }
  }
};
reagent.impl.template.expand_seq = function reagent$impl$template$expand_seq(s) {
  var a = cljs.core.into_array.call(null, s);
  var n__5007__auto___5936 = a.length;
  var i_5937 = 0;
  while (true) {
    if (i_5937 < n__5007__auto___5936) {
      a[i_5937] = reagent.impl.template.as_element.call(null, a[i_5937]);
      var G__5938 = i_5937 + 1;
      i_5937 = G__5938;
      continue;
    } else {
    }
    break;
  }
  return a;
};
reagent.impl.template.expand_seq_dev = function reagent$impl$template$expand_seq_dev(s, o) {
  var a = cljs.core.into_array.call(null, s);
  var n__5007__auto___5939 = a.length;
  var i_5940 = 0;
  while (true) {
    if (i_5940 < n__5007__auto___5939) {
      var val_5941 = a[i_5940];
      if (cljs.core.vector_QMARK_.call(null, val_5941) && reagent.impl.template.key_from_vec.call(null, val_5941) == null) {
        o["no-key"] = true;
      } else {
      }
      a[i_5940] = reagent.impl.template.as_element.call(null, val_5941);
      var G__5942 = i_5940 + 1;
      i_5940 = G__5942;
      continue;
    } else {
    }
    break;
  }
  return a;
};
reagent.impl.template.expand_seq_check = function reagent$impl$template$expand_seq_check(x) {
  var ctx = {};
  var res = reagent.ratom._STAR_ratom_context_STAR_ == null ? reagent.impl.template.expand_seq_dev.call(null, x, ctx) : reagent.ratom.capture_derefed.call(null, function(ctx) {
    return function() {
      return reagent.impl.template.expand_seq_dev.call(null, x, ctx);
    };
  }(ctx), ctx);
  if (cljs.core.truth_(reagent.ratom.captured.call(null, ctx))) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("Reactive deref not supported in lazy seq, "), cljs.core.str("it should be wrapped in doall"), cljs.core.str(reagent.impl.component.comp_name.call(null)), cljs.core.str(". Value:\n"), cljs.core.str(cljs.core.pr_str.call(null, x))].join(""));
    } else {
    }
  } else {
  }
  if (cljs.core.truth_(ctx["no-key"])) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("Every element in a seq should have a unique "), cljs.core.str(":key"), cljs.core.str(reagent.impl.component.comp_name.call(null)), cljs.core.str(". Value: "), cljs.core.str(cljs.core.pr_str.call(null, x))].join(""));
    } else {
    }
  } else {
  }
  return res;
};
reagent.impl.template.make_element = function reagent$impl$template$make_element(argv, comp, jsprops, first_child) {
  var G__5944 = cljs.core.count.call(null, argv) - first_child;
  switch(G__5944) {
    case 0:
      return React["createElement"](comp, jsprops);
      break;
    case 1:
      return React["createElement"](comp, jsprops, reagent.impl.template.as_element.call(null, cljs.core.nth.call(null, argv, first_child)));
      break;
    default:
      return React["createElement"].apply(null, cljs.core.reduce_kv.call(null, function(G__5944) {
        return function(a, k, v) {
          if (k >= first_child) {
            a.push(reagent.impl.template.as_element.call(null, v));
          } else {
          }
          return a;
        };
      }(G__5944), [comp, jsprops], argv));
  }
};
goog.provide("reagent.core");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.template");
goog.require("reagent.impl.batching");
goog.require("reagent.debug");
reagent.core.is_client = reagent.impl.util.is_client;
reagent.core.create_element = function() {
  var reagent$core$create_element = null;
  var reagent$core$create_element__1 = function(type) {
    return reagent$core$create_element.call(null, type, null);
  };
  var reagent$core$create_element__2 = function(type, props) {
    if (!cljs.core.map_QMARK_.call(null, props)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
    }
    return React.createElement(type, props);
  };
  var reagent$core$create_element__3 = function(type, props, child) {
    if (!cljs.core.map_QMARK_.call(null, props)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
    }
    return React.createElement(type, props, child);
  };
  var reagent$core$create_element__4 = function() {
    var G__5822__delegate = function(type, props, child, children) {
      if (!cljs.core.map_QMARK_.call(null, props)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
      }
      return cljs.core.apply.call(null, React.createElement, type, props, child, children);
    };
    var G__5822 = function(type, props, child, var_args) {
      var children = null;
      if (arguments.length > 3) {
        var G__5823__i = 0, G__5823__a = new Array(arguments.length - 3);
        while (G__5823__i < G__5823__a.length) {
          G__5823__a[G__5823__i] = arguments[G__5823__i + 3];
          ++G__5823__i;
        }
        children = new cljs.core.IndexedSeq(G__5823__a, 0);
      }
      return G__5822__delegate.call(this, type, props, child, children);
    };
    G__5822.cljs$lang$maxFixedArity = 3;
    G__5822.cljs$lang$applyTo = function(arglist__5824) {
      var type = cljs.core.first(arglist__5824);
      arglist__5824 = cljs.core.next(arglist__5824);
      var props = cljs.core.first(arglist__5824);
      arglist__5824 = cljs.core.next(arglist__5824);
      var child = cljs.core.first(arglist__5824);
      var children = cljs.core.rest(arglist__5824);
      return G__5822__delegate(type, props, child, children);
    };
    G__5822.cljs$core$IFn$_invoke$arity$variadic = G__5822__delegate;
    return G__5822;
  }();
  reagent$core$create_element = function(type, props, child, var_args) {
    var children = var_args;
    switch(arguments.length) {
      case 1:
        return reagent$core$create_element__1.call(this, type);
      case 2:
        return reagent$core$create_element__2.call(this, type, props);
      case 3:
        return reagent$core$create_element__3.call(this, type, props, child);
      default:
        var G__5825 = null;
        if (arguments.length > 3) {
          var G__5826__i = 0, G__5826__a = new Array(arguments.length - 3);
          while (G__5826__i < G__5826__a.length) {
            G__5826__a[G__5826__i] = arguments[G__5826__i + 3];
            ++G__5826__i;
          }
          G__5825 = new cljs.core.IndexedSeq(G__5826__a, 0);
        }
        return reagent$core$create_element__4.cljs$core$IFn$_invoke$arity$variadic(type, props, child, G__5825);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reagent$core$create_element.cljs$lang$maxFixedArity = 3;
  reagent$core$create_element.cljs$lang$applyTo = reagent$core$create_element__4.cljs$lang$applyTo;
  reagent$core$create_element.cljs$core$IFn$_invoke$arity$1 = reagent$core$create_element__1;
  reagent$core$create_element.cljs$core$IFn$_invoke$arity$2 = reagent$core$create_element__2;
  reagent$core$create_element.cljs$core$IFn$_invoke$arity$3 = reagent$core$create_element__3;
  reagent$core$create_element.cljs$core$IFn$_invoke$arity$variadic = reagent$core$create_element__4.cljs$core$IFn$_invoke$arity$variadic;
  return reagent$core$create_element;
}();
reagent.core.as_element = function reagent$core$as_element(form) {
  return reagent.impl.template.as_element.call(null, form);
};
reagent.core.adapt_react_class = function reagent$core$adapt_react_class(c) {
  return reagent.impl.template.adapt_react_class.call(null, c);
};
reagent.core.reactify_component = function reagent$core$reactify_component(c) {
  return reagent.impl.component.reactify_component.call(null, c);
};
reagent.core.render = function() {
  var reagent$core$render = null;
  var reagent$core$render__2 = function(comp, container) {
    return reagent$core$render.call(null, comp, container, null);
  };
  var reagent$core$render__3 = function(comp, container, callback) {
    var f = function() {
      return reagent.core.as_element.call(null, cljs.core.fn_QMARK_.call(null, comp) ? comp.call(null) : comp);
    };
    return reagent.impl.util.render_component.call(null, f, container, callback);
  };
  reagent$core$render = function(comp, container, callback) {
    switch(arguments.length) {
      case 2:
        return reagent$core$render__2.call(this, comp, container);
      case 3:
        return reagent$core$render__3.call(this, comp, container, callback);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reagent$core$render.cljs$core$IFn$_invoke$arity$2 = reagent$core$render__2;
  reagent$core$render.cljs$core$IFn$_invoke$arity$3 = reagent$core$render__3;
  return reagent$core$render;
}();
reagent.core.unmount_component_at_node = function reagent$core$unmount_component_at_node(container) {
  return reagent.impl.util.unmount_component_at_node.call(null, container);
};
reagent.core.render_to_string = function reagent$core$render_to_string(component) {
  var _STAR_non_reactive_STAR_5828 = reagent.impl.component._STAR_non_reactive_STAR_;
  reagent.impl.component._STAR_non_reactive_STAR_ = true;
  try {
    return React["renderToString"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_5828;
  }
};
reagent.core.as_component = reagent.core.as_element;
reagent.core.render_component = reagent.core.render;
reagent.core.render_component_to_string = reagent.core.render_to_string;
reagent.core.render_to_static_markup = function reagent$core$render_to_static_markup(component) {
  var _STAR_non_reactive_STAR_5830 = reagent.impl.component._STAR_non_reactive_STAR_;
  reagent.impl.component._STAR_non_reactive_STAR_ = true;
  try {
    return React["renderToStaticMarkup"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_5830;
  }
};
reagent.core.force_update_all = function reagent$core$force_update_all() {
  return reagent.impl.util.force_update_all.call(null);
};
goog.exportSymbol("reagent.core.force_update_all", reagent.core.force_update_all);
reagent.core.create_class = function reagent$core$create_class(spec) {
  return reagent.impl.component.create_class.call(null, spec);
};
reagent.core.current_component = function reagent$core$current_component() {
  return reagent.impl.component._STAR_current_component_STAR_;
};
reagent.core.state_atom = function reagent$core$state_atom(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.component.state_atom.call(null, this$);
};
reagent.core.state = function reagent$core$state(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return cljs.core.deref.call(null, reagent.core.state_atom.call(null, this$));
};
reagent.core.replace_state = function reagent$core$replace_state(this$, new_state) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)))))].join(""));
  }
  return cljs.core.reset_BANG_.call(null, reagent.core.state_atom.call(null, this$), new_state);
};
reagent.core.set_state = function reagent$core$set_state(this$, new_state) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)))))].join(""));
  }
  return cljs.core.swap_BANG_.call(null, reagent.core.state_atom.call(null, this$), cljs.core.merge, new_state);
};
reagent.core.props = function reagent$core$props(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_props.call(null, this$);
};
reagent.core.children = function reagent$core$children(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_children.call(null, this$);
};
reagent.core.argv = function reagent$core$argv(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_argv.call(null, this$);
};
reagent.core.dom_node = function reagent$core$dom_node(this$) {
  return this$["getDOMNode"]();
};
reagent.core.merge_props = function reagent$core$merge_props(defaults, props) {
  return reagent.impl.util.merge_props.call(null, defaults, props);
};
reagent.core.flush = function reagent$core$flush() {
  return reagent.impl.batching.flush.call(null);
};
reagent.core.atom = function() {
  var reagent$core$atom = null;
  var reagent$core$atom__1 = function(x) {
    return reagent.ratom.atom.call(null, x);
  };
  var reagent$core$atom__2 = function() {
    var G__5831__delegate = function(x, rest) {
      return cljs.core.apply.call(null, reagent.ratom.atom, x, rest);
    };
    var G__5831 = function(x, var_args) {
      var rest = null;
      if (arguments.length > 1) {
        var G__5832__i = 0, G__5832__a = new Array(arguments.length - 1);
        while (G__5832__i < G__5832__a.length) {
          G__5832__a[G__5832__i] = arguments[G__5832__i + 1];
          ++G__5832__i;
        }
        rest = new cljs.core.IndexedSeq(G__5832__a, 0);
      }
      return G__5831__delegate.call(this, x, rest);
    };
    G__5831.cljs$lang$maxFixedArity = 1;
    G__5831.cljs$lang$applyTo = function(arglist__5833) {
      var x = cljs.core.first(arglist__5833);
      var rest = cljs.core.rest(arglist__5833);
      return G__5831__delegate(x, rest);
    };
    G__5831.cljs$core$IFn$_invoke$arity$variadic = G__5831__delegate;
    return G__5831;
  }();
  reagent$core$atom = function(x, var_args) {
    var rest = var_args;
    switch(arguments.length) {
      case 1:
        return reagent$core$atom__1.call(this, x);
      default:
        var G__5834 = null;
        if (arguments.length > 1) {
          var G__5835__i = 0, G__5835__a = new Array(arguments.length - 1);
          while (G__5835__i < G__5835__a.length) {
            G__5835__a[G__5835__i] = arguments[G__5835__i + 1];
            ++G__5835__i;
          }
          G__5834 = new cljs.core.IndexedSeq(G__5835__a, 0);
        }
        return reagent$core$atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__5834);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reagent$core$atom.cljs$lang$maxFixedArity = 1;
  reagent$core$atom.cljs$lang$applyTo = reagent$core$atom__2.cljs$lang$applyTo;
  reagent$core$atom.cljs$core$IFn$_invoke$arity$1 = reagent$core$atom__1;
  reagent$core$atom.cljs$core$IFn$_invoke$arity$variadic = reagent$core$atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return reagent$core$atom;
}();
reagent.core.wrap = function() {
  var reagent$core$wrap__delegate = function(value, reset_fn, args) {
    if (cljs.core.ifn_QMARK_.call(null, reset_fn)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "reset-fn", "reset-fn", 949643977, null))))].join(""));
    }
    return reagent.ratom.make_wrapper.call(null, value, reset_fn, args);
  };
  var reagent$core$wrap = function(value, reset_fn, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__5836__i = 0, G__5836__a = new Array(arguments.length - 2);
      while (G__5836__i < G__5836__a.length) {
        G__5836__a[G__5836__i] = arguments[G__5836__i + 2];
        ++G__5836__i;
      }
      args = new cljs.core.IndexedSeq(G__5836__a, 0);
    }
    return reagent$core$wrap__delegate.call(this, value, reset_fn, args);
  };
  reagent$core$wrap.cljs$lang$maxFixedArity = 2;
  reagent$core$wrap.cljs$lang$applyTo = function(arglist__5837) {
    var value = cljs.core.first(arglist__5837);
    arglist__5837 = cljs.core.next(arglist__5837);
    var reset_fn = cljs.core.first(arglist__5837);
    var args = cljs.core.rest(arglist__5837);
    return reagent$core$wrap__delegate(value, reset_fn, args);
  };
  reagent$core$wrap.cljs$core$IFn$_invoke$arity$variadic = reagent$core$wrap__delegate;
  return reagent$core$wrap;
}();
reagent.core.cursor = function reagent$core$cursor(src, path) {
  return reagent.ratom.cursor.call(null, src, path);
};
reagent.core.next_tick = function reagent$core$next_tick(f) {
  return reagent.impl.batching.next_tick.call(null, f);
};
reagent.core.partial = function() {
  var reagent$core$partial__delegate = function(f, args) {
    return new reagent.impl.util.partial_ifn(f, args, null);
  };
  var reagent$core$partial = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      var G__5838__i = 0, G__5838__a = new Array(arguments.length - 1);
      while (G__5838__i < G__5838__a.length) {
        G__5838__a[G__5838__i] = arguments[G__5838__i + 1];
        ++G__5838__i;
      }
      args = new cljs.core.IndexedSeq(G__5838__a, 0);
    }
    return reagent$core$partial__delegate.call(this, f, args);
  };
  reagent$core$partial.cljs$lang$maxFixedArity = 1;
  reagent$core$partial.cljs$lang$applyTo = function(arglist__5839) {
    var f = cljs.core.first(arglist__5839);
    var args = cljs.core.rest(arglist__5839);
    return reagent$core$partial__delegate(f, args);
  };
  reagent$core$partial.cljs$core$IFn$_invoke$arity$variadic = reagent$core$partial__delegate;
  return reagent$core$partial;
}();
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj13021 = {};
  return obj13021;
}();
cljs.core.async.impl.protocols.take_BANG_ = function cljs$core$async$impl$protocols$take_BANG_(port, fn1_handler) {
  if (function() {
    var and__4110__auto__ = port;
    if (and__4110__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4758__auto__ = port == null ? null : port;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj13023 = {};
  return obj13023;
}();
cljs.core.async.impl.protocols.put_BANG_ = function cljs$core$async$impl$protocols$put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__4110__auto__ = port;
    if (and__4110__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4758__auto__ = port == null ? null : port;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj13025 = {};
  return obj13025;
}();
cljs.core.async.impl.protocols.close_BANG_ = function cljs$core$async$impl$protocols$close_BANG_(chan) {
  if (function() {
    var and__4110__auto__ = chan;
    if (and__4110__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4758__auto__ = chan == null ? null : chan;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function cljs$core$async$impl$protocols$closed_QMARK_(chan) {
  if (function() {
    var and__4110__auto__ = chan;
    if (and__4110__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4758__auto__ = chan == null ? null : chan;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj13027 = {};
  return obj13027;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function cljs$core$async$impl$protocols$active_QMARK_(h) {
  if (function() {
    var and__4110__auto__ = h;
    if (and__4110__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4758__auto__ = h == null ? null : h;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function cljs$core$async$impl$protocols$commit(h) {
  if (function() {
    var and__4110__auto__ = h;
    if (and__4110__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4758__auto__ = h == null ? null : h;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj13029 = {};
  return obj13029;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function cljs$core$async$impl$protocols$full_QMARK_(b) {
  if (function() {
    var and__4110__auto__ = b;
    if (and__4110__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4758__auto__ = b == null ? null : b;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function cljs$core$async$impl$protocols$remove_BANG_(b) {
  if (function() {
    var and__4110__auto__ = b;
    if (and__4110__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4758__auto__ = b == null ? null : b;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function cljs$core$async$impl$protocols$add_BANG__STAR_(b, itm) {
  if (function() {
    var and__4110__auto__ = b;
    if (and__4110__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__4758__auto__ = b == null ? null : b;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function() {
  var cljs$core$async$impl$protocols$add_BANG_ = null;
  var cljs$core$async$impl$protocols$add_BANG___1 = function(b) {
    return b;
  };
  var cljs$core$async$impl$protocols$add_BANG___2 = function(b, itm) {
    if (!(itm == null)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "itm", "itm", -713282527, null)))))].join(""));
    }
    return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
  };
  cljs$core$async$impl$protocols$add_BANG_ = function(b, itm) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$impl$protocols$add_BANG___1.call(this, b);
      case 2:
        return cljs$core$async$impl$protocols$add_BANG___2.call(this, b, itm);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$impl$protocols$add_BANG_.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$impl$protocols$add_BANG___1;
  cljs$core$async$impl$protocols$add_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$impl$protocols$add_BANG___2;
  return cljs$core$async$impl$protocols$add_BANG_;
}();
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj13031 = {};
  return obj13031;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function cljs$core$async$impl$buffers$acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__13034 = cnt + 1;
      cnt = G__13034;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__5007__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__5007__auto__) {
      var v_13035 = this$.pop();
      if (keep_QMARK_.call(null, v_13035)) {
        this$.unshift(v_13035);
      } else {
      }
      var G__13036 = x + 1;
      x = G__13036;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function cljs$core$async$impl$buffers$__GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function cljs$core$async$impl$buffers$ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function cljs$core$async$impl$buffers$__GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function cljs$core$async$impl$buffers$fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function cljs$core$async$impl$buffers$__GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function cljs$core$async$impl$buffers$dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function cljs$core$async$impl$buffers$__GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function cljs$core$async$impl$buffers$sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.functions");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener) {
    Channel = function() {
      var iframe = document.createElement("iframe");
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (e.origin != origin && e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined") {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      head = head.next;
      var cb = head.cb;
      head.cb = null;
      cb();
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement("script")) {
    return function(cb) {
      var script = document.createElement("script");
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("goog.async.nextTick");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function cljs$core$async$impl$dispatch$process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_13039 = 0;
  while (true) {
    var m_13040 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_13040 == null) {
    } else {
      m_13040.call(null);
      if (count_13039 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__13041 = count_13039 + 1;
        count_13039 = G__13041;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function cljs$core$async$impl$dispatch$queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (cljs.core.truth_(and__4110__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__4110__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function cljs$core$async$impl$dispatch$run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function cljs$core$async$impl$dispatch$queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function cljs$core$async$impl$channels$box(val) {
  if (typeof cljs.core.async.impl.channels.t13047 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t13047 = function(val, box, meta13048) {
      this.val = val;
      this.box = box;
      this.meta13048 = meta13048;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t13047.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t13047.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13049) {
      var self__ = this;
      var _13049__$1 = this;
      return self__.meta13048;
    };
    cljs.core.async.impl.channels.t13047.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13049, meta13048__$1) {
      var self__ = this;
      var _13049__$1 = this;
      return new cljs.core.async.impl.channels.t13047(self__.val, self__.box, meta13048__$1);
    };
    cljs.core.async.impl.channels.t13047.cljs$lang$type = true;
    cljs.core.async.impl.channels.t13047.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t13047";
    cljs.core.async.impl.channels.t13047.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.channels/t13047");
    };
    cljs.core.async.impl.channels.__GT_t13047 = function cljs$core$async$impl$channels$box_$___GT_t13047(val__$1, box__$1, meta13048) {
      return new cljs.core.async.impl.channels.t13047(val__$1, box__$1, meta13048);
    };
  }
  return new cljs.core.async.impl.channels.t13047(val, cljs$core$async$impl$channels$box, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function cljs$core$async$impl$channels$__GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function cljs$core$async$impl$channels$put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
  var obj13051 = {};
  return obj13051;
}();
cljs.core.async.impl.channels.abort = function cljs$core$async$impl$channels$abort(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.cljs$core$async$impl$channels$MMC$abort$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.channels.abort["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = self__.buf;
      if (cljs.core.truth_(and__4110__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__4110__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_13052 = self__.takes.pop();
      if (taker_13052 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_13052)) {
          var take_cb_13053 = cljs.core.async.impl.protocols.commit.call(null, taker_13052);
          var val_13054 = cljs.core.truth_(function() {
            var and__4110__auto__ = self__.buf;
            if (cljs.core.truth_(and__4110__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__4110__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_13053, val_13054, taker_13052, this$__$1) {
            return function() {
              return take_cb_13053.call(null, val_13054);
            };
          }(take_cb_13053, val_13054, taker_13052, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_13055 = self__.puts.pop();
          if (putter_13055 == null) {
          } else {
            var put_handler_13056 = putter_13055.handler;
            var val_13057 = putter_13055.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_13056)) {
              var put_cb_13058 = cljs.core.async.impl.protocols.commit.call(null, put_handler_13056);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_13058, put_handler_13056, val_13057, putter_13055, _, retval, this$__$1) {
                return function() {
                  return put_cb_13058.call(null, true);
                };
              }(put_cb_13058, put_handler_13056, val_13057, putter_13055, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_13057))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__4110__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__4110__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__4110__auto__;
            }
          }())) {
            var has_val = function() {
              var and__4110__auto__ = self__.buf;
              if (cljs.core.truth_(and__4110__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__4110__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, "takes", 
            "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
          }
          self__.takes.unbounded_unshift(handler);
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = self__.buf;
      if (cljs.core.truth_(and__4110__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__4110__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_13059 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_13059)) {
            var take_cb_13060 = cljs.core.async.impl.protocols.commit.call(null, taker_13059);
            var val_13061__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_13060, val_13061__$1, taker_13059, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_13060.call(null, val_13061__$1);
              };
            }(take_cb_13060, val_13061__$1, taker_13059, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
        } else {
          throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
          -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
        }
        self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_13062 = self__.puts.pop();
    if (putter_13062 == null) {
    } else {
      var put_handler_13063 = putter_13062.handler;
      var val_13064 = putter_13062.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_13063)) {
        var put_cb_13065 = cljs.core.async.impl.protocols.commit.call(null, put_handler_13063);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_13065, put_handler_13063, val_13064, putter_13062, this$__$1) {
          return function() {
            return put_cb_13065.call(null, true);
          };
        }(put_cb_13065, put_handler_13063, val_13064, putter_13062, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function cljs$core$async$impl$channels$__GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function cljs$core$async$impl$channels$ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function cljs$core$async$impl$channels$handle(buf, exh, t) {
  var else$ = function() {
    var or__4122__auto__ = exh;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function() {
  var cljs$core$async$impl$channels$chan = null;
  var cljs$core$async$impl$channels$chan__1 = function(buf) {
    return cljs$core$async$impl$channels$chan.call(null, buf, null);
  };
  var cljs$core$async$impl$channels$chan__2 = function(buf, xform) {
    return cljs$core$async$impl$channels$chan.call(null, buf, xform, null);
  };
  var cljs$core$async$impl$channels$chan__3 = function(buf, xform, exh) {
    return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
      var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
      return function(add_BANG_) {
        return function() {
          var G__13070 = null;
          var G__13070__1 = function(buf__$1) {
            try {
              return add_BANG_.call(null, buf__$1);
            } catch (e13068) {
              var t = e13068;
              return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
            }
          };
          var G__13070__2 = function(buf__$1, val) {
            try {
              return add_BANG_.call(null, buf__$1, val);
            } catch (e13069) {
              var t = e13069;
              return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
            }
          };
          G__13070 = function(buf__$1, val) {
            switch(arguments.length) {
              case 1:
                return G__13070__1.call(this, buf__$1);
              case 2:
                return G__13070__2.call(this, buf__$1, val);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__13070.cljs$core$IFn$_invoke$arity$1 = G__13070__1;
          G__13070.cljs$core$IFn$_invoke$arity$2 = G__13070__2;
          return G__13070;
        }();
      }(add_BANG_);
    }());
  };
  cljs$core$async$impl$channels$chan = function(buf, xform, exh) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$impl$channels$chan__1.call(this, buf);
      case 2:
        return cljs$core$async$impl$channels$chan__2.call(this, buf, xform);
      case 3:
        return cljs$core$async$impl$channels$chan__3.call(this, buf, xform, exh);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$impl$channels$chan.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$impl$channels$chan__1;
  cljs$core$async$impl$channels$chan.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$impl$channels$chan__2;
  cljs$core$async$impl$channels$chan.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$impl$channels$chan__3;
  return cljs$core$async$impl$channels$chan;
}();
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function cljs$core$async$impl$ioc_helpers$aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function cljs$core$async$impl$ioc_helpers$aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function cljs$core$async$impl$ioc_helpers$finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function cljs$core$async$impl$ioc_helpers$fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t12979 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t12979 = function(f, fn_handler, meta12980) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta12980 = meta12980;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t12979.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t12979.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t12979.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t12979.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12981) {
      var self__ = this;
      var _12981__$1 = this;
      return self__.meta12980;
    };
    cljs.core.async.impl.ioc_helpers.t12979.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12981, meta12980__$1) {
      var self__ = this;
      var _12981__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t12979(self__.f, self__.fn_handler, meta12980__$1);
    };
    cljs.core.async.impl.ioc_helpers.t12979.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t12979.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t12979";
    cljs.core.async.impl.ioc_helpers.t12979.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.ioc-helpers/t12979");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t12979 = function cljs$core$async$impl$ioc_helpers$fn_handler_$___GT_t12979(f__$1, fn_handler__$1, meta12980) {
      return new cljs.core.async.impl.ioc_helpers.t12979(f__$1, fn_handler__$1, meta12980);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t12979(f, cljs$core$async$impl$ioc_helpers$fn_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function cljs$core$async$impl$ioc_helpers$run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function cljs$core$async$impl$ioc_helpers$run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e12983) {
    if (e12983 instanceof Object) {
      var ex = e12983;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e12983;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function cljs$core$async$impl$ioc_helpers$take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_12986_12988 = state;
    statearr_12986_12988[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_12986_12988[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_12987_12989 = state;
    statearr_12987_12989[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_12987_12989[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function cljs$core$async$impl$ioc_helpers$put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_12992_12994 = state;
    statearr_12992_12994[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_12992_12994[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_12993_12995 = state;
    statearr_12993_12995[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_12993_12995[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function cljs$core$async$impl$ioc_helpers$return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap, __hash) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4717__auto__, k__4718__auto__) {
  var self__ = this;
  var this__4717__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4717__auto____$1, k__4718__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4719__auto__, k12997, else__4720__auto__) {
  var self__ = this;
  var this__4719__auto____$1 = this;
  var G__12999 = k12997 instanceof cljs.core.Keyword ? k12997.fqn : null;
  switch(G__12999) {
    case "prev":
      return self__.prev;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "catch-block":
      return self__.catch_block;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k12997, else__4720__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4731__auto__, writer__4732__auto__, opts__4733__auto__) {
  var self__ = this;
  var this__4731__auto____$1 = this;
  var pr_pair__4734__auto__ = function(this__4731__auto____$1) {
    return function(keyval__4735__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4732__auto__, cljs.core.pr_writer, "", " ", "", opts__4733__auto__, keyval__4735__auto__);
    };
  }(this__4731__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4732__auto__, pr_pair__4734__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4733__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4715__auto__) {
  var self__ = this;
  var this__4715__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4711__auto__) {
  var self__ = this;
  var this__4711__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4721__auto__) {
  var self__ = this;
  var this__4721__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4712__auto__) {
  var self__ = this;
  var this__4712__auto____$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_imap.call(null, this__4712__auto____$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4713__auto__, other__4714__auto__) {
  var self__ = this;
  var this__4713__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = other__4714__auto__;
    if (cljs.core.truth_(and__4110__auto__)) {
      return this__4713__auto____$1.constructor === other__4714__auto__.constructor && cljs.core.equiv_map.call(null, this__4713__auto____$1, other__4714__auto__);
    } else {
      return and__4110__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4726__auto__, k__4727__auto__) {
  var self__ = this;
  var this__4726__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__4727__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4726__auto____$1), self__.__meta), k__4727__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4727__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4724__auto__, k__4725__auto__, G__12996) {
  var self__ = this;
  var this__4724__auto____$1 = this;
  var pred__13000 = cljs.core.keyword_identical_QMARK_;
  var expr__13001 = k__4725__auto__;
  if (cljs.core.truth_(pred__13000.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__13001))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__12996, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__13000.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__13001))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__12996, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__13000.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__13001))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__12996, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__13000.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__13001))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__12996, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__13000.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__13001))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__12996, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4725__auto__, G__12996), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4729__auto__) {
  var self__ = this;
  var this__4729__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4716__auto__, G__12996) {
  var self__ = this;
  var this__4716__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__12996, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4722__auto__, entry__4723__auto__) {
  var self__ = this;
  var this__4722__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4723__auto__)) {
    return cljs.core._assoc.call(null, this__4722__auto____$1, cljs.core._nth.call(null, entry__4723__auto__, 0), cljs.core._nth.call(null, entry__4723__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4722__auto____$1, entry__4723__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4751__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4751__auto__, writer__4752__auto__) {
  return cljs.core._write.call(null, writer__4752__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$__GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev, null, null, null);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$map__GT_ExceptionFrame(G__12998) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__12998), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__12998), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__12998), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__12998), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__12998), null, cljs.core.dissoc.call(null, G__12998, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)), 
  null);
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function cljs$core$async$impl$ioc_helpers$add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_13005 = state;
  statearr_13005[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_13005;
};
cljs.core.async.impl.ioc_helpers.process_exception = function cljs$core$async$impl$ioc_helpers$process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = exception;
      if (cljs.core.truth_(and__4110__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__4110__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__4110__auto__ = exception;
        if (cljs.core.truth_(and__4110__auto__)) {
          var and__4110__auto____$1 = catch_block;
          if (cljs.core.truth_(and__4110__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__4110__auto____$1;
          }
        } else {
          return and__4110__auto__;
        }
      }())) {
        var statearr_13011 = state;
        statearr_13011[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_13011[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_13011[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_13011[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_13011;
      } else {
        if (cljs.core.truth_(function() {
          var and__4110__auto__ = exception;
          if (cljs.core.truth_(and__4110__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__4110__auto__;
          }
        }())) {
          var statearr_13012_13016 = state;
          statearr_13012_13016[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__13017 = state;
          state = G__13017;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__4110__auto__ = exception;
            if (cljs.core.truth_(and__4110__auto__)) {
              var and__4110__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__4110__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4110__auto____$1;
              }
            } else {
              return and__4110__auto__;
            }
          }())) {
            var statearr_13013 = state;
            statearr_13013[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_13013[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_13013;
          } else {
            if (cljs.core.truth_(function() {
              var and__4110__auto__ = cljs.core.not.call(null, exception);
              if (and__4110__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4110__auto__;
              }
            }())) {
              var statearr_13014 = state;
              statearr_13014[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_13014[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_13014;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_13015 = state;
                statearr_13015[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_13015[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_13015;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var cljs$core$async$impl$timers$random_level = null;
  var cljs$core$async$impl$timers$random_level__0 = function() {
    return cljs$core$async$impl$timers$random_level.call(null, 0);
  };
  var cljs$core$async$impl$timers$random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__12950 = level + 1;
        level = G__12950;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  cljs$core$async$impl$timers$random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return cljs$core$async$impl$timers$random_level__0.call(this);
      case 1:
        return cljs$core$async$impl$timers$random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$impl$timers$random_level.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$impl$timers$random_level__0;
  cljs$core$async$impl$timers$random_level.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$impl$timers$random_level__1;
  return cljs$core$async$impl$timers$random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function cljs$core$async$impl$timers$__GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var cljs$core$async$impl$timers$skip_list_node = null;
  var cljs$core$async$impl$timers$skip_list_node__1 = function(level) {
    return cljs$core$async$impl$timers$skip_list_node.call(null, null, null, level);
  };
  var cljs$core$async$impl$timers$skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_12951 = 0;
    while (true) {
      if (i_12951 < arr.length) {
        arr[i_12951] = null;
        var G__12952 = i_12951 + 1;
        i_12951 = G__12952;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  cljs$core$async$impl$timers$skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$impl$timers$skip_list_node__1.call(this, k);
      case 3:
        return cljs$core$async$impl$timers$skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$impl$timers$skip_list_node.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$impl$timers$skip_list_node__1;
  cljs$core$async$impl$timers$skip_list_node.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$impl$timers$skip_list_node__3;
  return cljs$core$async$impl$timers$skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var cljs$core$async$impl$timers$least_greater_node = null;
  var cljs$core$async$impl$timers$least_greater_node__3 = function(x, k, level) {
    return cljs$core$async$impl$timers$least_greater_node.call(null, x, k, level, null);
  };
  var cljs$core$async$impl$timers$least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__12953 = x_SINGLEQUOTE_;
                x__$1 = G__12953;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__12954 = x__$1;
        var G__12955 = k;
        var G__12956 = level - 1;
        var G__12957 = update;
        x = G__12954;
        k = G__12955;
        level = G__12956;
        update = G__12957;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  cljs$core$async$impl$timers$least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return cljs$core$async$impl$timers$least_greater_node__3.call(this, x, k, level);
      case 4:
        return cljs$core$async$impl$timers$least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$impl$timers$least_greater_node.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$impl$timers$least_greater_node__3;
  cljs$core$async$impl$timers$least_greater_node.cljs$core$IFn$_invoke$arity$4 = cljs$core$async$impl$timers$least_greater_node__4;
  return cljs$core$async$impl$timers$least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function cljs$core$async$impl$timers$iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), cljs$core$async$impl$timers$iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_12958 = self__.level + 1;
      while (true) {
        if (i_12958 <= new_level + 1) {
          update[i_12958] = self__.header;
          var G__12959 = i_12958 + 1;
          i_12958 = G__12959;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_12960 = 0;
    while (true) {
      if (i_12960 <= self__.level) {
        var links_12961 = update[i_12960].forward;
        if (links_12961[i_12960] === x__$1) {
          links_12961[i_12960] = x__$1.forward[i_12960];
          var G__12962 = i_12960 + 1;
          i_12960 = G__12962;
          continue;
        } else {
          var G__12963 = i_12960 + 1;
          i_12960 = G__12963;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__12964 = x_SINGLEQUOTE_;
              x__$1 = G__12964;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__12965 = nx;
        var G__12966 = level__$1 - 1;
        x = G__12965;
        level__$1 = G__12966;
        continue;
      } else {
        var G__12967 = x;
        var G__12968 = level__$1 - 1;
        x = G__12967;
        level__$1 = G__12968;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__12969 = x_SINGLEQUOTE_;
              x__$1 = G__12969;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__12970 = nx;
        var G__12971 = level__$1 - 1;
        x = G__12970;
        level__$1 = G__12971;
        continue;
      } else {
        var G__12972 = x;
        var G__12973 = level__$1 - 1;
        x = G__12972;
        level__$1 = G__12973;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function cljs$core$async$impl$timers$__GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function cljs$core$async$impl$timers$skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function cljs$core$async$impl$timers$timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__4122__auto__ = cljs.core.truth_(function() {
    var and__4110__auto__ = me;
    if (cljs.core.truth_(and__4110__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__4110__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__4122__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__4122__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function cljs$core$async$fn_handler(f) {
  if (typeof cljs.core.async.t9861 !== "undefined") {
  } else {
    cljs.core.async.t9861 = function(f, fn_handler, meta9862) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta9862 = meta9862;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t9861.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t9861.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t9861.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t9861.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9863) {
      var self__ = this;
      var _9863__$1 = this;
      return self__.meta9862;
    };
    cljs.core.async.t9861.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9863, meta9862__$1) {
      var self__ = this;
      var _9863__$1 = this;
      return new cljs.core.async.t9861(self__.f, self__.fn_handler, meta9862__$1);
    };
    cljs.core.async.t9861.cljs$lang$type = true;
    cljs.core.async.t9861.cljs$lang$ctorStr = "cljs.core.async/t9861";
    cljs.core.async.t9861.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t9861");
    };
    cljs.core.async.__GT_t9861 = function cljs$core$async$fn_handler_$___GT_t9861(f__$1, fn_handler__$1, meta9862) {
      return new cljs.core.async.t9861(f__$1, fn_handler__$1, meta9862);
    };
  }
  return new cljs.core.async.t9861(f, cljs$core$async$fn_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.buffer = function cljs$core$async$buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function cljs$core$async$dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function cljs$core$async$sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function cljs$core$async$unblocking_buffer_QMARK_(buff) {
  var G__9865 = buff;
  if (G__9865) {
    var bit__4796__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4122__auto__ = bit__4796__auto__;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return G__9865.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__9865.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__9865);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__9865);
  }
};
cljs.core.async.chan = function() {
  var cljs$core$async$chan = null;
  var cljs$core$async$chan__0 = function() {
    return cljs$core$async$chan.call(null, null);
  };
  var cljs$core$async$chan__1 = function(buf_or_n) {
    return cljs$core$async$chan.call(null, buf_or_n, null, null);
  };
  var cljs$core$async$chan__2 = function(buf_or_n, xform) {
    return cljs$core$async$chan.call(null, buf_or_n, xform, null);
  };
  var cljs$core$async$chan__3 = function(buf_or_n, xform, ex_handler) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    if (cljs.core.truth_(xform)) {
      if (cljs.core.truth_(buf_or_n__$1)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("buffer must be supplied when transducer is"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "buf-or-n", "buf-or-n", -1646815050, null)))].join(""));
      }
    } else {
    }
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
  };
  cljs$core$async$chan = function(buf_or_n, xform, ex_handler) {
    switch(arguments.length) {
      case 0:
        return cljs$core$async$chan__0.call(this);
      case 1:
        return cljs$core$async$chan__1.call(this, buf_or_n);
      case 2:
        return cljs$core$async$chan__2.call(this, buf_or_n, xform);
      case 3:
        return cljs$core$async$chan__3.call(this, buf_or_n, xform, ex_handler);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$chan.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$chan__0;
  cljs$core$async$chan.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$chan__1;
  cljs$core$async$chan.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$chan__2;
  cljs$core$async$chan.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$chan__3;
  return cljs$core$async$chan;
}();
cljs.core.async.timeout = function cljs$core$async$timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function cljs$core$async$_LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function() {
  var cljs$core$async$take_BANG_ = null;
  var cljs$core$async$take_BANG___2 = function(port, fn1) {
    return cljs$core$async$take_BANG_.call(null, port, fn1, true);
  };
  var cljs$core$async$take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_9866 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_9866);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_9866, ret) {
          return function() {
            return fn1.call(null, val_9866);
          };
        }(val_9866, ret));
      }
    } else {
    }
    return null;
  };
  cljs$core$async$take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$take_BANG___2.call(this, port, fn1);
      case 3:
        return cljs$core$async$take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$take_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$take_BANG___2;
  cljs$core$async$take_BANG_.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$take_BANG___3;
  return cljs$core$async$take_BANG_;
}();
cljs.core.async.nop = function cljs$core$async$nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function cljs$core$async$_GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function() {
  var cljs$core$async$put_BANG_ = null;
  var cljs$core$async$put_BANG___2 = function(port, val) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var ret = temp__4124__auto__;
      return cljs.core.deref.call(null, ret);
    } else {
      return true;
    }
  };
  var cljs$core$async$put_BANG___3 = function(port, val, fn1) {
    return cljs$core$async$put_BANG_.call(null, port, val, fn1, true);
  };
  var cljs$core$async$put_BANG___4 = function(port, val, fn1, on_caller_QMARK_) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(temp__4124__auto__)) {
      var retb = temp__4124__auto__;
      var ret = cljs.core.deref.call(null, retb);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, ret);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4124__auto__) {
          return function() {
            return fn1.call(null, ret);
          };
        }(ret, retb, temp__4124__auto__));
      }
      return ret;
    } else {
      return true;
    }
  };
  cljs$core$async$put_BANG_ = function(port, val, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$put_BANG___2.call(this, port, val);
      case 3:
        return cljs$core$async$put_BANG___3.call(this, port, val, fn1);
      case 4:
        return cljs$core$async$put_BANG___4.call(this, port, val, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$put_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$put_BANG___2;
  cljs$core$async$put_BANG_.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$put_BANG___3;
  cljs$core$async$put_BANG_.cljs$core$IFn$_invoke$arity$4 = cljs$core$async$put_BANG___4;
  return cljs$core$async$put_BANG_;
}();
cljs.core.async.close_BANG_ = function cljs$core$async$close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function cljs$core$async$random_array(n) {
  var a = new Array(n);
  var n__5007__auto___9867 = n;
  var x_9868 = 0;
  while (true) {
    if (x_9868 < n__5007__auto___9867) {
      a[x_9868] = 0;
      var G__9869 = x_9868 + 1;
      x_9868 = G__9869;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__9870 = i + 1;
      i = G__9870;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function cljs$core$async$alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t9874 !== "undefined") {
  } else {
    cljs.core.async.t9874 = function(flag, alt_flag, meta9875) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta9875 = meta9875;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t9874.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t9874.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t9874.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t9874.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_9876) {
        var self__ = this;
        var _9876__$1 = this;
        return self__.meta9875;
      };
    }(flag);
    cljs.core.async.t9874.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_9876, meta9875__$1) {
        var self__ = this;
        var _9876__$1 = this;
        return new cljs.core.async.t9874(self__.flag, self__.alt_flag, meta9875__$1);
      };
    }(flag);
    cljs.core.async.t9874.cljs$lang$type = true;
    cljs.core.async.t9874.cljs$lang$ctorStr = "cljs.core.async/t9874";
    cljs.core.async.t9874.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
        return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t9874");
      };
    }(flag);
    cljs.core.async.__GT_t9874 = function(flag) {
      return function cljs$core$async$alt_flag_$___GT_t9874(flag__$1, alt_flag__$1, meta9875) {
        return new cljs.core.async.t9874(flag__$1, alt_flag__$1, meta9875);
      };
    }(flag);
  }
  return new cljs.core.async.t9874(flag, cljs$core$async$alt_flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function cljs$core$async$alt_handler(flag, cb) {
  if (typeof cljs.core.async.t9880 !== "undefined") {
  } else {
    cljs.core.async.t9880 = function(cb, flag, alt_handler, meta9881) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta9881 = meta9881;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t9880.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t9880.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t9880.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t9880.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9882) {
      var self__ = this;
      var _9882__$1 = this;
      return self__.meta9881;
    };
    cljs.core.async.t9880.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9882, meta9881__$1) {
      var self__ = this;
      var _9882__$1 = this;
      return new cljs.core.async.t9880(self__.cb, self__.flag, self__.alt_handler, meta9881__$1);
    };
    cljs.core.async.t9880.cljs$lang$type = true;
    cljs.core.async.t9880.cljs$lang$ctorStr = "cljs.core.async/t9880";
    cljs.core.async.t9880.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t9880");
    };
    cljs.core.async.__GT_t9880 = function cljs$core$async$alt_handler_$___GT_t9880(cb__$1, flag__$1, alt_handler__$1, meta9881) {
      return new cljs.core.async.t9880(cb__$1, flag__$1, alt_handler__$1, meta9881);
    };
  }
  return new cljs.core.async.t9880(cb, flag, cljs$core$async$alt_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function cljs$core$async$do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__9883_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__9883_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__9884_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__9884_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__4122__auto__ = wport;
            if (cljs.core.truth_(or__4122__auto__)) {
              return or__4122__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__9885 = i + 1;
          i = G__9885;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__4122__auto__ = ret;
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__4110__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__4110__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__4110__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var cljs$core$async$alts_BANG___delegate = function(ports, p__9886) {
    var map__9888 = p__9886;
    var map__9888__$1 = cljs.core.seq_QMARK_.call(null, map__9888) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9888) : map__9888;
    var opts = map__9888__$1;
    throw new Error("alts! used not in (go ...) block");
  };
  var cljs$core$async$alts_BANG_ = function(ports, var_args) {
    var p__9886 = null;
    if (arguments.length > 1) {
      var G__9889__i = 0, G__9889__a = new Array(arguments.length - 1);
      while (G__9889__i < G__9889__a.length) {
        G__9889__a[G__9889__i] = arguments[G__9889__i + 1];
        ++G__9889__i;
      }
      p__9886 = new cljs.core.IndexedSeq(G__9889__a, 0);
    }
    return cljs$core$async$alts_BANG___delegate.call(this, ports, p__9886);
  };
  cljs$core$async$alts_BANG_.cljs$lang$maxFixedArity = 1;
  cljs$core$async$alts_BANG_.cljs$lang$applyTo = function(arglist__9890) {
    var ports = cljs.core.first(arglist__9890);
    var p__9886 = cljs.core.rest(arglist__9890);
    return cljs$core$async$alts_BANG___delegate(ports, p__9886);
  };
  cljs$core$async$alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$async$alts_BANG___delegate;
  return cljs$core$async$alts_BANG_;
}();
cljs.core.async.pipe = function() {
  var cljs$core$async$pipe = null;
  var cljs$core$async$pipe__2 = function(from, to) {
    return cljs$core$async$pipe.call(null, from, to, true);
  };
  var cljs$core$async$pipe__3 = function(from, to, close_QMARK_) {
    var c__7090__auto___9985 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7090__auto___9985) {
      return function() {
        var f__7091__auto__ = function() {
          var switch__7034__auto__ = function(c__7090__auto___9985) {
            return function(state_9961) {
              var state_val_9962 = state_9961[1];
              if (state_val_9962 === 7) {
                var inst_9957 = state_9961[2];
                var state_9961__$1 = state_9961;
                var statearr_9963_9986 = state_9961__$1;
                statearr_9963_9986[2] = inst_9957;
                statearr_9963_9986[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_9962 === 1) {
                  var state_9961__$1 = state_9961;
                  var statearr_9964_9987 = state_9961__$1;
                  statearr_9964_9987[2] = null;
                  statearr_9964_9987[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_9962 === 4) {
                    var inst_9940 = state_9961[7];
                    var inst_9940__$1 = state_9961[2];
                    var inst_9941 = inst_9940__$1 == null;
                    var state_9961__$1 = function() {
                      var statearr_9965 = state_9961;
                      statearr_9965[7] = inst_9940__$1;
                      return statearr_9965;
                    }();
                    if (cljs.core.truth_(inst_9941)) {
                      var statearr_9966_9988 = state_9961__$1;
                      statearr_9966_9988[1] = 5;
                    } else {
                      var statearr_9967_9989 = state_9961__$1;
                      statearr_9967_9989[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_9962 === 13) {
                      var state_9961__$1 = state_9961;
                      var statearr_9968_9990 = state_9961__$1;
                      statearr_9968_9990[2] = null;
                      statearr_9968_9990[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_9962 === 6) {
                        var inst_9940 = state_9961[7];
                        var state_9961__$1 = state_9961;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9961__$1, 11, to, inst_9940);
                      } else {
                        if (state_val_9962 === 3) {
                          var inst_9959 = state_9961[2];
                          var state_9961__$1 = state_9961;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9961__$1, inst_9959);
                        } else {
                          if (state_val_9962 === 12) {
                            var state_9961__$1 = state_9961;
                            var statearr_9969_9991 = state_9961__$1;
                            statearr_9969_9991[2] = null;
                            statearr_9969_9991[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_9962 === 2) {
                              var state_9961__$1 = state_9961;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9961__$1, 4, from);
                            } else {
                              if (state_val_9962 === 11) {
                                var inst_9950 = state_9961[2];
                                var state_9961__$1 = state_9961;
                                if (cljs.core.truth_(inst_9950)) {
                                  var statearr_9970_9992 = state_9961__$1;
                                  statearr_9970_9992[1] = 12;
                                } else {
                                  var statearr_9971_9993 = state_9961__$1;
                                  statearr_9971_9993[1] = 13;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_9962 === 9) {
                                  var state_9961__$1 = state_9961;
                                  var statearr_9972_9994 = state_9961__$1;
                                  statearr_9972_9994[2] = null;
                                  statearr_9972_9994[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_9962 === 5) {
                                    var state_9961__$1 = state_9961;
                                    if (cljs.core.truth_(close_QMARK_)) {
                                      var statearr_9973_9995 = state_9961__$1;
                                      statearr_9973_9995[1] = 8;
                                    } else {
                                      var statearr_9974_9996 = state_9961__$1;
                                      statearr_9974_9996[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_9962 === 14) {
                                      var inst_9955 = state_9961[2];
                                      var state_9961__$1 = state_9961;
                                      var statearr_9975_9997 = state_9961__$1;
                                      statearr_9975_9997[2] = inst_9955;
                                      statearr_9975_9997[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_9962 === 10) {
                                        var inst_9947 = state_9961[2];
                                        var state_9961__$1 = state_9961;
                                        var statearr_9976_9998 = state_9961__$1;
                                        statearr_9976_9998[2] = inst_9947;
                                        statearr_9976_9998[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_9962 === 8) {
                                          var inst_9944 = cljs.core.async.close_BANG_.call(null, to);
                                          var state_9961__$1 = state_9961;
                                          var statearr_9977_9999 = state_9961__$1;
                                          statearr_9977_9999[2] = inst_9944;
                                          statearr_9977_9999[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7090__auto___9985);
          return function(switch__7034__auto__, c__7090__auto___9985) {
            return function() {
              var cljs$core$async$pipe_$_state_machine__7035__auto__ = null;
              var cljs$core$async$pipe_$_state_machine__7035__auto____0 = function() {
                var statearr_9981 = [null, null, null, null, null, null, null, null];
                statearr_9981[0] = cljs$core$async$pipe_$_state_machine__7035__auto__;
                statearr_9981[1] = 1;
                return statearr_9981;
              };
              var cljs$core$async$pipe_$_state_machine__7035__auto____1 = function(state_9961) {
                while (true) {
                  var ret_value__7036__auto__ = function() {
                    try {
                      while (true) {
                        var result__7037__auto__ = switch__7034__auto__.call(null, state_9961);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7037__auto__;
                        }
                        break;
                      }
                    } catch (e9982) {
                      if (e9982 instanceof Object) {
                        var ex__7038__auto__ = e9982;
                        var statearr_9983_10000 = state_9961;
                        statearr_9983_10000[5] = ex__7038__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_9961);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e9982;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__10001 = state_9961;
                    state_9961 = G__10001;
                    continue;
                  } else {
                    return ret_value__7036__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$pipe_$_state_machine__7035__auto__ = function(state_9961) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$pipe_$_state_machine__7035__auto____0.call(this);
                  case 1:
                    return cljs$core$async$pipe_$_state_machine__7035__auto____1.call(this, state_9961);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$pipe_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipe_$_state_machine__7035__auto____0;
              cljs$core$async$pipe_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipe_$_state_machine__7035__auto____1;
              return cljs$core$async$pipe_$_state_machine__7035__auto__;
            }();
          }(switch__7034__auto__, c__7090__auto___9985);
        }();
        var state__7092__auto__ = function() {
          var statearr_9984 = f__7091__auto__.call(null);
          statearr_9984[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto___9985;
          return statearr_9984;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
      };
    }(c__7090__auto___9985));
    return to;
  };
  cljs$core$async$pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$pipe__2.call(this, from, to);
      case 3:
        return cljs$core$async$pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$pipe.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$pipe__2;
  cljs$core$async$pipe.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$pipe__3;
  return cljs$core$async$pipe;
}();
cljs.core.async.pipeline_STAR_ = function cljs$core$async$pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null))))].join(""));
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__10185) {
      var vec__10186 = p__10185;
      var v = cljs.core.nth.call(null, vec__10186, 0, null);
      var p = cljs.core.nth.call(null, vec__10186, 1, null);
      var job = vec__10186;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__7090__auto___10368 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__7090__auto___10368, res, vec__10186, v, p, job, jobs, results) {
          return function() {
            var f__7091__auto__ = function() {
              var switch__7034__auto__ = function(c__7090__auto___10368, res, vec__10186, v, p, job, jobs, results) {
                return function(state_10191) {
                  var state_val_10192 = state_10191[1];
                  if (state_val_10192 === 2) {
                    var inst_10188 = state_10191[2];
                    var inst_10189 = cljs.core.async.close_BANG_.call(null, res);
                    var state_10191__$1 = function() {
                      var statearr_10193 = state_10191;
                      statearr_10193[7] = inst_10188;
                      return statearr_10193;
                    }();
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10191__$1, inst_10189);
                  } else {
                    if (state_val_10192 === 1) {
                      var state_10191__$1 = state_10191;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10191__$1, 2, res, v);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__7090__auto___10368, res, vec__10186, v, p, job, jobs, results);
              return function(switch__7034__auto__, c__7090__auto___10368, res, vec__10186, v, p, job, jobs, results) {
                return function() {
                  var cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__ = null;
                  var cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____0 = function() {
                    var statearr_10197 = [null, null, null, null, null, null, null, null];
                    statearr_10197[0] = cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__;
                    statearr_10197[1] = 1;
                    return statearr_10197;
                  };
                  var cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____1 = function(state_10191) {
                    while (true) {
                      var ret_value__7036__auto__ = function() {
                        try {
                          while (true) {
                            var result__7037__auto__ = switch__7034__auto__.call(null, state_10191);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__7037__auto__;
                            }
                            break;
                          }
                        } catch (e10198) {
                          if (e10198 instanceof Object) {
                            var ex__7038__auto__ = e10198;
                            var statearr_10199_10369 = state_10191;
                            statearr_10199_10369[5] = ex__7038__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10191);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e10198;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__10370 = state_10191;
                        state_10191 = G__10370;
                        continue;
                      } else {
                        return ret_value__7036__auto__;
                      }
                      break;
                    }
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__ = function(state_10191) {
                    switch(arguments.length) {
                      case 0:
                        return cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____0.call(this);
                      case 1:
                        return cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____1.call(this, state_10191);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____0;
                  cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____1;
                  return cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__;
                }();
              }(switch__7034__auto__, c__7090__auto___10368, res, vec__10186, v, p, job, jobs, results);
            }();
            var state__7092__auto__ = function() {
              var statearr_10200 = f__7091__auto__.call(null);
              statearr_10200[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto___10368;
              return statearr_10200;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
          };
        }(c__7090__auto___10368, res, vec__10186, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__10201) {
      var vec__10202 = p__10201;
      var v = cljs.core.nth.call(null, vec__10202, 0, null);
      var p = cljs.core.nth.call(null, vec__10202, 1, null);
      var job = vec__10202;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__5007__auto___10371 = n;
  var __10372 = 0;
  while (true) {
    if (__10372 < n__5007__auto___10371) {
      var G__10203_10373 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__10203_10373) {
        case "async":
          var c__7090__auto___10375 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__10372, c__7090__auto___10375, G__10203_10373, n__5007__auto___10371, jobs, results, process, async) {
            return function() {
              var f__7091__auto__ = function() {
                var switch__7034__auto__ = function(__10372, c__7090__auto___10375, G__10203_10373, n__5007__auto___10371, jobs, results, process, async) {
                  return function(state_10216) {
                    var state_val_10217 = state_10216[1];
                    if (state_val_10217 === 7) {
                      var inst_10212 = state_10216[2];
                      var state_10216__$1 = state_10216;
                      var statearr_10218_10376 = state_10216__$1;
                      statearr_10218_10376[2] = inst_10212;
                      statearr_10218_10376[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10217 === 6) {
                        var state_10216__$1 = state_10216;
                        var statearr_10219_10377 = state_10216__$1;
                        statearr_10219_10377[2] = null;
                        statearr_10219_10377[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10217 === 5) {
                          var state_10216__$1 = state_10216;
                          var statearr_10220_10378 = state_10216__$1;
                          statearr_10220_10378[2] = null;
                          statearr_10220_10378[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10217 === 4) {
                            var inst_10206 = state_10216[2];
                            var inst_10207 = async.call(null, inst_10206);
                            var state_10216__$1 = state_10216;
                            if (cljs.core.truth_(inst_10207)) {
                              var statearr_10221_10379 = state_10216__$1;
                              statearr_10221_10379[1] = 5;
                            } else {
                              var statearr_10222_10380 = state_10216__$1;
                              statearr_10222_10380[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10217 === 3) {
                              var inst_10214 = state_10216[2];
                              var state_10216__$1 = state_10216;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10216__$1, inst_10214);
                            } else {
                              if (state_val_10217 === 2) {
                                var state_10216__$1 = state_10216;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10216__$1, 4, jobs);
                              } else {
                                if (state_val_10217 === 1) {
                                  var state_10216__$1 = state_10216;
                                  var statearr_10223_10381 = state_10216__$1;
                                  statearr_10223_10381[2] = null;
                                  statearr_10223_10381[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__10372, c__7090__auto___10375, G__10203_10373, n__5007__auto___10371, jobs, results, process, async);
                return function(__10372, switch__7034__auto__, c__7090__auto___10375, G__10203_10373, n__5007__auto___10371, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____0 = function() {
                      var statearr_10227 = [null, null, null, null, null, null, null];
                      statearr_10227[0] = cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__;
                      statearr_10227[1] = 1;
                      return statearr_10227;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____1 = function(state_10216) {
                      while (true) {
                        var ret_value__7036__auto__ = function() {
                          try {
                            while (true) {
                              var result__7037__auto__ = switch__7034__auto__.call(null, state_10216);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__7037__auto__;
                              }
                              break;
                            }
                          } catch (e10228) {
                            if (e10228 instanceof Object) {
                              var ex__7038__auto__ = e10228;
                              var statearr_10229_10382 = state_10216;
                              statearr_10229_10382[5] = ex__7038__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10216);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e10228;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__10383 = state_10216;
                          state_10216 = G__10383;
                          continue;
                        } else {
                          return ret_value__7036__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__ = function(state_10216) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____1.call(this, state_10216);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__;
                  }();
                }(__10372, switch__7034__auto__, c__7090__auto___10375, G__10203_10373, n__5007__auto___10371, jobs, results, process, async);
              }();
              var state__7092__auto__ = function() {
                var statearr_10230 = f__7091__auto__.call(null);
                statearr_10230[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto___10375;
                return statearr_10230;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
            };
          }(__10372, c__7090__auto___10375, G__10203_10373, n__5007__auto___10371, jobs, results, process, async));
          break;
        case "compute":
          var c__7090__auto___10384 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__10372, c__7090__auto___10384, G__10203_10373, n__5007__auto___10371, jobs, results, process, async) {
            return function() {
              var f__7091__auto__ = function() {
                var switch__7034__auto__ = function(__10372, c__7090__auto___10384, G__10203_10373, n__5007__auto___10371, jobs, results, process, async) {
                  return function(state_10243) {
                    var state_val_10244 = state_10243[1];
                    if (state_val_10244 === 7) {
                      var inst_10239 = state_10243[2];
                      var state_10243__$1 = state_10243;
                      var statearr_10245_10385 = state_10243__$1;
                      statearr_10245_10385[2] = inst_10239;
                      statearr_10245_10385[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10244 === 6) {
                        var state_10243__$1 = state_10243;
                        var statearr_10246_10386 = state_10243__$1;
                        statearr_10246_10386[2] = null;
                        statearr_10246_10386[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10244 === 5) {
                          var state_10243__$1 = state_10243;
                          var statearr_10247_10387 = state_10243__$1;
                          statearr_10247_10387[2] = null;
                          statearr_10247_10387[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10244 === 4) {
                            var inst_10233 = state_10243[2];
                            var inst_10234 = process.call(null, inst_10233);
                            var state_10243__$1 = state_10243;
                            if (cljs.core.truth_(inst_10234)) {
                              var statearr_10248_10388 = state_10243__$1;
                              statearr_10248_10388[1] = 5;
                            } else {
                              var statearr_10249_10389 = state_10243__$1;
                              statearr_10249_10389[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10244 === 3) {
                              var inst_10241 = state_10243[2];
                              var state_10243__$1 = state_10243;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10243__$1, inst_10241);
                            } else {
                              if (state_val_10244 === 2) {
                                var state_10243__$1 = state_10243;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10243__$1, 4, jobs);
                              } else {
                                if (state_val_10244 === 1) {
                                  var state_10243__$1 = state_10243;
                                  var statearr_10250_10390 = state_10243__$1;
                                  statearr_10250_10390[2] = null;
                                  statearr_10250_10390[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__10372, c__7090__auto___10384, G__10203_10373, n__5007__auto___10371, jobs, results, process, async);
                return function(__10372, switch__7034__auto__, c__7090__auto___10384, G__10203_10373, n__5007__auto___10371, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____0 = function() {
                      var statearr_10254 = [null, null, null, null, null, null, null];
                      statearr_10254[0] = cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__;
                      statearr_10254[1] = 1;
                      return statearr_10254;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____1 = function(state_10243) {
                      while (true) {
                        var ret_value__7036__auto__ = function() {
                          try {
                            while (true) {
                              var result__7037__auto__ = switch__7034__auto__.call(null, state_10243);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__7037__auto__;
                              }
                              break;
                            }
                          } catch (e10255) {
                            if (e10255 instanceof Object) {
                              var ex__7038__auto__ = e10255;
                              var statearr_10256_10391 = state_10243;
                              statearr_10256_10391[5] = ex__7038__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10243);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e10255;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__10392 = state_10243;
                          state_10243 = G__10392;
                          continue;
                        } else {
                          return ret_value__7036__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__ = function(state_10243) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____1.call(this, state_10243);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__;
                  }();
                }(__10372, switch__7034__auto__, c__7090__auto___10384, G__10203_10373, n__5007__auto___10371, jobs, results, process, async);
              }();
              var state__7092__auto__ = function() {
                var statearr_10257 = f__7091__auto__.call(null);
                statearr_10257[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto___10384;
                return statearr_10257;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
            };
          }(__10372, c__7090__auto___10384, G__10203_10373, n__5007__auto___10371, jobs, results, process, async));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));;
      }
      var G__10393 = __10372 + 1;
      __10372 = G__10393;
      continue;
    } else {
    }
    break;
  }
  var c__7090__auto___10394 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7090__auto___10394, jobs, results, process, async) {
    return function() {
      var f__7091__auto__ = function() {
        var switch__7034__auto__ = function(c__7090__auto___10394, jobs, results, process, async) {
          return function(state_10279) {
            var state_val_10280 = state_10279[1];
            if (state_val_10280 === 9) {
              var inst_10272 = state_10279[2];
              var state_10279__$1 = function() {
                var statearr_10281 = state_10279;
                statearr_10281[7] = inst_10272;
                return statearr_10281;
              }();
              var statearr_10282_10395 = state_10279__$1;
              statearr_10282_10395[2] = null;
              statearr_10282_10395[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10280 === 8) {
                var inst_10265 = state_10279[8];
                var inst_10270 = state_10279[2];
                var state_10279__$1 = function() {
                  var statearr_10283 = state_10279;
                  statearr_10283[9] = inst_10270;
                  return statearr_10283;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10279__$1, 9, results, inst_10265);
              } else {
                if (state_val_10280 === 7) {
                  var inst_10275 = state_10279[2];
                  var state_10279__$1 = state_10279;
                  var statearr_10284_10396 = state_10279__$1;
                  statearr_10284_10396[2] = inst_10275;
                  statearr_10284_10396[1] = 3;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10280 === 6) {
                    var inst_10260 = state_10279[10];
                    var inst_10265 = state_10279[8];
                    var inst_10265__$1 = cljs.core.async.chan.call(null, 1);
                    var inst_10266 = cljs.core.PersistentVector.EMPTY_NODE;
                    var inst_10267 = [inst_10260, inst_10265__$1];
                    var inst_10268 = new cljs.core.PersistentVector(null, 2, 5, inst_10266, inst_10267, null);
                    var state_10279__$1 = function() {
                      var statearr_10285 = state_10279;
                      statearr_10285[8] = inst_10265__$1;
                      return statearr_10285;
                    }();
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10279__$1, 8, jobs, inst_10268);
                  } else {
                    if (state_val_10280 === 5) {
                      var inst_10263 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_10279__$1 = state_10279;
                      var statearr_10286_10397 = state_10279__$1;
                      statearr_10286_10397[2] = inst_10263;
                      statearr_10286_10397[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10280 === 4) {
                        var inst_10260 = state_10279[10];
                        var inst_10260__$1 = state_10279[2];
                        var inst_10261 = inst_10260__$1 == null;
                        var state_10279__$1 = function() {
                          var statearr_10287 = state_10279;
                          statearr_10287[10] = inst_10260__$1;
                          return statearr_10287;
                        }();
                        if (cljs.core.truth_(inst_10261)) {
                          var statearr_10288_10398 = state_10279__$1;
                          statearr_10288_10398[1] = 5;
                        } else {
                          var statearr_10289_10399 = state_10279__$1;
                          statearr_10289_10399[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10280 === 3) {
                          var inst_10277 = state_10279[2];
                          var state_10279__$1 = state_10279;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10279__$1, inst_10277);
                        } else {
                          if (state_val_10280 === 2) {
                            var state_10279__$1 = state_10279;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10279__$1, 4, from);
                          } else {
                            if (state_val_10280 === 1) {
                              var state_10279__$1 = state_10279;
                              var statearr_10290_10400 = state_10279__$1;
                              statearr_10290_10400[2] = null;
                              statearr_10290_10400[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7090__auto___10394, jobs, results, process, async);
        return function(switch__7034__auto__, c__7090__auto___10394, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____0 = function() {
              var statearr_10294 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_10294[0] = cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__;
              statearr_10294[1] = 1;
              return statearr_10294;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____1 = function(state_10279) {
              while (true) {
                var ret_value__7036__auto__ = function() {
                  try {
                    while (true) {
                      var result__7037__auto__ = switch__7034__auto__.call(null, state_10279);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7037__auto__;
                      }
                      break;
                    }
                  } catch (e10295) {
                    if (e10295 instanceof Object) {
                      var ex__7038__auto__ = e10295;
                      var statearr_10296_10401 = state_10279;
                      statearr_10296_10401[5] = ex__7038__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10279);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e10295;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10402 = state_10279;
                  state_10279 = G__10402;
                  continue;
                } else {
                  return ret_value__7036__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__ = function(state_10279) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____1.call(this, state_10279);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__;
          }();
        }(switch__7034__auto__, c__7090__auto___10394, jobs, results, process, async);
      }();
      var state__7092__auto__ = function() {
        var statearr_10297 = f__7091__auto__.call(null);
        statearr_10297[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto___10394;
        return statearr_10297;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
    };
  }(c__7090__auto___10394, jobs, results, process, async));
  var c__7090__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7090__auto__, jobs, results, process, async) {
    return function() {
      var f__7091__auto__ = function() {
        var switch__7034__auto__ = function(c__7090__auto__, jobs, results, process, async) {
          return function(state_10335) {
            var state_val_10336 = state_10335[1];
            if (state_val_10336 === 7) {
              var inst_10331 = state_10335[2];
              var state_10335__$1 = state_10335;
              var statearr_10337_10403 = state_10335__$1;
              statearr_10337_10403[2] = inst_10331;
              statearr_10337_10403[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10336 === 20) {
                var state_10335__$1 = state_10335;
                var statearr_10338_10404 = state_10335__$1;
                statearr_10338_10404[2] = null;
                statearr_10338_10404[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10336 === 1) {
                  var state_10335__$1 = state_10335;
                  var statearr_10339_10405 = state_10335__$1;
                  statearr_10339_10405[2] = null;
                  statearr_10339_10405[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10336 === 4) {
                    var inst_10300 = state_10335[7];
                    var inst_10300__$1 = state_10335[2];
                    var inst_10301 = inst_10300__$1 == null;
                    var state_10335__$1 = function() {
                      var statearr_10340 = state_10335;
                      statearr_10340[7] = inst_10300__$1;
                      return statearr_10340;
                    }();
                    if (cljs.core.truth_(inst_10301)) {
                      var statearr_10341_10406 = state_10335__$1;
                      statearr_10341_10406[1] = 5;
                    } else {
                      var statearr_10342_10407 = state_10335__$1;
                      statearr_10342_10407[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10336 === 15) {
                      var inst_10313 = state_10335[8];
                      var state_10335__$1 = state_10335;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10335__$1, 18, to, inst_10313);
                    } else {
                      if (state_val_10336 === 21) {
                        var inst_10326 = state_10335[2];
                        var state_10335__$1 = state_10335;
                        var statearr_10343_10408 = state_10335__$1;
                        statearr_10343_10408[2] = inst_10326;
                        statearr_10343_10408[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10336 === 13) {
                          var inst_10328 = state_10335[2];
                          var state_10335__$1 = function() {
                            var statearr_10344 = state_10335;
                            statearr_10344[9] = inst_10328;
                            return statearr_10344;
                          }();
                          var statearr_10345_10409 = state_10335__$1;
                          statearr_10345_10409[2] = null;
                          statearr_10345_10409[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10336 === 6) {
                            var inst_10300 = state_10335[7];
                            var state_10335__$1 = state_10335;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10335__$1, 11, inst_10300);
                          } else {
                            if (state_val_10336 === 17) {
                              var inst_10321 = state_10335[2];
                              var state_10335__$1 = state_10335;
                              if (cljs.core.truth_(inst_10321)) {
                                var statearr_10346_10410 = state_10335__$1;
                                statearr_10346_10410[1] = 19;
                              } else {
                                var statearr_10347_10411 = state_10335__$1;
                                statearr_10347_10411[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10336 === 3) {
                                var inst_10333 = state_10335[2];
                                var state_10335__$1 = state_10335;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10335__$1, inst_10333);
                              } else {
                                if (state_val_10336 === 12) {
                                  var inst_10310 = state_10335[10];
                                  var state_10335__$1 = state_10335;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10335__$1, 14, inst_10310);
                                } else {
                                  if (state_val_10336 === 2) {
                                    var state_10335__$1 = state_10335;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10335__$1, 4, results);
                                  } else {
                                    if (state_val_10336 === 19) {
                                      var state_10335__$1 = state_10335;
                                      var statearr_10348_10412 = state_10335__$1;
                                      statearr_10348_10412[2] = null;
                                      statearr_10348_10412[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10336 === 11) {
                                        var inst_10310 = state_10335[2];
                                        var state_10335__$1 = function() {
                                          var statearr_10349 = state_10335;
                                          statearr_10349[10] = inst_10310;
                                          return statearr_10349;
                                        }();
                                        var statearr_10350_10413 = state_10335__$1;
                                        statearr_10350_10413[2] = null;
                                        statearr_10350_10413[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_10336 === 9) {
                                          var state_10335__$1 = state_10335;
                                          var statearr_10351_10414 = state_10335__$1;
                                          statearr_10351_10414[2] = null;
                                          statearr_10351_10414[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_10336 === 5) {
                                            var state_10335__$1 = state_10335;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_10352_10415 = state_10335__$1;
                                              statearr_10352_10415[1] = 8;
                                            } else {
                                              var statearr_10353_10416 = state_10335__$1;
                                              statearr_10353_10416[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_10336 === 14) {
                                              var inst_10313 = state_10335[8];
                                              var inst_10315 = state_10335[11];
                                              var inst_10313__$1 = state_10335[2];
                                              var inst_10314 = inst_10313__$1 == null;
                                              var inst_10315__$1 = cljs.core.not.call(null, inst_10314);
                                              var state_10335__$1 = function() {
                                                var statearr_10354 = state_10335;
                                                statearr_10354[8] = inst_10313__$1;
                                                statearr_10354[11] = inst_10315__$1;
                                                return statearr_10354;
                                              }();
                                              if (inst_10315__$1) {
                                                var statearr_10355_10417 = state_10335__$1;
                                                statearr_10355_10417[1] = 15;
                                              } else {
                                                var statearr_10356_10418 = state_10335__$1;
                                                statearr_10356_10418[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_10336 === 16) {
                                                var inst_10315 = state_10335[11];
                                                var state_10335__$1 = state_10335;
                                                var statearr_10357_10419 = state_10335__$1;
                                                statearr_10357_10419[2] = inst_10315;
                                                statearr_10357_10419[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_10336 === 10) {
                                                  var inst_10307 = state_10335[2];
                                                  var state_10335__$1 = state_10335;
                                                  var statearr_10358_10420 = state_10335__$1;
                                                  statearr_10358_10420[2] = inst_10307;
                                                  statearr_10358_10420[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_10336 === 18) {
                                                    var inst_10318 = state_10335[2];
                                                    var state_10335__$1 = state_10335;
                                                    var statearr_10359_10421 = state_10335__$1;
                                                    statearr_10359_10421[2] = inst_10318;
                                                    statearr_10359_10421[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_10336 === 8) {
                                                      var inst_10304 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_10335__$1 = state_10335;
                                                      var statearr_10360_10422 = state_10335__$1;
                                                      statearr_10360_10422[2] = inst_10304;
                                                      statearr_10360_10422[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7090__auto__, jobs, results, process, async);
        return function(switch__7034__auto__, c__7090__auto__, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____0 = function() {
              var statearr_10364 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_10364[0] = cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__;
              statearr_10364[1] = 1;
              return statearr_10364;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____1 = function(state_10335) {
              while (true) {
                var ret_value__7036__auto__ = function() {
                  try {
                    while (true) {
                      var result__7037__auto__ = switch__7034__auto__.call(null, state_10335);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7037__auto__;
                      }
                      break;
                    }
                  } catch (e10365) {
                    if (e10365 instanceof Object) {
                      var ex__7038__auto__ = e10365;
                      var statearr_10366_10423 = state_10335;
                      statearr_10366_10423[5] = ex__7038__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10335);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e10365;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10424 = state_10335;
                  state_10335 = G__10424;
                  continue;
                } else {
                  return ret_value__7036__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__ = function(state_10335) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____1.call(this, state_10335);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7035__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__7035__auto__;
          }();
        }(switch__7034__auto__, c__7090__auto__, jobs, results, process, async);
      }();
      var state__7092__auto__ = function() {
        var statearr_10367 = f__7091__auto__.call(null);
        statearr_10367[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto__;
        return statearr_10367;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
    };
  }(c__7090__auto__, jobs, results, process, async));
  return c__7090__auto__;
};
cljs.core.async.pipeline_async = function() {
  var cljs$core$async$pipeline_async = null;
  var cljs$core$async$pipeline_async__4 = function(n, to, af, from) {
    return cljs$core$async$pipeline_async.call(null, n, to, af, from, true);
  };
  var cljs$core$async$pipeline_async__5 = function(n, to, af, from, close_QMARK_) {
    return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
  };
  cljs$core$async$pipeline_async = function(n, to, af, from, close_QMARK_) {
    switch(arguments.length) {
      case 4:
        return cljs$core$async$pipeline_async__4.call(this, n, to, af, from);
      case 5:
        return cljs$core$async$pipeline_async__5.call(this, n, to, af, from, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$pipeline_async.cljs$core$IFn$_invoke$arity$4 = cljs$core$async$pipeline_async__4;
  cljs$core$async$pipeline_async.cljs$core$IFn$_invoke$arity$5 = cljs$core$async$pipeline_async__5;
  return cljs$core$async$pipeline_async;
}();
cljs.core.async.pipeline = function() {
  var cljs$core$async$pipeline = null;
  var cljs$core$async$pipeline__4 = function(n, to, xf, from) {
    return cljs$core$async$pipeline.call(null, n, to, xf, from, true);
  };
  var cljs$core$async$pipeline__5 = function(n, to, xf, from, close_QMARK_) {
    return cljs$core$async$pipeline.call(null, n, to, xf, from, close_QMARK_, null);
  };
  var cljs$core$async$pipeline__6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
    return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
  };
  cljs$core$async$pipeline = function(n, to, xf, from, close_QMARK_, ex_handler) {
    switch(arguments.length) {
      case 4:
        return cljs$core$async$pipeline__4.call(this, n, to, xf, from);
      case 5:
        return cljs$core$async$pipeline__5.call(this, n, to, xf, from, close_QMARK_);
      case 6:
        return cljs$core$async$pipeline__6.call(this, n, to, xf, from, close_QMARK_, ex_handler);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$pipeline.cljs$core$IFn$_invoke$arity$4 = cljs$core$async$pipeline__4;
  cljs$core$async$pipeline.cljs$core$IFn$_invoke$arity$5 = cljs$core$async$pipeline__5;
  cljs$core$async$pipeline.cljs$core$IFn$_invoke$arity$6 = cljs$core$async$pipeline__6;
  return cljs$core$async$pipeline;
}();
cljs.core.async.split = function() {
  var cljs$core$async$split = null;
  var cljs$core$async$split__2 = function(p, ch) {
    return cljs$core$async$split.call(null, p, ch, null, null);
  };
  var cljs$core$async$split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__7090__auto___10525 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7090__auto___10525, tc, fc) {
      return function() {
        var f__7091__auto__ = function() {
          var switch__7034__auto__ = function(c__7090__auto___10525, tc, fc) {
            return function(state_10500) {
              var state_val_10501 = state_10500[1];
              if (state_val_10501 === 7) {
                var inst_10496 = state_10500[2];
                var state_10500__$1 = state_10500;
                var statearr_10502_10526 = state_10500__$1;
                statearr_10502_10526[2] = inst_10496;
                statearr_10502_10526[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10501 === 1) {
                  var state_10500__$1 = state_10500;
                  var statearr_10503_10527 = state_10500__$1;
                  statearr_10503_10527[2] = null;
                  statearr_10503_10527[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10501 === 4) {
                    var inst_10477 = state_10500[7];
                    var inst_10477__$1 = state_10500[2];
                    var inst_10478 = inst_10477__$1 == null;
                    var state_10500__$1 = function() {
                      var statearr_10504 = state_10500;
                      statearr_10504[7] = inst_10477__$1;
                      return statearr_10504;
                    }();
                    if (cljs.core.truth_(inst_10478)) {
                      var statearr_10505_10528 = state_10500__$1;
                      statearr_10505_10528[1] = 5;
                    } else {
                      var statearr_10506_10529 = state_10500__$1;
                      statearr_10506_10529[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10501 === 13) {
                      var state_10500__$1 = state_10500;
                      var statearr_10507_10530 = state_10500__$1;
                      statearr_10507_10530[2] = null;
                      statearr_10507_10530[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10501 === 6) {
                        var inst_10477 = state_10500[7];
                        var inst_10483 = p.call(null, inst_10477);
                        var state_10500__$1 = state_10500;
                        if (cljs.core.truth_(inst_10483)) {
                          var statearr_10508_10531 = state_10500__$1;
                          statearr_10508_10531[1] = 9;
                        } else {
                          var statearr_10509_10532 = state_10500__$1;
                          statearr_10509_10532[1] = 10;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10501 === 3) {
                          var inst_10498 = state_10500[2];
                          var state_10500__$1 = state_10500;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10500__$1, inst_10498);
                        } else {
                          if (state_val_10501 === 12) {
                            var state_10500__$1 = state_10500;
                            var statearr_10510_10533 = state_10500__$1;
                            statearr_10510_10533[2] = null;
                            statearr_10510_10533[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10501 === 2) {
                              var state_10500__$1 = state_10500;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10500__$1, 4, ch);
                            } else {
                              if (state_val_10501 === 11) {
                                var inst_10477 = state_10500[7];
                                var inst_10487 = state_10500[2];
                                var state_10500__$1 = state_10500;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10500__$1, 8, inst_10487, inst_10477);
                              } else {
                                if (state_val_10501 === 9) {
                                  var state_10500__$1 = state_10500;
                                  var statearr_10511_10534 = state_10500__$1;
                                  statearr_10511_10534[2] = tc;
                                  statearr_10511_10534[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_10501 === 5) {
                                    var inst_10480 = cljs.core.async.close_BANG_.call(null, tc);
                                    var inst_10481 = cljs.core.async.close_BANG_.call(null, fc);
                                    var state_10500__$1 = function() {
                                      var statearr_10512 = state_10500;
                                      statearr_10512[8] = inst_10480;
                                      return statearr_10512;
                                    }();
                                    var statearr_10513_10535 = state_10500__$1;
                                    statearr_10513_10535[2] = inst_10481;
                                    statearr_10513_10535[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10501 === 14) {
                                      var inst_10494 = state_10500[2];
                                      var state_10500__$1 = state_10500;
                                      var statearr_10514_10536 = state_10500__$1;
                                      statearr_10514_10536[2] = inst_10494;
                                      statearr_10514_10536[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10501 === 10) {
                                        var state_10500__$1 = state_10500;
                                        var statearr_10515_10537 = state_10500__$1;
                                        statearr_10515_10537[2] = fc;
                                        statearr_10515_10537[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_10501 === 8) {
                                          var inst_10489 = state_10500[2];
                                          var state_10500__$1 = state_10500;
                                          if (cljs.core.truth_(inst_10489)) {
                                            var statearr_10516_10538 = state_10500__$1;
                                            statearr_10516_10538[1] = 12;
                                          } else {
                                            var statearr_10517_10539 = state_10500__$1;
                                            statearr_10517_10539[1] = 13;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7090__auto___10525, tc, fc);
          return function(switch__7034__auto__, c__7090__auto___10525, tc, fc) {
            return function() {
              var cljs$core$async$split_$_state_machine__7035__auto__ = null;
              var cljs$core$async$split_$_state_machine__7035__auto____0 = function() {
                var statearr_10521 = [null, null, null, null, null, null, null, null, null];
                statearr_10521[0] = cljs$core$async$split_$_state_machine__7035__auto__;
                statearr_10521[1] = 1;
                return statearr_10521;
              };
              var cljs$core$async$split_$_state_machine__7035__auto____1 = function(state_10500) {
                while (true) {
                  var ret_value__7036__auto__ = function() {
                    try {
                      while (true) {
                        var result__7037__auto__ = switch__7034__auto__.call(null, state_10500);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7037__auto__;
                        }
                        break;
                      }
                    } catch (e10522) {
                      if (e10522 instanceof Object) {
                        var ex__7038__auto__ = e10522;
                        var statearr_10523_10540 = state_10500;
                        statearr_10523_10540[5] = ex__7038__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10500);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e10522;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__10541 = state_10500;
                    state_10500 = G__10541;
                    continue;
                  } else {
                    return ret_value__7036__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$split_$_state_machine__7035__auto__ = function(state_10500) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$split_$_state_machine__7035__auto____0.call(this);
                  case 1:
                    return cljs$core$async$split_$_state_machine__7035__auto____1.call(this, state_10500);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$split_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$split_$_state_machine__7035__auto____0;
              cljs$core$async$split_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$split_$_state_machine__7035__auto____1;
              return cljs$core$async$split_$_state_machine__7035__auto__;
            }();
          }(switch__7034__auto__, c__7090__auto___10525, tc, fc);
        }();
        var state__7092__auto__ = function() {
          var statearr_10524 = f__7091__auto__.call(null);
          statearr_10524[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto___10525;
          return statearr_10524;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
      };
    }(c__7090__auto___10525, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  cljs$core$async$split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$split__2.call(this, p, ch);
      case 4:
        return cljs$core$async$split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$split.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$split__2;
  cljs$core$async$split.cljs$core$IFn$_invoke$arity$4 = cljs$core$async$split__4;
  return cljs$core$async$split;
}();
cljs.core.async.reduce = function cljs$core$async$reduce(f, init, ch) {
  var c__7090__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7090__auto__) {
    return function() {
      var f__7091__auto__ = function() {
        var switch__7034__auto__ = function(c__7090__auto__) {
          return function(state_10588) {
            var state_val_10589 = state_10588[1];
            if (state_val_10589 === 7) {
              var inst_10584 = state_10588[2];
              var state_10588__$1 = state_10588;
              var statearr_10590_10606 = state_10588__$1;
              statearr_10590_10606[2] = inst_10584;
              statearr_10590_10606[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10589 === 6) {
                var inst_10574 = state_10588[7];
                var inst_10577 = state_10588[8];
                var inst_10581 = f.call(null, inst_10574, inst_10577);
                var inst_10574__$1 = inst_10581;
                var state_10588__$1 = function() {
                  var statearr_10591 = state_10588;
                  statearr_10591[7] = inst_10574__$1;
                  return statearr_10591;
                }();
                var statearr_10592_10607 = state_10588__$1;
                statearr_10592_10607[2] = null;
                statearr_10592_10607[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10589 === 5) {
                  var inst_10574 = state_10588[7];
                  var state_10588__$1 = state_10588;
                  var statearr_10593_10608 = state_10588__$1;
                  statearr_10593_10608[2] = inst_10574;
                  statearr_10593_10608[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10589 === 4) {
                    var inst_10577 = state_10588[8];
                    var inst_10577__$1 = state_10588[2];
                    var inst_10578 = inst_10577__$1 == null;
                    var state_10588__$1 = function() {
                      var statearr_10594 = state_10588;
                      statearr_10594[8] = inst_10577__$1;
                      return statearr_10594;
                    }();
                    if (cljs.core.truth_(inst_10578)) {
                      var statearr_10595_10609 = state_10588__$1;
                      statearr_10595_10609[1] = 5;
                    } else {
                      var statearr_10596_10610 = state_10588__$1;
                      statearr_10596_10610[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10589 === 3) {
                      var inst_10586 = state_10588[2];
                      var state_10588__$1 = state_10588;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10588__$1, inst_10586);
                    } else {
                      if (state_val_10589 === 2) {
                        var state_10588__$1 = state_10588;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10588__$1, 4, ch);
                      } else {
                        if (state_val_10589 === 1) {
                          var inst_10574 = init;
                          var state_10588__$1 = function() {
                            var statearr_10597 = state_10588;
                            statearr_10597[7] = inst_10574;
                            return statearr_10597;
                          }();
                          var statearr_10598_10611 = state_10588__$1;
                          statearr_10598_10611[2] = null;
                          statearr_10598_10611[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7090__auto__);
        return function(switch__7034__auto__, c__7090__auto__) {
          return function() {
            var cljs$core$async$reduce_$_state_machine__7035__auto__ = null;
            var cljs$core$async$reduce_$_state_machine__7035__auto____0 = function() {
              var statearr_10602 = [null, null, null, null, null, null, null, null, null];
              statearr_10602[0] = cljs$core$async$reduce_$_state_machine__7035__auto__;
              statearr_10602[1] = 1;
              return statearr_10602;
            };
            var cljs$core$async$reduce_$_state_machine__7035__auto____1 = function(state_10588) {
              while (true) {
                var ret_value__7036__auto__ = function() {
                  try {
                    while (true) {
                      var result__7037__auto__ = switch__7034__auto__.call(null, state_10588);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7037__auto__;
                      }
                      break;
                    }
                  } catch (e10603) {
                    if (e10603 instanceof Object) {
                      var ex__7038__auto__ = e10603;
                      var statearr_10604_10612 = state_10588;
                      statearr_10604_10612[5] = ex__7038__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10588);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e10603;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10613 = state_10588;
                  state_10588 = G__10613;
                  continue;
                } else {
                  return ret_value__7036__auto__;
                }
                break;
              }
            };
            cljs$core$async$reduce_$_state_machine__7035__auto__ = function(state_10588) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$reduce_$_state_machine__7035__auto____0.call(this);
                case 1:
                  return cljs$core$async$reduce_$_state_machine__7035__auto____1.call(this, state_10588);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$reduce_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$reduce_$_state_machine__7035__auto____0;
            cljs$core$async$reduce_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$reduce_$_state_machine__7035__auto____1;
            return cljs$core$async$reduce_$_state_machine__7035__auto__;
          }();
        }(switch__7034__auto__, c__7090__auto__);
      }();
      var state__7092__auto__ = function() {
        var statearr_10605 = f__7091__auto__.call(null);
        statearr_10605[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto__;
        return statearr_10605;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
    };
  }(c__7090__auto__));
  return c__7090__auto__;
};
cljs.core.async.onto_chan = function() {
  var cljs$core$async$onto_chan = null;
  var cljs$core$async$onto_chan__2 = function(ch, coll) {
    return cljs$core$async$onto_chan.call(null, ch, coll, true);
  };
  var cljs$core$async$onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__7090__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7090__auto__) {
      return function() {
        var f__7091__auto__ = function() {
          var switch__7034__auto__ = function(c__7090__auto__) {
            return function(state_10687) {
              var state_val_10688 = state_10687[1];
              if (state_val_10688 === 7) {
                var inst_10669 = state_10687[2];
                var state_10687__$1 = state_10687;
                var statearr_10689_10712 = state_10687__$1;
                statearr_10689_10712[2] = inst_10669;
                statearr_10689_10712[1] = 6;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10688 === 1) {
                  var inst_10663 = cljs.core.seq.call(null, coll);
                  var inst_10664 = inst_10663;
                  var state_10687__$1 = function() {
                    var statearr_10690 = state_10687;
                    statearr_10690[7] = inst_10664;
                    return statearr_10690;
                  }();
                  var statearr_10691_10713 = state_10687__$1;
                  statearr_10691_10713[2] = null;
                  statearr_10691_10713[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10688 === 4) {
                    var inst_10664 = state_10687[7];
                    var inst_10667 = cljs.core.first.call(null, inst_10664);
                    var state_10687__$1 = state_10687;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10687__$1, 7, ch, inst_10667);
                  } else {
                    if (state_val_10688 === 13) {
                      var inst_10681 = state_10687[2];
                      var state_10687__$1 = state_10687;
                      var statearr_10692_10714 = state_10687__$1;
                      statearr_10692_10714[2] = inst_10681;
                      statearr_10692_10714[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10688 === 6) {
                        var inst_10672 = state_10687[2];
                        var state_10687__$1 = state_10687;
                        if (cljs.core.truth_(inst_10672)) {
                          var statearr_10693_10715 = state_10687__$1;
                          statearr_10693_10715[1] = 8;
                        } else {
                          var statearr_10694_10716 = state_10687__$1;
                          statearr_10694_10716[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10688 === 3) {
                          var inst_10685 = state_10687[2];
                          var state_10687__$1 = state_10687;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10687__$1, inst_10685);
                        } else {
                          if (state_val_10688 === 12) {
                            var state_10687__$1 = state_10687;
                            var statearr_10695_10717 = state_10687__$1;
                            statearr_10695_10717[2] = null;
                            statearr_10695_10717[1] = 13;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10688 === 2) {
                              var inst_10664 = state_10687[7];
                              var state_10687__$1 = state_10687;
                              if (cljs.core.truth_(inst_10664)) {
                                var statearr_10696_10718 = state_10687__$1;
                                statearr_10696_10718[1] = 4;
                              } else {
                                var statearr_10697_10719 = state_10687__$1;
                                statearr_10697_10719[1] = 5;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10688 === 11) {
                                var inst_10678 = cljs.core.async.close_BANG_.call(null, ch);
                                var state_10687__$1 = state_10687;
                                var statearr_10698_10720 = state_10687__$1;
                                statearr_10698_10720[2] = inst_10678;
                                statearr_10698_10720[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10688 === 9) {
                                  var state_10687__$1 = state_10687;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_10699_10721 = state_10687__$1;
                                    statearr_10699_10721[1] = 11;
                                  } else {
                                    var statearr_10700_10722 = state_10687__$1;
                                    statearr_10700_10722[1] = 12;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_10688 === 5) {
                                    var inst_10664 = state_10687[7];
                                    var state_10687__$1 = state_10687;
                                    var statearr_10701_10723 = state_10687__$1;
                                    statearr_10701_10723[2] = inst_10664;
                                    statearr_10701_10723[1] = 6;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10688 === 10) {
                                      var inst_10683 = state_10687[2];
                                      var state_10687__$1 = state_10687;
                                      var statearr_10702_10724 = state_10687__$1;
                                      statearr_10702_10724[2] = inst_10683;
                                      statearr_10702_10724[1] = 3;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10688 === 8) {
                                        var inst_10664 = state_10687[7];
                                        var inst_10674 = cljs.core.next.call(null, inst_10664);
                                        var inst_10664__$1 = inst_10674;
                                        var state_10687__$1 = function() {
                                          var statearr_10703 = state_10687;
                                          statearr_10703[7] = inst_10664__$1;
                                          return statearr_10703;
                                        }();
                                        var statearr_10704_10725 = state_10687__$1;
                                        statearr_10704_10725[2] = null;
                                        statearr_10704_10725[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7090__auto__);
          return function(switch__7034__auto__, c__7090__auto__) {
            return function() {
              var cljs$core$async$onto_chan_$_state_machine__7035__auto__ = null;
              var cljs$core$async$onto_chan_$_state_machine__7035__auto____0 = function() {
                var statearr_10708 = [null, null, null, null, null, null, null, null];
                statearr_10708[0] = cljs$core$async$onto_chan_$_state_machine__7035__auto__;
                statearr_10708[1] = 1;
                return statearr_10708;
              };
              var cljs$core$async$onto_chan_$_state_machine__7035__auto____1 = function(state_10687) {
                while (true) {
                  var ret_value__7036__auto__ = function() {
                    try {
                      while (true) {
                        var result__7037__auto__ = switch__7034__auto__.call(null, state_10687);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7037__auto__;
                        }
                        break;
                      }
                    } catch (e10709) {
                      if (e10709 instanceof Object) {
                        var ex__7038__auto__ = e10709;
                        var statearr_10710_10726 = state_10687;
                        statearr_10710_10726[5] = ex__7038__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10687);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e10709;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__10727 = state_10687;
                    state_10687 = G__10727;
                    continue;
                  } else {
                    return ret_value__7036__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$onto_chan_$_state_machine__7035__auto__ = function(state_10687) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$onto_chan_$_state_machine__7035__auto____0.call(this);
                  case 1:
                    return cljs$core$async$onto_chan_$_state_machine__7035__auto____1.call(this, state_10687);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$onto_chan_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$onto_chan_$_state_machine__7035__auto____0;
              cljs$core$async$onto_chan_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$onto_chan_$_state_machine__7035__auto____1;
              return cljs$core$async$onto_chan_$_state_machine__7035__auto__;
            }();
          }(switch__7034__auto__, c__7090__auto__);
        }();
        var state__7092__auto__ = function() {
          var statearr_10711 = f__7091__auto__.call(null);
          statearr_10711[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto__;
          return statearr_10711;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
      };
    }(c__7090__auto__));
    return c__7090__auto__;
  };
  cljs$core$async$onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$onto_chan__2.call(this, ch, coll);
      case 3:
        return cljs$core$async$onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$onto_chan.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$onto_chan__2;
  cljs$core$async$onto_chan.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$onto_chan__3;
  return cljs$core$async$onto_chan;
}();
cljs.core.async.to_chan = function cljs$core$async$to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj10729 = {};
  return obj10729;
}();
cljs.core.async.muxch_STAR_ = function cljs$core$async$muxch_STAR_(_) {
  if (function() {
    var and__4110__auto__ = _;
    if (and__4110__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4758__auto__ = _ == null ? null : _;
    return function() {
      var or__4122__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj10731 = {};
  return obj10731;
}();
cljs.core.async.tap_STAR_ = function cljs$core$async$tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__4110__auto__ = m;
    if (and__4110__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4758__auto__ = m == null ? null : m;
    return function() {
      var or__4122__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function cljs$core$async$untap_STAR_(m, ch) {
  if (function() {
    var and__4110__auto__ = m;
    if (and__4110__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4758__auto__ = m == null ? null : m;
    return function() {
      var or__4122__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function cljs$core$async$untap_all_STAR_(m) {
  if (function() {
    var and__4110__auto__ = m;
    if (and__4110__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4758__auto__ = m == null ? null : m;
    return function() {
      var or__4122__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function cljs$core$async$mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t10953 !== "undefined") {
    } else {
      cljs.core.async.t10953 = function(cs, ch, mult, meta10954) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta10954 = meta10954;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t10953.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t10953.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t10953.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t10953.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t10953.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t10953.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t10953.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_10955) {
          var self__ = this;
          var _10955__$1 = this;
          return self__.meta10954;
        };
      }(cs);
      cljs.core.async.t10953.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_10955, meta10954__$1) {
          var self__ = this;
          var _10955__$1 = this;
          return new cljs.core.async.t10953(self__.cs, self__.ch, self__.mult, meta10954__$1);
        };
      }(cs);
      cljs.core.async.t10953.cljs$lang$type = true;
      cljs.core.async.t10953.cljs$lang$ctorStr = "cljs.core.async/t10953";
      cljs.core.async.t10953.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
          return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t10953");
        };
      }(cs);
      cljs.core.async.__GT_t10953 = function(cs) {
        return function cljs$core$async$mult_$___GT_t10953(cs__$1, ch__$1, mult__$1, meta10954) {
          return new cljs.core.async.t10953(cs__$1, ch__$1, mult__$1, meta10954);
        };
      }(cs);
    }
    return new cljs.core.async.t10953(cs, ch, cljs$core$async$mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__7090__auto___11174 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7090__auto___11174, cs, m, dchan, dctr, done) {
    return function() {
      var f__7091__auto__ = function() {
        var switch__7034__auto__ = function(c__7090__auto___11174, cs, m, dchan, dctr, done) {
          return function(state_11086) {
            var state_val_11087 = state_11086[1];
            if (state_val_11087 === 7) {
              var inst_11082 = state_11086[2];
              var state_11086__$1 = state_11086;
              var statearr_11088_11175 = state_11086__$1;
              statearr_11088_11175[2] = inst_11082;
              statearr_11088_11175[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11087 === 20) {
                var inst_10987 = state_11086[7];
                var inst_10997 = cljs.core.first.call(null, inst_10987);
                var inst_10998 = cljs.core.nth.call(null, inst_10997, 0, null);
                var inst_10999 = cljs.core.nth.call(null, inst_10997, 1, null);
                var state_11086__$1 = function() {
                  var statearr_11089 = state_11086;
                  statearr_11089[8] = inst_10998;
                  return statearr_11089;
                }();
                if (cljs.core.truth_(inst_10999)) {
                  var statearr_11090_11176 = state_11086__$1;
                  statearr_11090_11176[1] = 22;
                } else {
                  var statearr_11091_11177 = state_11086__$1;
                  statearr_11091_11177[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11087 === 27) {
                  var inst_11034 = state_11086[9];
                  var inst_11027 = state_11086[10];
                  var inst_11029 = state_11086[11];
                  var inst_10958 = state_11086[12];
                  var inst_11034__$1 = cljs.core._nth.call(null, inst_11027, inst_11029);
                  var inst_11035 = cljs.core.async.put_BANG_.call(null, inst_11034__$1, inst_10958, done);
                  var state_11086__$1 = function() {
                    var statearr_11092 = state_11086;
                    statearr_11092[9] = inst_11034__$1;
                    return statearr_11092;
                  }();
                  if (cljs.core.truth_(inst_11035)) {
                    var statearr_11093_11178 = state_11086__$1;
                    statearr_11093_11178[1] = 30;
                  } else {
                    var statearr_11094_11179 = state_11086__$1;
                    statearr_11094_11179[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11087 === 1) {
                    var state_11086__$1 = state_11086;
                    var statearr_11095_11180 = state_11086__$1;
                    statearr_11095_11180[2] = null;
                    statearr_11095_11180[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11087 === 24) {
                      var inst_10987 = state_11086[7];
                      var inst_11004 = state_11086[2];
                      var inst_11005 = cljs.core.next.call(null, inst_10987);
                      var inst_10967 = inst_11005;
                      var inst_10968 = null;
                      var inst_10969 = 0;
                      var inst_10970 = 0;
                      var state_11086__$1 = function() {
                        var statearr_11096 = state_11086;
                        statearr_11096[13] = inst_10967;
                        statearr_11096[14] = inst_11004;
                        statearr_11096[15] = inst_10968;
                        statearr_11096[16] = inst_10970;
                        statearr_11096[17] = inst_10969;
                        return statearr_11096;
                      }();
                      var statearr_11097_11181 = state_11086__$1;
                      statearr_11097_11181[2] = null;
                      statearr_11097_11181[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11087 === 39) {
                        var state_11086__$1 = state_11086;
                        var statearr_11101_11182 = state_11086__$1;
                        statearr_11101_11182[2] = null;
                        statearr_11101_11182[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11087 === 4) {
                          var inst_10958 = state_11086[12];
                          var inst_10958__$1 = state_11086[2];
                          var inst_10959 = inst_10958__$1 == null;
                          var state_11086__$1 = function() {
                            var statearr_11102 = state_11086;
                            statearr_11102[12] = inst_10958__$1;
                            return statearr_11102;
                          }();
                          if (cljs.core.truth_(inst_10959)) {
                            var statearr_11103_11183 = state_11086__$1;
                            statearr_11103_11183[1] = 5;
                          } else {
                            var statearr_11104_11184 = state_11086__$1;
                            statearr_11104_11184[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11087 === 15) {
                            var inst_10967 = state_11086[13];
                            var inst_10968 = state_11086[15];
                            var inst_10970 = state_11086[16];
                            var inst_10969 = state_11086[17];
                            var inst_10983 = state_11086[2];
                            var inst_10984 = inst_10970 + 1;
                            var tmp11098 = inst_10967;
                            var tmp11099 = inst_10968;
                            var tmp11100 = inst_10969;
                            var inst_10967__$1 = tmp11098;
                            var inst_10968__$1 = tmp11099;
                            var inst_10969__$1 = tmp11100;
                            var inst_10970__$1 = inst_10984;
                            var state_11086__$1 = function() {
                              var statearr_11105 = state_11086;
                              statearr_11105[13] = inst_10967__$1;
                              statearr_11105[18] = inst_10983;
                              statearr_11105[15] = inst_10968__$1;
                              statearr_11105[16] = inst_10970__$1;
                              statearr_11105[17] = inst_10969__$1;
                              return statearr_11105;
                            }();
                            var statearr_11106_11185 = state_11086__$1;
                            statearr_11106_11185[2] = null;
                            statearr_11106_11185[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11087 === 21) {
                              var inst_11008 = state_11086[2];
                              var state_11086__$1 = state_11086;
                              var statearr_11110_11186 = state_11086__$1;
                              statearr_11110_11186[2] = inst_11008;
                              statearr_11110_11186[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11087 === 31) {
                                var inst_11034 = state_11086[9];
                                var inst_11038 = done.call(null, null);
                                var inst_11039 = cljs.core.async.untap_STAR_.call(null, m, inst_11034);
                                var state_11086__$1 = function() {
                                  var statearr_11111 = state_11086;
                                  statearr_11111[19] = inst_11038;
                                  return statearr_11111;
                                }();
                                var statearr_11112_11187 = state_11086__$1;
                                statearr_11112_11187[2] = inst_11039;
                                statearr_11112_11187[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11087 === 32) {
                                  var inst_11027 = state_11086[10];
                                  var inst_11029 = state_11086[11];
                                  var inst_11026 = state_11086[20];
                                  var inst_11028 = state_11086[21];
                                  var inst_11041 = state_11086[2];
                                  var inst_11042 = inst_11029 + 1;
                                  var tmp11107 = inst_11027;
                                  var tmp11108 = inst_11026;
                                  var tmp11109 = inst_11028;
                                  var inst_11026__$1 = tmp11108;
                                  var inst_11027__$1 = tmp11107;
                                  var inst_11028__$1 = tmp11109;
                                  var inst_11029__$1 = inst_11042;
                                  var state_11086__$1 = function() {
                                    var statearr_11113 = state_11086;
                                    statearr_11113[22] = inst_11041;
                                    statearr_11113[10] = inst_11027__$1;
                                    statearr_11113[11] = inst_11029__$1;
                                    statearr_11113[20] = inst_11026__$1;
                                    statearr_11113[21] = inst_11028__$1;
                                    return statearr_11113;
                                  }();
                                  var statearr_11114_11188 = state_11086__$1;
                                  statearr_11114_11188[2] = null;
                                  statearr_11114_11188[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11087 === 40) {
                                    var inst_11054 = state_11086[23];
                                    var inst_11058 = done.call(null, null);
                                    var inst_11059 = cljs.core.async.untap_STAR_.call(null, m, inst_11054);
                                    var state_11086__$1 = function() {
                                      var statearr_11115 = state_11086;
                                      statearr_11115[24] = inst_11058;
                                      return statearr_11115;
                                    }();
                                    var statearr_11116_11189 = state_11086__$1;
                                    statearr_11116_11189[2] = inst_11059;
                                    statearr_11116_11189[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11087 === 33) {
                                      var inst_11045 = state_11086[25];
                                      var inst_11047 = cljs.core.chunked_seq_QMARK_.call(null, inst_11045);
                                      var state_11086__$1 = state_11086;
                                      if (inst_11047) {
                                        var statearr_11117_11190 = state_11086__$1;
                                        statearr_11117_11190[1] = 36;
                                      } else {
                                        var statearr_11118_11191 = state_11086__$1;
                                        statearr_11118_11191[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11087 === 13) {
                                        var inst_10977 = state_11086[26];
                                        var inst_10980 = cljs.core.async.close_BANG_.call(null, inst_10977);
                                        var state_11086__$1 = state_11086;
                                        var statearr_11119_11192 = state_11086__$1;
                                        statearr_11119_11192[2] = inst_10980;
                                        statearr_11119_11192[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_11087 === 22) {
                                          var inst_10998 = state_11086[8];
                                          var inst_11001 = cljs.core.async.close_BANG_.call(null, inst_10998);
                                          var state_11086__$1 = state_11086;
                                          var statearr_11120_11193 = state_11086__$1;
                                          statearr_11120_11193[2] = inst_11001;
                                          statearr_11120_11193[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_11087 === 36) {
                                            var inst_11045 = state_11086[25];
                                            var inst_11049 = cljs.core.chunk_first.call(null, inst_11045);
                                            var inst_11050 = cljs.core.chunk_rest.call(null, inst_11045);
                                            var inst_11051 = cljs.core.count.call(null, inst_11049);
                                            var inst_11026 = inst_11050;
                                            var inst_11027 = inst_11049;
                                            var inst_11028 = inst_11051;
                                            var inst_11029 = 0;
                                            var state_11086__$1 = function() {
                                              var statearr_11121 = state_11086;
                                              statearr_11121[10] = inst_11027;
                                              statearr_11121[11] = inst_11029;
                                              statearr_11121[20] = inst_11026;
                                              statearr_11121[21] = inst_11028;
                                              return statearr_11121;
                                            }();
                                            var statearr_11122_11194 = state_11086__$1;
                                            statearr_11122_11194[2] = null;
                                            statearr_11122_11194[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_11087 === 41) {
                                              var inst_11045 = state_11086[25];
                                              var inst_11061 = state_11086[2];
                                              var inst_11062 = cljs.core.next.call(null, inst_11045);
                                              var inst_11026 = inst_11062;
                                              var inst_11027 = null;
                                              var inst_11028 = 0;
                                              var inst_11029 = 0;
                                              var state_11086__$1 = function() {
                                                var statearr_11123 = state_11086;
                                                statearr_11123[10] = inst_11027;
                                                statearr_11123[11] = inst_11029;
                                                statearr_11123[20] = inst_11026;
                                                statearr_11123[21] = inst_11028;
                                                statearr_11123[27] = inst_11061;
                                                return statearr_11123;
                                              }();
                                              var statearr_11124_11195 = state_11086__$1;
                                              statearr_11124_11195[2] = null;
                                              statearr_11124_11195[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_11087 === 43) {
                                                var state_11086__$1 = state_11086;
                                                var statearr_11125_11196 = state_11086__$1;
                                                statearr_11125_11196[2] = null;
                                                statearr_11125_11196[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_11087 === 29) {
                                                  var inst_11070 = state_11086[2];
                                                  var state_11086__$1 = state_11086;
                                                  var statearr_11126_11197 = state_11086__$1;
                                                  statearr_11126_11197[2] = inst_11070;
                                                  statearr_11126_11197[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_11087 === 44) {
                                                    var inst_11079 = state_11086[2];
                                                    var state_11086__$1 = function() {
                                                      var statearr_11127 = state_11086;
                                                      statearr_11127[28] = inst_11079;
                                                      return statearr_11127;
                                                    }();
                                                    var statearr_11128_11198 = state_11086__$1;
                                                    statearr_11128_11198[2] = null;
                                                    statearr_11128_11198[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_11087 === 6) {
                                                      var inst_11018 = state_11086[29];
                                                      var inst_11017 = cljs.core.deref.call(null, cs);
                                                      var inst_11018__$1 = cljs.core.keys.call(null, inst_11017);
                                                      var inst_11019 = cljs.core.count.call(null, inst_11018__$1);
                                                      var inst_11020 = cljs.core.reset_BANG_.call(null, dctr, inst_11019);
                                                      var inst_11025 = cljs.core.seq.call(null, inst_11018__$1);
                                                      var inst_11026 = inst_11025;
                                                      var inst_11027 = null;
                                                      var inst_11028 = 0;
                                                      var inst_11029 = 0;
                                                      var state_11086__$1 = function() {
                                                        var statearr_11129 = state_11086;
                                                        statearr_11129[29] = inst_11018__$1;
                                                        statearr_11129[30] = inst_11020;
                                                        statearr_11129[10] = inst_11027;
                                                        statearr_11129[11] = inst_11029;
                                                        statearr_11129[20] = inst_11026;
                                                        statearr_11129[21] = inst_11028;
                                                        return statearr_11129;
                                                      }();
                                                      var statearr_11130_11199 = state_11086__$1;
                                                      statearr_11130_11199[2] = null;
                                                      statearr_11130_11199[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_11087 === 28) {
                                                        var inst_11045 = state_11086[25];
                                                        var inst_11026 = state_11086[20];
                                                        var inst_11045__$1 = cljs.core.seq.call(null, inst_11026);
                                                        var state_11086__$1 = function() {
                                                          var statearr_11131 = state_11086;
                                                          statearr_11131[25] = inst_11045__$1;
                                                          return statearr_11131;
                                                        }();
                                                        if (inst_11045__$1) {
                                                          var statearr_11132_11200 = state_11086__$1;
                                                          statearr_11132_11200[1] = 33;
                                                        } else {
                                                          var statearr_11133_11201 = state_11086__$1;
                                                          statearr_11133_11201[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_11087 === 25) {
                                                          var inst_11029 = state_11086[11];
                                                          var inst_11028 = state_11086[21];
                                                          var inst_11031 = inst_11029 < inst_11028;
                                                          var inst_11032 = inst_11031;
                                                          var state_11086__$1 = state_11086;
                                                          if (cljs.core.truth_(inst_11032)) {
                                                            var statearr_11134_11202 = state_11086__$1;
                                                            statearr_11134_11202[1] = 27;
                                                          } else {
                                                            var statearr_11135_11203 = state_11086__$1;
                                                            statearr_11135_11203[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_11087 === 34) {
                                                            var state_11086__$1 = state_11086;
                                                            var statearr_11136_11204 = state_11086__$1;
                                                            statearr_11136_11204[2] = null;
                                                            statearr_11136_11204[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_11087 === 17) {
                                                              var state_11086__$1 = state_11086;
                                                              var statearr_11137_11205 = state_11086__$1;
                                                              statearr_11137_11205[2] = null;
                                                              statearr_11137_11205[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_11087 === 3) {
                                                                var inst_11084 = state_11086[2];
                                                                var state_11086__$1 = state_11086;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11086__$1, inst_11084);
                                                              } else {
                                                                if (state_val_11087 === 12) {
                                                                  var inst_11013 = state_11086[2];
                                                                  var state_11086__$1 = state_11086;
                                                                  var statearr_11138_11206 = state_11086__$1;
                                                                  statearr_11138_11206[2] = inst_11013;
                                                                  statearr_11138_11206[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_11087 === 2) {
                                                                    var state_11086__$1 = state_11086;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11086__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_11087 === 23) {
                                                                      var state_11086__$1 = state_11086;
                                                                      var statearr_11139_11207 = state_11086__$1;
                                                                      statearr_11139_11207[2] = null;
                                                                      statearr_11139_11207[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_11087 === 35) {
                                                                        var inst_11068 = state_11086[2];
                                                                        var state_11086__$1 = state_11086;
                                                                        var statearr_11140_11208 = state_11086__$1;
                                                                        statearr_11140_11208[2] = inst_11068;
                                                                        statearr_11140_11208[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_11087 === 19) {
                                                                          var inst_10987 = state_11086[7];
                                                                          var inst_10991 = cljs.core.chunk_first.call(null, inst_10987);
                                                                          var inst_10992 = cljs.core.chunk_rest.call(null, inst_10987);
                                                                          var inst_10993 = cljs.core.count.call(null, inst_10991);
                                                                          var inst_10967 = inst_10992;
                                                                          var inst_10968 = inst_10991;
                                                                          var inst_10969 = inst_10993;
                                                                          var inst_10970 = 0;
                                                                          var state_11086__$1 = function() {
                                                                            var statearr_11141 = state_11086;
                                                                            statearr_11141[13] = inst_10967;
                                                                            statearr_11141[15] = inst_10968;
                                                                            statearr_11141[16] = inst_10970;
                                                                            statearr_11141[17] = inst_10969;
                                                                            return statearr_11141;
                                                                          }();
                                                                          var statearr_11142_11209 = state_11086__$1;
                                                                          statearr_11142_11209[2] = null;
                                                                          statearr_11142_11209[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_11087 === 11) {
                                                                            var inst_10967 = state_11086[13];
                                                                            var inst_10987 = state_11086[7];
                                                                            var inst_10987__$1 = cljs.core.seq.call(null, inst_10967);
                                                                            var state_11086__$1 = function() {
                                                                              var statearr_11143 = state_11086;
                                                                              statearr_11143[7] = inst_10987__$1;
                                                                              return statearr_11143;
                                                                            }();
                                                                            if (inst_10987__$1) {
                                                                              var statearr_11144_11210 = state_11086__$1;
                                                                              statearr_11144_11210[1] = 16;
                                                                            } else {
                                                                              var statearr_11145_11211 = state_11086__$1;
                                                                              statearr_11145_11211[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_11087 === 9) {
                                                                              var inst_11015 = state_11086[2];
                                                                              var state_11086__$1 = state_11086;
                                                                              var statearr_11146_11212 = state_11086__$1;
                                                                              statearr_11146_11212[2] = inst_11015;
                                                                              statearr_11146_11212[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_11087 === 5) {
                                                                                var inst_10965 = cljs.core.deref.call(null, cs);
                                                                                var inst_10966 = cljs.core.seq.call(null, inst_10965);
                                                                                var inst_10967 = inst_10966;
                                                                                var inst_10968 = null;
                                                                                var inst_10969 = 0;
                                                                                var inst_10970 = 0;
                                                                                var state_11086__$1 = function() {
                                                                                  var statearr_11147 = state_11086;
                                                                                  statearr_11147[13] = inst_10967;
                                                                                  statearr_11147[15] = inst_10968;
                                                                                  statearr_11147[16] = inst_10970;
                                                                                  statearr_11147[17] = inst_10969;
                                                                                  return statearr_11147;
                                                                                }();
                                                                                var statearr_11148_11213 = state_11086__$1;
                                                                                statearr_11148_11213[2] = null;
                                                                                statearr_11148_11213[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_11087 === 14) {
                                                                                  var state_11086__$1 = state_11086;
                                                                                  var statearr_11149_11214 = state_11086__$1;
                                                                                  statearr_11149_11214[2] = null;
                                                                                  statearr_11149_11214[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_11087 === 45) {
                                                                                    var inst_11076 = state_11086[2];
                                                                                    var state_11086__$1 = state_11086;
                                                                                    var statearr_11150_11215 = state_11086__$1;
                                                                                    statearr_11150_11215[2] = inst_11076;
                                                                                    statearr_11150_11215[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_11087 === 26) {
                                                                                      var inst_11018 = state_11086[29];
                                                                                      var inst_11072 = state_11086[2];
                                                                                      var inst_11073 = cljs.core.seq.call(null, inst_11018);
                                                                                      var state_11086__$1 = function() {
                                                                                        var statearr_11151 = state_11086;
                                                                                        statearr_11151[31] = inst_11072;
                                                                                        return statearr_11151;
                                                                                      }();
                                                                                      if (inst_11073) {
                                                                                        var statearr_11152_11216 = state_11086__$1;
                                                                                        statearr_11152_11216[1] = 42;
                                                                                      } else {
                                                                                        var statearr_11153_11217 = state_11086__$1;
                                                                                        statearr_11153_11217[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_11087 === 16) {
                                                                                        var inst_10987 = state_11086[7];
                                                                                        var inst_10989 = cljs.core.chunked_seq_QMARK_.call(null, inst_10987);
                                                                                        var state_11086__$1 = state_11086;
                                                                                        if (inst_10989) {
                                                                                          var statearr_11154_11218 = state_11086__$1;
                                                                                          statearr_11154_11218[1] = 19;
                                                                                        } else {
                                                                                          var statearr_11155_11219 = state_11086__$1;
                                                                                          statearr_11155_11219[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_11087 === 38) {
                                                                                          var inst_11065 = state_11086[2];
                                                                                          var state_11086__$1 = state_11086;
                                                                                          var statearr_11156_11220 = state_11086__$1;
                                                                                          statearr_11156_11220[2] = inst_11065;
                                                                                          statearr_11156_11220[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_11087 === 30) {
                                                                                            var state_11086__$1 = state_11086;
                                                                                            var statearr_11157_11221 = state_11086__$1;
                                                                                            statearr_11157_11221[2] = null;
                                                                                            statearr_11157_11221[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_11087 === 10) {
                                                                                              var inst_10968 = state_11086[15];
                                                                                              var inst_10970 = state_11086[16];
                                                                                              var inst_10976 = cljs.core._nth.call(null, inst_10968, inst_10970);
                                                                                              var inst_10977 = cljs.core.nth.call(null, inst_10976, 0, null);
                                                                                              var inst_10978 = cljs.core.nth.call(null, inst_10976, 1, null);
                                                                                              var state_11086__$1 = function() {
                                                                                                var statearr_11158 = state_11086;
                                                                                                statearr_11158[26] = inst_10977;
                                                                                                return statearr_11158;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_10978)) {
                                                                                                var statearr_11159_11222 = state_11086__$1;
                                                                                                statearr_11159_11222[1] = 13;
                                                                                              } else {
                                                                                                var statearr_11160_11223 = state_11086__$1;
                                                                                                statearr_11160_11223[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_11087 === 18) {
                                                                                                var inst_11011 = state_11086[2];
                                                                                                var state_11086__$1 = state_11086;
                                                                                                var statearr_11161_11224 = state_11086__$1;
                                                                                                statearr_11161_11224[2] = inst_11011;
                                                                                                statearr_11161_11224[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_11087 === 42) {
                                                                                                  var state_11086__$1 = state_11086;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11086__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_11087 === 37) {
                                                                                                    var inst_11045 = state_11086[25];
                                                                                                    var inst_10958 = state_11086[12];
                                                                                                    var inst_11054 = state_11086[23];
                                                                                                    var inst_11054__$1 = cljs.core.first.call(null, inst_11045);
                                                                                                    var inst_11055 = cljs.core.async.put_BANG_.call(null, inst_11054__$1, inst_10958, done);
                                                                                                    var state_11086__$1 = function() {
                                                                                                      var statearr_11162 = state_11086;
                                                                                                      statearr_11162[23] = inst_11054__$1;
                                                                                                      return statearr_11162;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_11055)) {
                                                                                                      var statearr_11163_11225 = state_11086__$1;
                                                                                                      statearr_11163_11225[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_11164_11226 = state_11086__$1;
                                                                                                      statearr_11164_11226[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_11087 === 8) {
                                                                                                      var inst_10970 = state_11086[16];
                                                                                                      var inst_10969 = state_11086[17];
                                                                                                      var inst_10972 = inst_10970 < inst_10969;
                                                                                                      var inst_10973 = inst_10972;
                                                                                                      var state_11086__$1 = state_11086;
                                                                                                      if (cljs.core.truth_(inst_10973)) {
                                                                                                        var statearr_11165_11227 = state_11086__$1;
                                                                                                        statearr_11165_11227[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_11166_11228 = state_11086__$1;
                                                                                                        statearr_11166_11228[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7090__auto___11174, cs, m, dchan, dctr, done);
        return function(switch__7034__auto__, c__7090__auto___11174, cs, m, dchan, dctr, done) {
          return function() {
            var cljs$core$async$mult_$_state_machine__7035__auto__ = null;
            var cljs$core$async$mult_$_state_machine__7035__auto____0 = function() {
              var statearr_11170 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11170[0] = cljs$core$async$mult_$_state_machine__7035__auto__;
              statearr_11170[1] = 1;
              return statearr_11170;
            };
            var cljs$core$async$mult_$_state_machine__7035__auto____1 = function(state_11086) {
              while (true) {
                var ret_value__7036__auto__ = function() {
                  try {
                    while (true) {
                      var result__7037__auto__ = switch__7034__auto__.call(null, state_11086);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7037__auto__;
                      }
                      break;
                    }
                  } catch (e11171) {
                    if (e11171 instanceof Object) {
                      var ex__7038__auto__ = e11171;
                      var statearr_11172_11229 = state_11086;
                      statearr_11172_11229[5] = ex__7038__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11086);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11171;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11230 = state_11086;
                  state_11086 = G__11230;
                  continue;
                } else {
                  return ret_value__7036__auto__;
                }
                break;
              }
            };
            cljs$core$async$mult_$_state_machine__7035__auto__ = function(state_11086) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mult_$_state_machine__7035__auto____0.call(this);
                case 1:
                  return cljs$core$async$mult_$_state_machine__7035__auto____1.call(this, state_11086);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mult_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mult_$_state_machine__7035__auto____0;
            cljs$core$async$mult_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mult_$_state_machine__7035__auto____1;
            return cljs$core$async$mult_$_state_machine__7035__auto__;
          }();
        }(switch__7034__auto__, c__7090__auto___11174, cs, m, dchan, dctr, done);
      }();
      var state__7092__auto__ = function() {
        var statearr_11173 = f__7091__auto__.call(null);
        statearr_11173[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto___11174;
        return statearr_11173;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
    };
  }(c__7090__auto___11174, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var cljs$core$async$tap = null;
  var cljs$core$async$tap__2 = function(mult, ch) {
    return cljs$core$async$tap.call(null, mult, ch, true);
  };
  var cljs$core$async$tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  cljs$core$async$tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$tap__2.call(this, mult, ch);
      case 3:
        return cljs$core$async$tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$tap.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$tap__2;
  cljs$core$async$tap.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$tap__3;
  return cljs$core$async$tap;
}();
cljs.core.async.untap = function cljs$core$async$untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function cljs$core$async$untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj11232 = {};
  return obj11232;
}();
cljs.core.async.admix_STAR_ = function cljs$core$async$admix_STAR_(m, ch) {
  if (function() {
    var and__4110__auto__ = m;
    if (and__4110__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4758__auto__ = m == null ? null : m;
    return function() {
      var or__4122__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function cljs$core$async$unmix_STAR_(m, ch) {
  if (function() {
    var and__4110__auto__ = m;
    if (and__4110__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4758__auto__ = m == null ? null : m;
    return function() {
      var or__4122__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function cljs$core$async$unmix_all_STAR_(m) {
  if (function() {
    var and__4110__auto__ = m;
    if (and__4110__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4758__auto__ = m == null ? null : m;
    return function() {
      var or__4122__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function cljs$core$async$toggle_STAR_(m, state_map) {
  if (function() {
    var and__4110__auto__ = m;
    if (and__4110__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4758__auto__ = m == null ? null : m;
    return function() {
      var or__4122__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function cljs$core$async$solo_mode_STAR_(m, mode) {
  if (function() {
    var and__4110__auto__ = m;
    if (and__4110__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4758__auto__ = m == null ? null : m;
    return function() {
      var or__4122__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.ioc_alts_BANG_ = function() {
  var cljs$core$async$ioc_alts_BANG___delegate = function(state, cont_block, ports, p__11233) {
    var map__11238 = p__11233;
    var map__11238__$1 = cljs.core.seq_QMARK_.call(null, map__11238) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11238) : map__11238;
    var opts = map__11238__$1;
    var statearr_11239_11242 = state;
    statearr_11239_11242[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__11238, map__11238__$1, opts) {
      return function(val) {
        var statearr_11240_11243 = state;
        statearr_11240_11243[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__11238, map__11238__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_11241_11244 = state;
      statearr_11241_11244[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
    } else {
      return null;
    }
  };
  var cljs$core$async$ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__11233 = null;
    if (arguments.length > 3) {
      var G__11245__i = 0, G__11245__a = new Array(arguments.length - 3);
      while (G__11245__i < G__11245__a.length) {
        G__11245__a[G__11245__i] = arguments[G__11245__i + 3];
        ++G__11245__i;
      }
      p__11233 = new cljs.core.IndexedSeq(G__11245__a, 0);
    }
    return cljs$core$async$ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__11233);
  };
  cljs$core$async$ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  cljs$core$async$ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__11246) {
    var state = cljs.core.first(arglist__11246);
    arglist__11246 = cljs.core.next(arglist__11246);
    var cont_block = cljs.core.first(arglist__11246);
    arglist__11246 = cljs.core.next(arglist__11246);
    var ports = cljs.core.first(arglist__11246);
    var p__11233 = cljs.core.rest(arglist__11246);
    return cljs$core$async$ioc_alts_BANG___delegate(state, cont_block, ports, p__11233);
  };
  cljs$core$async$ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$async$ioc_alts_BANG___delegate;
  return cljs$core$async$ioc_alts_BANG_;
}();
cljs.core.async.mix = function cljs$core$async$mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t11366 !== "undefined") {
    } else {
      cljs.core.async.t11366 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta11367) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta11367 = meta11367;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t11366.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t11366.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11366.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11366.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11366.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11366.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11366.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t11366.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11366.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_11368) {
          var self__ = this;
          var _11368__$1 = this;
          return self__.meta11367;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11366.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_11368, meta11367__$1) {
          var self__ = this;
          var _11368__$1 = this;
          return new cljs.core.async.t11366(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta11367__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11366.cljs$lang$type = true;
      cljs.core.async.t11366.cljs$lang$ctorStr = "cljs.core.async/t11366";
      cljs.core.async.t11366.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
          return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t11366");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t11366 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function cljs$core$async$mix_$___GT_t11366(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta11367) {
          return new cljs.core.async.t11366(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta11367);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t11366(change, cljs$core$async$mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__7090__auto___11485 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7090__auto___11485, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__7091__auto__ = function() {
        var switch__7034__auto__ = function(c__7090__auto___11485, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_11438) {
            var state_val_11439 = state_11438[1];
            if (state_val_11439 === 7) {
              var inst_11382 = state_11438[7];
              var inst_11387 = cljs.core.apply.call(null, cljs.core.hash_map, inst_11382);
              var state_11438__$1 = state_11438;
              var statearr_11440_11486 = state_11438__$1;
              statearr_11440_11486[2] = inst_11387;
              statearr_11440_11486[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11439 === 20) {
                var inst_11397 = state_11438[8];
                var state_11438__$1 = state_11438;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11438__$1, 23, out, inst_11397);
              } else {
                if (state_val_11439 === 1) {
                  var inst_11372 = state_11438[9];
                  var inst_11372__$1 = calc_state.call(null);
                  var inst_11373 = cljs.core.seq_QMARK_.call(null, inst_11372__$1);
                  var state_11438__$1 = function() {
                    var statearr_11441 = state_11438;
                    statearr_11441[9] = inst_11372__$1;
                    return statearr_11441;
                  }();
                  if (inst_11373) {
                    var statearr_11442_11487 = state_11438__$1;
                    statearr_11442_11487[1] = 2;
                  } else {
                    var statearr_11443_11488 = state_11438__$1;
                    statearr_11443_11488[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11439 === 24) {
                    var inst_11390 = state_11438[10];
                    var inst_11382 = inst_11390;
                    var state_11438__$1 = function() {
                      var statearr_11444 = state_11438;
                      statearr_11444[7] = inst_11382;
                      return statearr_11444;
                    }();
                    var statearr_11445_11489 = state_11438__$1;
                    statearr_11445_11489[2] = null;
                    statearr_11445_11489[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11439 === 4) {
                      var inst_11372 = state_11438[9];
                      var inst_11378 = state_11438[2];
                      var inst_11379 = cljs.core.get.call(null, inst_11378, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_11380 = cljs.core.get.call(null, inst_11378, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_11381 = cljs.core.get.call(null, inst_11378, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_11382 = inst_11372;
                      var state_11438__$1 = function() {
                        var statearr_11446 = state_11438;
                        statearr_11446[7] = inst_11382;
                        statearr_11446[11] = inst_11379;
                        statearr_11446[12] = inst_11380;
                        statearr_11446[13] = inst_11381;
                        return statearr_11446;
                      }();
                      var statearr_11447_11490 = state_11438__$1;
                      statearr_11447_11490[2] = null;
                      statearr_11447_11490[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11439 === 15) {
                        var state_11438__$1 = state_11438;
                        var statearr_11448_11491 = state_11438__$1;
                        statearr_11448_11491[2] = null;
                        statearr_11448_11491[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11439 === 21) {
                          var inst_11390 = state_11438[10];
                          var inst_11382 = inst_11390;
                          var state_11438__$1 = function() {
                            var statearr_11449 = state_11438;
                            statearr_11449[7] = inst_11382;
                            return statearr_11449;
                          }();
                          var statearr_11450_11492 = state_11438__$1;
                          statearr_11450_11492[2] = null;
                          statearr_11450_11492[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11439 === 13) {
                            var inst_11434 = state_11438[2];
                            var state_11438__$1 = state_11438;
                            var statearr_11451_11493 = state_11438__$1;
                            statearr_11451_11493[2] = inst_11434;
                            statearr_11451_11493[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11439 === 22) {
                              var inst_11432 = state_11438[2];
                              var state_11438__$1 = state_11438;
                              var statearr_11452_11494 = state_11438__$1;
                              statearr_11452_11494[2] = inst_11432;
                              statearr_11452_11494[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11439 === 6) {
                                var inst_11436 = state_11438[2];
                                var state_11438__$1 = state_11438;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11438__$1, inst_11436);
                              } else {
                                if (state_val_11439 === 25) {
                                  var state_11438__$1 = state_11438;
                                  var statearr_11453_11495 = state_11438__$1;
                                  statearr_11453_11495[2] = null;
                                  statearr_11453_11495[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11439 === 17) {
                                    var inst_11412 = state_11438[14];
                                    var state_11438__$1 = state_11438;
                                    var statearr_11454_11496 = state_11438__$1;
                                    statearr_11454_11496[2] = inst_11412;
                                    statearr_11454_11496[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11439 === 3) {
                                      var inst_11372 = state_11438[9];
                                      var state_11438__$1 = state_11438;
                                      var statearr_11455_11497 = state_11438__$1;
                                      statearr_11455_11497[2] = inst_11372;
                                      statearr_11455_11497[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11439 === 12) {
                                        var inst_11398 = state_11438[15];
                                        var inst_11412 = state_11438[14];
                                        var inst_11393 = state_11438[16];
                                        var inst_11412__$1 = inst_11393.call(null, inst_11398);
                                        var state_11438__$1 = function() {
                                          var statearr_11456 = state_11438;
                                          statearr_11456[14] = inst_11412__$1;
                                          return statearr_11456;
                                        }();
                                        if (cljs.core.truth_(inst_11412__$1)) {
                                          var statearr_11457_11498 = state_11438__$1;
                                          statearr_11457_11498[1] = 17;
                                        } else {
                                          var statearr_11458_11499 = state_11438__$1;
                                          statearr_11458_11499[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_11439 === 2) {
                                          var inst_11372 = state_11438[9];
                                          var inst_11375 = cljs.core.apply.call(null, cljs.core.hash_map, inst_11372);
                                          var state_11438__$1 = state_11438;
                                          var statearr_11459_11500 = state_11438__$1;
                                          statearr_11459_11500[2] = inst_11375;
                                          statearr_11459_11500[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_11439 === 23) {
                                            var inst_11423 = state_11438[2];
                                            var state_11438__$1 = state_11438;
                                            if (cljs.core.truth_(inst_11423)) {
                                              var statearr_11460_11501 = state_11438__$1;
                                              statearr_11460_11501[1] = 24;
                                            } else {
                                              var statearr_11461_11502 = state_11438__$1;
                                              statearr_11461_11502[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_11439 === 19) {
                                              var inst_11420 = state_11438[2];
                                              var state_11438__$1 = state_11438;
                                              if (cljs.core.truth_(inst_11420)) {
                                                var statearr_11462_11503 = state_11438__$1;
                                                statearr_11462_11503[1] = 20;
                                              } else {
                                                var statearr_11463_11504 = state_11438__$1;
                                                statearr_11463_11504[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_11439 === 11) {
                                                var inst_11397 = state_11438[8];
                                                var inst_11403 = inst_11397 == null;
                                                var state_11438__$1 = state_11438;
                                                if (cljs.core.truth_(inst_11403)) {
                                                  var statearr_11464_11505 = state_11438__$1;
                                                  statearr_11464_11505[1] = 14;
                                                } else {
                                                  var statearr_11465_11506 = state_11438__$1;
                                                  statearr_11465_11506[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_11439 === 9) {
                                                  var inst_11390 = state_11438[10];
                                                  var inst_11390__$1 = state_11438[2];
                                                  var inst_11391 = cljs.core.get.call(null, inst_11390__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var inst_11392 = cljs.core.get.call(null, inst_11390__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_11393 = cljs.core.get.call(null, inst_11390__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var state_11438__$1 = function() {
                                                    var statearr_11466 = state_11438;
                                                    statearr_11466[17] = inst_11392;
                                                    statearr_11466[10] = inst_11390__$1;
                                                    statearr_11466[16] = inst_11393;
                                                    return statearr_11466;
                                                  }();
                                                  return cljs.core.async.ioc_alts_BANG_.call(null, state_11438__$1, 10, inst_11391);
                                                } else {
                                                  if (state_val_11439 === 5) {
                                                    var inst_11382 = state_11438[7];
                                                    var inst_11385 = cljs.core.seq_QMARK_.call(null, inst_11382);
                                                    var state_11438__$1 = state_11438;
                                                    if (inst_11385) {
                                                      var statearr_11467_11507 = state_11438__$1;
                                                      statearr_11467_11507[1] = 7;
                                                    } else {
                                                      var statearr_11468_11508 = state_11438__$1;
                                                      statearr_11468_11508[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_11439 === 14) {
                                                      var inst_11398 = state_11438[15];
                                                      var inst_11405 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_11398);
                                                      var state_11438__$1 = state_11438;
                                                      var statearr_11469_11509 = state_11438__$1;
                                                      statearr_11469_11509[2] = inst_11405;
                                                      statearr_11469_11509[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_11439 === 26) {
                                                        var inst_11428 = state_11438[2];
                                                        var state_11438__$1 = state_11438;
                                                        var statearr_11470_11510 = state_11438__$1;
                                                        statearr_11470_11510[2] = inst_11428;
                                                        statearr_11470_11510[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_11439 === 16) {
                                                          var inst_11408 = state_11438[2];
                                                          var inst_11409 = calc_state.call(null);
                                                          var inst_11382 = inst_11409;
                                                          var state_11438__$1 = function() {
                                                            var statearr_11471 = state_11438;
                                                            statearr_11471[7] = inst_11382;
                                                            statearr_11471[18] = inst_11408;
                                                            return statearr_11471;
                                                          }();
                                                          var statearr_11472_11511 = state_11438__$1;
                                                          statearr_11472_11511[2] = null;
                                                          statearr_11472_11511[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_11439 === 10) {
                                                            var inst_11398 = state_11438[15];
                                                            var inst_11397 = state_11438[8];
                                                            var inst_11396 = state_11438[2];
                                                            var inst_11397__$1 = cljs.core.nth.call(null, inst_11396, 0, null);
                                                            var inst_11398__$1 = cljs.core.nth.call(null, inst_11396, 1, null);
                                                            var inst_11399 = inst_11397__$1 == null;
                                                            var inst_11400 = cljs.core._EQ_.call(null, inst_11398__$1, change);
                                                            var inst_11401 = inst_11399 || inst_11400;
                                                            var state_11438__$1 = function() {
                                                              var statearr_11473 = state_11438;
                                                              statearr_11473[15] = inst_11398__$1;
                                                              statearr_11473[8] = inst_11397__$1;
                                                              return statearr_11473;
                                                            }();
                                                            if (cljs.core.truth_(inst_11401)) {
                                                              var statearr_11474_11512 = state_11438__$1;
                                                              statearr_11474_11512[1] = 11;
                                                            } else {
                                                              var statearr_11475_11513 = state_11438__$1;
                                                              statearr_11475_11513[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_11439 === 18) {
                                                              var inst_11392 = state_11438[17];
                                                              var inst_11398 = state_11438[15];
                                                              var inst_11393 = state_11438[16];
                                                              var inst_11415 = cljs.core.empty_QMARK_.call(null, inst_11393);
                                                              var inst_11416 = inst_11392.call(null, inst_11398);
                                                              var inst_11417 = cljs.core.not.call(null, inst_11416);
                                                              var inst_11418 = inst_11415 && inst_11417;
                                                              var state_11438__$1 = state_11438;
                                                              var statearr_11476_11514 = state_11438__$1;
                                                              statearr_11476_11514[2] = inst_11418;
                                                              statearr_11476_11514[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_11439 === 8) {
                                                                var inst_11382 = state_11438[7];
                                                                var state_11438__$1 = state_11438;
                                                                var statearr_11477_11515 = state_11438__$1;
                                                                statearr_11477_11515[2] = inst_11382;
                                                                statearr_11477_11515[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7090__auto___11485, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__7034__auto__, c__7090__auto___11485, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var cljs$core$async$mix_$_state_machine__7035__auto__ = null;
            var cljs$core$async$mix_$_state_machine__7035__auto____0 = function() {
              var statearr_11481 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11481[0] = cljs$core$async$mix_$_state_machine__7035__auto__;
              statearr_11481[1] = 1;
              return statearr_11481;
            };
            var cljs$core$async$mix_$_state_machine__7035__auto____1 = function(state_11438) {
              while (true) {
                var ret_value__7036__auto__ = function() {
                  try {
                    while (true) {
                      var result__7037__auto__ = switch__7034__auto__.call(null, state_11438);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7037__auto__;
                      }
                      break;
                    }
                  } catch (e11482) {
                    if (e11482 instanceof Object) {
                      var ex__7038__auto__ = e11482;
                      var statearr_11483_11516 = state_11438;
                      statearr_11483_11516[5] = ex__7038__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11438);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11482;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11517 = state_11438;
                  state_11438 = G__11517;
                  continue;
                } else {
                  return ret_value__7036__auto__;
                }
                break;
              }
            };
            cljs$core$async$mix_$_state_machine__7035__auto__ = function(state_11438) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mix_$_state_machine__7035__auto____0.call(this);
                case 1:
                  return cljs$core$async$mix_$_state_machine__7035__auto____1.call(this, state_11438);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mix_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mix_$_state_machine__7035__auto____0;
            cljs$core$async$mix_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mix_$_state_machine__7035__auto____1;
            return cljs$core$async$mix_$_state_machine__7035__auto__;
          }();
        }(switch__7034__auto__, c__7090__auto___11485, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__7092__auto__ = function() {
        var statearr_11484 = f__7091__auto__.call(null);
        statearr_11484[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto___11485;
        return statearr_11484;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
    };
  }(c__7090__auto___11485, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function cljs$core$async$admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function cljs$core$async$unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function cljs$core$async$unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function cljs$core$async$toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function cljs$core$async$solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj11519 = {};
  return obj11519;
}();
cljs.core.async.sub_STAR_ = function cljs$core$async$sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__4110__auto__ = p;
    if (and__4110__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4758__auto__ = p == null ? null : p;
    return function() {
      var or__4122__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function cljs$core$async$unsub_STAR_(p, v, ch) {
  if (function() {
    var and__4110__auto__ = p;
    if (and__4110__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4758__auto__ = p == null ? null : p;
    return function() {
      var or__4122__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var cljs$core$async$unsub_all_STAR_ = null;
  var cljs$core$async$unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__4110__auto__ = p;
      if (and__4110__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4758__auto__ = p == null ? null : p;
      return function() {
        var or__4122__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4758__auto__)];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var cljs$core$async$unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__4110__auto__ = p;
      if (and__4110__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4758__auto__ = p == null ? null : p;
      return function() {
        var or__4122__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4758__auto__)];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  cljs$core$async$unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$unsub_all_STAR___1.call(this, p);
      case 2:
        return cljs$core$async$unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$unsub_all_STAR___1;
  cljs$core$async$unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$unsub_all_STAR___2;
  return cljs$core$async$unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var cljs$core$async$pub = null;
  var cljs$core$async$pub__2 = function(ch, topic_fn) {
    return cljs$core$async$pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var cljs$core$async$pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__4122__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__4122__auto__, mults) {
            return function(p1__11520_SHARP_) {
              if (cljs.core.truth_(p1__11520_SHARP_.call(null, topic))) {
                return p1__11520_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__11520_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__4122__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t11643 !== "undefined") {
      } else {
        cljs.core.async.t11643 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta11644) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta11644 = meta11644;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t11643.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t11643.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$1, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t11643.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$1) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$1);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t11643.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t11643.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t11643.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t11643.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t11643.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_11645) {
            var self__ = this;
            var _11645__$1 = this;
            return self__.meta11644;
          };
        }(mults, ensure_mult);
        cljs.core.async.t11643.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_11645, meta11644__$1) {
            var self__ = this;
            var _11645__$1 = this;
            return new cljs.core.async.t11643(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta11644__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.t11643.cljs$lang$type = true;
        cljs.core.async.t11643.cljs$lang$ctorStr = "cljs.core.async/t11643";
        cljs.core.async.t11643.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
            return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t11643");
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t11643 = function(mults, ensure_mult) {
          return function cljs$core$async$pub_$___GT_t11643(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta11644) {
            return new cljs.core.async.t11643(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta11644);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t11643(ensure_mult, mults, buf_fn, topic_fn, ch, cljs$core$async$pub, cljs.core.PersistentArrayMap.EMPTY);
    }();
    var c__7090__auto___11765 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7090__auto___11765, mults, ensure_mult, p) {
      return function() {
        var f__7091__auto__ = function() {
          var switch__7034__auto__ = function(c__7090__auto___11765, mults, ensure_mult, p) {
            return function(state_11717) {
              var state_val_11718 = state_11717[1];
              if (state_val_11718 === 7) {
                var inst_11713 = state_11717[2];
                var state_11717__$1 = state_11717;
                var statearr_11719_11766 = state_11717__$1;
                statearr_11719_11766[2] = inst_11713;
                statearr_11719_11766[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11718 === 20) {
                  var state_11717__$1 = state_11717;
                  var statearr_11720_11767 = state_11717__$1;
                  statearr_11720_11767[2] = null;
                  statearr_11720_11767[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11718 === 1) {
                    var state_11717__$1 = state_11717;
                    var statearr_11721_11768 = state_11717__$1;
                    statearr_11721_11768[2] = null;
                    statearr_11721_11768[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11718 === 24) {
                      var inst_11696 = state_11717[7];
                      var inst_11705 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_11696);
                      var state_11717__$1 = state_11717;
                      var statearr_11722_11769 = state_11717__$1;
                      statearr_11722_11769[2] = inst_11705;
                      statearr_11722_11769[1] = 25;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11718 === 4) {
                        var inst_11648 = state_11717[8];
                        var inst_11648__$1 = state_11717[2];
                        var inst_11649 = inst_11648__$1 == null;
                        var state_11717__$1 = function() {
                          var statearr_11723 = state_11717;
                          statearr_11723[8] = inst_11648__$1;
                          return statearr_11723;
                        }();
                        if (cljs.core.truth_(inst_11649)) {
                          var statearr_11724_11770 = state_11717__$1;
                          statearr_11724_11770[1] = 5;
                        } else {
                          var statearr_11725_11771 = state_11717__$1;
                          statearr_11725_11771[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11718 === 15) {
                          var inst_11690 = state_11717[2];
                          var state_11717__$1 = state_11717;
                          var statearr_11726_11772 = state_11717__$1;
                          statearr_11726_11772[2] = inst_11690;
                          statearr_11726_11772[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11718 === 21) {
                            var inst_11710 = state_11717[2];
                            var state_11717__$1 = function() {
                              var statearr_11727 = state_11717;
                              statearr_11727[9] = inst_11710;
                              return statearr_11727;
                            }();
                            var statearr_11728_11773 = state_11717__$1;
                            statearr_11728_11773[2] = null;
                            statearr_11728_11773[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11718 === 13) {
                              var inst_11672 = state_11717[10];
                              var inst_11674 = cljs.core.chunked_seq_QMARK_.call(null, inst_11672);
                              var state_11717__$1 = state_11717;
                              if (inst_11674) {
                                var statearr_11729_11774 = state_11717__$1;
                                statearr_11729_11774[1] = 16;
                              } else {
                                var statearr_11730_11775 = state_11717__$1;
                                statearr_11730_11775[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11718 === 22) {
                                var inst_11702 = state_11717[2];
                                var state_11717__$1 = state_11717;
                                if (cljs.core.truth_(inst_11702)) {
                                  var statearr_11731_11776 = state_11717__$1;
                                  statearr_11731_11776[1] = 23;
                                } else {
                                  var statearr_11732_11777 = state_11717__$1;
                                  statearr_11732_11777[1] = 24;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11718 === 6) {
                                  var inst_11698 = state_11717[11];
                                  var inst_11648 = state_11717[8];
                                  var inst_11696 = state_11717[7];
                                  var inst_11696__$1 = topic_fn.call(null, inst_11648);
                                  var inst_11697 = cljs.core.deref.call(null, mults);
                                  var inst_11698__$1 = cljs.core.get.call(null, inst_11697, inst_11696__$1);
                                  var state_11717__$1 = function() {
                                    var statearr_11733 = state_11717;
                                    statearr_11733[11] = inst_11698__$1;
                                    statearr_11733[7] = inst_11696__$1;
                                    return statearr_11733;
                                  }();
                                  if (cljs.core.truth_(inst_11698__$1)) {
                                    var statearr_11734_11778 = state_11717__$1;
                                    statearr_11734_11778[1] = 19;
                                  } else {
                                    var statearr_11735_11779 = state_11717__$1;
                                    statearr_11735_11779[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11718 === 25) {
                                    var inst_11707 = state_11717[2];
                                    var state_11717__$1 = state_11717;
                                    var statearr_11736_11780 = state_11717__$1;
                                    statearr_11736_11780[2] = inst_11707;
                                    statearr_11736_11780[1] = 21;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11718 === 17) {
                                      var inst_11672 = state_11717[10];
                                      var inst_11681 = cljs.core.first.call(null, inst_11672);
                                      var inst_11682 = cljs.core.async.muxch_STAR_.call(null, inst_11681);
                                      var inst_11683 = cljs.core.async.close_BANG_.call(null, inst_11682);
                                      var inst_11684 = cljs.core.next.call(null, inst_11672);
                                      var inst_11658 = inst_11684;
                                      var inst_11659 = null;
                                      var inst_11660 = 0;
                                      var inst_11661 = 0;
                                      var state_11717__$1 = function() {
                                        var statearr_11737 = state_11717;
                                        statearr_11737[12] = inst_11660;
                                        statearr_11737[13] = inst_11658;
                                        statearr_11737[14] = inst_11683;
                                        statearr_11737[15] = inst_11659;
                                        statearr_11737[16] = inst_11661;
                                        return statearr_11737;
                                      }();
                                      var statearr_11738_11781 = state_11717__$1;
                                      statearr_11738_11781[2] = null;
                                      statearr_11738_11781[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11718 === 3) {
                                        var inst_11715 = state_11717[2];
                                        var state_11717__$1 = state_11717;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11717__$1, inst_11715);
                                      } else {
                                        if (state_val_11718 === 12) {
                                          var inst_11692 = state_11717[2];
                                          var state_11717__$1 = state_11717;
                                          var statearr_11739_11782 = state_11717__$1;
                                          statearr_11739_11782[2] = inst_11692;
                                          statearr_11739_11782[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_11718 === 2) {
                                            var state_11717__$1 = state_11717;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11717__$1, 4, ch);
                                          } else {
                                            if (state_val_11718 === 23) {
                                              var state_11717__$1 = state_11717;
                                              var statearr_11740_11783 = state_11717__$1;
                                              statearr_11740_11783[2] = null;
                                              statearr_11740_11783[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_11718 === 19) {
                                                var inst_11698 = state_11717[11];
                                                var inst_11648 = state_11717[8];
                                                var inst_11700 = cljs.core.async.muxch_STAR_.call(null, inst_11698);
                                                var state_11717__$1 = state_11717;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11717__$1, 22, inst_11700, inst_11648);
                                              } else {
                                                if (state_val_11718 === 11) {
                                                  var inst_11672 = state_11717[10];
                                                  var inst_11658 = state_11717[13];
                                                  var inst_11672__$1 = cljs.core.seq.call(null, inst_11658);
                                                  var state_11717__$1 = function() {
                                                    var statearr_11741 = state_11717;
                                                    statearr_11741[10] = inst_11672__$1;
                                                    return statearr_11741;
                                                  }();
                                                  if (inst_11672__$1) {
                                                    var statearr_11742_11784 = state_11717__$1;
                                                    statearr_11742_11784[1] = 13;
                                                  } else {
                                                    var statearr_11743_11785 = state_11717__$1;
                                                    statearr_11743_11785[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_11718 === 9) {
                                                    var inst_11694 = state_11717[2];
                                                    var state_11717__$1 = state_11717;
                                                    var statearr_11744_11786 = state_11717__$1;
                                                    statearr_11744_11786[2] = inst_11694;
                                                    statearr_11744_11786[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_11718 === 5) {
                                                      var inst_11655 = cljs.core.deref.call(null, mults);
                                                      var inst_11656 = cljs.core.vals.call(null, inst_11655);
                                                      var inst_11657 = cljs.core.seq.call(null, inst_11656);
                                                      var inst_11658 = inst_11657;
                                                      var inst_11659 = null;
                                                      var inst_11660 = 0;
                                                      var inst_11661 = 0;
                                                      var state_11717__$1 = function() {
                                                        var statearr_11745 = state_11717;
                                                        statearr_11745[12] = inst_11660;
                                                        statearr_11745[13] = inst_11658;
                                                        statearr_11745[15] = inst_11659;
                                                        statearr_11745[16] = inst_11661;
                                                        return statearr_11745;
                                                      }();
                                                      var statearr_11746_11787 = state_11717__$1;
                                                      statearr_11746_11787[2] = null;
                                                      statearr_11746_11787[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_11718 === 14) {
                                                        var state_11717__$1 = state_11717;
                                                        var statearr_11750_11788 = state_11717__$1;
                                                        statearr_11750_11788[2] = null;
                                                        statearr_11750_11788[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_11718 === 16) {
                                                          var inst_11672 = state_11717[10];
                                                          var inst_11676 = cljs.core.chunk_first.call(null, inst_11672);
                                                          var inst_11677 = cljs.core.chunk_rest.call(null, inst_11672);
                                                          var inst_11678 = cljs.core.count.call(null, inst_11676);
                                                          var inst_11658 = inst_11677;
                                                          var inst_11659 = inst_11676;
                                                          var inst_11660 = inst_11678;
                                                          var inst_11661 = 0;
                                                          var state_11717__$1 = function() {
                                                            var statearr_11751 = state_11717;
                                                            statearr_11751[12] = inst_11660;
                                                            statearr_11751[13] = inst_11658;
                                                            statearr_11751[15] = inst_11659;
                                                            statearr_11751[16] = inst_11661;
                                                            return statearr_11751;
                                                          }();
                                                          var statearr_11752_11789 = state_11717__$1;
                                                          statearr_11752_11789[2] = null;
                                                          statearr_11752_11789[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_11718 === 10) {
                                                            var inst_11660 = state_11717[12];
                                                            var inst_11658 = state_11717[13];
                                                            var inst_11659 = state_11717[15];
                                                            var inst_11661 = state_11717[16];
                                                            var inst_11666 = cljs.core._nth.call(null, inst_11659, inst_11661);
                                                            var inst_11667 = cljs.core.async.muxch_STAR_.call(null, inst_11666);
                                                            var inst_11668 = cljs.core.async.close_BANG_.call(null, inst_11667);
                                                            var inst_11669 = inst_11661 + 1;
                                                            var tmp11747 = inst_11660;
                                                            var tmp11748 = inst_11658;
                                                            var tmp11749 = inst_11659;
                                                            var inst_11658__$1 = tmp11748;
                                                            var inst_11659__$1 = tmp11749;
                                                            var inst_11660__$1 = tmp11747;
                                                            var inst_11661__$1 = inst_11669;
                                                            var state_11717__$1 = function() {
                                                              var statearr_11753 = state_11717;
                                                              statearr_11753[17] = inst_11668;
                                                              statearr_11753[12] = inst_11660__$1;
                                                              statearr_11753[13] = inst_11658__$1;
                                                              statearr_11753[15] = inst_11659__$1;
                                                              statearr_11753[16] = inst_11661__$1;
                                                              return statearr_11753;
                                                            }();
                                                            var statearr_11754_11790 = state_11717__$1;
                                                            statearr_11754_11790[2] = null;
                                                            statearr_11754_11790[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_11718 === 18) {
                                                              var inst_11687 = state_11717[2];
                                                              var state_11717__$1 = state_11717;
                                                              var statearr_11755_11791 = state_11717__$1;
                                                              statearr_11755_11791[2] = inst_11687;
                                                              statearr_11755_11791[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_11718 === 8) {
                                                                var inst_11660 = state_11717[12];
                                                                var inst_11661 = state_11717[16];
                                                                var inst_11663 = inst_11661 < inst_11660;
                                                                var inst_11664 = inst_11663;
                                                                var state_11717__$1 = state_11717;
                                                                if (cljs.core.truth_(inst_11664)) {
                                                                  var statearr_11756_11792 = state_11717__$1;
                                                                  statearr_11756_11792[1] = 10;
                                                                } else {
                                                                  var statearr_11757_11793 = state_11717__$1;
                                                                  statearr_11757_11793[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7090__auto___11765, mults, ensure_mult, p);
          return function(switch__7034__auto__, c__7090__auto___11765, mults, ensure_mult, p) {
            return function() {
              var cljs$core$async$pub_$_state_machine__7035__auto__ = null;
              var cljs$core$async$pub_$_state_machine__7035__auto____0 = function() {
                var statearr_11761 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_11761[0] = cljs$core$async$pub_$_state_machine__7035__auto__;
                statearr_11761[1] = 1;
                return statearr_11761;
              };
              var cljs$core$async$pub_$_state_machine__7035__auto____1 = function(state_11717) {
                while (true) {
                  var ret_value__7036__auto__ = function() {
                    try {
                      while (true) {
                        var result__7037__auto__ = switch__7034__auto__.call(null, state_11717);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7037__auto__;
                        }
                        break;
                      }
                    } catch (e11762) {
                      if (e11762 instanceof Object) {
                        var ex__7038__auto__ = e11762;
                        var statearr_11763_11794 = state_11717;
                        statearr_11763_11794[5] = ex__7038__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11717);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e11762;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__11795 = state_11717;
                    state_11717 = G__11795;
                    continue;
                  } else {
                    return ret_value__7036__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$pub_$_state_machine__7035__auto__ = function(state_11717) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$pub_$_state_machine__7035__auto____0.call(this);
                  case 1:
                    return cljs$core$async$pub_$_state_machine__7035__auto____1.call(this, state_11717);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$pub_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pub_$_state_machine__7035__auto____0;
              cljs$core$async$pub_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pub_$_state_machine__7035__auto____1;
              return cljs$core$async$pub_$_state_machine__7035__auto__;
            }();
          }(switch__7034__auto__, c__7090__auto___11765, mults, ensure_mult, p);
        }();
        var state__7092__auto__ = function() {
          var statearr_11764 = f__7091__auto__.call(null);
          statearr_11764[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto___11765;
          return statearr_11764;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
      };
    }(c__7090__auto___11765, mults, ensure_mult, p));
    return p;
  };
  cljs$core$async$pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$pub__2.call(this, ch, topic_fn);
      case 3:
        return cljs$core$async$pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$pub.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$pub__2;
  cljs$core$async$pub.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$pub__3;
  return cljs$core$async$pub;
}();
cljs.core.async.sub = function() {
  var cljs$core$async$sub = null;
  var cljs$core$async$sub__3 = function(p, topic, ch) {
    return cljs$core$async$sub.call(null, p, topic, ch, true);
  };
  var cljs$core$async$sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  cljs$core$async$sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return cljs$core$async$sub__3.call(this, p, topic, ch);
      case 4:
        return cljs$core$async$sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$sub.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$sub__3;
  cljs$core$async$sub.cljs$core$IFn$_invoke$arity$4 = cljs$core$async$sub__4;
  return cljs$core$async$sub;
}();
cljs.core.async.unsub = function cljs$core$async$unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var cljs$core$async$unsub_all = null;
  var cljs$core$async$unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var cljs$core$async$unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  cljs$core$async$unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$unsub_all__1.call(this, p);
      case 2:
        return cljs$core$async$unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$unsub_all.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$unsub_all__1;
  cljs$core$async$unsub_all.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$unsub_all__2;
  return cljs$core$async$unsub_all;
}();
cljs.core.async.map = function() {
  var cljs$core$async$map = null;
  var cljs$core$async$map__2 = function(f, chs) {
    return cljs$core$async$map.call(null, f, chs, null);
  };
  var cljs$core$async$map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__7090__auto___11932 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7090__auto___11932, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__7091__auto__ = function() {
          var switch__7034__auto__ = function(c__7090__auto___11932, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_11902) {
              var state_val_11903 = state_11902[1];
              if (state_val_11903 === 7) {
                var state_11902__$1 = state_11902;
                var statearr_11904_11933 = state_11902__$1;
                statearr_11904_11933[2] = null;
                statearr_11904_11933[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11903 === 1) {
                  var state_11902__$1 = state_11902;
                  var statearr_11905_11934 = state_11902__$1;
                  statearr_11905_11934[2] = null;
                  statearr_11905_11934[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11903 === 4) {
                    var inst_11866 = state_11902[7];
                    var inst_11868 = inst_11866 < cnt;
                    var state_11902__$1 = state_11902;
                    if (cljs.core.truth_(inst_11868)) {
                      var statearr_11906_11935 = state_11902__$1;
                      statearr_11906_11935[1] = 6;
                    } else {
                      var statearr_11907_11936 = state_11902__$1;
                      statearr_11907_11936[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11903 === 15) {
                      var inst_11898 = state_11902[2];
                      var state_11902__$1 = state_11902;
                      var statearr_11908_11937 = state_11902__$1;
                      statearr_11908_11937[2] = inst_11898;
                      statearr_11908_11937[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11903 === 13) {
                        var inst_11891 = cljs.core.async.close_BANG_.call(null, out);
                        var state_11902__$1 = state_11902;
                        var statearr_11909_11938 = state_11902__$1;
                        statearr_11909_11938[2] = inst_11891;
                        statearr_11909_11938[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11903 === 6) {
                          var state_11902__$1 = state_11902;
                          var statearr_11910_11939 = state_11902__$1;
                          statearr_11910_11939[2] = null;
                          statearr_11910_11939[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11903 === 3) {
                            var inst_11900 = state_11902[2];
                            var state_11902__$1 = state_11902;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11902__$1, inst_11900);
                          } else {
                            if (state_val_11903 === 12) {
                              var inst_11888 = state_11902[8];
                              var inst_11888__$1 = state_11902[2];
                              var inst_11889 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_11888__$1);
                              var state_11902__$1 = function() {
                                var statearr_11911 = state_11902;
                                statearr_11911[8] = inst_11888__$1;
                                return statearr_11911;
                              }();
                              if (cljs.core.truth_(inst_11889)) {
                                var statearr_11912_11940 = state_11902__$1;
                                statearr_11912_11940[1] = 13;
                              } else {
                                var statearr_11913_11941 = state_11902__$1;
                                statearr_11913_11941[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11903 === 2) {
                                var inst_11865 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_11866 = 0;
                                var state_11902__$1 = function() {
                                  var statearr_11914 = state_11902;
                                  statearr_11914[9] = inst_11865;
                                  statearr_11914[7] = inst_11866;
                                  return statearr_11914;
                                }();
                                var statearr_11915_11942 = state_11902__$1;
                                statearr_11915_11942[2] = null;
                                statearr_11915_11942[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11903 === 11) {
                                  var inst_11866 = state_11902[7];
                                  var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_11902, 10, Object, null, 9);
                                  var inst_11875 = chs__$1.call(null, inst_11866);
                                  var inst_11876 = done.call(null, inst_11866);
                                  var inst_11877 = cljs.core.async.take_BANG_.call(null, inst_11875, inst_11876);
                                  var state_11902__$1 = state_11902;
                                  var statearr_11916_11943 = state_11902__$1;
                                  statearr_11916_11943[2] = inst_11877;
                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11902__$1);
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11903 === 9) {
                                    var inst_11866 = state_11902[7];
                                    var inst_11879 = state_11902[2];
                                    var inst_11880 = inst_11866 + 1;
                                    var inst_11866__$1 = inst_11880;
                                    var state_11902__$1 = function() {
                                      var statearr_11917 = state_11902;
                                      statearr_11917[7] = inst_11866__$1;
                                      statearr_11917[10] = inst_11879;
                                      return statearr_11917;
                                    }();
                                    var statearr_11918_11944 = state_11902__$1;
                                    statearr_11918_11944[2] = null;
                                    statearr_11918_11944[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11903 === 5) {
                                      var inst_11886 = state_11902[2];
                                      var state_11902__$1 = function() {
                                        var statearr_11919 = state_11902;
                                        statearr_11919[11] = inst_11886;
                                        return statearr_11919;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11902__$1, 12, dchan);
                                    } else {
                                      if (state_val_11903 === 14) {
                                        var inst_11888 = state_11902[8];
                                        var inst_11893 = cljs.core.apply.call(null, f, inst_11888);
                                        var state_11902__$1 = state_11902;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11902__$1, 16, out, inst_11893);
                                      } else {
                                        if (state_val_11903 === 16) {
                                          var inst_11895 = state_11902[2];
                                          var state_11902__$1 = function() {
                                            var statearr_11920 = state_11902;
                                            statearr_11920[12] = inst_11895;
                                            return statearr_11920;
                                          }();
                                          var statearr_11921_11945 = state_11902__$1;
                                          statearr_11921_11945[2] = null;
                                          statearr_11921_11945[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_11903 === 10) {
                                            var inst_11870 = state_11902[2];
                                            var inst_11871 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_11902__$1 = function() {
                                              var statearr_11922 = state_11902;
                                              statearr_11922[13] = inst_11870;
                                              return statearr_11922;
                                            }();
                                            var statearr_11923_11946 = state_11902__$1;
                                            statearr_11923_11946[2] = inst_11871;
                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11902__$1);
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_11903 === 8) {
                                              var inst_11884 = state_11902[2];
                                              var state_11902__$1 = state_11902;
                                              var statearr_11924_11947 = state_11902__$1;
                                              statearr_11924_11947[2] = inst_11884;
                                              statearr_11924_11947[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7090__auto___11932, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__7034__auto__, c__7090__auto___11932, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var cljs$core$async$map_$_state_machine__7035__auto__ = null;
              var cljs$core$async$map_$_state_machine__7035__auto____0 = function() {
                var statearr_11928 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_11928[0] = cljs$core$async$map_$_state_machine__7035__auto__;
                statearr_11928[1] = 1;
                return statearr_11928;
              };
              var cljs$core$async$map_$_state_machine__7035__auto____1 = function(state_11902) {
                while (true) {
                  var ret_value__7036__auto__ = function() {
                    try {
                      while (true) {
                        var result__7037__auto__ = switch__7034__auto__.call(null, state_11902);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7037__auto__;
                        }
                        break;
                      }
                    } catch (e11929) {
                      if (e11929 instanceof Object) {
                        var ex__7038__auto__ = e11929;
                        var statearr_11930_11948 = state_11902;
                        statearr_11930_11948[5] = ex__7038__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11902);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e11929;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__11949 = state_11902;
                    state_11902 = G__11949;
                    continue;
                  } else {
                    return ret_value__7036__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$map_$_state_machine__7035__auto__ = function(state_11902) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$map_$_state_machine__7035__auto____0.call(this);
                  case 1:
                    return cljs$core$async$map_$_state_machine__7035__auto____1.call(this, state_11902);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$map_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$map_$_state_machine__7035__auto____0;
              cljs$core$async$map_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$map_$_state_machine__7035__auto____1;
              return cljs$core$async$map_$_state_machine__7035__auto__;
            }();
          }(switch__7034__auto__, c__7090__auto___11932, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__7092__auto__ = function() {
          var statearr_11931 = f__7091__auto__.call(null);
          statearr_11931[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto___11932;
          return statearr_11931;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
      };
    }(c__7090__auto___11932, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  cljs$core$async$map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$map__2.call(this, f, chs);
      case 3:
        return cljs$core$async$map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$map.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$map__2;
  cljs$core$async$map.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$map__3;
  return cljs$core$async$map;
}();
cljs.core.async.merge = function() {
  var cljs$core$async$merge = null;
  var cljs$core$async$merge__1 = function(chs) {
    return cljs$core$async$merge.call(null, chs, null);
  };
  var cljs$core$async$merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__7090__auto___12057 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7090__auto___12057, out) {
      return function() {
        var f__7091__auto__ = function() {
          var switch__7034__auto__ = function(c__7090__auto___12057, out) {
            return function(state_12033) {
              var state_val_12034 = state_12033[1];
              if (state_val_12034 === 7) {
                var inst_12013 = state_12033[7];
                var inst_12012 = state_12033[8];
                var inst_12012__$1 = state_12033[2];
                var inst_12013__$1 = cljs.core.nth.call(null, inst_12012__$1, 0, null);
                var inst_12014 = cljs.core.nth.call(null, inst_12012__$1, 1, null);
                var inst_12015 = inst_12013__$1 == null;
                var state_12033__$1 = function() {
                  var statearr_12035 = state_12033;
                  statearr_12035[7] = inst_12013__$1;
                  statearr_12035[9] = inst_12014;
                  statearr_12035[8] = inst_12012__$1;
                  return statearr_12035;
                }();
                if (cljs.core.truth_(inst_12015)) {
                  var statearr_12036_12058 = state_12033__$1;
                  statearr_12036_12058[1] = 8;
                } else {
                  var statearr_12037_12059 = state_12033__$1;
                  statearr_12037_12059[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12034 === 1) {
                  var inst_12004 = cljs.core.vec.call(null, chs);
                  var inst_12005 = inst_12004;
                  var state_12033__$1 = function() {
                    var statearr_12038 = state_12033;
                    statearr_12038[10] = inst_12005;
                    return statearr_12038;
                  }();
                  var statearr_12039_12060 = state_12033__$1;
                  statearr_12039_12060[2] = null;
                  statearr_12039_12060[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12034 === 4) {
                    var inst_12005 = state_12033[10];
                    var state_12033__$1 = state_12033;
                    return cljs.core.async.ioc_alts_BANG_.call(null, state_12033__$1, 7, inst_12005);
                  } else {
                    if (state_val_12034 === 6) {
                      var inst_12029 = state_12033[2];
                      var state_12033__$1 = state_12033;
                      var statearr_12040_12061 = state_12033__$1;
                      statearr_12040_12061[2] = inst_12029;
                      statearr_12040_12061[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12034 === 3) {
                        var inst_12031 = state_12033[2];
                        var state_12033__$1 = state_12033;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12033__$1, inst_12031);
                      } else {
                        if (state_val_12034 === 2) {
                          var inst_12005 = state_12033[10];
                          var inst_12007 = cljs.core.count.call(null, inst_12005);
                          var inst_12008 = inst_12007 > 0;
                          var state_12033__$1 = state_12033;
                          if (cljs.core.truth_(inst_12008)) {
                            var statearr_12042_12062 = state_12033__$1;
                            statearr_12042_12062[1] = 4;
                          } else {
                            var statearr_12043_12063 = state_12033__$1;
                            statearr_12043_12063[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12034 === 11) {
                            var inst_12005 = state_12033[10];
                            var inst_12022 = state_12033[2];
                            var tmp12041 = inst_12005;
                            var inst_12005__$1 = tmp12041;
                            var state_12033__$1 = function() {
                              var statearr_12044 = state_12033;
                              statearr_12044[11] = inst_12022;
                              statearr_12044[10] = inst_12005__$1;
                              return statearr_12044;
                            }();
                            var statearr_12045_12064 = state_12033__$1;
                            statearr_12045_12064[2] = null;
                            statearr_12045_12064[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12034 === 9) {
                              var inst_12013 = state_12033[7];
                              var state_12033__$1 = state_12033;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12033__$1, 11, out, inst_12013);
                            } else {
                              if (state_val_12034 === 5) {
                                var inst_12027 = cljs.core.async.close_BANG_.call(null, out);
                                var state_12033__$1 = state_12033;
                                var statearr_12046_12065 = state_12033__$1;
                                statearr_12046_12065[2] = inst_12027;
                                statearr_12046_12065[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12034 === 10) {
                                  var inst_12025 = state_12033[2];
                                  var state_12033__$1 = state_12033;
                                  var statearr_12047_12066 = state_12033__$1;
                                  statearr_12047_12066[2] = inst_12025;
                                  statearr_12047_12066[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12034 === 8) {
                                    var inst_12013 = state_12033[7];
                                    var inst_12014 = state_12033[9];
                                    var inst_12012 = state_12033[8];
                                    var inst_12005 = state_12033[10];
                                    var inst_12017 = function() {
                                      var c = inst_12014;
                                      var v = inst_12013;
                                      var vec__12010 = inst_12012;
                                      var cs = inst_12005;
                                      return function(c, v, vec__12010, cs, inst_12013, inst_12014, inst_12012, inst_12005, state_val_12034, c__7090__auto___12057, out) {
                                        return function(p1__11950_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__11950_SHARP_);
                                        };
                                      }(c, v, vec__12010, cs, inst_12013, inst_12014, inst_12012, inst_12005, state_val_12034, c__7090__auto___12057, out);
                                    }();
                                    var inst_12018 = cljs.core.filterv.call(null, inst_12017, inst_12005);
                                    var inst_12005__$1 = inst_12018;
                                    var state_12033__$1 = function() {
                                      var statearr_12048 = state_12033;
                                      statearr_12048[10] = inst_12005__$1;
                                      return statearr_12048;
                                    }();
                                    var statearr_12049_12067 = state_12033__$1;
                                    statearr_12049_12067[2] = null;
                                    statearr_12049_12067[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7090__auto___12057, out);
          return function(switch__7034__auto__, c__7090__auto___12057, out) {
            return function() {
              var cljs$core$async$merge_$_state_machine__7035__auto__ = null;
              var cljs$core$async$merge_$_state_machine__7035__auto____0 = function() {
                var statearr_12053 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_12053[0] = cljs$core$async$merge_$_state_machine__7035__auto__;
                statearr_12053[1] = 1;
                return statearr_12053;
              };
              var cljs$core$async$merge_$_state_machine__7035__auto____1 = function(state_12033) {
                while (true) {
                  var ret_value__7036__auto__ = function() {
                    try {
                      while (true) {
                        var result__7037__auto__ = switch__7034__auto__.call(null, state_12033);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7037__auto__;
                        }
                        break;
                      }
                    } catch (e12054) {
                      if (e12054 instanceof Object) {
                        var ex__7038__auto__ = e12054;
                        var statearr_12055_12068 = state_12033;
                        statearr_12055_12068[5] = ex__7038__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12033);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e12054;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12069 = state_12033;
                    state_12033 = G__12069;
                    continue;
                  } else {
                    return ret_value__7036__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$merge_$_state_machine__7035__auto__ = function(state_12033) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$merge_$_state_machine__7035__auto____0.call(this);
                  case 1:
                    return cljs$core$async$merge_$_state_machine__7035__auto____1.call(this, state_12033);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$merge_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$merge_$_state_machine__7035__auto____0;
              cljs$core$async$merge_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$merge_$_state_machine__7035__auto____1;
              return cljs$core$async$merge_$_state_machine__7035__auto__;
            }();
          }(switch__7034__auto__, c__7090__auto___12057, out);
        }();
        var state__7092__auto__ = function() {
          var statearr_12056 = f__7091__auto__.call(null);
          statearr_12056[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto___12057;
          return statearr_12056;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
      };
    }(c__7090__auto___12057, out));
    return out;
  };
  cljs$core$async$merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$merge__1.call(this, chs);
      case 2:
        return cljs$core$async$merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$merge.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$merge__1;
  cljs$core$async$merge.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$merge__2;
  return cljs$core$async$merge;
}();
cljs.core.async.into = function cljs$core$async$into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var cljs$core$async$take = null;
  var cljs$core$async$take__2 = function(n, ch) {
    return cljs$core$async$take.call(null, n, ch, null);
  };
  var cljs$core$async$take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__7090__auto___12162 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7090__auto___12162, out) {
      return function() {
        var f__7091__auto__ = function() {
          var switch__7034__auto__ = function(c__7090__auto___12162, out) {
            return function(state_12139) {
              var state_val_12140 = state_12139[1];
              if (state_val_12140 === 7) {
                var inst_12121 = state_12139[7];
                var inst_12121__$1 = state_12139[2];
                var inst_12122 = inst_12121__$1 == null;
                var inst_12123 = cljs.core.not.call(null, inst_12122);
                var state_12139__$1 = function() {
                  var statearr_12141 = state_12139;
                  statearr_12141[7] = inst_12121__$1;
                  return statearr_12141;
                }();
                if (inst_12123) {
                  var statearr_12142_12163 = state_12139__$1;
                  statearr_12142_12163[1] = 8;
                } else {
                  var statearr_12143_12164 = state_12139__$1;
                  statearr_12143_12164[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12140 === 1) {
                  var inst_12116 = 0;
                  var state_12139__$1 = function() {
                    var statearr_12144 = state_12139;
                    statearr_12144[8] = inst_12116;
                    return statearr_12144;
                  }();
                  var statearr_12145_12165 = state_12139__$1;
                  statearr_12145_12165[2] = null;
                  statearr_12145_12165[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12140 === 4) {
                    var state_12139__$1 = state_12139;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12139__$1, 7, ch);
                  } else {
                    if (state_val_12140 === 6) {
                      var inst_12134 = state_12139[2];
                      var state_12139__$1 = state_12139;
                      var statearr_12146_12166 = state_12139__$1;
                      statearr_12146_12166[2] = inst_12134;
                      statearr_12146_12166[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12140 === 3) {
                        var inst_12136 = state_12139[2];
                        var inst_12137 = cljs.core.async.close_BANG_.call(null, out);
                        var state_12139__$1 = function() {
                          var statearr_12147 = state_12139;
                          statearr_12147[9] = inst_12136;
                          return statearr_12147;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12139__$1, inst_12137);
                      } else {
                        if (state_val_12140 === 2) {
                          var inst_12116 = state_12139[8];
                          var inst_12118 = inst_12116 < n;
                          var state_12139__$1 = state_12139;
                          if (cljs.core.truth_(inst_12118)) {
                            var statearr_12148_12167 = state_12139__$1;
                            statearr_12148_12167[1] = 4;
                          } else {
                            var statearr_12149_12168 = state_12139__$1;
                            statearr_12149_12168[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12140 === 11) {
                            var inst_12116 = state_12139[8];
                            var inst_12126 = state_12139[2];
                            var inst_12127 = inst_12116 + 1;
                            var inst_12116__$1 = inst_12127;
                            var state_12139__$1 = function() {
                              var statearr_12150 = state_12139;
                              statearr_12150[8] = inst_12116__$1;
                              statearr_12150[10] = inst_12126;
                              return statearr_12150;
                            }();
                            var statearr_12151_12169 = state_12139__$1;
                            statearr_12151_12169[2] = null;
                            statearr_12151_12169[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12140 === 9) {
                              var state_12139__$1 = state_12139;
                              var statearr_12152_12170 = state_12139__$1;
                              statearr_12152_12170[2] = null;
                              statearr_12152_12170[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12140 === 5) {
                                var state_12139__$1 = state_12139;
                                var statearr_12153_12171 = state_12139__$1;
                                statearr_12153_12171[2] = null;
                                statearr_12153_12171[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12140 === 10) {
                                  var inst_12131 = state_12139[2];
                                  var state_12139__$1 = state_12139;
                                  var statearr_12154_12172 = state_12139__$1;
                                  statearr_12154_12172[2] = inst_12131;
                                  statearr_12154_12172[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12140 === 8) {
                                    var inst_12121 = state_12139[7];
                                    var state_12139__$1 = state_12139;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12139__$1, 11, out, inst_12121);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7090__auto___12162, out);
          return function(switch__7034__auto__, c__7090__auto___12162, out) {
            return function() {
              var cljs$core$async$take_$_state_machine__7035__auto__ = null;
              var cljs$core$async$take_$_state_machine__7035__auto____0 = function() {
                var statearr_12158 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_12158[0] = cljs$core$async$take_$_state_machine__7035__auto__;
                statearr_12158[1] = 1;
                return statearr_12158;
              };
              var cljs$core$async$take_$_state_machine__7035__auto____1 = function(state_12139) {
                while (true) {
                  var ret_value__7036__auto__ = function() {
                    try {
                      while (true) {
                        var result__7037__auto__ = switch__7034__auto__.call(null, state_12139);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7037__auto__;
                        }
                        break;
                      }
                    } catch (e12159) {
                      if (e12159 instanceof Object) {
                        var ex__7038__auto__ = e12159;
                        var statearr_12160_12173 = state_12139;
                        statearr_12160_12173[5] = ex__7038__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12139);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e12159;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12174 = state_12139;
                    state_12139 = G__12174;
                    continue;
                  } else {
                    return ret_value__7036__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$take_$_state_machine__7035__auto__ = function(state_12139) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$take_$_state_machine__7035__auto____0.call(this);
                  case 1:
                    return cljs$core$async$take_$_state_machine__7035__auto____1.call(this, state_12139);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$take_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$take_$_state_machine__7035__auto____0;
              cljs$core$async$take_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$take_$_state_machine__7035__auto____1;
              return cljs$core$async$take_$_state_machine__7035__auto__;
            }();
          }(switch__7034__auto__, c__7090__auto___12162, out);
        }();
        var state__7092__auto__ = function() {
          var statearr_12161 = f__7091__auto__.call(null);
          statearr_12161[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto___12162;
          return statearr_12161;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
      };
    }(c__7090__auto___12162, out));
    return out;
  };
  cljs$core$async$take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$take__2.call(this, n, ch);
      case 3:
        return cljs$core$async$take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$take.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$take__2;
  cljs$core$async$take.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$take__3;
  return cljs$core$async$take;
}();
cljs.core.async.map_LT_ = function cljs$core$async$map_LT_(f, ch) {
  if (typeof cljs.core.async.t12182 !== "undefined") {
  } else {
    cljs.core.async.t12182 = function(ch, f, map_LT_, meta12183) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta12183 = meta12183;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12182.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t12182.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t12182.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t12182.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t12185 !== "undefined") {
        } else {
          cljs.core.async.t12185 = function(fn1, _, meta12183, map_LT_, f, ch, meta12186) {
            this.fn1 = fn1;
            this._ = _;
            this.meta12183 = meta12183;
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta12186 = meta12186;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t12185.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t12185.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t12185.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__12175_SHARP_) {
                  return f1.call(null, p1__12175_SHARP_ == null ? null : self__.f.call(null, p1__12175_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t12185.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_12187) {
              var self__ = this;
              var _12187__$1 = this;
              return self__.meta12186;
            };
          }(___$1);
          cljs.core.async.t12185.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_12187, meta12186__$1) {
              var self__ = this;
              var _12187__$1 = this;
              return new cljs.core.async.t12185(self__.fn1, self__._, self__.meta12183, self__.map_LT_, self__.f, self__.ch, meta12186__$1);
            };
          }(___$1);
          cljs.core.async.t12185.cljs$lang$type = true;
          cljs.core.async.t12185.cljs$lang$ctorStr = "cljs.core.async/t12185";
          cljs.core.async.t12185.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
              return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t12185");
            };
          }(___$1);
          cljs.core.async.__GT_t12185 = function(___$1) {
            return function cljs$core$async$map_LT__$___GT_t12185(fn1__$1, ___$2, meta12183__$1, map_LT___$1, f__$1, ch__$1, meta12186) {
              return new cljs.core.async.t12185(fn1__$1, ___$2, meta12183__$1, map_LT___$1, f__$1, ch__$1, meta12186);
            };
          }(___$1);
        }
        return new cljs.core.async.t12185(fn1, ___$1, self__.meta12183, self__.map_LT_, self__.f, self__.ch, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__4110__auto__ = ret;
        if (cljs.core.truth_(and__4110__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__4110__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t12182.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t12182.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t12182.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t12182.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12184) {
      var self__ = this;
      var _12184__$1 = this;
      return self__.meta12183;
    };
    cljs.core.async.t12182.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12184, meta12183__$1) {
      var self__ = this;
      var _12184__$1 = this;
      return new cljs.core.async.t12182(self__.ch, self__.f, self__.map_LT_, meta12183__$1);
    };
    cljs.core.async.t12182.cljs$lang$type = true;
    cljs.core.async.t12182.cljs$lang$ctorStr = "cljs.core.async/t12182";
    cljs.core.async.t12182.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t12182");
    };
    cljs.core.async.__GT_t12182 = function cljs$core$async$map_LT__$___GT_t12182(ch__$1, f__$1, map_LT___$1, meta12183) {
      return new cljs.core.async.t12182(ch__$1, f__$1, map_LT___$1, meta12183);
    };
  }
  return new cljs.core.async.t12182(ch, f, cljs$core$async$map_LT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function cljs$core$async$map_GT_(f, ch) {
  if (typeof cljs.core.async.t12191 !== "undefined") {
  } else {
    cljs.core.async.t12191 = function(ch, f, map_GT_, meta12192) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta12192 = meta12192;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12191.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t12191.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t12191.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t12191.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t12191.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t12191.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t12191.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12193) {
      var self__ = this;
      var _12193__$1 = this;
      return self__.meta12192;
    };
    cljs.core.async.t12191.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12193, meta12192__$1) {
      var self__ = this;
      var _12193__$1 = this;
      return new cljs.core.async.t12191(self__.ch, self__.f, self__.map_GT_, meta12192__$1);
    };
    cljs.core.async.t12191.cljs$lang$type = true;
    cljs.core.async.t12191.cljs$lang$ctorStr = "cljs.core.async/t12191";
    cljs.core.async.t12191.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t12191");
    };
    cljs.core.async.__GT_t12191 = function cljs$core$async$map_GT__$___GT_t12191(ch__$1, f__$1, map_GT___$1, meta12192) {
      return new cljs.core.async.t12191(ch__$1, f__$1, map_GT___$1, meta12192);
    };
  }
  return new cljs.core.async.t12191(ch, f, cljs$core$async$map_GT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function cljs$core$async$filter_GT_(p, ch) {
  if (typeof cljs.core.async.t12197 !== "undefined") {
  } else {
    cljs.core.async.t12197 = function(ch, p, filter_GT_, meta12198) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta12198 = meta12198;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t12197.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t12197.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t12197.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t12197.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t12197.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t12197.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t12197.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t12197.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12199) {
      var self__ = this;
      var _12199__$1 = this;
      return self__.meta12198;
    };
    cljs.core.async.t12197.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12199, meta12198__$1) {
      var self__ = this;
      var _12199__$1 = this;
      return new cljs.core.async.t12197(self__.ch, self__.p, self__.filter_GT_, meta12198__$1);
    };
    cljs.core.async.t12197.cljs$lang$type = true;
    cljs.core.async.t12197.cljs$lang$ctorStr = "cljs.core.async/t12197";
    cljs.core.async.t12197.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t12197");
    };
    cljs.core.async.__GT_t12197 = function cljs$core$async$filter_GT__$___GT_t12197(ch__$1, p__$1, filter_GT___$1, meta12198) {
      return new cljs.core.async.t12197(ch__$1, p__$1, filter_GT___$1, meta12198);
    };
  }
  return new cljs.core.async.t12197(ch, p, cljs$core$async$filter_GT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function cljs$core$async$remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var cljs$core$async$filter_LT_ = null;
  var cljs$core$async$filter_LT___2 = function(p, ch) {
    return cljs$core$async$filter_LT_.call(null, p, ch, null);
  };
  var cljs$core$async$filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__7090__auto___12282 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7090__auto___12282, out) {
      return function() {
        var f__7091__auto__ = function() {
          var switch__7034__auto__ = function(c__7090__auto___12282, out) {
            return function(state_12261) {
              var state_val_12262 = state_12261[1];
              if (state_val_12262 === 7) {
                var inst_12257 = state_12261[2];
                var state_12261__$1 = state_12261;
                var statearr_12263_12283 = state_12261__$1;
                statearr_12263_12283[2] = inst_12257;
                statearr_12263_12283[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12262 === 1) {
                  var state_12261__$1 = state_12261;
                  var statearr_12264_12284 = state_12261__$1;
                  statearr_12264_12284[2] = null;
                  statearr_12264_12284[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12262 === 4) {
                    var inst_12243 = state_12261[7];
                    var inst_12243__$1 = state_12261[2];
                    var inst_12244 = inst_12243__$1 == null;
                    var state_12261__$1 = function() {
                      var statearr_12265 = state_12261;
                      statearr_12265[7] = inst_12243__$1;
                      return statearr_12265;
                    }();
                    if (cljs.core.truth_(inst_12244)) {
                      var statearr_12266_12285 = state_12261__$1;
                      statearr_12266_12285[1] = 5;
                    } else {
                      var statearr_12267_12286 = state_12261__$1;
                      statearr_12267_12286[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12262 === 6) {
                      var inst_12243 = state_12261[7];
                      var inst_12248 = p.call(null, inst_12243);
                      var state_12261__$1 = state_12261;
                      if (cljs.core.truth_(inst_12248)) {
                        var statearr_12268_12287 = state_12261__$1;
                        statearr_12268_12287[1] = 8;
                      } else {
                        var statearr_12269_12288 = state_12261__$1;
                        statearr_12269_12288[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12262 === 3) {
                        var inst_12259 = state_12261[2];
                        var state_12261__$1 = state_12261;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12261__$1, inst_12259);
                      } else {
                        if (state_val_12262 === 2) {
                          var state_12261__$1 = state_12261;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12261__$1, 4, ch);
                        } else {
                          if (state_val_12262 === 11) {
                            var inst_12251 = state_12261[2];
                            var state_12261__$1 = state_12261;
                            var statearr_12270_12289 = state_12261__$1;
                            statearr_12270_12289[2] = inst_12251;
                            statearr_12270_12289[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12262 === 9) {
                              var state_12261__$1 = state_12261;
                              var statearr_12271_12290 = state_12261__$1;
                              statearr_12271_12290[2] = null;
                              statearr_12271_12290[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12262 === 5) {
                                var inst_12246 = cljs.core.async.close_BANG_.call(null, out);
                                var state_12261__$1 = state_12261;
                                var statearr_12272_12291 = state_12261__$1;
                                statearr_12272_12291[2] = inst_12246;
                                statearr_12272_12291[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12262 === 10) {
                                  var inst_12254 = state_12261[2];
                                  var state_12261__$1 = function() {
                                    var statearr_12273 = state_12261;
                                    statearr_12273[8] = inst_12254;
                                    return statearr_12273;
                                  }();
                                  var statearr_12274_12292 = state_12261__$1;
                                  statearr_12274_12292[2] = null;
                                  statearr_12274_12292[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12262 === 8) {
                                    var inst_12243 = state_12261[7];
                                    var state_12261__$1 = state_12261;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12261__$1, 11, out, inst_12243);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7090__auto___12282, out);
          return function(switch__7034__auto__, c__7090__auto___12282, out) {
            return function() {
              var cljs$core$async$filter_LT__$_state_machine__7035__auto__ = null;
              var cljs$core$async$filter_LT__$_state_machine__7035__auto____0 = function() {
                var statearr_12278 = [null, null, null, null, null, null, null, null, null];
                statearr_12278[0] = cljs$core$async$filter_LT__$_state_machine__7035__auto__;
                statearr_12278[1] = 1;
                return statearr_12278;
              };
              var cljs$core$async$filter_LT__$_state_machine__7035__auto____1 = function(state_12261) {
                while (true) {
                  var ret_value__7036__auto__ = function() {
                    try {
                      while (true) {
                        var result__7037__auto__ = switch__7034__auto__.call(null, state_12261);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7037__auto__;
                        }
                        break;
                      }
                    } catch (e12279) {
                      if (e12279 instanceof Object) {
                        var ex__7038__auto__ = e12279;
                        var statearr_12280_12293 = state_12261;
                        statearr_12280_12293[5] = ex__7038__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12261);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e12279;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12294 = state_12261;
                    state_12261 = G__12294;
                    continue;
                  } else {
                    return ret_value__7036__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$filter_LT__$_state_machine__7035__auto__ = function(state_12261) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$filter_LT__$_state_machine__7035__auto____0.call(this);
                  case 1:
                    return cljs$core$async$filter_LT__$_state_machine__7035__auto____1.call(this, state_12261);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$filter_LT__$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$filter_LT__$_state_machine__7035__auto____0;
              cljs$core$async$filter_LT__$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$filter_LT__$_state_machine__7035__auto____1;
              return cljs$core$async$filter_LT__$_state_machine__7035__auto__;
            }();
          }(switch__7034__auto__, c__7090__auto___12282, out);
        }();
        var state__7092__auto__ = function() {
          var statearr_12281 = f__7091__auto__.call(null);
          statearr_12281[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto___12282;
          return statearr_12281;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
      };
    }(c__7090__auto___12282, out));
    return out;
  };
  cljs$core$async$filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$filter_LT___2.call(this, p, ch);
      case 3:
        return cljs$core$async$filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$filter_LT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$filter_LT___2;
  cljs$core$async$filter_LT_.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$filter_LT___3;
  return cljs$core$async$filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var cljs$core$async$remove_LT_ = null;
  var cljs$core$async$remove_LT___2 = function(p, ch) {
    return cljs$core$async$remove_LT_.call(null, p, ch, null);
  };
  var cljs$core$async$remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  cljs$core$async$remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$remove_LT___2.call(this, p, ch);
      case 3:
        return cljs$core$async$remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$remove_LT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$remove_LT___2;
  cljs$core$async$remove_LT_.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$remove_LT___3;
  return cljs$core$async$remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function cljs$core$async$mapcat_STAR_(f, in$, out) {
  var c__7090__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7090__auto__) {
    return function() {
      var f__7091__auto__ = function() {
        var switch__7034__auto__ = function(c__7090__auto__) {
          return function(state_12460) {
            var state_val_12461 = state_12460[1];
            if (state_val_12461 === 7) {
              var inst_12456 = state_12460[2];
              var state_12460__$1 = state_12460;
              var statearr_12462_12503 = state_12460__$1;
              statearr_12462_12503[2] = inst_12456;
              statearr_12462_12503[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12461 === 20) {
                var inst_12426 = state_12460[7];
                var inst_12437 = state_12460[2];
                var inst_12438 = cljs.core.next.call(null, inst_12426);
                var inst_12412 = inst_12438;
                var inst_12413 = null;
                var inst_12414 = 0;
                var inst_12415 = 0;
                var state_12460__$1 = function() {
                  var statearr_12463 = state_12460;
                  statearr_12463[8] = inst_12415;
                  statearr_12463[9] = inst_12412;
                  statearr_12463[10] = inst_12413;
                  statearr_12463[11] = inst_12437;
                  statearr_12463[12] = inst_12414;
                  return statearr_12463;
                }();
                var statearr_12464_12504 = state_12460__$1;
                statearr_12464_12504[2] = null;
                statearr_12464_12504[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12461 === 1) {
                  var state_12460__$1 = state_12460;
                  var statearr_12465_12505 = state_12460__$1;
                  statearr_12465_12505[2] = null;
                  statearr_12465_12505[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12461 === 4) {
                    var inst_12401 = state_12460[13];
                    var inst_12401__$1 = state_12460[2];
                    var inst_12402 = inst_12401__$1 == null;
                    var state_12460__$1 = function() {
                      var statearr_12466 = state_12460;
                      statearr_12466[13] = inst_12401__$1;
                      return statearr_12466;
                    }();
                    if (cljs.core.truth_(inst_12402)) {
                      var statearr_12467_12506 = state_12460__$1;
                      statearr_12467_12506[1] = 5;
                    } else {
                      var statearr_12468_12507 = state_12460__$1;
                      statearr_12468_12507[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12461 === 15) {
                      var state_12460__$1 = state_12460;
                      var statearr_12472_12508 = state_12460__$1;
                      statearr_12472_12508[2] = null;
                      statearr_12472_12508[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12461 === 21) {
                        var state_12460__$1 = state_12460;
                        var statearr_12473_12509 = state_12460__$1;
                        statearr_12473_12509[2] = null;
                        statearr_12473_12509[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12461 === 13) {
                          var inst_12415 = state_12460[8];
                          var inst_12412 = state_12460[9];
                          var inst_12413 = state_12460[10];
                          var inst_12414 = state_12460[12];
                          var inst_12422 = state_12460[2];
                          var inst_12423 = inst_12415 + 1;
                          var tmp12469 = inst_12412;
                          var tmp12470 = inst_12413;
                          var tmp12471 = inst_12414;
                          var inst_12412__$1 = tmp12469;
                          var inst_12413__$1 = tmp12470;
                          var inst_12414__$1 = tmp12471;
                          var inst_12415__$1 = inst_12423;
                          var state_12460__$1 = function() {
                            var statearr_12474 = state_12460;
                            statearr_12474[8] = inst_12415__$1;
                            statearr_12474[9] = inst_12412__$1;
                            statearr_12474[10] = inst_12413__$1;
                            statearr_12474[12] = inst_12414__$1;
                            statearr_12474[14] = inst_12422;
                            return statearr_12474;
                          }();
                          var statearr_12475_12510 = state_12460__$1;
                          statearr_12475_12510[2] = null;
                          statearr_12475_12510[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12461 === 22) {
                            var state_12460__$1 = state_12460;
                            var statearr_12476_12511 = state_12460__$1;
                            statearr_12476_12511[2] = null;
                            statearr_12476_12511[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12461 === 6) {
                              var inst_12401 = state_12460[13];
                              var inst_12410 = f.call(null, inst_12401);
                              var inst_12411 = cljs.core.seq.call(null, inst_12410);
                              var inst_12412 = inst_12411;
                              var inst_12413 = null;
                              var inst_12414 = 0;
                              var inst_12415 = 0;
                              var state_12460__$1 = function() {
                                var statearr_12477 = state_12460;
                                statearr_12477[8] = inst_12415;
                                statearr_12477[9] = inst_12412;
                                statearr_12477[10] = inst_12413;
                                statearr_12477[12] = inst_12414;
                                return statearr_12477;
                              }();
                              var statearr_12478_12512 = state_12460__$1;
                              statearr_12478_12512[2] = null;
                              statearr_12478_12512[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12461 === 17) {
                                var inst_12426 = state_12460[7];
                                var inst_12430 = cljs.core.chunk_first.call(null, inst_12426);
                                var inst_12431 = cljs.core.chunk_rest.call(null, inst_12426);
                                var inst_12432 = cljs.core.count.call(null, inst_12430);
                                var inst_12412 = inst_12431;
                                var inst_12413 = inst_12430;
                                var inst_12414 = inst_12432;
                                var inst_12415 = 0;
                                var state_12460__$1 = function() {
                                  var statearr_12479 = state_12460;
                                  statearr_12479[8] = inst_12415;
                                  statearr_12479[9] = inst_12412;
                                  statearr_12479[10] = inst_12413;
                                  statearr_12479[12] = inst_12414;
                                  return statearr_12479;
                                }();
                                var statearr_12480_12513 = state_12460__$1;
                                statearr_12480_12513[2] = null;
                                statearr_12480_12513[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12461 === 3) {
                                  var inst_12458 = state_12460[2];
                                  var state_12460__$1 = state_12460;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12460__$1, inst_12458);
                                } else {
                                  if (state_val_12461 === 12) {
                                    var inst_12446 = state_12460[2];
                                    var state_12460__$1 = state_12460;
                                    var statearr_12481_12514 = state_12460__$1;
                                    statearr_12481_12514[2] = inst_12446;
                                    statearr_12481_12514[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12461 === 2) {
                                      var state_12460__$1 = state_12460;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12460__$1, 4, in$);
                                    } else {
                                      if (state_val_12461 === 23) {
                                        var inst_12454 = state_12460[2];
                                        var state_12460__$1 = state_12460;
                                        var statearr_12482_12515 = state_12460__$1;
                                        statearr_12482_12515[2] = inst_12454;
                                        statearr_12482_12515[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12461 === 19) {
                                          var inst_12441 = state_12460[2];
                                          var state_12460__$1 = state_12460;
                                          var statearr_12483_12516 = state_12460__$1;
                                          statearr_12483_12516[2] = inst_12441;
                                          statearr_12483_12516[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12461 === 11) {
                                            var inst_12412 = state_12460[9];
                                            var inst_12426 = state_12460[7];
                                            var inst_12426__$1 = cljs.core.seq.call(null, inst_12412);
                                            var state_12460__$1 = function() {
                                              var statearr_12484 = state_12460;
                                              statearr_12484[7] = inst_12426__$1;
                                              return statearr_12484;
                                            }();
                                            if (inst_12426__$1) {
                                              var statearr_12485_12517 = state_12460__$1;
                                              statearr_12485_12517[1] = 14;
                                            } else {
                                              var statearr_12486_12518 = state_12460__$1;
                                              statearr_12486_12518[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_12461 === 9) {
                                              var inst_12448 = state_12460[2];
                                              var inst_12449 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_12460__$1 = function() {
                                                var statearr_12487 = state_12460;
                                                statearr_12487[15] = inst_12448;
                                                return statearr_12487;
                                              }();
                                              if (cljs.core.truth_(inst_12449)) {
                                                var statearr_12488_12519 = state_12460__$1;
                                                statearr_12488_12519[1] = 21;
                                              } else {
                                                var statearr_12489_12520 = state_12460__$1;
                                                statearr_12489_12520[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_12461 === 5) {
                                                var inst_12404 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_12460__$1 = state_12460;
                                                var statearr_12490_12521 = state_12460__$1;
                                                statearr_12490_12521[2] = inst_12404;
                                                statearr_12490_12521[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_12461 === 14) {
                                                  var inst_12426 = state_12460[7];
                                                  var inst_12428 = cljs.core.chunked_seq_QMARK_.call(null, inst_12426);
                                                  var state_12460__$1 = state_12460;
                                                  if (inst_12428) {
                                                    var statearr_12491_12522 = state_12460__$1;
                                                    statearr_12491_12522[1] = 17;
                                                  } else {
                                                    var statearr_12492_12523 = state_12460__$1;
                                                    statearr_12492_12523[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_12461 === 16) {
                                                    var inst_12444 = state_12460[2];
                                                    var state_12460__$1 = state_12460;
                                                    var statearr_12493_12524 = state_12460__$1;
                                                    statearr_12493_12524[2] = inst_12444;
                                                    statearr_12493_12524[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_12461 === 10) {
                                                      var inst_12415 = state_12460[8];
                                                      var inst_12413 = state_12460[10];
                                                      var inst_12420 = cljs.core._nth.call(null, inst_12413, inst_12415);
                                                      var state_12460__$1 = state_12460;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12460__$1, 13, out, inst_12420);
                                                    } else {
                                                      if (state_val_12461 === 18) {
                                                        var inst_12426 = state_12460[7];
                                                        var inst_12435 = cljs.core.first.call(null, inst_12426);
                                                        var state_12460__$1 = state_12460;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12460__$1, 20, out, inst_12435);
                                                      } else {
                                                        if (state_val_12461 === 8) {
                                                          var inst_12415 = state_12460[8];
                                                          var inst_12414 = state_12460[12];
                                                          var inst_12417 = inst_12415 < inst_12414;
                                                          var inst_12418 = inst_12417;
                                                          var state_12460__$1 = state_12460;
                                                          if (cljs.core.truth_(inst_12418)) {
                                                            var statearr_12494_12525 = state_12460__$1;
                                                            statearr_12494_12525[1] = 10;
                                                          } else {
                                                            var statearr_12495_12526 = state_12460__$1;
                                                            statearr_12495_12526[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7090__auto__);
        return function(switch__7034__auto__, c__7090__auto__) {
          return function() {
            var cljs$core$async$mapcat_STAR__$_state_machine__7035__auto__ = null;
            var cljs$core$async$mapcat_STAR__$_state_machine__7035__auto____0 = function() {
              var statearr_12499 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12499[0] = cljs$core$async$mapcat_STAR__$_state_machine__7035__auto__;
              statearr_12499[1] = 1;
              return statearr_12499;
            };
            var cljs$core$async$mapcat_STAR__$_state_machine__7035__auto____1 = function(state_12460) {
              while (true) {
                var ret_value__7036__auto__ = function() {
                  try {
                    while (true) {
                      var result__7037__auto__ = switch__7034__auto__.call(null, state_12460);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7037__auto__;
                      }
                      break;
                    }
                  } catch (e12500) {
                    if (e12500 instanceof Object) {
                      var ex__7038__auto__ = e12500;
                      var statearr_12501_12527 = state_12460;
                      statearr_12501_12527[5] = ex__7038__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12460);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12500;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12528 = state_12460;
                  state_12460 = G__12528;
                  continue;
                } else {
                  return ret_value__7036__auto__;
                }
                break;
              }
            };
            cljs$core$async$mapcat_STAR__$_state_machine__7035__auto__ = function(state_12460) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mapcat_STAR__$_state_machine__7035__auto____0.call(this);
                case 1:
                  return cljs$core$async$mapcat_STAR__$_state_machine__7035__auto____1.call(this, state_12460);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mapcat_STAR__$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mapcat_STAR__$_state_machine__7035__auto____0;
            cljs$core$async$mapcat_STAR__$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mapcat_STAR__$_state_machine__7035__auto____1;
            return cljs$core$async$mapcat_STAR__$_state_machine__7035__auto__;
          }();
        }(switch__7034__auto__, c__7090__auto__);
      }();
      var state__7092__auto__ = function() {
        var statearr_12502 = f__7091__auto__.call(null);
        statearr_12502[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto__;
        return statearr_12502;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
    };
  }(c__7090__auto__));
  return c__7090__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var cljs$core$async$mapcat_LT_ = null;
  var cljs$core$async$mapcat_LT___2 = function(f, in$) {
    return cljs$core$async$mapcat_LT_.call(null, f, in$, null);
  };
  var cljs$core$async$mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  cljs$core$async$mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$mapcat_LT___2.call(this, f, in$);
      case 3:
        return cljs$core$async$mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$mapcat_LT___2;
  cljs$core$async$mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$mapcat_LT___3;
  return cljs$core$async$mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var cljs$core$async$mapcat_GT_ = null;
  var cljs$core$async$mapcat_GT___2 = function(f, out) {
    return cljs$core$async$mapcat_GT_.call(null, f, out, null);
  };
  var cljs$core$async$mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  cljs$core$async$mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$mapcat_GT___2.call(this, f, out);
      case 3:
        return cljs$core$async$mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$mapcat_GT___2;
  cljs$core$async$mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$mapcat_GT___3;
  return cljs$core$async$mapcat_GT_;
}();
cljs.core.async.unique = function() {
  var cljs$core$async$unique = null;
  var cljs$core$async$unique__1 = function(ch) {
    return cljs$core$async$unique.call(null, ch, null);
  };
  var cljs$core$async$unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__7090__auto___12625 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7090__auto___12625, out) {
      return function() {
        var f__7091__auto__ = function() {
          var switch__7034__auto__ = function(c__7090__auto___12625, out) {
            return function(state_12600) {
              var state_val_12601 = state_12600[1];
              if (state_val_12601 === 7) {
                var inst_12595 = state_12600[2];
                var state_12600__$1 = state_12600;
                var statearr_12602_12626 = state_12600__$1;
                statearr_12602_12626[2] = inst_12595;
                statearr_12602_12626[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12601 === 1) {
                  var inst_12577 = null;
                  var state_12600__$1 = function() {
                    var statearr_12603 = state_12600;
                    statearr_12603[7] = inst_12577;
                    return statearr_12603;
                  }();
                  var statearr_12604_12627 = state_12600__$1;
                  statearr_12604_12627[2] = null;
                  statearr_12604_12627[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12601 === 4) {
                    var inst_12580 = state_12600[8];
                    var inst_12580__$1 = state_12600[2];
                    var inst_12581 = inst_12580__$1 == null;
                    var inst_12582 = cljs.core.not.call(null, inst_12581);
                    var state_12600__$1 = function() {
                      var statearr_12605 = state_12600;
                      statearr_12605[8] = inst_12580__$1;
                      return statearr_12605;
                    }();
                    if (inst_12582) {
                      var statearr_12606_12628 = state_12600__$1;
                      statearr_12606_12628[1] = 5;
                    } else {
                      var statearr_12607_12629 = state_12600__$1;
                      statearr_12607_12629[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12601 === 6) {
                      var state_12600__$1 = state_12600;
                      var statearr_12608_12630 = state_12600__$1;
                      statearr_12608_12630[2] = null;
                      statearr_12608_12630[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12601 === 3) {
                        var inst_12597 = state_12600[2];
                        var inst_12598 = cljs.core.async.close_BANG_.call(null, out);
                        var state_12600__$1 = function() {
                          var statearr_12609 = state_12600;
                          statearr_12609[9] = inst_12597;
                          return statearr_12609;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12600__$1, inst_12598);
                      } else {
                        if (state_val_12601 === 2) {
                          var state_12600__$1 = state_12600;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12600__$1, 4, ch);
                        } else {
                          if (state_val_12601 === 11) {
                            var inst_12580 = state_12600[8];
                            var inst_12589 = state_12600[2];
                            var inst_12577 = inst_12580;
                            var state_12600__$1 = function() {
                              var statearr_12610 = state_12600;
                              statearr_12610[10] = inst_12589;
                              statearr_12610[7] = inst_12577;
                              return statearr_12610;
                            }();
                            var statearr_12611_12631 = state_12600__$1;
                            statearr_12611_12631[2] = null;
                            statearr_12611_12631[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12601 === 9) {
                              var inst_12580 = state_12600[8];
                              var state_12600__$1 = state_12600;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12600__$1, 11, out, inst_12580);
                            } else {
                              if (state_val_12601 === 5) {
                                var inst_12577 = state_12600[7];
                                var inst_12580 = state_12600[8];
                                var inst_12584 = cljs.core._EQ_.call(null, inst_12580, inst_12577);
                                var state_12600__$1 = state_12600;
                                if (inst_12584) {
                                  var statearr_12613_12632 = state_12600__$1;
                                  statearr_12613_12632[1] = 8;
                                } else {
                                  var statearr_12614_12633 = state_12600__$1;
                                  statearr_12614_12633[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12601 === 10) {
                                  var inst_12592 = state_12600[2];
                                  var state_12600__$1 = state_12600;
                                  var statearr_12615_12634 = state_12600__$1;
                                  statearr_12615_12634[2] = inst_12592;
                                  statearr_12615_12634[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12601 === 8) {
                                    var inst_12577 = state_12600[7];
                                    var tmp12612 = inst_12577;
                                    var inst_12577__$1 = tmp12612;
                                    var state_12600__$1 = function() {
                                      var statearr_12616 = state_12600;
                                      statearr_12616[7] = inst_12577__$1;
                                      return statearr_12616;
                                    }();
                                    var statearr_12617_12635 = state_12600__$1;
                                    statearr_12617_12635[2] = null;
                                    statearr_12617_12635[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7090__auto___12625, out);
          return function(switch__7034__auto__, c__7090__auto___12625, out) {
            return function() {
              var cljs$core$async$unique_$_state_machine__7035__auto__ = null;
              var cljs$core$async$unique_$_state_machine__7035__auto____0 = function() {
                var statearr_12621 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_12621[0] = cljs$core$async$unique_$_state_machine__7035__auto__;
                statearr_12621[1] = 1;
                return statearr_12621;
              };
              var cljs$core$async$unique_$_state_machine__7035__auto____1 = function(state_12600) {
                while (true) {
                  var ret_value__7036__auto__ = function() {
                    try {
                      while (true) {
                        var result__7037__auto__ = switch__7034__auto__.call(null, state_12600);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7037__auto__;
                        }
                        break;
                      }
                    } catch (e12622) {
                      if (e12622 instanceof Object) {
                        var ex__7038__auto__ = e12622;
                        var statearr_12623_12636 = state_12600;
                        statearr_12623_12636[5] = ex__7038__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12600);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e12622;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12637 = state_12600;
                    state_12600 = G__12637;
                    continue;
                  } else {
                    return ret_value__7036__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$unique_$_state_machine__7035__auto__ = function(state_12600) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$unique_$_state_machine__7035__auto____0.call(this);
                  case 1:
                    return cljs$core$async$unique_$_state_machine__7035__auto____1.call(this, state_12600);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$unique_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$unique_$_state_machine__7035__auto____0;
              cljs$core$async$unique_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$unique_$_state_machine__7035__auto____1;
              return cljs$core$async$unique_$_state_machine__7035__auto__;
            }();
          }(switch__7034__auto__, c__7090__auto___12625, out);
        }();
        var state__7092__auto__ = function() {
          var statearr_12624 = f__7091__auto__.call(null);
          statearr_12624[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto___12625;
          return statearr_12624;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
      };
    }(c__7090__auto___12625, out));
    return out;
  };
  cljs$core$async$unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$unique__1.call(this, ch);
      case 2:
        return cljs$core$async$unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$unique.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$unique__1;
  cljs$core$async$unique.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$unique__2;
  return cljs$core$async$unique;
}();
cljs.core.async.partition = function() {
  var cljs$core$async$partition = null;
  var cljs$core$async$partition__2 = function(n, ch) {
    return cljs$core$async$partition.call(null, n, ch, null);
  };
  var cljs$core$async$partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__7090__auto___12772 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7090__auto___12772, out) {
      return function() {
        var f__7091__auto__ = function() {
          var switch__7034__auto__ = function(c__7090__auto___12772, out) {
            return function(state_12742) {
              var state_val_12743 = state_12742[1];
              if (state_val_12743 === 7) {
                var inst_12738 = state_12742[2];
                var state_12742__$1 = state_12742;
                var statearr_12744_12773 = state_12742__$1;
                statearr_12744_12773[2] = inst_12738;
                statearr_12744_12773[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12743 === 1) {
                  var inst_12705 = new Array(n);
                  var inst_12706 = inst_12705;
                  var inst_12707 = 0;
                  var state_12742__$1 = function() {
                    var statearr_12745 = state_12742;
                    statearr_12745[7] = inst_12707;
                    statearr_12745[8] = inst_12706;
                    return statearr_12745;
                  }();
                  var statearr_12746_12774 = state_12742__$1;
                  statearr_12746_12774[2] = null;
                  statearr_12746_12774[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12743 === 4) {
                    var inst_12710 = state_12742[9];
                    var inst_12710__$1 = state_12742[2];
                    var inst_12711 = inst_12710__$1 == null;
                    var inst_12712 = cljs.core.not.call(null, inst_12711);
                    var state_12742__$1 = function() {
                      var statearr_12747 = state_12742;
                      statearr_12747[9] = inst_12710__$1;
                      return statearr_12747;
                    }();
                    if (inst_12712) {
                      var statearr_12748_12775 = state_12742__$1;
                      statearr_12748_12775[1] = 5;
                    } else {
                      var statearr_12749_12776 = state_12742__$1;
                      statearr_12749_12776[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12743 === 15) {
                      var inst_12732 = state_12742[2];
                      var state_12742__$1 = state_12742;
                      var statearr_12750_12777 = state_12742__$1;
                      statearr_12750_12777[2] = inst_12732;
                      statearr_12750_12777[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12743 === 13) {
                        var state_12742__$1 = state_12742;
                        var statearr_12751_12778 = state_12742__$1;
                        statearr_12751_12778[2] = null;
                        statearr_12751_12778[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12743 === 6) {
                          var inst_12707 = state_12742[7];
                          var inst_12728 = inst_12707 > 0;
                          var state_12742__$1 = state_12742;
                          if (cljs.core.truth_(inst_12728)) {
                            var statearr_12752_12779 = state_12742__$1;
                            statearr_12752_12779[1] = 12;
                          } else {
                            var statearr_12753_12780 = state_12742__$1;
                            statearr_12753_12780[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12743 === 3) {
                            var inst_12740 = state_12742[2];
                            var state_12742__$1 = state_12742;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12742__$1, inst_12740);
                          } else {
                            if (state_val_12743 === 12) {
                              var inst_12706 = state_12742[8];
                              var inst_12730 = cljs.core.vec.call(null, inst_12706);
                              var state_12742__$1 = state_12742;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12742__$1, 15, out, inst_12730);
                            } else {
                              if (state_val_12743 === 2) {
                                var state_12742__$1 = state_12742;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12742__$1, 4, ch);
                              } else {
                                if (state_val_12743 === 11) {
                                  var inst_12722 = state_12742[2];
                                  var inst_12723 = new Array(n);
                                  var inst_12706 = inst_12723;
                                  var inst_12707 = 0;
                                  var state_12742__$1 = function() {
                                    var statearr_12754 = state_12742;
                                    statearr_12754[10] = inst_12722;
                                    statearr_12754[7] = inst_12707;
                                    statearr_12754[8] = inst_12706;
                                    return statearr_12754;
                                  }();
                                  var statearr_12755_12781 = state_12742__$1;
                                  statearr_12755_12781[2] = null;
                                  statearr_12755_12781[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12743 === 9) {
                                    var inst_12706 = state_12742[8];
                                    var inst_12720 = cljs.core.vec.call(null, inst_12706);
                                    var state_12742__$1 = state_12742;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12742__$1, 11, out, inst_12720);
                                  } else {
                                    if (state_val_12743 === 5) {
                                      var inst_12707 = state_12742[7];
                                      var inst_12715 = state_12742[11];
                                      var inst_12710 = state_12742[9];
                                      var inst_12706 = state_12742[8];
                                      var inst_12714 = inst_12706[inst_12707] = inst_12710;
                                      var inst_12715__$1 = inst_12707 + 1;
                                      var inst_12716 = inst_12715__$1 < n;
                                      var state_12742__$1 = function() {
                                        var statearr_12756 = state_12742;
                                        statearr_12756[11] = inst_12715__$1;
                                        statearr_12756[12] = inst_12714;
                                        return statearr_12756;
                                      }();
                                      if (cljs.core.truth_(inst_12716)) {
                                        var statearr_12757_12782 = state_12742__$1;
                                        statearr_12757_12782[1] = 8;
                                      } else {
                                        var statearr_12758_12783 = state_12742__$1;
                                        statearr_12758_12783[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12743 === 14) {
                                        var inst_12735 = state_12742[2];
                                        var inst_12736 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_12742__$1 = function() {
                                          var statearr_12760 = state_12742;
                                          statearr_12760[13] = inst_12735;
                                          return statearr_12760;
                                        }();
                                        var statearr_12761_12784 = state_12742__$1;
                                        statearr_12761_12784[2] = inst_12736;
                                        statearr_12761_12784[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12743 === 10) {
                                          var inst_12726 = state_12742[2];
                                          var state_12742__$1 = state_12742;
                                          var statearr_12762_12785 = state_12742__$1;
                                          statearr_12762_12785[2] = inst_12726;
                                          statearr_12762_12785[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12743 === 8) {
                                            var inst_12715 = state_12742[11];
                                            var inst_12706 = state_12742[8];
                                            var tmp12759 = inst_12706;
                                            var inst_12706__$1 = tmp12759;
                                            var inst_12707 = inst_12715;
                                            var state_12742__$1 = function() {
                                              var statearr_12763 = state_12742;
                                              statearr_12763[7] = inst_12707;
                                              statearr_12763[8] = inst_12706__$1;
                                              return statearr_12763;
                                            }();
                                            var statearr_12764_12786 = state_12742__$1;
                                            statearr_12764_12786[2] = null;
                                            statearr_12764_12786[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7090__auto___12772, out);
          return function(switch__7034__auto__, c__7090__auto___12772, out) {
            return function() {
              var cljs$core$async$partition_$_state_machine__7035__auto__ = null;
              var cljs$core$async$partition_$_state_machine__7035__auto____0 = function() {
                var statearr_12768 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_12768[0] = cljs$core$async$partition_$_state_machine__7035__auto__;
                statearr_12768[1] = 1;
                return statearr_12768;
              };
              var cljs$core$async$partition_$_state_machine__7035__auto____1 = function(state_12742) {
                while (true) {
                  var ret_value__7036__auto__ = function() {
                    try {
                      while (true) {
                        var result__7037__auto__ = switch__7034__auto__.call(null, state_12742);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7037__auto__;
                        }
                        break;
                      }
                    } catch (e12769) {
                      if (e12769 instanceof Object) {
                        var ex__7038__auto__ = e12769;
                        var statearr_12770_12787 = state_12742;
                        statearr_12770_12787[5] = ex__7038__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12742);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e12769;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12788 = state_12742;
                    state_12742 = G__12788;
                    continue;
                  } else {
                    return ret_value__7036__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$partition_$_state_machine__7035__auto__ = function(state_12742) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$partition_$_state_machine__7035__auto____0.call(this);
                  case 1:
                    return cljs$core$async$partition_$_state_machine__7035__auto____1.call(this, state_12742);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$partition_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$partition_$_state_machine__7035__auto____0;
              cljs$core$async$partition_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$partition_$_state_machine__7035__auto____1;
              return cljs$core$async$partition_$_state_machine__7035__auto__;
            }();
          }(switch__7034__auto__, c__7090__auto___12772, out);
        }();
        var state__7092__auto__ = function() {
          var statearr_12771 = f__7091__auto__.call(null);
          statearr_12771[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto___12772;
          return statearr_12771;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
      };
    }(c__7090__auto___12772, out));
    return out;
  };
  cljs$core$async$partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$partition__2.call(this, n, ch);
      case 3:
        return cljs$core$async$partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$partition.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$partition__2;
  cljs$core$async$partition.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$partition__3;
  return cljs$core$async$partition;
}();
cljs.core.async.partition_by = function() {
  var cljs$core$async$partition_by = null;
  var cljs$core$async$partition_by__2 = function(f, ch) {
    return cljs$core$async$partition_by.call(null, f, ch, null);
  };
  var cljs$core$async$partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__7090__auto___12931 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7090__auto___12931, out) {
      return function() {
        var f__7091__auto__ = function() {
          var switch__7034__auto__ = function(c__7090__auto___12931, out) {
            return function(state_12901) {
              var state_val_12902 = state_12901[1];
              if (state_val_12902 === 7) {
                var inst_12897 = state_12901[2];
                var state_12901__$1 = state_12901;
                var statearr_12903_12932 = state_12901__$1;
                statearr_12903_12932[2] = inst_12897;
                statearr_12903_12932[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12902 === 1) {
                  var inst_12860 = [];
                  var inst_12861 = inst_12860;
                  var inst_12862 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                  var state_12901__$1 = function() {
                    var statearr_12904 = state_12901;
                    statearr_12904[7] = inst_12861;
                    statearr_12904[8] = inst_12862;
                    return statearr_12904;
                  }();
                  var statearr_12905_12933 = state_12901__$1;
                  statearr_12905_12933[2] = null;
                  statearr_12905_12933[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12902 === 4) {
                    var inst_12865 = state_12901[9];
                    var inst_12865__$1 = state_12901[2];
                    var inst_12866 = inst_12865__$1 == null;
                    var inst_12867 = cljs.core.not.call(null, inst_12866);
                    var state_12901__$1 = function() {
                      var statearr_12906 = state_12901;
                      statearr_12906[9] = inst_12865__$1;
                      return statearr_12906;
                    }();
                    if (inst_12867) {
                      var statearr_12907_12934 = state_12901__$1;
                      statearr_12907_12934[1] = 5;
                    } else {
                      var statearr_12908_12935 = state_12901__$1;
                      statearr_12908_12935[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12902 === 15) {
                      var inst_12891 = state_12901[2];
                      var state_12901__$1 = state_12901;
                      var statearr_12909_12936 = state_12901__$1;
                      statearr_12909_12936[2] = inst_12891;
                      statearr_12909_12936[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12902 === 13) {
                        var state_12901__$1 = state_12901;
                        var statearr_12910_12937 = state_12901__$1;
                        statearr_12910_12937[2] = null;
                        statearr_12910_12937[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12902 === 6) {
                          var inst_12861 = state_12901[7];
                          var inst_12886 = inst_12861.length;
                          var inst_12887 = inst_12886 > 0;
                          var state_12901__$1 = state_12901;
                          if (cljs.core.truth_(inst_12887)) {
                            var statearr_12911_12938 = state_12901__$1;
                            statearr_12911_12938[1] = 12;
                          } else {
                            var statearr_12912_12939 = state_12901__$1;
                            statearr_12912_12939[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12902 === 3) {
                            var inst_12899 = state_12901[2];
                            var state_12901__$1 = state_12901;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12901__$1, inst_12899);
                          } else {
                            if (state_val_12902 === 12) {
                              var inst_12861 = state_12901[7];
                              var inst_12889 = cljs.core.vec.call(null, inst_12861);
                              var state_12901__$1 = state_12901;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12901__$1, 15, out, inst_12889);
                            } else {
                              if (state_val_12902 === 2) {
                                var state_12901__$1 = state_12901;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12901__$1, 4, ch);
                              } else {
                                if (state_val_12902 === 11) {
                                  var inst_12865 = state_12901[9];
                                  var inst_12869 = state_12901[10];
                                  var inst_12879 = state_12901[2];
                                  var inst_12880 = [];
                                  var inst_12881 = inst_12880.push(inst_12865);
                                  var inst_12861 = inst_12880;
                                  var inst_12862 = inst_12869;
                                  var state_12901__$1 = function() {
                                    var statearr_12913 = state_12901;
                                    statearr_12913[11] = inst_12879;
                                    statearr_12913[7] = inst_12861;
                                    statearr_12913[8] = inst_12862;
                                    statearr_12913[12] = inst_12881;
                                    return statearr_12913;
                                  }();
                                  var statearr_12914_12940 = state_12901__$1;
                                  statearr_12914_12940[2] = null;
                                  statearr_12914_12940[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12902 === 9) {
                                    var inst_12861 = state_12901[7];
                                    var inst_12877 = cljs.core.vec.call(null, inst_12861);
                                    var state_12901__$1 = state_12901;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12901__$1, 11, out, inst_12877);
                                  } else {
                                    if (state_val_12902 === 5) {
                                      var inst_12862 = state_12901[8];
                                      var inst_12865 = state_12901[9];
                                      var inst_12869 = state_12901[10];
                                      var inst_12869__$1 = f.call(null, inst_12865);
                                      var inst_12870 = cljs.core._EQ_.call(null, inst_12869__$1, inst_12862);
                                      var inst_12871 = cljs.core.keyword_identical_QMARK_.call(null, inst_12862, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                      var inst_12872 = inst_12870 || inst_12871;
                                      var state_12901__$1 = function() {
                                        var statearr_12915 = state_12901;
                                        statearr_12915[10] = inst_12869__$1;
                                        return statearr_12915;
                                      }();
                                      if (cljs.core.truth_(inst_12872)) {
                                        var statearr_12916_12941 = state_12901__$1;
                                        statearr_12916_12941[1] = 8;
                                      } else {
                                        var statearr_12917_12942 = state_12901__$1;
                                        statearr_12917_12942[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12902 === 14) {
                                        var inst_12894 = state_12901[2];
                                        var inst_12895 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_12901__$1 = function() {
                                          var statearr_12919 = state_12901;
                                          statearr_12919[13] = inst_12894;
                                          return statearr_12919;
                                        }();
                                        var statearr_12920_12943 = state_12901__$1;
                                        statearr_12920_12943[2] = inst_12895;
                                        statearr_12920_12943[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12902 === 10) {
                                          var inst_12884 = state_12901[2];
                                          var state_12901__$1 = state_12901;
                                          var statearr_12921_12944 = state_12901__$1;
                                          statearr_12921_12944[2] = inst_12884;
                                          statearr_12921_12944[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12902 === 8) {
                                            var inst_12861 = state_12901[7];
                                            var inst_12865 = state_12901[9];
                                            var inst_12869 = state_12901[10];
                                            var inst_12874 = inst_12861.push(inst_12865);
                                            var tmp12918 = inst_12861;
                                            var inst_12861__$1 = tmp12918;
                                            var inst_12862 = inst_12869;
                                            var state_12901__$1 = function() {
                                              var statearr_12922 = state_12901;
                                              statearr_12922[7] = inst_12861__$1;
                                              statearr_12922[8] = inst_12862;
                                              statearr_12922[14] = inst_12874;
                                              return statearr_12922;
                                            }();
                                            var statearr_12923_12945 = state_12901__$1;
                                            statearr_12923_12945[2] = null;
                                            statearr_12923_12945[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7090__auto___12931, out);
          return function(switch__7034__auto__, c__7090__auto___12931, out) {
            return function() {
              var cljs$core$async$partition_by_$_state_machine__7035__auto__ = null;
              var cljs$core$async$partition_by_$_state_machine__7035__auto____0 = function() {
                var statearr_12927 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_12927[0] = cljs$core$async$partition_by_$_state_machine__7035__auto__;
                statearr_12927[1] = 1;
                return statearr_12927;
              };
              var cljs$core$async$partition_by_$_state_machine__7035__auto____1 = function(state_12901) {
                while (true) {
                  var ret_value__7036__auto__ = function() {
                    try {
                      while (true) {
                        var result__7037__auto__ = switch__7034__auto__.call(null, state_12901);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7037__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7037__auto__;
                        }
                        break;
                      }
                    } catch (e12928) {
                      if (e12928 instanceof Object) {
                        var ex__7038__auto__ = e12928;
                        var statearr_12929_12946 = state_12901;
                        statearr_12929_12946[5] = ex__7038__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12901);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e12928;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7036__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12947 = state_12901;
                    state_12901 = G__12947;
                    continue;
                  } else {
                    return ret_value__7036__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$partition_by_$_state_machine__7035__auto__ = function(state_12901) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$partition_by_$_state_machine__7035__auto____0.call(this);
                  case 1:
                    return cljs$core$async$partition_by_$_state_machine__7035__auto____1.call(this, state_12901);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$partition_by_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$partition_by_$_state_machine__7035__auto____0;
              cljs$core$async$partition_by_$_state_machine__7035__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$partition_by_$_state_machine__7035__auto____1;
              return cljs$core$async$partition_by_$_state_machine__7035__auto__;
            }();
          }(switch__7034__auto__, c__7090__auto___12931, out);
        }();
        var state__7092__auto__ = function() {
          var statearr_12930 = f__7091__auto__.call(null);
          statearr_12930[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7090__auto___12931;
          return statearr_12930;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7092__auto__);
      };
    }(c__7090__auto___12931, out));
    return out;
  };
  cljs$core$async$partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$partition_by__2.call(this, f, ch);
      case 3:
        return cljs$core$async$partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$partition_by.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$partition_by__2;
  cljs$core$async$partition_by.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$partition_by__3;
  return cljs$core$async$partition_by;
}();
goog.provide("forum.core");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("ajax.core");
goog.require("reagent.core");
cljs.core.enable_console_print_BANG_.call(null);
forum.core.request_child_comments = function forum$core$request_child_comments(comment_id, store, cache) {
  return ajax.core.ajax_request.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "uri", "uri", -774711847), "/child_comments", new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "get", "get", 1683182755), new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "parent_id", "parent_id", -1999171020), comment_id], null), new cljs.core.Keyword(null, "handler", 
  "handler", -195596612), function(p__20730) {
    var vec__20731 = p__20730;
    var ok = cljs.core.nth.call(null, vec__20731, 0, null);
    var response = cljs.core.nth.call(null, vec__20731, 1, null);
    if (cljs.core.truth_(ok)) {
      cljs.core.reset_BANG_.call(null, store, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "children", "children", -940561982), response], null));
      return cljs.core.swap_BANG_.call(null, cache, cljs.core.assoc, comment_id, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "children", "children", -940561982), response], null));
    } else {
      return console.error([cljs.core.str(response)].join(""));
    }
  }, new cljs.core.Keyword(null, "format", "format", -1306924766), ajax.core.url_request_format.call(null), new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), ajax.core.json_response_format.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywords?", "keywords?", 764949733), true], null))], null));
};
forum.core.start_resource_provider = function forum$core$start_resource_provider(request_chan) {
  var c = request_chan;
  var cache = reagent.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var c__8250__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8250__auto__, c, cache) {
    return function() {
      var f__8251__auto__ = function() {
        var switch__8194__auto__ = function(c__8250__auto__, c, cache) {
          return function(state_20795) {
            var state_val_20796 = state_20795[1];
            if (state_val_20796 === 7) {
              var inst_20781 = state_20795[7];
              var inst_20778 = state_20795[8];
              var inst_20777 = state_20795[2];
              var inst_20778__$1 = (new cljs.core.Keyword(null, "comment-id", "comment-id", -1387285800)).cljs$core$IFn$_invoke$arity$1(inst_20777);
              var inst_20779 = (new cljs.core.Keyword(null, "atom", "atom", -397043653)).cljs$core$IFn$_invoke$arity$1(inst_20777);
              var inst_20780 = cljs.core.deref.call(null, cache);
              var inst_20781__$1 = cljs.core.get.call(null, inst_20780, inst_20778__$1);
              var state_20795__$1 = function() {
                var statearr_20797 = state_20795;
                statearr_20797[7] = inst_20781__$1;
                statearr_20797[9] = inst_20779;
                statearr_20797[8] = inst_20778__$1;
                return statearr_20797;
              }();
              if (cljs.core.truth_(inst_20781__$1)) {
                var statearr_20798_20816 = state_20795__$1;
                statearr_20798_20816[1] = 8;
              } else {
                var statearr_20799_20817 = state_20795__$1;
                statearr_20799_20817[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_20796 === 1) {
                var state_20795__$1 = state_20795;
                var statearr_20800_20818 = state_20795__$1;
                statearr_20800_20818[2] = null;
                statearr_20800_20818[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_20796 === 4) {
                  var state_20795__$1 = state_20795;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20795__$1, 7, c);
                } else {
                  if (state_val_20796 === 6) {
                    var inst_20791 = state_20795[2];
                    var state_20795__$1 = state_20795;
                    var statearr_20801_20819 = state_20795__$1;
                    statearr_20801_20819[2] = inst_20791;
                    statearr_20801_20819[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_20796 === 3) {
                      var inst_20793 = state_20795[2];
                      var state_20795__$1 = state_20795;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20795__$1, inst_20793);
                    } else {
                      if (state_val_20796 === 2) {
                        var state_20795__$1 = state_20795;
                        var statearr_20802_20820 = state_20795__$1;
                        statearr_20802_20820[1] = 4;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_20796 === 9) {
                          var inst_20779 = state_20795[9];
                          var inst_20778 = state_20795[8];
                          var inst_20785 = forum.core.request_child_comments.call(null, inst_20778, inst_20779, cache);
                          var state_20795__$1 = state_20795;
                          var statearr_20804_20821 = state_20795__$1;
                          statearr_20804_20821[2] = inst_20785;
                          statearr_20804_20821[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20796 === 5) {
                            var state_20795__$1 = state_20795;
                            var statearr_20805_20822 = state_20795__$1;
                            statearr_20805_20822[2] = null;
                            statearr_20805_20822[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_20796 === 10) {
                              var inst_20787 = state_20795[2];
                              var state_20795__$1 = function() {
                                var statearr_20806 = state_20795;
                                statearr_20806[10] = inst_20787;
                                return statearr_20806;
                              }();
                              var statearr_20807_20823 = state_20795__$1;
                              statearr_20807_20823[2] = null;
                              statearr_20807_20823[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_20796 === 8) {
                                var inst_20781 = state_20795[7];
                                var inst_20779 = state_20795[9];
                                var inst_20783 = cljs.core.reset_BANG_.call(null, inst_20779, inst_20781);
                                var state_20795__$1 = state_20795;
                                var statearr_20808_20824 = state_20795__$1;
                                statearr_20808_20824[2] = inst_20783;
                                statearr_20808_20824[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8250__auto__, c, cache);
        return function(switch__8194__auto__, c__8250__auto__, c, cache) {
          return function() {
            var forum$core$start_resource_provider_$_state_machine__8195__auto__ = null;
            var forum$core$start_resource_provider_$_state_machine__8195__auto____0 = function() {
              var statearr_20812 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_20812[0] = forum$core$start_resource_provider_$_state_machine__8195__auto__;
              statearr_20812[1] = 1;
              return statearr_20812;
            };
            var forum$core$start_resource_provider_$_state_machine__8195__auto____1 = function(state_20795) {
              while (true) {
                var ret_value__8196__auto__ = function() {
                  try {
                    while (true) {
                      var result__8197__auto__ = switch__8194__auto__.call(null, state_20795);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8197__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8197__auto__;
                      }
                      break;
                    }
                  } catch (e20813) {
                    if (e20813 instanceof Object) {
                      var ex__8198__auto__ = e20813;
                      var statearr_20814_20825 = state_20795;
                      statearr_20814_20825[5] = ex__8198__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20795);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e20813;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8196__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__20826 = state_20795;
                  state_20795 = G__20826;
                  continue;
                } else {
                  return ret_value__8196__auto__;
                }
                break;
              }
            };
            forum$core$start_resource_provider_$_state_machine__8195__auto__ = function(state_20795) {
              switch(arguments.length) {
                case 0:
                  return forum$core$start_resource_provider_$_state_machine__8195__auto____0.call(this);
                case 1:
                  return forum$core$start_resource_provider_$_state_machine__8195__auto____1.call(this, state_20795);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            forum$core$start_resource_provider_$_state_machine__8195__auto__.cljs$core$IFn$_invoke$arity$0 = forum$core$start_resource_provider_$_state_machine__8195__auto____0;
            forum$core$start_resource_provider_$_state_machine__8195__auto__.cljs$core$IFn$_invoke$arity$1 = forum$core$start_resource_provider_$_state_machine__8195__auto____1;
            return forum$core$start_resource_provider_$_state_machine__8195__auto__;
          }();
        }(switch__8194__auto__, c__8250__auto__, c, cache);
      }();
      var state__8252__auto__ = function() {
        var statearr_20815 = f__8251__auto__.call(null);
        statearr_20815[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8250__auto__;
        return statearr_20815;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8252__auto__);
    };
  }(c__8250__auto__, c, cache));
  return c__8250__auto__;
};
forum.core.request_chan = cljs.core.async.chan.call(null);
forum.core.start_resource_provider.call(null, forum.core.request_chan);
forum.core.display_comment = function forum$core$display_comment(req_c, p__20827) {
  var map__20845 = p__20827;
  var map__20845__$1 = cljs.core.seq_QMARK_.call(null, map__20845) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20845) : map__20845;
  var commentid = cljs.core.get.call(null, map__20845__$1, new cljs.core.Keyword(null, "commentid", "commentid", 1114919753));
  var text = cljs.core.get.call(null, map__20845__$1, new cljs.core.Keyword(null, "text", "text", -1790561697));
  var userid = cljs.core.get.call(null, map__20845__$1, new cljs.core.Keyword(null, "userid", "userid", 1974246085));
  var expanded = reagent.core.atom.call(null, false);
  var child_comment_atom = reagent.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var children_req = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "comment-id", "comment-id", -1387285800), commentid, new cljs.core.Keyword(null, "atom", "atom", -397043653), child_comment_atom], null);
  return function(expanded, child_comment_atom, children_req, map__20845, map__20845__$1, commentid, text, userid) {
    return function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.comment-region", "div.comment-region", 1998535834), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.comment-text", "div.comment-text", 968011177), [cljs.core.str("Comment by user id: "), cljs.core.str(userid), cljs.core.str(" with text: "), cljs.core.str(text), cljs.core.str(" and id "), cljs.core.str(commentid)].join("")], 
      null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.comment-child-toggle", "div.comment-child-toggle", 248589594), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function(expanded, child_comment_atom, children_req, map__20845, map__20845__$1, commentid, text, userid) {
        return function() {
          return cljs.core.swap_BANG_.call(null, expanded, cljs.core.not);
        };
      }(expanded, child_comment_atom, children_req, map__20845, map__20845__$1, commentid, text, userid)], null), cljs.core.truth_(cljs.core.deref.call(null, expanded)) ? "-" : "+"], null), cljs.core.truth_(cljs.core.deref.call(null, expanded)) ? function() {
        cljs.core.print.call(null, children_req);
        var c__8250__auto___20862 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__8250__auto___20862, expanded, child_comment_atom, children_req, map__20845, map__20845__$1, commentid, text, userid) {
          return function() {
            var f__8251__auto__ = function() {
              var switch__8194__auto__ = function(c__8250__auto___20862, expanded, child_comment_atom, children_req, map__20845, map__20845__$1, commentid, text, userid) {
                return function(state_20849) {
                  var state_val_20850 = state_20849[1];
                  if (state_val_20850 === 2) {
                    var inst_20847 = state_20849[2];
                    var state_20849__$1 = state_20849;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20849__$1, inst_20847);
                  } else {
                    if (state_val_20850 === 1) {
                      var state_20849__$1 = state_20849;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20849__$1, 2, req_c, children_req);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__8250__auto___20862, expanded, child_comment_atom, children_req, map__20845, map__20845__$1, commentid, text, userid);
              return function(switch__8194__auto__, c__8250__auto___20862, expanded, child_comment_atom, children_req, map__20845, map__20845__$1, commentid, text, userid) {
                return function() {
                  var forum$core$display_comment_$_state_machine__8195__auto__ = null;
                  var forum$core$display_comment_$_state_machine__8195__auto____0 = function() {
                    var statearr_20854 = [null, null, null, null, null, null, null];
                    statearr_20854[0] = forum$core$display_comment_$_state_machine__8195__auto__;
                    statearr_20854[1] = 1;
                    return statearr_20854;
                  };
                  var forum$core$display_comment_$_state_machine__8195__auto____1 = function(state_20849) {
                    while (true) {
                      var ret_value__8196__auto__ = function() {
                        try {
                          while (true) {
                            var result__8197__auto__ = switch__8194__auto__.call(null, state_20849);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__8197__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__8197__auto__;
                            }
                            break;
                          }
                        } catch (e20855) {
                          if (e20855 instanceof Object) {
                            var ex__8198__auto__ = e20855;
                            var statearr_20856_20863 = state_20849;
                            statearr_20856_20863[5] = ex__8198__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20849);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e20855;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8196__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__20864 = state_20849;
                        state_20849 = G__20864;
                        continue;
                      } else {
                        return ret_value__8196__auto__;
                      }
                      break;
                    }
                  };
                  forum$core$display_comment_$_state_machine__8195__auto__ = function(state_20849) {
                    switch(arguments.length) {
                      case 0:
                        return forum$core$display_comment_$_state_machine__8195__auto____0.call(this);
                      case 1:
                        return forum$core$display_comment_$_state_machine__8195__auto____1.call(this, state_20849);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  forum$core$display_comment_$_state_machine__8195__auto__.cljs$core$IFn$_invoke$arity$0 = forum$core$display_comment_$_state_machine__8195__auto____0;
                  forum$core$display_comment_$_state_machine__8195__auto__.cljs$core$IFn$_invoke$arity$1 = forum$core$display_comment_$_state_machine__8195__auto____1;
                  return forum$core$display_comment_$_state_machine__8195__auto__;
                }();
              }(switch__8194__auto__, c__8250__auto___20862, expanded, child_comment_atom, children_req, map__20845, map__20845__$1, commentid, text, userid);
            }();
            var state__8252__auto__ = function() {
              var statearr_20857 = f__8251__auto__.call(null);
              statearr_20857[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8250__auto___20862;
              return statearr_20857;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8252__auto__);
          };
        }(c__8250__auto___20862, expanded, child_comment_atom, children_req, map__20845, map__20845__$1, commentid, text, userid));
        cljs.core.print.call(null, child_comment_atom);
        var iter__4876__auto__ = function(expanded, child_comment_atom, children_req, map__20845, map__20845__$1, commentid, text, userid) {
          return function forum$core$display_comment_$_iter__20858(s__20859) {
            return new cljs.core.LazySeq(null, function(expanded, child_comment_atom, children_req, map__20845, map__20845__$1, commentid, text, userid) {
              return function() {
                var s__20859__$1 = s__20859;
                while (true) {
                  var temp__4126__auto__ = cljs.core.seq.call(null, s__20859__$1);
                  if (temp__4126__auto__) {
                    var s__20859__$2 = temp__4126__auto__;
                    if (cljs.core.chunked_seq_QMARK_.call(null, s__20859__$2)) {
                      var c__4874__auto__ = cljs.core.chunk_first.call(null, s__20859__$2);
                      var size__4875__auto__ = cljs.core.count.call(null, c__4874__auto__);
                      var b__20861 = cljs.core.chunk_buffer.call(null, size__4875__auto__);
                      if (function() {
                        var i__20860 = 0;
                        while (true) {
                          if (i__20860 < size__4875__auto__) {
                            var child_comment = cljs.core._nth.call(null, c__4874__auto__, i__20860);
                            cljs.core.chunk_append.call(null, b__20861, cljs.core.with_meta(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [forum$core$display_comment, req_c, child_comment], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", -1516042587), (new cljs.core.Keyword(null, "commentid", "commentid", 1114919753)).cljs$core$IFn$_invoke$arity$1(child_comment)], null)));
                            var G__20865 = i__20860 + 1;
                            i__20860 = G__20865;
                            continue;
                          } else {
                            return true;
                          }
                          break;
                        }
                      }()) {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__20861), forum$core$display_comment_$_iter__20858.call(null, cljs.core.chunk_rest.call(null, s__20859__$2)));
                      } else {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__20861), null);
                      }
                    } else {
                      var child_comment = cljs.core.first.call(null, s__20859__$2);
                      return cljs.core.cons.call(null, cljs.core.with_meta(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [forum$core$display_comment, req_c, child_comment], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", -1516042587), (new cljs.core.Keyword(null, "commentid", "commentid", 1114919753)).cljs$core$IFn$_invoke$arity$1(child_comment)], null)), forum$core$display_comment_$_iter__20858.call(null, cljs.core.rest.call(null, 
                      s__20859__$2)));
                    }
                  } else {
                    return null;
                  }
                  break;
                }
              };
            }(expanded, child_comment_atom, children_req, map__20845, map__20845__$1, commentid, text, userid), null, null);
          };
        }(expanded, child_comment_atom, children_req, map__20845, map__20845__$1, commentid, text, userid);
        return iter__4876__auto__.call(null, (new cljs.core.Keyword(null, "children", "children", -940561982)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, child_comment_atom)));
      }() : null], null);
    };
  }(expanded, child_comment_atom, children_req, map__20845, map__20845__$1, commentid, text, userid);
};
forum.core.hello = function forum$core$hello(name) {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), "hello ", name, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [forum.core.display_comment, forum.core.request_chan], null)], null);
};
reagent.core.render.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [forum.core.display_comment, forum.core.request_chan, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "userid", "userid", 1974246085), 0, new cljs.core.Keyword(null, "text", "text", -1790561697), "test comment", new cljs.core.Keyword(null, "commentid", "commentid", 1114919753), 0], null)], null), document.body);
