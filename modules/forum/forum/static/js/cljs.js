if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

/**
 * React v0.12.2
 */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.React=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var ReactChildren = _dereq_("./ReactChildren");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactDOM = _dereq_("./ReactDOM");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDefaultInjection = _dereq_("./ReactDefaultInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTypes = _dereq_("./ReactPropTypes");
var ReactServerRendering = _dereq_("./ReactServerRendering");
var ReactTextComponent = _dereq_("./ReactTextComponent");

var assign = _dereq_("./Object.assign");
var deprecated = _dereq_("./deprecated");
var onlyChild = _dereq_("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;

if ("production" !== "development") {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
}

// TODO: Drop legacy elements once classes no longer export these factories
createElement = ReactLegacyElement.wrapCreateElement(
  createElement
);
createFactory = ReactLegacyElement.wrapCreateFactory(
  createFactory
);

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactCompositeComponent.createClass,
  createElement: createElement,
  createFactory: createFactory,
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidClass: ReactLegacyElement.isValidClass,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign,

  // Deprecations (remove for 0.13)
  renderComponent: deprecated(
    'React',
    'renderComponent',
    'render',
    this,
    render
  ),
  renderComponentToString: deprecated(
    'React',
    'renderComponentToString',
    'renderToString',
    this,
    ReactServerRendering.renderToString
  ),
  renderComponentToStaticMarkup: deprecated(
    'React',
    'renderComponentToStaticMarkup',
    'renderToStaticMarkup',
    this,
    ReactServerRendering.renderToStaticMarkup
  ),
  isValidComponent: deprecated(
    'React',
    'isValidComponent',
    'isValidElement',
    this,
    ReactElement.isValidElement
  )
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    Component: ReactComponent,
    CurrentOwner: ReactCurrentOwner,
    DOMComponent: ReactDOMComponent,
    DOMPropertyOperations: DOMPropertyOperations,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    MultiChild: ReactMultiChild,
    TextComponent: ReactTextComponent
  });
}

if ("production" !== "development") {
  var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'http://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'http://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

// Version exists only in the open-source version of React, not in Facebook's
// internal version.
React.version = '0.12.2';

module.exports = React;

},{"./DOMPropertyOperations":12,"./EventPluginUtils":20,"./ExecutionEnvironment":22,"./Object.assign":27,"./ReactChildren":31,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactDOM":37,"./ReactDOMComponent":39,"./ReactDefaultInjection":49,"./ReactElement":52,"./ReactElementValidator":53,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./ReactPropTypes":72,"./ReactServerRendering":76,"./ReactTextComponent":78,"./deprecated":106,"./onlyChild":137}],2:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

"use strict";

var focusNode = _dereq_("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":111}],3:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var SyntheticInputEvent = _dereq_("./SyntheticInputEvent");

var keyOf = _dereq_("./keyOf");

var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !('documentMode' in document || isPresto())
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  }
};

// Track characters inserted via keypress and composition events.
var fallbackChars = null;

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var chars;

    if (canUseTextInputEvent) {
      switch (topLevelType) {
        case topLevelTypes.topKeyPress:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return;
          }

          hasSpaceKeypress = true;
          chars = SPACEBAR_CHAR;
          break;

        case topLevelTypes.topTextInput:
          // Record the characters to be added to the DOM.
          chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to blacklist it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return;
          }

          // Otherwise, carry on.
          break;

        default:
          // For other native event types, do nothing.
          return;
      }
    } else {
      switch (topLevelType) {
        case topLevelTypes.topPaste:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          fallbackChars = null;
          break;
        case topLevelTypes.topKeyPress:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
            fallbackChars = String.fromCharCode(nativeEvent.which);
          }
          break;
        case topLevelTypes.topCompositionEnd:
          fallbackChars = nativeEvent.data;
          break;
      }

      // If no changes have occurred to the fallback string, no relevant
      // event has fired and we're done.
      if (fallbackChars === null) {
        return;
      }

      chars = fallbackChars;
    }

    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return;
    }

    var event = SyntheticInputEvent.getPooled(
      eventTypes.beforeInput,
      topLevelTargetID,
      nativeEvent
    );

    event.data = chars;
    fallbackChars = null;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./SyntheticInputEvent":89,"./keyOf":133}],4:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

"use strict";

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeOpacity: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],5:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var camelizeStyleName = _dereq_("./camelizeStyleName");
var dangerousStyleValue = _dereq_("./dangerousStyleValue");
var hyphenateStyleName = _dereq_("./hyphenateStyleName");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== "development") {
  var warnedStyleNames = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== "development" ? warning(
      false,
      'Unsupported style property ' + name + '. Did you mean ' +
      camelizeStyleName(name) + '?'
    ) : null);
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

},{"./CSSProperty":4,"./ExecutionEnvironment":22,"./camelizeStyleName":100,"./dangerousStyleValue":105,"./hyphenateStyleName":124,"./memoizeStringOnly":135,"./warning":145}],6:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== "development" ? invariant(
        callbacks.length === contexts.length,
        "Mismatched list of contexts in callback queue"
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

},{"./Object.assign":27,"./PooledClass":28,"./invariant":126}],7:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactUpdates = _dereq_("./ReactUpdates");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var isEventSupported = _dereq_("./isEventSupported");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    !('documentMode' in document) || document.documentMode > 8
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    !('documentMode' in document) || document.documentMode > 9
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactUpdates":79,"./SyntheticEvent":87,"./isEventSupported":127,"./isTextInputElement":129,"./keyOf":133}],8:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

"use strict";

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],9:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CompositionEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticCompositionEvent = _dereq_("./SyntheticCompositionEvent");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var keyOf = _dereq_("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var useCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. In Korean, for example,
// the compositionend event contains only one character regardless of
// how many characters have been composed since compositionstart.
// We therefore use the fallback data while still using the native
// events as triggers.
var useFallbackData = (
  !useCompositionEvent ||
  (
    'documentMode' in document &&
    document.documentMode > 8 &&
    document.documentMode <= 11
  )
);

var topLevelTypes = EventConstants.topLevelTypes;
var currentComposition = null;

// Events and their corresponding property names.
var eventTypes = {
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Helper class stores information about selection and document state
 * so we can figure out what changed at a later date.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this.root = root;
  this.startSelection = ReactInputSelection.getSelection(root);
  this.startValue = this.getText();
}

/**
 * Get current text of input.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getText = function() {
  return this.root.value || this.root[getTextContentAccessor()];
};

/**
 * Text that has changed since the start of composition.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getData = function() {
  var endValue = this.getText();
  var prefixLength = this.startSelection.start;
  var suffixLength = this.startValue.length - this.startSelection.end;

  return endValue.substr(
    prefixLength,
    endValue.length - suffixLength - prefixLength
  );
};

/**
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
 * `onCompositionEnd` events on inputs, textareas and contentEditable
 * nodes.
 */
var CompositionEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var eventType;
    var data;

    if (useCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (useFallbackData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = new FallbackCompositionState(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          data = currentComposition.getData();
          currentComposition = null;
        }
      }
    }

    if (eventType) {
      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );
      if (data) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = data;
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
  }
};

module.exports = CompositionEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactInputSelection":59,"./SyntheticCompositionEvent":85,"./getTextContentAccessor":121,"./keyOf":133}],10:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

"use strict";

var Danger = _dereq_("./Danger");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var invariant = _dereq_("./invariant");

/**
 * The DOM property to use when setting text content.
 *
 * @type {string}
 * @private
 */
var textContentAccessor = getTextContentAccessor();

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

var updateTextContent;
if (textContentAccessor === 'textContent') {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    node.textContent = text;
  };
} else {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    // In order to preserve newlines correctly, we can't use .innerText to set
    // the contents (see #1080), so we empty the element then append a text node
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    if (text) {
      var doc = node.ownerDocument || document;
      node.appendChild(doc.createTextNode(text));
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: updateTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; update = updates[i]; i++) {
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== "development" ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; update = updates[k]; k++) {
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          updateTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

},{"./Danger":13,"./ReactMultiChildUpdateTypes":65,"./getTextContentAccessor":121,"./invariant":126}],11:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

"use strict";

var invariant = _dereq_("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== "development" ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== "development" ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== "development" ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== "development" ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

},{"./invariant":126}],12:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
  return escapeTextForBrowser(name) + '="';
});

if ("production" !== "development") {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== "development" ? warning(
      standardName == null,
      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
      escapeTextForBrowser(id) + '"';
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return escapeTextForBrowser(attributeName);
      }
      return processAttributeNameAndPrefix(attributeName) +
        escapeTextForBrowser(value) + '"';
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return processAttributeNameAndPrefix(name) +
        escapeTextForBrowser(value) + '"';
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

},{"./DOMProperty":11,"./escapeTextForBrowser":109,"./memoizeStringOnly":135,"./warning":145}],13:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createNodesFromMarkup = _dereq_("./createNodesFromMarkup");
var emptyFunction = _dereq_("./emptyFunction");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== "development" ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      for (var resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (i = 0; i < renderNodes.length; ++i) {
        var renderNode = renderNodes[i];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== "development" ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== "development") {
          console.error(
            "Danger: Discarding unexpected node:",
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== "development" ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== "development" ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== "development" ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== "development" ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See renderComponentToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

},{"./ExecutionEnvironment":22,"./createNodesFromMarkup":104,"./emptyFunction":107,"./getMarkupWrap":118,"./invariant":126}],14:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

"use strict";

 var keyOf = _dereq_("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({CompositionEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":133}],15:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

var ReactMount = _dereq_("./ReactMount");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactMount":63,"./SyntheticMouseEvent":91,"./keyOf":133}],16:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":132}],17:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== "development") {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

},{"./emptyFunction":107}],18:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

"use strict";

var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var EventPluginUtils = _dereq_("./EventPluginUtils");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var invalid = !InstanceHandle||
    !InstanceHandle.traverseTwoPhase ||
    !InstanceHandle.traverseEnterLeave;
  if (invalid) {
    throw new Error('InstanceHandle not injected before use!');
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== "development") {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== "development") {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== "development" ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== "development" ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

},{"./EventPluginRegistry":19,"./EventPluginUtils":20,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],19:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== "development" ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== "development" ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== "development" ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== "development" ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== "development" ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

},{"./invariant":126}],20:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var invariant = _dereq_("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== "development") {
      ("production" !== "development" ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== "development") {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== "development" ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, executeDispatch) {
  forEachEventDispatch(event, executeDispatch);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== "development" ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

},{"./EventConstants":16,"./invariant":126}],21:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== "development") {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

},{"./EventConstants":16,"./EventPluginHub":18,"./accumulateInto":97,"./forEachAccumulated":112}],22:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  typeof window !== 'undefined' &&
  window.document &&
  window.document.createElement
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],23:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    property: null // Supports OG in meta tags
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    encType: 'enctype',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":11,"./ExecutionEnvironment":22}],24:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

"use strict";

var ReactPropTypes = _dereq_("./ReactPropTypes");

var invariant = _dereq_("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== "development" ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

},{"./ReactPropTypes":72,"./invariant":126}],25:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

"use strict";

var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== "development" ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      this.getDOMNode()
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

},{"./ReactBrowserEventEmitter":30,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],26:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var emptyFunction = _dereq_("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":16,"./emptyFunction":107}],27:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
};

module.exports = assign;

},{}],28:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== "development" ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

},{"./invariant":126}],29:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

"use strict";

var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactMount = _dereq_("./ReactMount");

var invariant = _dereq_("./invariant");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    ("production" !== "development" ? invariant(
      this.isMounted(),
      'getDOMNode(): A component must be mounted to have a DOM node.'
    ) : invariant(this.isMounted()));
    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
      return null;
    }
    return ReactMount.getNode(this._rootNodeID);
  }
};

module.exports = ReactBrowserComponentMixin;

},{"./ReactEmptyComponent":54,"./ReactMount":63,"./invariant":126}],30:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var ReactEventEmitterMixin = _dereq_("./ReactEventEmitterMixin");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var assign = _dereq_("./Object.assign");
var isEventSupported = _dereq_("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      ReactBrowserEventEmitter.ReactEventListener &&
      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            isListening.hasOwnProperty(dependency) &&
            isListening[dependency]
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function(){
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPluginRegistry":19,"./Object.assign":27,"./ReactEventEmitterMixin":56,"./ViewportMetrics":96,"./isEventSupported":127}],31:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'ReactChildren.map(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return mapResult;
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

},{"./PooledClass":28,"./traverseAllChildren":144,"./warning":145}],32:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");

/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null,
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null
});

var injected = false;

/**
 * Optionally injectable environment dependent cleanup hook. (server vs.
 * browser etc). Example: A browser system caches DOM nodes based on component
 * ID and must remove that cache entry when this instance is unmounted.
 *
 * @private
 */
var unmountIDFromEnvironment = null;

/**
 * The "image" of a component tree, is the platform specific (typically
 * serialized) data that represents a tree of lower level UI building blocks.
 * On the web, this "image" is HTML markup which describes a construction of
 * low level `div` and `span` nodes. Other platforms may have different
 * encoding of this "image". This must be injected.
 *
 * @private
 */
var mountImageIntoNode = null;

/**
 * Components are the basic units of composition in React.
 *
 * Every component accepts a set of keyed input parameters known as "props" that
 * are initialized by the constructor. Once a component is mounted, the props
 * can be mutated using `setProps` or `replaceProps`.
 *
 * Every component is capable of the following operations:
 *
 *   `mountComponent`
 *     Initializes the component, renders markup, and registers event listeners.
 *
 *   `receiveComponent`
 *     Updates the rendered DOM nodes to match the given component.
 *
 *   `unmountComponent`
 *     Releases any resources allocated by this component.
 *
 * Components can also be "owned" by other components. Being owned by another
 * component means being constructed by that component. This is different from
 * being the child of a component, which means having a DOM representation that
 * is a child of the DOM representation of that component.
 *
 * @class ReactComponent
 */
var ReactComponent = {

  injection: {
    injectEnvironment: function(ReactComponentEnvironment) {
      ("production" !== "development" ? invariant(
        !injected,
        'ReactComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
      unmountIDFromEnvironment =
        ReactComponentEnvironment.unmountIDFromEnvironment;
      ReactComponent.BackendIDOperations =
        ReactComponentEnvironment.BackendIDOperations;
      injected = true;
    }
  },

  /**
   * @internal
   */
  LifeCycle: ComponentLifeCycle,

  /**
   * Injected module that provides ability to mutate individual properties.
   * Injected into the base class because many different subclasses need access
   * to this.
   *
   * @internal
   */
  BackendIDOperations: null,

  /**
   * Base functionality for every ReactComponent constructor. Mixed into the
   * `ReactComponent` prototype, but exposed statically for easy access.
   *
   * @lends {ReactComponent.prototype}
   */
  Mixin: {

    /**
     * Checks whether or not this component is mounted.
     *
     * @return {boolean} True if mounted, false otherwise.
     * @final
     * @protected
     */
    isMounted: function() {
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    setProps: function(partialProps, callback) {
      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var element = this._pendingElement || this._currentElement;
      this.replaceProps(
        assign({}, element.props, partialProps),
        callback
      );
    },

    /**
     * Replaces all of the props.
     *
     * @param {object} props New props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    replaceProps: function(props, callback) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'replaceProps(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      ("production" !== "development" ? invariant(
        this._mountDepth === 0,
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(this._mountDepth === 0));
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        this._pendingElement || this._currentElement,
        props
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Schedule a partial update to the props. Only used for internal testing.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @internal
     */
    _setPropsInternal: function(partialProps, callback) {
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      var element = this._pendingElement || this._currentElement;
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        element,
        assign({}, element.props, partialProps)
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Base constructor for all React components.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.construct.call(this, ...)`.
     *
     * @param {ReactElement} element
     * @internal
     */
    construct: function(element) {
      // This is the public exposed props object after it has been processed
      // with default props. The element's props represents the true internal
      // state of the props.
      this.props = element.props;
      // Record the component responsible for creating this component.
      // This is accessible through the element but we maintain an extra
      // field for compatibility with devtools and as a way to make an
      // incremental update. TODO: Consider deprecating this field.
      this._owner = element._owner;

      // All components start unmounted.
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

      // See ReactUpdates.
      this._pendingCallbacks = null;

      // We keep the old element and a reference to the pending element
      // to track updates.
      this._currentElement = element;
      this._pendingElement = null;
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * NOTE: This does not insert any nodes into the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {number} mountDepth number of components in the owner hierarchy.
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @internal
     */
    mountComponent: function(rootID, transaction, mountDepth) {
      ("production" !== "development" ? invariant(
        !this.isMounted(),
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
        'Make sure to avoid storing components between renders or reusing a ' +
        'single component instance in multiple places.',
        rootID
      ) : invariant(!this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        var owner = this._currentElement._owner;
        ReactOwner.addComponentAsRefTo(this, ref, owner);
      }
      this._rootNodeID = rootID;
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
      this._mountDepth = mountDepth;
      // Effectively: return '';
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * NOTE: This does not remove any nodes from the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.unmountComponent.call(this)`.
     *
     * @internal
     */
    unmountComponent: function() {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'unmountComponent(): Can only unmount a mounted component.'
      ) : invariant(this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        ReactOwner.removeComponentAsRefFrom(this, ref, this._owner);
      }
      unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
    },

    /**
     * Given a new instance of this component, updates the rendered DOM nodes
     * as if that instance was rendered instead.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
     *
     * @param {object} nextComponent Next set of properties.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextElement, transaction) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'receiveComponent(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      this._pendingElement = nextElement;
      this.performUpdateIfNecessary(transaction);
    },

    /**
     * If `_pendingElement` is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function(transaction) {
      if (this._pendingElement == null) {
        return;
      }
      var prevElement = this._currentElement;
      var nextElement = this._pendingElement;
      this._currentElement = nextElement;
      this.props = nextElement.props;
      this._owner = nextElement._owner;
      this._pendingElement = null;
      this.updateComponent(transaction, prevElement);
    },

    /**
     * Updates the component's currently mounted representation.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {object} prevElement
     * @internal
     */
    updateComponent: function(transaction, prevElement) {
      var nextElement = this._currentElement;

      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`. We use the element instead
      // of the public this.props because the post processing cannot determine
      // a ref. The ref conceptually lives on the element.

      // TODO: Should this even be possible? The owner cannot change because
      // it's forbidden by shouldUpdateReactComponent. The ref can change
      // if you swap the keys of but not the refs. Reconsider where this check
      // is made. It probably belongs where the key checking and
      // instantiateReactComponent is done.

      if (nextElement._owner !== prevElement._owner ||
          nextElement.ref !== prevElement.ref) {
        if (prevElement.ref != null) {
          ReactOwner.removeComponentAsRefFrom(
            this, prevElement.ref, prevElement._owner
          );
        }
        // Correct, even if the owner is the same, and only the ref has changed.
        if (nextElement.ref != null) {
          ReactOwner.addComponentAsRefTo(
            this,
            nextElement.ref,
            nextElement._owner
          );
        }
      }
    },

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @internal
     * @see {ReactMount.render}
     */
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
      transaction.perform(
        this._mountComponentIntoNode,
        this,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactUpdates.ReactReconcileTransaction.release(transaction);
    },

    /**
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @private
     */
    _mountComponentIntoNode: function(
        rootID,
        container,
        transaction,
        shouldReuseMarkup) {
      var markup = this.mountComponent(rootID, transaction, 0);
      mountImageIntoNode(markup, container, shouldReuseMarkup);
    },

    /**
     * Checks if this component is owned by the supplied `owner` component.
     *
     * @param {ReactComponent} owner Component to check.
     * @return {boolean} True if `owners` owns this component.
     * @final
     * @internal
     */
    isOwnedBy: function(owner) {
      return this._owner === owner;
    },

    /**
     * Gets another component, that shares the same owner as this one, by ref.
     *
     * @param {string} ref of a sibling Component.
     * @return {?ReactComponent} the actual sibling Component.
     * @final
     * @internal
     */
    getSiblingByRef: function(ref) {
      var owner = this._owner;
      if (!owner || !owner.refs) {
        return null;
      }
      return owner.refs[ref];
    }
  }
};

module.exports = ReactComponent;

},{"./Object.assign":27,"./ReactElement":52,"./ReactOwner":67,"./ReactUpdates":79,"./invariant":126,"./keyMirror":132}],33:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

"use strict";

var ReactDOMIDOperations = _dereq_("./ReactDOMIDOperations");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");
var ReactReconcileTransaction = _dereq_("./ReactReconcileTransaction");

var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");


var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;


/**
 * Abstracts away all functionality of `ReactComponent` requires knowledge of
 * the browser context.
 */
var ReactComponentBrowserEnvironment = {
  ReactReconcileTransaction: ReactReconcileTransaction,

  BackendIDOperations: ReactDOMIDOperations,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  },

  /**
   * @param {string} markup Markup string to place into the DOM Element.
   * @param {DOMElement} container DOM Element to insert markup into.
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
   * container if possible.
   */
  mountImageIntoNode: ReactPerf.measure(
    'ReactComponentBrowserEnvironment',
    'mountImageIntoNode',
    function(markup, container, shouldReuseMarkup) {
      ("production" !== "development" ? invariant(
        container && (
          container.nodeType === ELEMENT_NODE_TYPE ||
            container.nodeType === DOC_NODE_TYPE
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
          container.nodeType === DOC_NODE_TYPE
      )));

      if (shouldReuseMarkup) {
        if (ReactMarkupChecksum.canReuseMarkup(
          markup,
          getReactRootElementInContainer(container))) {
          return;
        } else {
          ("production" !== "development" ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side.'
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== "development") {
            console.warn(
              'React attempted to use reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected ' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server.'
            );
          }
        }
      }

      ("production" !== "development" ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See renderComponentToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      setInnerHTML(container, markup);
    }
  )
};

module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":41,"./ReactMarkupChecksum":62,"./ReactMount":63,"./ReactPerf":68,"./ReactReconcileTransaction":74,"./getReactRootElementInContainer":120,"./invariant":126,"./setInnerHTML":140}],34:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactErrorUtils = _dereq_("./ReactErrorUtils");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTransferer = _dereq_("./ReactPropTransferer");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var mapObject = _dereq_("./mapObject");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactCompositeComponentInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base ReactCompositeComponent class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactCompositeComponent`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactCompositeComponentInterface
 * @internal
 */
var ReactCompositeComponentInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    validateTypeDef(
      Constructor,
      childContextTypes,
      ReactPropTypeLocations.childContext
    );
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    validateTypeDef(
      Constructor,
      contextTypes,
      ReactPropTypeLocations.context
    );
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    validateTypeDef(
      Constructor,
      propTypes,
      ReactPropTypeLocations.prop
    );
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function getDeclarationErrorAddendum(component) {
  var owner = component._owner || null;
  if (owner && owner.constructor && owner.constructor.displayName) {
    return ' Check the render method of `' + owner.constructor.displayName +
      '`.';
  }
  return '';
}

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      ("production" !== "development" ? invariant(
        typeof typeDef[propName] == 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactCompositeComponent',
        ReactPropTypeLocationNames[location],
        propName
      ) : invariant(typeof typeDef[propName] == 'function'));
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
    ReactCompositeComponentInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactCompositeComponentInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactCompositeComponentInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

function validateLifeCycleOnReplaceState(instance) {
  var compositeLifeCycleState = instance._compositeLifeCycleState;
  ("production" !== "development" ? invariant(
    instance.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
    'replaceState(...): Can only update a mounted or mounting component.'
  ) : invariant(instance.isMounted() ||
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
  ("production" !== "development" ? invariant(
    ReactCurrentOwner.current == null,
    'replaceState(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.'
  ) : invariant(ReactCurrentOwner.current == null));
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
    'replaceState(...): Cannot update while unmounting component. This ' +
    'usually means you called setState() on an unmounted component.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building `ReactCompositeComponent` classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== "development" ? invariant(
    !ReactLegacyElement.isValidFactory(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));
  ("production" !== "development" ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactCompositeComponent methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isCompositeComponentMethod =
        ReactCompositeComponentInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isCompositeComponentMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactCompositeComponentInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== "development" ? invariant(
            isCompositeComponentMethod && (
              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
              specPolicy === SpecPolicy.DEFINE_MANY
            ),
            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isCompositeComponentMethod && (
            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
            specPolicy === SpecPolicy.DEFINE_MANY
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== "development") {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== "development" ? invariant(
      !isReserved,
      'ReactCompositeComponent: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== "development" ? invariant(
      !isInherited,
      'ReactCompositeComponent: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeObjectsWithNoDuplicateKeys(one, two) {
  ("production" !== "development" ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  mapObject(two, function(value, key) {
    ("production" !== "development" ? invariant(
      one[key] === undefined,
      'mergeObjectsWithNoDuplicateKeys(): ' +
      'Tried to merge two objects with the same key: `%s`. This conflict ' +
      'may be due to a mixin; in particular, this may be caused by two ' +
      'getInitialState() or getDefaultProps() methods returning objects ' +
      'with clashing keys.',
      key
    ) : invariant(one[key] === undefined));
    one[key] = value;
  });
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    return mergeObjectsWithNoDuplicateKeys(a, b);
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
 * `this._compositeLifeCycleState` (which can be null).
 *
 * This is different from the life cycle state maintained by `ReactComponent` in
 * `this._lifeCycleState`. The following diagram shows how the states overlap in
 * time. There are times when the CompositeLifeCycle is null - at those times it
 * is only meaningful to look at ComponentLifeCycle alone.
 *
 * Top Row: ReactComponent.ComponentLifeCycle
 * Low Row: ReactComponent.CompositeLifeCycle
 *
 * +-------+---------------------------------+--------+
 * |  UN   |             MOUNTED             |   UN   |
 * |MOUNTED|                                 | MOUNTED|
 * +-------+---------------------------------+--------+
 * |       ^--------+   +-------+   +--------^        |
 * |       |        |   |       |   |        |        |
 * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |
 * |       |        |   |PROPS  |   |MOUNTING|        |
 * |       |        |   |       |   |        |        |
 * |       |        |   |       |   |        |        |
 * |       +--------+   +-------+   +--------+        |
 * |       |                                 |        |
 * +-------+---------------------------------+--------+
 */
var CompositeLifeCycle = keyMirror({
  /**
   * Components in the process of being mounted respond to state changes
   * differently.
   */
  MOUNTING: null,
  /**
   * Components in the process of being unmounted are guarded against state
   * changes.
   */
  UNMOUNTING: null,
  /**
   * Components that are mounted and receiving new props respond to state
   * changes differently.
   */
  RECEIVING_PROPS: null
});

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    // Children can be either an array or more than one argument
    ReactComponent.Mixin.construct.apply(this, arguments);
    ReactOwner.Mixin.construct.apply(this, arguments);

    this.state = null;
    this._pendingState = null;

    // This is the public post-processed context. The real context and pending
    // context lives on the element.
    this.context = null;

    this._compositeLifeCycleState = null;
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    return ReactComponent.Mixin.isMounted.call(this) &&
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

      if (this.__reactAutoBindMap) {
        this._bindAutoBindMethods();
      }

      this.context = this._processContext(this._currentElement._context);
      this.props = this._processProps(this.props);

      this.state = this.getInitialState ? this.getInitialState() : null;
      ("production" !== "development" ? invariant(
        typeof this.state === 'object' && !Array.isArray(this.state),
        '%s.getInitialState(): must return an object or null',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

      this._pendingState = null;
      this._pendingForceUpdate = false;

      if (this.componentWillMount) {
        this.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingState` without triggering a re-render.
        if (this._pendingState) {
          this.state = this._pendingState;
          this._pendingState = null;
        }
      }

      this._renderedComponent = instantiateReactComponent(
        this._renderValidatedComponent(),
        this._currentElement.type // The wrapping type
      );

      // Done with mounting, `setState` will now trigger UI changes.
      this._compositeLifeCycleState = null;
      var markup = this._renderedComponent.mountComponent(
        rootID,
        transaction,
        mountDepth + 1
      );
      if (this.componentDidMount) {
        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
      }
      return markup;
    }
  ),

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
    if (this.componentWillUnmount) {
      this.componentWillUnmount();
    }
    this._compositeLifeCycleState = null;

    this._renderedComponent.unmountComponent();
    this._renderedComponent = null;

    ReactComponent.Mixin.unmountComponent.call(this);

    // Some existing components rely on this.props even after they've been
    // destroyed (in event handlers).
    // TODO: this.props = null;
    // TODO: this.state = null;
  },

  /**
   * Sets a subset of the state. Always use this or `replaceState` to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  setState: function(partialState, callback) {
    ("production" !== "development" ? invariant(
      typeof partialState === 'object' || partialState == null,
      'setState(...): takes an object of state variables to update.'
    ) : invariant(typeof partialState === 'object' || partialState == null));
    if ("production" !== "development"){
      ("production" !== "development" ? warning(
        partialState != null,
        'setState(...): You passed an undefined or null state object; ' +
        'instead, use forceUpdate().'
      ) : null);
    }
    // Merge with `_pendingState` if it exists, otherwise with existing state.
    this.replaceState(
      assign({}, this._pendingState || this.state, partialState),
      callback
    );
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {object} completeState Next state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  replaceState: function(completeState, callback) {
    validateLifeCycleOnReplaceState(this);
    this._pendingState = completeState;
    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
      // If we're in a componentWillMount handler, don't enqueue a rerender
      // because ReactUpdates assumes we're in a browser context (which is wrong
      // for server rendering) and we're about to do a render anyway.
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState.
      ReactUpdates.enqueueUpdate(this, callback);
    }
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = null;
    var contextTypes = this.constructor.contextTypes;
    if (contextTypes) {
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      if ("production" !== "development") {
        this._checkPropTypes(
          contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function(currentContext) {
    var childContext = this.getChildContext && this.getChildContext();
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
    if (childContext) {
      ("production" !== "development" ? invariant(
        typeof this.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        displayName
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
      if ("production" !== "development") {
        this._checkPropTypes(
          this.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== "development" ? invariant(
          name in this.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          displayName,
          name
        ) : invariant(name in this.constructor.childContextTypes));
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== "development") {
      var propTypes = this.constructor.propTypes;
      if (propTypes) {
        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.constructor.displayName;
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error =
          propTypes[propName](props, propName, componentName, location);
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // renderComponent calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);
          ("production" !== "development" ? warning(false, error.message + addendum) : null);
        }
      }
    }
  },

  /**
   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    // Do not trigger a state transition if we are in the middle of mounting or
    // receiving props because both of those will already be doing this.
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
      return;
    }

    if (this._pendingElement == null &&
        this._pendingState == null &&
        !this._pendingForceUpdate) {
      return;
    }

    var nextContext = this.context;
    var nextProps = this.props;
    var nextElement = this._currentElement;
    if (this._pendingElement != null) {
      nextElement = this._pendingElement;
      nextContext = this._processContext(nextElement._context);
      nextProps = this._processProps(nextElement.props);
      this._pendingElement = null;

      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
      if (this.componentWillReceiveProps) {
        this.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    this._compositeLifeCycleState = null;

    var nextState = this._pendingState || this.state;
    this._pendingState = null;

    var shouldUpdate =
      this._pendingForceUpdate ||
      !this.shouldComponentUpdate ||
      this.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== "development") {
      if (typeof shouldUpdate === "undefined") {
        console.warn(
          (this.constructor.displayName || 'ReactCompositeComponent') +
          '.shouldComponentUpdate(): Returned undefined instead of a ' +
          'boolean value. Make sure to return true or false.'
        );
      }
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextElement,
        nextProps,
        nextState,
        nextContext,
        transaction
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state.
      this._currentElement = nextElement;
      this.props = nextProps;
      this.state = nextState;
      this.context = nextContext;

      // Owner cannot change because shouldUpdateReactComponent doesn't allow
      // it. TODO: Remove this._owner completely.
      this._owner = nextElement._owner;
    }
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction
  ) {
    var prevElement = this._currentElement;
    var prevProps = this.props;
    var prevState = this.state;
    var prevContext = this.context;

    if (this.componentWillUpdate) {
      this.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this.props = nextProps;
    this.state = nextState;
    this.context = nextContext;

    // Owner cannot change because shouldUpdateReactComponent doesn't allow
    // it. TODO: Remove this._owner completely.
    this._owner = nextElement._owner;

    this.updateComponent(
      transaction,
      prevElement
    );

    if (this.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
        this
      );
    }
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'updateComponent',
    function(transaction, prevParentElement) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevParentElement
      );

      var prevComponentInstance = this._renderedComponent;
      var prevElement = prevComponentInstance._currentElement;
      var nextElement = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        prevComponentInstance.receiveComponent(nextElement, transaction);
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        prevComponentInstance.unmountComponent();
        this._renderedComponent = instantiateReactComponent(
          nextElement,
          this._currentElement.type
        );
        var nextMarkup = this._renderedComponent.mountComponent(
          thisID,
          transaction,
          this._mountDepth + 1
        );
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      }
    }
  ),

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  forceUpdate: function(callback) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    ("production" !== "development" ? invariant(
      this.isMounted() ||
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
      'forceUpdate(...): Can only force an update on mounted or mounting ' +
        'components.'
    ) : invariant(this.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
    ("production" !== "development" ? invariant(
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
      ReactCurrentOwner.current == null,
      'forceUpdate(...): Cannot force an update while unmounting component ' +
      'or within a `render` function.'
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
    ReactCurrentOwner.current == null));
    this._pendingForceUpdate = true;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * @private
   */
  _renderValidatedComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    '_renderValidatedComponent',
    function() {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._processChildContext(
        this._currentElement._context
      );
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this.render();
        if (renderedComponent === null || renderedComponent === false) {
          renderedComponent = ReactEmptyComponent.getEmptyComponent();
          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
        } else {
          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
        }
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== "development" ? invariant(
        ReactElement.isValidElement(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned undefined, an array or some other invalid object.',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(ReactElement.isValidElement(renderedComponent)));
      return renderedComponent;
    }
  ),

  /**
   * @private
   */
  _bindAutoBindMethods: function() {
    for (var autoBindKey in this.__reactAutoBindMap) {
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        continue;
      }
      var method = this.__reactAutoBindMap[autoBindKey];
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
        method,
        this.constructor.displayName + '.' + autoBindKey
      ));
    }
  },

  /**
   * Binds a method to the component.
   *
   * @param {function} method Method to be bound.
   * @private
   */
  _bindAutoBindMethod: function(method) {
    var component = this;
    var boundMethod = method.bind(component);
    if ("production" !== "development") {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): React component methods may only be bound to the ' +
            'component instance. See ' + componentName
          );
        } else if (!args.length) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See ' + componentName
          );
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
};

var ReactCompositeComponentBase = function() {};
assign(
  ReactCompositeComponentBase.prototype,
  ReactComponent.Mixin,
  ReactOwner.Mixin,
  ReactPropTransferer.Mixin,
  ReactCompositeComponentMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactCompositeComponent
 * @extends ReactComponent
 * @extends ReactOwner
 * @extends ReactPropTransferer
 */
var ReactCompositeComponent = {

  LifeCycle: CompositeLifeCycle,

  Base: ReactCompositeComponentBase,

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted. This will later be used
      // by the stand-alone class implementation.
    };
    Constructor.prototype = new ReactCompositeComponentBase();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    ("production" !== "development" ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== "development") {
      if (Constructor.prototype.componentShouldUpdate) {
        monitorCodeUse(
          'react_component_should_update_warning',
          { component: spec.displayName }
        );
        console.warn(
          (spec.displayName || 'A component') + ' has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.'
         );
      }
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactCompositeComponentInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    if ("production" !== "development") {
      return ReactLegacyElement.wrapFactory(
        ReactElementValidator.createFactory(Constructor)
      );
    }
    return ReactLegacyElement.wrapFactory(
      ReactElement.createFactory(Constructor)
    );
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }
};

module.exports = ReactCompositeComponent;

},{"./Object.assign":27,"./ReactComponent":32,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactElementValidator":53,"./ReactEmptyComponent":54,"./ReactErrorUtils":55,"./ReactLegacyElement":61,"./ReactOwner":67,"./ReactPerf":68,"./ReactPropTransferer":69,"./ReactPropTypeLocationNames":70,"./ReactPropTypeLocations":71,"./ReactUpdates":79,"./instantiateReactComponent":125,"./invariant":126,"./keyMirror":132,"./keyOf":133,"./mapObject":134,"./monitorCodeUse":136,"./shouldUpdateReactComponent":142,"./warning":145}],35:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

"use strict";

var assign = _dereq_("./Object.assign");

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: {},

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"./Object.assign":27}],36:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

"use strict";

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],37:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");

var mapObject = _dereq_("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== "development") {
    return ReactLegacyElement.markNonLegacyFactory(
      ReactElementValidator.createFactory(tag)
    );
  }
  return ReactLegacyElement.markNonLegacyFactory(
    ReactElement.createFactory(tag)
  );
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

},{"./ReactElement":52,"./ReactElementValidator":53,"./ReactLegacyElement":61,"./mapObject":134}],38:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var keyMirror = _dereq_("./keyMirror");

// Store a reference to the <button> `ReactDOMComponent`. TODO: use string
var button = ReactElement.createFactory(ReactDOM.button.type);

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMButton',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":2,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./keyMirror":132}],39:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMProperty = _dereq_("./DOMProperty");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponent = _dereq_("./ReactComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var invariant = _dereq_("./invariant");
var isEventSupported = _dereq_("./isEventSupported");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  ("production" !== "development" ? invariant(
    props.children == null || props.dangerouslySetInnerHTML == null,
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
  if ("production" !== "development") {
    if (props.contentEditable && props.children != null) {
      console.warn(
        'A component is `contentEditable` and contains `children` managed by ' +
        'React. It is now your responsibility to guarantee that none of those '+
        'nodes are unexpectedly modified or duplicated. This is probably not ' +
        'intentional.'
      );
    }
  }
  ("production" !== "development" ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== "development") {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    if (registrationName === 'onScroll' &&
        !isEventSupported('scroll', true)) {
      monitorCodeUse('react_no_scroll_event');
      console.warn('This browser doesn\'t support the `onScroll` event');
    }
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== "development" ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this.tagName = tag.toUpperCase();
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} The computed markup.
   */
  mountComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      assertValidProps(this.props);
      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction) +
        closeTag
      );
    }
  ),

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = props.style = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = this.props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
      var childrenToUse = contentToUse != null ? null : this.props.children;
      if (contentToUse != null) {
        return escapeTextForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction
        );
        return mountImages.join('');
      }
    }
    return '';
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'updateComponent',
    function(transaction, prevElement) {
      assertValidProps(this._currentElement.props);
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevElement
      );
      this._updateDOMProperties(prevElement.props, transaction);
      this._updateDOMChildren(prevElement.props, transaction);
    }
  ),

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = nextProps.style = assign({}, nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      ReactComponent.BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction) {
    var nextProps = this.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponent.Mixin.unmountComponent.call(this);
  }

};

assign(
  ReactDOMComponent.prototype,
  ReactComponent.Mixin,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin,
  ReactBrowserComponentMixin
);

module.exports = ReactDOMComponent;

},{"./CSSPropertyOperations":5,"./DOMProperty":11,"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./escapeTextForBrowser":109,"./invariant":126,"./isEventSupported":127,"./keyOf":133,"./monitorCodeUse":136}],40:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <form> `ReactDOMComponent`. TODO: use string
var form = ReactElement.createFactory(ReactDOM.form.type);

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMForm',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],41:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMChildrenOperations = _dereq_("./DOMChildrenOperations");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updatePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    }
  ),

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'deletePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    }
  ),

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateStylesByID',
    function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    }
  ),

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateInnerHTMLByID',
    function(id, html) {
      var node = ReactMount.getNode(id);
      setInnerHTML(node, html);
    }
  ),

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateTextContentByID',
    function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    }
  ),

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyReplaceNodeWithMarkupByID',
    function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    }
  ),

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyProcessChildrenUpdates',
    function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  )
};

module.exports = ReactDOMIDOperations;

},{"./CSSPropertyOperations":5,"./DOMChildrenOperations":10,"./DOMPropertyOperations":12,"./ReactMount":63,"./ReactPerf":68,"./invariant":126,"./setInnerHTML":140}],42:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <img> `ReactDOMComponent`. TODO: use string
var img = ReactElement.createFactory(ReactDOM.img.type);

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],43:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

// Store a reference to the <input> `ReactDOMComponent`. TODO: use string
var input = ReactElement.createFactory(ReactDOM.input.type);

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMInput',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== "development" ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== "development" ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactMount":63,"./ReactUpdates":79,"./invariant":126}],44:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

"use strict";

var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var warning = _dereq_("./warning");

// Store a reference to the <option> `ReactDOMComponent`. TODO: use string
var option = ReactElement.createFactory(ReactDOM.option.type);

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMOption',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

},{"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./warning":145}],45:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");

// Store a reference to the <select> `ReactDOMComponent`. TODO: use string
var select = ReactElement.createFactory(ReactDOM.select.type);

function updateWithPendingValueIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.setState({value: this._pendingValue});
    this._pendingValue = 0;
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * If `value` is supplied, updates <option> elements on mount and update.
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {?*} propValue For uncontrolled components, null/undefined. For
 * controlled components, a string (or with `multiple`, a list of strings).
 * @private
 */
function updateOptions(component, propValue) {
  var multiple = component.props.multiple;
  var value = propValue != null ? propValue : component.state.value;
  var options = component.getDOMNode().options;
  var selectedValue, i, l;
  if (multiple) {
    selectedValue = {};
    for (i = 0, l = value.length; i < l; ++i) {
      selectedValue['' + value[i]] = true;
    }
  } else {
    selectedValue = '' + value;
  }
  for (i = 0, l = options.length; i < l; i++) {
    var selected = multiple ?
      selectedValue.hasOwnProperty(options[i].value) :
      options[i].value === selectedValue;

    if (selected !== options[i].selected) {
      options[i].selected = selected;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * string. If `multiple` is true, the prop must be an array of strings.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMSelect',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  getInitialState: function() {
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
  },

  componentWillMount: function() {
    this._pendingValue = null;
  },

  componentWillReceiveProps: function(nextProps) {
    if (!this.props.multiple && nextProps.multiple) {
      this.setState({value: [this.state.value]});
    } else if (this.props.multiple && !nextProps.multiple) {
      this.setState({value: this.state.value[0]});
    }
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentDidMount: function() {
    updateOptions(this, LinkedValueUtils.getValue(this));
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    var prevMultiple = !!prevProps.multiple;
    var multiple = !!this.props.multiple;
    if (value != null || prevMultiple !== multiple) {
      updateOptions(this, value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    var selectedValue;
    if (this.props.multiple) {
      selectedValue = [];
      var options = event.target.options;
      for (var i = 0, l = options.length; i < l; i++) {
        if (options[i].selected) {
          selectedValue.push(options[i].value);
        }
      }
    } else {
      selectedValue = event.target.value;
    }

    this._pendingValue = selectedValue;
    ReactUpdates.asap(updateWithPendingValueIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":2,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79}],46:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var getNodeForCharacterOffset = _dereq_("./getNodeForCharacterOffset");
var getTextContentAccessor = _dereq_("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":22,"./getNodeForCharacterOffset":119,"./getTextContentAccessor":121}],47:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var warning = _dereq_("./warning");

// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string
var textarea = ReactElement.createFactory(ReactDOM.textarea.type);

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMTextarea',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== "development" ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== "development" ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== "development" ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79,"./invariant":126,"./warning":145}],48:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

"use strict";

var ReactUpdates = _dereq_("./ReactUpdates");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b);
    } else {
      transaction.perform(callback, null, a, b);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":27,"./ReactUpdates":79,"./Transaction":95,"./emptyFunction":107}],49:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

"use strict";

var BeforeInputEventPlugin = _dereq_("./BeforeInputEventPlugin");
var ChangeEventPlugin = _dereq_("./ChangeEventPlugin");
var ClientReactRootIndex = _dereq_("./ClientReactRootIndex");
var CompositionEventPlugin = _dereq_("./CompositionEventPlugin");
var DefaultEventPluginOrder = _dereq_("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = _dereq_("./EnterLeaveEventPlugin");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = _dereq_("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = _dereq_("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponentBrowserEnvironment =
  _dereq_("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = _dereq_("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDOMButton = _dereq_("./ReactDOMButton");
var ReactDOMForm = _dereq_("./ReactDOMForm");
var ReactDOMImg = _dereq_("./ReactDOMImg");
var ReactDOMInput = _dereq_("./ReactDOMInput");
var ReactDOMOption = _dereq_("./ReactDOMOption");
var ReactDOMSelect = _dereq_("./ReactDOMSelect");
var ReactDOMTextarea = _dereq_("./ReactDOMTextarea");
var ReactEventListener = _dereq_("./ReactEventListener");
var ReactInjection = _dereq_("./ReactInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var SelectEventPlugin = _dereq_("./SelectEventPlugin");
var ServerReactRootIndex = _dereq_("./ServerReactRootIndex");
var SimpleEventPlugin = _dereq_("./SimpleEventPlugin");
var SVGDOMPropertyConfig = _dereq_("./SVGDOMPropertyConfig");

var createFullPageComponent = _dereq_("./createFullPageComponent");

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    CompositionEventPlugin: CompositionEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  // This needs to happen after createFullPageComponent() otherwise the mixin
  // gets double injected.
  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactComponentBrowserEnvironment.ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if ("production" !== "development") {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = _dereq_("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

},{"./BeforeInputEventPlugin":3,"./ChangeEventPlugin":7,"./ClientReactRootIndex":8,"./CompositionEventPlugin":9,"./DefaultEventPluginOrder":14,"./EnterLeaveEventPlugin":15,"./ExecutionEnvironment":22,"./HTMLDOMPropertyConfig":23,"./MobileSafariClickEventPlugin":26,"./ReactBrowserComponentMixin":29,"./ReactComponentBrowserEnvironment":33,"./ReactDOMButton":38,"./ReactDOMComponent":39,"./ReactDOMForm":40,"./ReactDOMImg":42,"./ReactDOMInput":43,"./ReactDOMOption":44,"./ReactDOMSelect":45,"./ReactDOMTextarea":47,"./ReactDefaultBatchingStrategy":48,"./ReactDefaultPerf":50,"./ReactEventListener":57,"./ReactInjection":58,"./ReactInstanceHandles":60,"./ReactMount":63,"./SVGDOMPropertyConfig":80,"./SelectEventPlugin":81,"./ServerReactRootIndex":82,"./SimpleEventPlugin":83,"./createFullPageComponent":103}],50:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactDefaultPerfAnalysis = _dereq_("./ReactDefaultPerfAnalysis");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var performanceNow = _dereq_("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (moduleName === 'ReactDOMIDOperations' ||
        moduleName === 'ReactComponentBrowserEnvironment') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === 'mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        fnName === 'mountComponent' ||
        fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.constructor.displayName,
          owner: this._owner ? this._owner.constructor.displayName : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":11,"./ReactDefaultPerfAnalysis":51,"./ReactMount":63,"./ReactPerf":68,"./performanceNow":139}],51:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = _dereq_("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  'mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":27}],52:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

"use strict";

var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var warning = _dereq_("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== "development" ? warning(
        false,
        'Don\'t set the ' + key + ' property of the component. ' +
        'Mutate the existing props object instead.'
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== "development") {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = { validated: false, props: props };

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== "development") {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        config.key !== null,
        'createElement(...): Encountered component with a `key` of null. In ' +
        'a future version, this will be treated as equivalent to the string ' +
        '\'null\'; instead, provide an explicit key or use undefined.'
      ) : null);
    }
    // TODO: Change this back to `config.key === undefined`
    key = config.key == null ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== "development") {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

},{"./ReactContext":35,"./ReactCurrentOwner":36,"./warning":145}],53:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {
  'react_key_warning': {},
  'react_numeric_key_warning': {}
};
var ownerHasMonitoredObjectMap = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return current && current.constructor.displayName || undefined;
}

/**
 * Warn if the component doesn't have an explicit key assigned to it.
 * This component is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validateExplicitKey(component, parentType) {
  if (component._store.validated || component.key != null) {
    return;
  }
  component._store.validated = true;

  warnAndMonitorForKeyUse(
    'react_key_warning',
    'Each child in an array should have a unique "key" prop.',
    component,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validatePropertyKey(name, component, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'react_numeric_key_warning',
    'Child objects should have non-numeric keys so ordering is preserved.',
    component,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} warningID The id used when logging.
 * @param {string} message The base warning that gets output.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = parentType.displayName;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[warningID];
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  message += ownerName ?
    (" Check the render method of " + ownerName + ".") :
    (" Check the renderComponent call using <" + parentName + ">.");

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerName = null;
  if (component._owner && component._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    childOwnerName = component._owner.constructor.displayName;

    message += (" It was passed a child from " + childOwnerName + ".");
  }

  message += ' See http://fb.me/react-warning-keys for more information.';
  monitorCodeUse(warningID, {
    component: useName,
    componentOwner: childOwnerName
  });
  console.warn(message);
}

/**
 * Log that we're using an object map. We're considering deprecating this
 * feature and replace it with proper Map and ImmutableMap data structures.
 *
 * @internal
 */
function monitorUseOfObjectMap() {
  var currentName = getCurrentOwnerDisplayName() || '';
  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
    return;
  }
  ownerHasMonitoredObjectMap[currentName] = true;
  monitorCodeUse('react_object_map_children');
}

/**
 * Ensure that every component either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {*} component Statically passed child of any type.
 * @param {*} parentType component's parent's type.
 * @return {boolean}
 */
function validateChildKeys(component, parentType) {
  if (Array.isArray(component)) {
    for (var i = 0; i < component.length; i++) {
      var child = component[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(component)) {
    // This component was passed in a valid location.
    component._store.validated = true;
  } else if (component && typeof component === 'object') {
    monitorUseOfObjectMap();
    for (var name in component) {
      validatePropertyKey(name, component[name], parentType);
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;
        // This will soon use the warning module
        monitorCodeUse(
          'react_failed_descriptor_type_check',
          { message: error.message }
        );
      }
    }
  }
}

var ReactElementValidator = {

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== "development" ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    if (type) {
      var name = type.displayName;
      if (type.propTypes) {
        checkPropTypes(
          name,
          type.propTypes,
          element.props,
          ReactPropTypeLocations.prop
        );
      }
      if (type.contextTypes) {
        checkPropTypes(
          name,
          type.contextTypes,
          element._context,
          ReactPropTypeLocations.context
        );
      }
    }
    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    validatedFactory.type = type;
    return validatedFactory;
  }

};

module.exports = ReactElementValidator;

},{"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactPropTypeLocations":71,"./monitorCodeUse":136,"./warning":145}],54:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIdsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

/**
 * @return {ReactComponent} component The injected empty component.
 */
function getEmptyComponent() {
  ("production" !== "development" ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIdsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIdsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return nullComponentIdsRegistry[id];
}

var ReactEmptyComponent = {
  deregisterNullComponentID: deregisterNullComponentID,
  getEmptyComponent: getEmptyComponent,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID
};

module.exports = ReactEmptyComponent;

},{"./ReactElement":52,"./invariant":126}],55:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],56:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

"use strict";

var EventPluginHub = _dereq_("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":18}],57:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

"use strict";

var EventListener = _dereq_("./EventListener");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var PooledClass = _dereq_("./PooledClass");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var getEventTarget = _dereq_("./getEventTarget");
var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
    EventListener.listen(window, 'resize', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":17,"./ExecutionEnvironment":22,"./Object.assign":27,"./PooledClass":28,"./ReactInstanceHandles":60,"./ReactMount":63,"./ReactUpdates":79,"./getEventTarget":117,"./getUnboundedScrollPosition":122}],58:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var EventPluginHub = _dereq_("./EventPluginHub");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactPerf = _dereq_("./ReactPerf");
var ReactRootIndex = _dereq_("./ReactRootIndex");
var ReactUpdates = _dereq_("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponent.injection,
  CompositeComponent: ReactCompositeComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":11,"./EventPluginHub":18,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactEmptyComponent":54,"./ReactNativeComponent":66,"./ReactPerf":68,"./ReactRootIndex":75,"./ReactUpdates":79}],59:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

"use strict";

var ReactDOMSelection = _dereq_("./ReactDOMSelection");

var containsNode = _dereq_("./containsNode");
var focusNode = _dereq_("./focusNode");
var getActiveElement = _dereq_("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' ||
      elem.contentEditable === 'true'
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":46,"./containsNode":101,"./focusNode":111,"./getActiveElement":113}],60:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

"use strict";

var ReactRootIndex = _dereq_("./ReactRootIndex");

var invariant = _dereq_("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== "development" ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== "development" ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  for (var i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== "development" ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== "development" ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== "development" ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== "development" ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

},{"./ReactRootIndex":75,"./invariant":126}],61:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLegacyElement
 */

"use strict";

var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var invariant = _dereq_("./invariant");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

var legacyFactoryLogs = {};
function warnForLegacyFactoryCall() {
  if (!ReactLegacyElementFactory._isLegacyCallWarningEnabled) {
    return;
  }
  var owner = ReactCurrentOwner.current;
  var name = owner && owner.constructor ? owner.constructor.displayName : '';
  if (!name) {
    name = 'Something';
  }
  if (legacyFactoryLogs.hasOwnProperty(name)) {
    return;
  }
  legacyFactoryLogs[name] = true;
  ("production" !== "development" ? warning(
    false,
    name + ' is calling a React component directly. ' +
    'Use a factory or JSX instead. See: http://fb.me/react-legacyfactory'
  ) : null);
  monitorCodeUse('react_legacy_factory_call', { version: 3, name: name });
}

function warnForPlainFunctionType(type) {
  var isReactClass =
    type.prototype &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function';
  if (isReactClass) {
    ("production" !== "development" ? warning(
      false,
      'Did not expect to get a React class here. Use `Component` instead ' +
      'of `Component.type` or `this.constructor`.'
    ) : null);
  } else {
    if (!type._reactWarnedForThisType) {
      try {
        type._reactWarnedForThisType = true;
      } catch (x) {
        // just incase this is a frozen object or some special object
      }
      monitorCodeUse(
        'react_non_component_in_jsx',
        { version: 3, name: type.name }
      );
    }
    ("production" !== "development" ? warning(
      false,
      'This JSX uses a plain function. Only React components are ' +
      'valid in React\'s JSX transform.'
    ) : null);
  }
}

function warnForNonLegacyFactory(type) {
  ("production" !== "development" ? warning(
    false,
    'Do not pass React.DOM.' + type.type + ' to JSX or createFactory. ' +
    'Use the string "' + type.type + '" instead.'
  ) : null);
}

/**
 * Transfer static properties from the source to the target. Functions are
 * rebound to have this reflect the original source.
 */
function proxyStaticMethods(target, source) {
  if (typeof source !== 'function') {
    return;
  }
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      var value = source[key];
      if (typeof value === 'function') {
        var bound = value.bind(source);
        // Copy any properties defined on the function, such as `isRequired` on
        // a PropTypes validator.
        for (var k in value) {
          if (value.hasOwnProperty(k)) {
            bound[k] = value[k];
          }
        }
        target[key] = bound;
      } else {
        target[key] = value;
      }
    }
  }
}

// We use an object instead of a boolean because booleans are ignored by our
// mocking libraries when these factories gets mocked.
var LEGACY_MARKER = {};
var NON_LEGACY_MARKER = {};

var ReactLegacyElementFactory = {};

ReactLegacyElementFactory.wrapCreateFactory = function(createFactory) {
  var legacyCreateFactory = function(type) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createFactory(type);
    }

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      return createFactory(type.type);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      return createFactory(type.type);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // Unless it's a legacy factory, then this is probably a plain function,
    // that is expecting to be invoked by JSX. We can just return it as is.
    return type;
  };
  return legacyCreateFactory;
};

ReactLegacyElementFactory.wrapCreateElement = function(createElement) {
  var legacyCreateElement = function(type, props, children) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createElement.apply(this, arguments);
    }

    var args;

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      if (type._isMockFunction) {
        // If this is a mock function, people will expect it to be called. We
        // will actually call the original mock factory function instead. This
        // future proofs unit testing that assume that these are classes.
        type.type._mockedReactClassConstructor = type;
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // This is being called with a plain function we should invoke it
    // immediately as if this was used with legacy JSX.
    return type.apply(null, Array.prototype.slice.call(arguments, 1));
  };
  return legacyCreateElement;
};

ReactLegacyElementFactory.wrapFactory = function(factory) {
  ("production" !== "development" ? invariant(
    typeof factory === 'function',
    'This is suppose to accept a element factory'
  ) : invariant(typeof factory === 'function'));
  var legacyElementFactory = function(config, children) {
    // This factory should not be called when JSX is used. Use JSX instead.
    if ("production" !== "development") {
      warnForLegacyFactoryCall();
    }
    return factory.apply(this, arguments);
  };
  proxyStaticMethods(legacyElementFactory, factory.type);
  legacyElementFactory.isReactLegacyFactory = LEGACY_MARKER;
  legacyElementFactory.type = factory.type;
  return legacyElementFactory;
};

// This is used to mark a factory that will remain. E.g. we're allowed to call
// it as a function. However, you're not suppose to pass it to createElement
// or createFactory, so it will warn you if you do.
ReactLegacyElementFactory.markNonLegacyFactory = function(factory) {
  factory.isReactNonLegacyFactory = NON_LEGACY_MARKER;
  return factory;
};

// Checks if a factory function is actually a legacy factory pretending to
// be a class.
ReactLegacyElementFactory.isValidFactory = function(factory) {
  // TODO: This will be removed and moved into a class validator or something.
  return typeof factory === 'function' &&
    factory.isReactLegacyFactory === LEGACY_MARKER;
};

ReactLegacyElementFactory.isValidClass = function(factory) {
  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      false,
      'isValidClass is deprecated and will be removed in a future release. ' +
      'Use a more specific validator instead.'
    ) : null);
  }
  return ReactLegacyElementFactory.isValidFactory(factory);
};

ReactLegacyElementFactory._isLegacyCallWarningEnabled = true;

module.exports = ReactLegacyElementFactory;

},{"./ReactCurrentOwner":36,"./invariant":126,"./monitorCodeUse":136,"./warning":145}],62:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

"use strict";

var adler32 = _dereq_("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":98}],63:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactPerf = _dereq_("./ReactPerf");

var containsNode = _dereq_("./containsNode");
var deprecated = _dereq_("./deprecated");
var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var createElement = ReactLegacyElement.wrapCreateElement(
  ReactElement.createElement
);

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== "development") {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== "development" ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== "development" ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounting is the process of initializing a React component by creatings its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextComponent,
      container,
      callback) {
    var nextProps = nextComponent.props;
    ReactMount.scrollMonitor(container, function() {
      prevComponent.replaceProps(nextProps, callback);
    });

    if ("production" !== "development") {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== "development" ? invariant(
      container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
        container.nodeType === DOC_NODE_TYPE
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      container.nodeType === ELEMENT_NODE_TYPE ||
      container.nodeType === DOC_NODE_TYPE
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: ReactPerf.measure(
    'ReactMount',
    '_renderNewRootComponent',
    function(
        nextComponent,
        container,
        shouldReuseMarkup) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      ("production" !== "development" ? warning(
        ReactCurrentOwner.current == null,
        '_renderNewRootComponent(): Render methods should be a pure function ' +
        'of props and state; triggering nested component updates from ' +
        'render is not allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      var componentInstance = instantiateReactComponent(nextComponent, null);
      var reactRootID = ReactMount._registerComponent(
        componentInstance,
        container
      );
      componentInstance.mountComponentIntoNode(
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== "development") {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return componentInstance;
    }
  ),

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== "development" ? invariant(
      ReactElement.isValidElement(nextElement),
      'renderComponent(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        ReactLegacyElement.isValidFactory(nextElement) ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like a element
        typeof nextElement.props !== "undefined" ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        );
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    );
    callback && callback.call(component);
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== "development" ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== "development" ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== "development") {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    instance.unmountComponent();

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== "development") {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== "development" ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          console.warn(
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          );
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== "development" ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },


  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  purgeID: purgeID
};

// Deprecations (remove for 0.13)
ReactMount.renderComponent = deprecated(
  'ReactMount',
  'renderComponent',
  'render',
  this,
  ReactMount.render
);

module.exports = ReactMount;

},{"./DOMProperty":11,"./ReactBrowserEventEmitter":30,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactPerf":68,"./containsNode":101,"./deprecated":106,"./getReactRootElementInContainer":120,"./instantiateReactComponent":125,"./invariant":126,"./shouldUpdateReactComponent":142,"./warning":145}],64:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var flattenChildren = _dereq_("./flattenChildren");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction) {
      var children = flattenChildren(nestedChildren);
      var mountImages = [];
      var index = 0;
      this._renderedChildren = children;
      for (var name in children) {
        var child = children[name];
        if (children.hasOwnProperty(name)) {
          // The rendered children must be turned into instances as they're
          // mounted.
          var childInstance = instantiateReactComponent(child, null);
          children[name] = childInstance;
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = childInstance.mountComponent(
            rootID,
            transaction,
            this._mountDepth + 1
          );
          childInstance._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction) {
      var nextChildren = flattenChildren(nextNestedChildren);
      var prevChildren = this._renderedChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild.receiveComponent(nextElement, transaction);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(
            nextElement,
            null
          );
          this._mountChildByNameAtIndex(
            nextChildInstance, name, nextIndex, transaction
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren[name])) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        // TODO: When is this not true?
        if (renderedChild.unmountComponent) {
          renderedChild.unmountComponent();
        }
      }
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(child, name, index, transaction) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = child.mountComponent(
        rootID,
        transaction,
        this._mountDepth + 1
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
      this._renderedChildren = this._renderedChildren || {};
      this._renderedChildren[name] = child;
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
      child.unmountComponent();
      delete this._renderedChildren[name];
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactComponent":32,"./ReactMultiChildUpdateTypes":65,"./flattenChildren":110,"./instantiateReactComponent":125,"./shouldUpdateReactComponent":142}],65:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":132}],66:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

"use strict";

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Create an internal class for a specific tag.
 *
 * @param {string} tag The tag for which to create an internal instance.
 * @param {any} props The props passed to the instance constructor.
 * @return {ReactComponent} component The injected empty component.
 */
function createInstanceForTag(tag, props, parentType) {
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  if (parentType === tag) {
    // Avoid recursion
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  // Unwrap legacy factories
  return new componentClass.type(props);
}

var ReactNativeComponent = {
  createInstanceForTag: createInstanceForTag,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

},{"./Object.assign":27,"./invariant":126}],67:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

"use strict";

var emptyObject = _dereq_("./emptyObject");
var invariant = _dereq_("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      object &&
      typeof object.attachRef === 'function' &&
      typeof object.detachRef === 'function'
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.refs[ref] === component) {
      owner.detachRef(ref);
    }
  },

  /**
   * A ReactComponent must mix this in to have refs.
   *
   * @lends {ReactOwner.prototype}
   */
  Mixin: {

    construct: function() {
      this.refs = emptyObject;
    },

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      ("production" !== "development" ? invariant(
        component.isOwnedBy(this),
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
        ref
      ) : invariant(component.isOwnedBy(this)));
      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
      refs[ref] = component;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      delete this.refs[ref];
    }

  }

};

module.exports = ReactOwner;

},{"./emptyObject":108,"./invariant":126}],68:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

"use strict";

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== "development") {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

},{}],69:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTransferer
 */

"use strict";

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var invariant = _dereq_("./invariant");
var joinClasses = _dereq_("./joinClasses");
var warning = _dereq_("./warning");

var didWarn = false;

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  TransferStrategies: TransferStrategies,

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    return transferInto(assign({}, oldProps), newProps);
  },

  /**
   * @lends {ReactPropTransferer.prototype}
   */
  Mixin: {

    /**
     * Transfer props from this component to a target component.
     *
     * Props that do not have an explicit transfer strategy will be transferred
     * only if the target component does not already have the prop set.
     *
     * This is usually used to pass down props to a returned root component.
     *
     * @param {ReactElement} element Component receiving the properties.
     * @return {ReactElement} The supplied `component`.
     * @final
     * @protected
     */
    transferPropsTo: function(element) {
      ("production" !== "development" ? invariant(
        element._owner === this,
        '%s: You can\'t call transferPropsTo() on a component that you ' +
        'don\'t own, %s. This usually means you are calling ' +
        'transferPropsTo() on a component passed in as props or children.',
        this.constructor.displayName,
        typeof element.type === 'string' ?
        element.type :
        element.type.displayName
      ) : invariant(element._owner === this));

      if ("production" !== "development") {
        if (!didWarn) {
          didWarn = true;
          ("production" !== "development" ? warning(
            false,
            'transferPropsTo is deprecated. ' +
            'See http://fb.me/react-transferpropsto for more information.'
          ) : null);
        }
      }

      // Because elements are immutable we have to merge into the existing
      // props object rather than clone it.
      transferInto(element.props, this.props);

      return element;
    }

  }
};

module.exports = ReactPropTransferer;

},{"./Object.assign":27,"./emptyFunction":107,"./invariant":126,"./joinClasses":131,"./warning":145}],70:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

"use strict";

var ReactPropTypeLocationNames = {};

if ("production" !== "development") {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

},{}],71:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":132}],72:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");

var deprecated = _dereq_("./deprecated");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker,

  component: deprecated(
    'React.PropTypes',
    'component',
    'element',
    this,
    elementTypeChecker
  ),
  renderable: deprecated(
    'React.PropTypes',
    'renderable',
    'node',
    this,
    nodeTypeChecker
  )
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ")+
          ("`" + componentName + "`.")
        );
      }
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns());
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate, 'expected `object`');
}

function isNode(propValue) {
  switch(typeof propValue) {
    case 'number':
    case 'string':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (ReactElement.isValidElement(propValue)) {
        return true;
      }
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":52,"./ReactPropTypeLocationNames":70,"./deprecated":106,"./emptyFunction":107}],73:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var assign = _dereq_("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30}],74:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30,"./ReactInputSelection":59,"./ReactPutListenerQueue":73,"./Transaction":95}],75:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

"use strict";

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],76:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  _dereq_("./ReactServerRenderingTransaction");

var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, 0);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, 0);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactMarkupChecksum":62,"./ReactServerRenderingTransaction":77,"./instantiateReactComponent":125,"./invariant":126}],77:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var CallbackQueue = _dereq_("./CallbackQueue");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactPutListenerQueue":73,"./Transaction":95,"./emptyFunction":107}],78:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTextComponent
 * @typechecks static-only
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactComponent = _dereq_("./ReactComponent");
var ReactElement = _dereq_("./ReactElement");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactTextComponent = function(props) {
  // This constructor and it's argument is currently used by mocks.
};

assign(ReactTextComponent.prototype, ReactComponent.Mixin, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, mountDepth) {
    ReactComponent.Mixin.mountComponent.call(
      this,
      rootID,
      transaction,
      mountDepth
    );

    var escapedText = escapeTextForBrowser(this.props);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {object} nextComponent Contains the next text content.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextComponent, transaction) {
    var nextProps = nextComponent.props;
    if (nextProps !== this.props) {
      this.props = nextProps;
      ReactComponent.BackendIDOperations.updateTextContentByID(
        this._rootNodeID,
        nextProps
      );
    }
  }

});

var ReactTextComponentFactory = function(text) {
  // Bypass validation and configuration
  return new ReactElement(ReactTextComponent, null, null, null, null, text);
};

ReactTextComponentFactory.type = ReactTextComponent;

module.exports = ReactTextComponentFactory;

},{"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactComponent":32,"./ReactElement":52,"./escapeTextForBrowser":109}],79:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactPerf = _dereq_("./ReactPerf");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var warning = _dereq_("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== "development" ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b);
}

/**
 * Array comparator for ReactComponents by owner depth
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountDepthComparator(c1, c2) {
  return c1._mountDepth - c2._mountDepth;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== "development" ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountDepthComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, ignore them
    // TODO: Queue unmounts in the same list to avoid this happening at all
    var component = dirtyComponents[i];
    if (component.isMounted()) {
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      component.performUpdateIfNecessary(transaction.reconcileTransaction);

      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(
            callbacks[j],
            component
          );
        }
      }
    }
  }
}

var flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  function() {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }

      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }
  }
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component, callback) {
  ("production" !== "development" ? invariant(
    !callback || typeof callback === "function",
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
    'isn\'t callable.'
  ) : invariant(!callback || typeof callback === "function"));
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== "development" ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
    return;
  }

  dirtyComponents.push(component);

  if (callback) {
    if (component._pendingCallbacks) {
      component._pendingCallbacks.push(callback);
    } else {
      component._pendingCallbacks = [callback];
    }
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== "development" ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== "development" ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== "development" ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactCurrentOwner":36,"./ReactPerf":68,"./Transaction":95,"./invariant":126,"./warning":145}],80:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":11}],81:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var getActiveElement = _dereq_("./getActiveElement");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");
var shallowEqual = _dereq_("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement != getActiveElement()) {
    return;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactInputSelection":59,"./SyntheticEvent":87,"./getActiveElement":113,"./isTextInputElement":129,"./keyOf":133,"./shallowEqual":141}],82:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

"use strict";

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],83:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticClipboardEvent = _dereq_("./SyntheticClipboardEvent");
var SyntheticEvent = _dereq_("./SyntheticEvent");
var SyntheticFocusEvent = _dereq_("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = _dereq_("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");
var SyntheticDragEvent = _dereq_("./SyntheticDragEvent");
var SyntheticTouchEvent = _dereq_("./SyntheticTouchEvent");
var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var SyntheticWheelEvent = _dereq_("./SyntheticWheelEvent");

var getEventCharCode = _dereq_("./getEventCharCode");

var invariant = _dereq_("./invariant");
var keyOf = _dereq_("./keyOf");
var warning = _dereq_("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var topLevelType in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== "development" ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== "development" ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

},{"./EventConstants":16,"./EventPluginUtils":20,"./EventPropagators":21,"./SyntheticClipboardEvent":84,"./SyntheticDragEvent":86,"./SyntheticEvent":87,"./SyntheticFocusEvent":88,"./SyntheticKeyboardEvent":90,"./SyntheticMouseEvent":91,"./SyntheticTouchEvent":92,"./SyntheticUIEvent":93,"./SyntheticWheelEvent":94,"./getEventCharCode":114,"./invariant":126,"./keyOf":133,"./warning":145}],84:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;


},{"./SyntheticEvent":87}],85:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;


},{"./SyntheticEvent":87}],86:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":91}],87:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    event.preventDefault ? event.preventDefault() : event.returnValue = false;
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":27,"./PooledClass":28,"./emptyFunction":107,"./getEventTarget":117}],88:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":93}],89:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;


},{"./SyntheticEvent":87}],90:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventCharCode = _dereq_("./getEventCharCode");
var getEventKey = _dereq_("./getEventKey");
var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":93,"./getEventCharCode":114,"./getEventKey":115,"./getEventModifierState":116}],91:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      event.fromElement === event.srcElement ?
        event.toElement :
        event.fromElement
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":93,"./ViewportMetrics":96,"./getEventModifierState":116}],92:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":93,"./getEventModifierState":116}],93:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":87,"./getEventTarget":117}],94:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":91}],95:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM upates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== "development" ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== "development" ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR) {
          wrapper.close && wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

},{"./invariant":126}],96:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

"use strict";

var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function() {
    var scrollPosition = getUnboundedScrollPosition(window);
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{"./getUnboundedScrollPosition":122}],97:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== "development" ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

},{"./invariant":126}],98:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

"use strict";

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],99:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],100:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = _dereq_("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":99}],101:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = _dereq_("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":130}],102:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFrom
 * @typechecks
 */

var toArray = _dereq_("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFrom = require('createArrayFrom');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFrom(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFrom(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFrom;

},{"./toArray":143}],103:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

"use strict";

// Defeat circular references by requiring this directly.
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactCompositeComponent.createClass({
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== "development" ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

},{"./ReactCompositeComponent":34,"./ReactElement":52,"./invariant":126}],104:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createArrayFrom = _dereq_("./createArrayFrom");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== "development" ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== "development" ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFrom(scripts).forEach(handleScript);
  }

  var nodes = createArrayFrom(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

},{"./ExecutionEnvironment":22,"./createArrayFrom":102,"./getMarkupWrap":118,"./invariant":126}],105:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":4}],106:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

var assign = _dereq_("./Object.assign");
var warning = _dereq_("./warning");

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} namespace The namespace of the call, eg 'React'
 * @param {string} oldName The old function name, eg 'renderComponent'
 * @param {string} newName The new function name, eg 'render'
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {*} Will be the value as returned from `fn`
 */
function deprecated(namespace, oldName, newName, ctx, fn) {
  var warned = false;
  if ("production" !== "development") {
    var newFn = function() {
      ("production" !== "development" ? warning(
        warned,
        (namespace + "." + oldName + " will be deprecated in a future version. ") +
        ("Use " + namespace + "." + newName + " instead.")
      ) : null);
      warned = true;
      return fn.apply(ctx, arguments);
    };
    newFn.displayName = (namespace + "_" + oldName);
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;

},{"./Object.assign":27,"./warning":145}],107:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],108:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== "development") {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

},{}],109:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextForBrowser
 * @typechecks static-only
 */

"use strict";

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextForBrowser;

},{}],110:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

"use strict";

var ReactTextComponent = _dereq_("./ReactTextComponent");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'flattenChildren(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);
  if (keyUnique && child != null) {
    var type = typeof child;
    var normalizedValue;

    if (type === 'string') {
      normalizedValue = ReactTextComponent(child);
    } else if (type === 'number') {
      normalizedValue = ReactTextComponent('' + child);
    } else {
      normalizedValue = child;
    }

    result[name] = normalizedValue;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

},{"./ReactTextComponent":78,"./traverseAllChildren":144,"./warning":145}],111:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],112:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

"use strict";

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],113:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],114:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

"use strict";

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],115:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

"use strict";

var getEventCharCode = _dereq_("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":114}],116:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

"use strict";

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],117:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

"use strict";

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],118:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var invariant = _dereq_("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== "development" ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

},{"./ExecutionEnvironment":22,"./invariant":126}],119:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

"use strict";

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType == 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],120:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

"use strict";

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],121:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":22}],122:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],123:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],124:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = _dereq_("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":123}],125:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

"use strict";

var warning = _dereq_("./warning");

var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");

/**
 * Given an `element` create an instance that will actually be mounted.
 *
 * @param {object} element
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(element, parentCompositeType) {
  var instance;

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      element && (typeof element.type === 'function' ||
                     typeof element.type === 'string'),
      'Only functions or strings can be mounted as React components.'
    ) : null);

    // Resolve mock instances
    if (element.type._mockedReactClassConstructor) {
      // If this is a mocked class, we treat the legacy factory as if it was the
      // class constructor for future proofing unit tests. Because this might
      // be mocked as a legacy factory, we ignore any warnings triggerd by
      // this temporary hack.
      ReactLegacyElement._isLegacyCallWarningEnabled = false;
      try {
        instance = new element.type._mockedReactClassConstructor(
          element.props
        );
      } finally {
        ReactLegacyElement._isLegacyCallWarningEnabled = true;
      }

      // If the mock implementation was a legacy factory, then it returns a
      // element. We need to turn this into a real component instance.
      if (ReactElement.isValidElement(instance)) {
        instance = new instance.type(instance.props);
      }

      var render = instance.render;
      if (!render) {
        // For auto-mocked factories, the prototype isn't shimmed and therefore
        // there is no render function on the instance. We replace the whole
        // component with an empty component instance instead.
        element = ReactEmptyComponent.getEmptyComponent();
      } else {
        if (render._isMockFunction && !render._getMockImplementation()) {
          // Auto-mocked components may have a prototype with a mocked render
          // function. For those, we'll need to mock the result of the render
          // since we consider undefined to be invalid results from render.
          render.mockImplementation(
            ReactEmptyComponent.getEmptyComponent
          );
        }
        instance.construct(element);
        return instance;
      }
    }
  }

  // Special case string values
  if (typeof element.type === 'string') {
    instance = ReactNativeComponent.createInstanceForTag(
      element.type,
      element.props,
      parentCompositeType
    );
  } else {
    // Normal case for non-mocks and non-strings
    instance = new element.type(element.props);
  }

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // This actually sets up the internal instance. This will become decoupled
  // from the public instance in a future diff.
  instance.construct(element);

  return instance;
}

module.exports = instantiateReactComponent;

},{"./ReactElement":52,"./ReactEmptyComponent":54,"./ReactLegacyElement":61,"./ReactNativeComponent":66,"./warning":145}],126:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== "development") {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

},{}],127:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":22}],128:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    typeof Node === 'function' ? object instanceof Node :
      typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'
  ));
}

module.exports = isNode;

},{}],129:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

"use strict";

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
    elem.nodeName === 'TEXTAREA'
  );
}

module.exports = isTextInputElement;

},{}],130:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = _dereq_("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":128}],131:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],132:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== "development" ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

},{"./invariant":126}],133:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],134:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],135:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

"use strict";

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (cache.hasOwnProperty(string)) {
      return cache[string];
    } else {
      return cache[string] = callback.call(this, string);
    }
  };
}

module.exports = memoizeStringOnly;

},{}],136:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule monitorCodeUse
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Provides open-source compatible instrumentation for monitoring certain API
 * uses before we're ready to issue a warning or refactor. It accepts an event
 * name which may only contain the characters [a-z0-9_] and an optional data
 * object with further information.
 */

function monitorCodeUse(eventName, data) {
  ("production" !== "development" ? invariant(
    eventName && !/[^a-z0-9_]/.test(eventName),
    'You must provide an eventName using only the characters [a-z0-9_]'
  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
}

module.exports = monitorCodeUse;

},{"./invariant":126}],137:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

},{"./ReactElement":52,"./invariant":126}],138:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":22}],139:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = _dereq_("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":138}],140:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":22}],141:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

"use strict";

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],142:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

"use strict";

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement && nextElement &&
      prevElement.type === nextElement.type &&
      prevElement.key === nextElement.key &&
      prevElement._owner === nextElement._owner) {
    return true;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{}],143:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = _dereq_("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFrom.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== "development" ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== "development" ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== "development" ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

},{"./invariant":126}],144:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");

var invariant = _dereq_("./invariant");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that:
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
 * 2. it('should fail when supplied duplicate key', function() {
 * 3. That a single child and an array with one item have the same key pattern.
 * });
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
var traverseAllChildrenImpl =
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
    var nextName, nextIndex;
    var subtreeCount = 0;  // Count of children found in the current subtree.
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        nextName = (
          nameSoFar +
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var type = typeof children;
      var isOnlyChild = nameSoFar === '';
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows
      var storageName =
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
      if (children == null || type === 'boolean') {
        // All of the above are perceived as null.
        callback(traverseContext, null, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'string' || type === 'number' ||
                 ReactElement.isValidElement(children)) {
        callback(traverseContext, children, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'object') {
        ("production" !== "development" ? invariant(
          !children || children.nodeType !== 1,
          'traverseAllChildren(...): Encountered an invalid child; DOM ' +
          'elements are not valid children of React components.'
        ) : invariant(!children || children.nodeType !== 1));
        for (var key in children) {
          if (children.hasOwnProperty(key)) {
            nextName = (
              nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(key) + SUBSEPARATOR +
              getComponentKey(children[key], 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              children[key],
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    }
    return subtreeCount;
  };

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./invariant":126}],145:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== "development") {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (!condition) {
      var argIndex = 0;
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
    }
  };
}

module.exports = warning;

},{"./emptyFunction":107}]},{},[1])(1)
});
var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", 
SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", 
ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", 
COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", 
DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.object");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  this.handler_ = opt_scope;
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture) {
  return this.listen_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenWithScope = function(src, type, fn, capture, scope) {
  return this.listen_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var listenerObj = goog.events.listen(src, type[i], opt_fn || this.handleEvent, opt_capture || false, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture) {
  return this.listenOnce_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function(src, type, fn, capture, scope) {
  return this.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce_(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt) {
  return this.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(src, wrapper, listener, capture, scope) {
  return this.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.listen(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (listener) {
      goog.events.unlistenByKey(listener);
      delete this.keys_[listener.key];
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.unlisten(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return{"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return!!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception, goog.debug.Logger.prototype.log));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception, opt_fnStackContext) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    var context;
    if (goog.STRICT_MODE_COMPATIBLE) {
      context = opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord;
    } else {
      context = opt_fnStackContext || arguments.callee.caller;
    }
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = false;
    var location = goog.global["location"];
    if (location) {
      var href = location["href"];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location["hostname"]) {
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmpty(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.structs.Queue");
goog.require("goog.array");
goog.structs.Queue = function() {
  this.front_ = [];
  this.back_ = [];
};
goog.structs.Queue.prototype.maybeFlip_ = function() {
  if (goog.array.isEmpty(this.front_)) {
    this.front_ = this.back_;
    this.front_.reverse();
    this.back_ = [];
  }
};
goog.structs.Queue.prototype.enqueue = function(element) {
  this.back_.push(element);
};
goog.structs.Queue.prototype.dequeue = function() {
  this.maybeFlip_();
  return this.front_.pop();
};
goog.structs.Queue.prototype.peek = function() {
  this.maybeFlip_();
  return goog.array.peek(this.front_);
};
goog.structs.Queue.prototype.getCount = function() {
  return this.front_.length + this.back_.length;
};
goog.structs.Queue.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.front_) && goog.array.isEmpty(this.back_);
};
goog.structs.Queue.prototype.clear = function() {
  this.front_ = [];
  this.back_ = [];
};
goog.structs.Queue.prototype.contains = function(obj) {
  return goog.array.contains(this.front_, obj) || goog.array.contains(this.back_, obj);
};
goog.structs.Queue.prototype.remove = function(obj) {
  var index = goog.array.lastIndexOf(this.front_, obj);
  if (index < 0) {
    return goog.array.remove(this.back_, obj);
  }
  goog.array.removeAt(this.front_, index);
  return true;
};
goog.structs.Queue.prototype.getValues = function() {
  var res = [];
  for (var i = this.front_.length - 1;i >= 0;--i) {
    res.push(this.front_[i]);
  }
  var len = this.back_.length;
  for (var i = 0;i < len;++i) {
    res.push(this.back_[i]);
  }
  return res;
};
goog.provide("goog.structs.Pool");
goog.require("goog.Disposable");
goog.require("goog.structs.Queue");
goog.require("goog.structs.Set");
goog.structs.Pool = function(opt_minCount, opt_maxCount) {
  goog.Disposable.call(this);
  this.minCount_ = opt_minCount || 0;
  this.maxCount_ = opt_maxCount || 10;
  if (this.minCount_ > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.freeQueue_ = new goog.structs.Queue;
  this.inUseSet_ = new goog.structs.Set;
  this.delay = 0;
  this.lastAccess = null;
  this.adjustForMinMax();
  var magicProps = {canBeReused:0};
};
goog.inherits(goog.structs.Pool, goog.Disposable);
goog.structs.Pool.ERROR_MIN_MAX_ = "[goog.structs.Pool] Min can not be greater than max";
goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_ = "[goog.structs.Pool] Objects not released";
goog.structs.Pool.prototype.setMinimumCount = function(min) {
  if (min > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.minCount_ = min;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setMaximumCount = function(max) {
  if (max < this.minCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.maxCount_ = max;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setDelay = function(delay) {
  this.delay = delay;
};
goog.structs.Pool.prototype.getObject = function() {
  var time = goog.now();
  if (goog.isDefAndNotNull(this.lastAccess) && time - this.lastAccess < this.delay) {
    return undefined;
  }
  var obj = this.removeFreeObject_();
  if (obj) {
    this.lastAccess = time;
    this.inUseSet_.add(obj);
  }
  return obj;
};
goog.structs.Pool.prototype.releaseObject = function(obj) {
  if (this.inUseSet_.remove(obj)) {
    this.addFreeObject(obj);
    return true;
  }
  return false;
};
goog.structs.Pool.prototype.removeFreeObject_ = function() {
  var obj;
  while (this.getFreeCount() > 0) {
    obj = this.freeQueue_.dequeue();
    if (!this.objectCanBeReused(obj)) {
      this.adjustForMinMax();
    } else {
      break;
    }
  }
  if (!obj && this.getCount() < this.maxCount_) {
    obj = this.createObject();
  }
  return obj;
};
goog.structs.Pool.prototype.addFreeObject = function(obj) {
  this.inUseSet_.remove(obj);
  if (this.objectCanBeReused(obj) && this.getCount() < this.maxCount_) {
    this.freeQueue_.enqueue(obj);
  } else {
    this.disposeObject(obj);
  }
};
goog.structs.Pool.prototype.adjustForMinMax = function() {
  var freeQueue = this.freeQueue_;
  while (this.getCount() < this.minCount_) {
    freeQueue.enqueue(this.createObject());
  }
  while (this.getCount() > this.maxCount_ && this.getFreeCount() > 0) {
    this.disposeObject(freeQueue.dequeue());
  }
};
goog.structs.Pool.prototype.createObject = function() {
  return{};
};
goog.structs.Pool.prototype.disposeObject = function(obj) {
  if (typeof obj.dispose == "function") {
    obj.dispose();
  } else {
    for (var i in obj) {
      obj[i] = null;
    }
  }
};
goog.structs.Pool.prototype.objectCanBeReused = function(obj) {
  if (typeof obj.canBeReused == "function") {
    return obj.canBeReused();
  }
  return true;
};
goog.structs.Pool.prototype.contains = function(obj) {
  return this.freeQueue_.contains(obj) || this.inUseSet_.contains(obj);
};
goog.structs.Pool.prototype.getCount = function() {
  return this.freeQueue_.getCount() + this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getInUseCount = function() {
  return this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getFreeCount = function() {
  return this.freeQueue_.getCount();
};
goog.structs.Pool.prototype.isEmpty = function() {
  return this.freeQueue_.isEmpty() && this.inUseSet_.isEmpty();
};
goog.structs.Pool.prototype.disposeInternal = function() {
  goog.structs.Pool.superClass_.disposeInternal.call(this);
  if (this.getInUseCount() > 0) {
    throw Error(goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_);
  }
  delete this.inUseSet_;
  var freeQueue = this.freeQueue_;
  while (!freeQueue.isEmpty()) {
    this.disposeObject(freeQueue.dequeue());
  }
  delete this.freeQueue_;
};
goog.provide("goog.structs.Node");
goog.structs.Node = function(key, value) {
  this.key_ = key;
  this.value_ = value;
};
goog.structs.Node.prototype.getKey = function() {
  return this.key_;
};
goog.structs.Node.prototype.getValue = function() {
  return this.value_;
};
goog.structs.Node.prototype.clone = function() {
  return new goog.structs.Node(this.key_, this.value_);
};
goog.provide("goog.structs.Heap");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.structs.Node");
goog.structs.Heap = function(opt_heap) {
  this.nodes_ = [];
  if (opt_heap) {
    this.insertAll(opt_heap);
  }
};
goog.structs.Heap.prototype.insert = function(key, value) {
  var node = new goog.structs.Node(key, value);
  var nodes = this.nodes_;
  nodes.push(node);
  this.moveUp_(nodes.length - 1);
};
goog.structs.Heap.prototype.insertAll = function(heap) {
  var keys, values;
  if (heap instanceof goog.structs.Heap) {
    keys = heap.getKeys();
    values = heap.getValues();
    if (heap.getCount() <= 0) {
      var nodes = this.nodes_;
      for (var i = 0;i < keys.length;i++) {
        nodes.push(new goog.structs.Node(keys[i], values[i]));
      }
      return;
    }
  } else {
    keys = goog.object.getKeys(heap);
    values = goog.object.getValues(heap);
  }
  for (var i = 0;i < keys.length;i++) {
    this.insert(keys[i], values[i]);
  }
};
goog.structs.Heap.prototype.remove = function() {
  var nodes = this.nodes_;
  var count = nodes.length;
  var rootNode = nodes[0];
  if (count <= 0) {
    return undefined;
  } else {
    if (count == 1) {
      goog.array.clear(nodes);
    } else {
      nodes[0] = nodes.pop();
      this.moveDown_(0);
    }
  }
  return rootNode.getValue();
};
goog.structs.Heap.prototype.peek = function() {
  var nodes = this.nodes_;
  if (nodes.length == 0) {
    return undefined;
  }
  return nodes[0].getValue();
};
goog.structs.Heap.prototype.peekKey = function() {
  return this.nodes_[0] && this.nodes_[0].getKey();
};
goog.structs.Heap.prototype.moveDown_ = function(index) {
  var nodes = this.nodes_;
  var count = nodes.length;
  var node = nodes[index];
  while (index < count >> 1) {
    var leftChildIndex = this.getLeftChildIndex_(index);
    var rightChildIndex = this.getRightChildIndex_(index);
    var smallerChildIndex = rightChildIndex < count && nodes[rightChildIndex].getKey() < nodes[leftChildIndex].getKey() ? rightChildIndex : leftChildIndex;
    if (nodes[smallerChildIndex].getKey() > node.getKey()) {
      break;
    }
    nodes[index] = nodes[smallerChildIndex];
    index = smallerChildIndex;
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.moveUp_ = function(index) {
  var nodes = this.nodes_;
  var node = nodes[index];
  while (index > 0) {
    var parentIndex = this.getParentIndex_(index);
    if (nodes[parentIndex].getKey() > node.getKey()) {
      nodes[index] = nodes[parentIndex];
      index = parentIndex;
    } else {
      break;
    }
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.getLeftChildIndex_ = function(index) {
  return index * 2 + 1;
};
goog.structs.Heap.prototype.getRightChildIndex_ = function(index) {
  return index * 2 + 2;
};
goog.structs.Heap.prototype.getParentIndex_ = function(index) {
  return index - 1 >> 1;
};
goog.structs.Heap.prototype.getValues = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getValue());
  }
  return rv;
};
goog.structs.Heap.prototype.getKeys = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getKey());
  }
  return rv;
};
goog.structs.Heap.prototype.containsValue = function(val) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getValue() == val;
  });
};
goog.structs.Heap.prototype.containsKey = function(key) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getKey() == key;
  });
};
goog.structs.Heap.prototype.clone = function() {
  return new goog.structs.Heap(this);
};
goog.structs.Heap.prototype.getCount = function() {
  return this.nodes_.length;
};
goog.structs.Heap.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.nodes_);
};
goog.structs.Heap.prototype.clear = function() {
  goog.array.clear(this.nodes_);
};
goog.provide("goog.structs.PriorityQueue");
goog.require("goog.structs.Heap");
goog.structs.PriorityQueue = function() {
  goog.structs.Heap.call(this);
};
goog.inherits(goog.structs.PriorityQueue, goog.structs.Heap);
goog.structs.PriorityQueue.prototype.enqueue = function(priority, value) {
  this.insert(priority, value);
};
goog.structs.PriorityQueue.prototype.dequeue = function() {
  return this.remove();
};
goog.provide("goog.structs.PriorityPool");
goog.require("goog.structs.Pool");
goog.require("goog.structs.PriorityQueue");
goog.structs.PriorityPool = function(opt_minCount, opt_maxCount) {
  this.delayTimeout_ = undefined;
  this.requestQueue_ = new goog.structs.PriorityQueue;
  goog.structs.Pool.call(this, opt_minCount, opt_maxCount);
};
goog.inherits(goog.structs.PriorityPool, goog.structs.Pool);
goog.structs.PriorityPool.DEFAULT_PRIORITY_ = 100;
goog.structs.PriorityPool.prototype.setDelay = function(delay) {
  goog.structs.PriorityPool.base(this, "setDelay", delay);
  if (!goog.isDefAndNotNull(this.lastAccess)) {
    return;
  }
  goog.global.clearTimeout(this.delayTimeout_);
  this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay + this.lastAccess - goog.now());
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.getObject = function(opt_callback, opt_priority) {
  if (!opt_callback) {
    var result = goog.structs.PriorityPool.base(this, "getObject");
    if (result && this.delay) {
      this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay);
    }
    return result;
  }
  var priority = goog.isDef(opt_priority) ? opt_priority : goog.structs.PriorityPool.DEFAULT_PRIORITY_;
  this.requestQueue_.enqueue(priority, opt_callback);
  this.handleQueueRequests_();
  return undefined;
};
goog.structs.PriorityPool.prototype.handleQueueRequests_ = function() {
  var requestQueue = this.requestQueue_;
  while (requestQueue.getCount() > 0) {
    var obj = this.getObject();
    if (!obj) {
      return;
    } else {
      var requestCallback = requestQueue.dequeue();
      requestCallback.apply(this, [obj]);
    }
  }
};
goog.structs.PriorityPool.prototype.addFreeObject = function(obj) {
  goog.structs.PriorityPool.superClass_.addFreeObject.call(this, obj);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.adjustForMinMax = function() {
  goog.structs.PriorityPool.superClass_.adjustForMinMax.call(this);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.disposeInternal = function() {
  goog.structs.PriorityPool.superClass_.disposeInternal.call(this);
  goog.global.clearTimeout(this.delayTimeout_);
  this.requestQueue_.clear();
  this.requestQueue_ = null;
};
goog.provide("goog.net.XhrIoPool");
goog.require("goog.net.XhrIo");
goog.require("goog.structs.PriorityPool");
goog.net.XhrIoPool = function(opt_headers, opt_minCount, opt_maxCount) {
  goog.structs.PriorityPool.call(this, opt_minCount, opt_maxCount);
  this.headers_ = opt_headers;
};
goog.inherits(goog.net.XhrIoPool, goog.structs.PriorityPool);
goog.net.XhrIoPool.prototype.createObject = function() {
  var xhrIo = new goog.net.XhrIo;
  var headers = this.headers_;
  if (headers) {
    headers.forEach(function(value, key) {
      xhrIo.headers.set(key, value);
    });
  }
  return xhrIo;
};
goog.net.XhrIoPool.prototype.objectCanBeReused = function(obj) {
  var xhr = (obj);
  return!xhr.isDisposed() && !xhr.isActive();
};
goog.provide("goog.net.XhrManager");
goog.provide("goog.net.XhrManager.Event");
goog.provide("goog.net.XhrManager.Request");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIoPool");
goog.require("goog.structs.Map");
goog.net.XhrManager = function(opt_maxRetries, opt_headers, opt_minCount, opt_maxCount, opt_timeoutInterval) {
  goog.net.XhrManager.base(this, "constructor");
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.timeoutInterval_ = goog.isDef(opt_timeoutInterval) ? Math.max(0, opt_timeoutInterval) : 0;
  this.xhrPool_ = new goog.net.XhrIoPool(opt_headers, opt_minCount, opt_maxCount);
  this.requests_ = new goog.structs.Map;
  this.eventHandler_ = new goog.events.EventHandler(this);
};
goog.inherits(goog.net.XhrManager, goog.events.EventTarget);
goog.net.XhrManager.ERROR_ID_IN_USE_ = "[goog.net.XhrManager] ID in use";
goog.net.XhrManager.XHR_EVENT_TYPES_ = [goog.net.EventType.READY, goog.net.EventType.COMPLETE, goog.net.EventType.SUCCESS, goog.net.EventType.ERROR, goog.net.EventType.ABORT, goog.net.EventType.TIMEOUT];
goog.net.XhrManager.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrManager.prototype.getOutstandingCount = function() {
  return this.requests_.getCount();
};
goog.net.XhrManager.prototype.getOutstandingRequestIds = function() {
  return this.requests_.getKeys();
};
goog.net.XhrManager.prototype.send = function(id, url, opt_method, opt_content, opt_headers, opt_priority, opt_callback, opt_maxRetries, opt_responseType) {
  var requests = this.requests_;
  if (requests.get(id)) {
    throw Error(goog.net.XhrManager.ERROR_ID_IN_USE_);
  }
  var request = new goog.net.XhrManager.Request(url, goog.bind(this.handleEvent_, this, id), opt_method, opt_content, opt_headers, opt_callback, goog.isDef(opt_maxRetries) ? opt_maxRetries : this.maxRetries_, opt_responseType);
  this.requests_.set(id, request);
  var callback = goog.bind(this.handleAvailableXhr_, this, id);
  this.xhrPool_.getObject(callback, opt_priority);
  return request;
};
goog.net.XhrManager.prototype.abort = function(id, opt_force) {
  var request = this.requests_.get(id);
  if (request) {
    var xhrIo = request.xhrIo;
    request.setAborted(true);
    if (opt_force) {
      if (xhrIo) {
        this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
        goog.events.listenOnce(xhrIo, goog.net.EventType.READY, function() {
          this.xhrPool_.releaseObject(xhrIo);
        }, false, this);
      }
      this.requests_.remove(id);
    }
    if (xhrIo) {
      xhrIo.abort();
    }
  }
};
goog.net.XhrManager.prototype.handleAvailableXhr_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.xhrIo) {
    this.addXhrListener_(xhrIo, request.getXhrEventCallback());
    xhrIo.setTimeoutInterval(this.timeoutInterval_);
    xhrIo.setResponseType(request.getResponseType());
    request.xhrIo = xhrIo;
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.READY, this, id, xhrIo));
    this.retry_(id, xhrIo);
    if (request.getAborted()) {
      xhrIo.abort();
    }
  } else {
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleEvent_ = function(id, e) {
  var xhrIo = (e.target);
  switch(e.type) {
    case goog.net.EventType.READY:
      this.retry_(id, xhrIo);
      break;
    case goog.net.EventType.COMPLETE:
      return this.handleComplete_(id, xhrIo, e);
    case goog.net.EventType.SUCCESS:
      this.handleSuccess_(id, xhrIo);
      break;
    case goog.net.EventType.TIMEOUT:
    ;
    case goog.net.EventType.ERROR:
      this.handleError_(id, xhrIo);
      break;
    case goog.net.EventType.ABORT:
      this.handleAbort_(id, xhrIo);
      break;
  }
  return null;
};
goog.net.XhrManager.prototype.retry_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.getCompleted() && !request.hasReachedMaxRetries()) {
    request.increaseAttemptCount();
    xhrIo.send(request.getUrl(), request.getMethod(), request.getContent(), request.getHeaders());
  } else {
    if (request) {
      this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
      this.requests_.remove(id);
    }
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleComplete_ = function(id, xhrIo, e) {
  var request = this.requests_.get(id);
  if (xhrIo.getLastErrorCode() == goog.net.ErrorCode.ABORT || xhrIo.isSuccess() || request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.COMPLETE, this, id, xhrIo));
    if (request) {
      request.setCompleted(true);
      if (request.getCompleteCallback()) {
        return request.getCompleteCallback().call(xhrIo, e);
      }
    }
  }
  return null;
};
goog.net.XhrManager.prototype.handleAbort_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ABORT, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleSuccess_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.SUCCESS, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleError_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ERROR, this, id, xhrIo));
  }
};
goog.net.XhrManager.prototype.removeXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.unlisten(xhrIo, types, func);
};
goog.net.XhrManager.prototype.addXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.listen(xhrIo, types, func);
};
goog.net.XhrManager.prototype.disposeInternal = function() {
  goog.net.XhrManager.superClass_.disposeInternal.call(this);
  this.xhrPool_.dispose();
  this.xhrPool_ = null;
  this.eventHandler_.dispose();
  this.eventHandler_ = null;
  this.requests_.clear();
  this.requests_ = null;
};
goog.net.XhrManager.Event = function(type, target, id, xhrIo) {
  goog.events.Event.call(this, type, target);
  this.id = id;
  this.xhrIo = xhrIo;
};
goog.inherits(goog.net.XhrManager.Event, goog.events.Event);
goog.net.XhrManager.Request = function(url, xhrEventCallback, opt_method, opt_content, opt_headers, opt_callback, opt_maxRetries, opt_responseType) {
  this.url_ = url;
  this.method_ = opt_method || "GET";
  this.content_ = opt_content;
  this.headers_ = opt_headers || null;
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.attemptCount_ = 0;
  this.completed_ = false;
  this.aborted_ = false;
  this.xhrEventCallback_ = xhrEventCallback;
  this.completeCallback_ = opt_callback;
  this.responseType_ = opt_responseType || goog.net.XhrIo.ResponseType.DEFAULT;
  this.xhrIo = null;
};
goog.net.XhrManager.Request.prototype.getUrl = function() {
  return this.url_;
};
goog.net.XhrManager.Request.prototype.getMethod = function() {
  return this.method_;
};
goog.net.XhrManager.Request.prototype.getContent = function() {
  return this.content_;
};
goog.net.XhrManager.Request.prototype.getHeaders = function() {
  return this.headers_;
};
goog.net.XhrManager.Request.prototype.getMaxRetries = function() {
  return this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.getAttemptCount = function() {
  return this.attemptCount_;
};
goog.net.XhrManager.Request.prototype.increaseAttemptCount = function() {
  this.attemptCount_++;
};
goog.net.XhrManager.Request.prototype.hasReachedMaxRetries = function() {
  return this.attemptCount_ > this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.setCompleted = function(complete) {
  this.completed_ = complete;
};
goog.net.XhrManager.Request.prototype.getCompleted = function() {
  return this.completed_;
};
goog.net.XhrManager.Request.prototype.setAborted = function(aborted) {
  this.aborted_ = aborted;
};
goog.net.XhrManager.Request.prototype.getAborted = function() {
  return this.aborted_;
};
goog.net.XhrManager.Request.prototype.getXhrEventCallback = function() {
  return this.xhrEventCallback_;
};
goog.net.XhrManager.Request.prototype.getCompleteCallback = function() {
  return this.completeCallback_;
};
goog.net.XhrManager.Request.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-3126";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_target_STAR_ = "default";
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__14751__delegate = function(args) {
      return console.log.apply(console, function() {
        var G__14750 = args;
        return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(G__14750) : cljs.core.into_array.call(null, G__14750);
      }());
    };
    var G__14751 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__14752__i = 0, G__14752__a = new Array(arguments.length - 0);
        while (G__14752__i < G__14752__a.length) {
          G__14752__a[G__14752__i] = arguments[G__14752__i + 0];
          ++G__14752__i;
        }
        args = new cljs.core.IndexedSeq(G__14752__a, 0);
      }
      return G__14751__delegate.call(this, args);
    };
    G__14751.cljs$lang$maxFixedArity = 0;
    G__14751.cljs$lang$applyTo = function(arglist__14753) {
      var args = cljs.core.seq(arglist__14753);
      return G__14751__delegate(args);
    };
    G__14751.cljs$core$IFn$_invoke$arity$variadic = G__14751__delegate;
    return G__14751;
  }();
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  var G__14755 = x;
  return goog.isString(G__14755);
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[function() {
    var G__14757 = x__$1;
    return goog.typeOf(G__14757);
  }()]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__4110__auto__ = ty;
    if (cljs.core.truth_(and__4110__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__4110__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : function() {
    var G__14759 = obj;
    return goog.typeOf(G__14759);
  }();
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && function() {
  var G__14761 = Symbol;
  return goog.typeOf(G__14761);
}() === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.make_array = function() {
  var cljs$core$make_array = null;
  var cljs$core$make_array__1 = function(size) {
    return new Array(size);
  };
  var cljs$core$make_array__2 = function(type, size) {
    return cljs$core$make_array.cljs$core$IFn$_invoke$arity$1(size);
  };
  cljs$core$make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return cljs$core$make_array__1.call(this, type);
      case 2:
        return cljs$core$make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$make_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$make_array__1;
  cljs$core$make_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$make_array__2;
  return cljs$core$make_array;
}();
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__5007__auto___14763 = len;
  var i_14764 = 0;
  while (true) {
    if (i_14764 < n__5007__auto___14763) {
      new_arr[i_14764] = arr[i_14764];
      var G__14765 = i_14764 + 1;
      i_14764 = G__14765;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__14766 = i + 1;
      i = G__14766;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function() {
  var cljs$core$aget = null;
  var cljs$core$aget__2 = function(array, i) {
    return array[i];
  };
  var cljs$core$aget__3 = function() {
    var G__14775__delegate = function(array, i, idxs) {
      var G__14772 = cljs$core$aget;
      var G__14773 = cljs$core$aget.cljs$core$IFn$_invoke$arity$2(array, i);
      var G__14774 = idxs;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__14772, G__14773, G__14774) : cljs.core.apply.call(null, G__14772, G__14773, G__14774);
    };
    var G__14775 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        var G__14776__i = 0, G__14776__a = new Array(arguments.length - 2);
        while (G__14776__i < G__14776__a.length) {
          G__14776__a[G__14776__i] = arguments[G__14776__i + 2];
          ++G__14776__i;
        }
        idxs = new cljs.core.IndexedSeq(G__14776__a, 0);
      }
      return G__14775__delegate.call(this, array, i, idxs);
    };
    G__14775.cljs$lang$maxFixedArity = 2;
    G__14775.cljs$lang$applyTo = function(arglist__14777) {
      var array = cljs.core.first(arglist__14777);
      arglist__14777 = cljs.core.next(arglist__14777);
      var i = cljs.core.first(arglist__14777);
      var idxs = cljs.core.rest(arglist__14777);
      return G__14775__delegate(array, i, idxs);
    };
    G__14775.cljs$core$IFn$_invoke$arity$variadic = G__14775__delegate;
    return G__14775;
  }();
  cljs$core$aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$aget__2.call(this, array, i);
      default:
        var G__14778 = null;
        if (arguments.length > 2) {
          var G__14779__i = 0, G__14779__a = new Array(arguments.length - 2);
          while (G__14779__i < G__14779__a.length) {
            G__14779__a[G__14779__i] = arguments[G__14779__i + 2];
            ++G__14779__i;
          }
          G__14778 = new cljs.core.IndexedSeq(G__14779__a, 0);
        }
        return cljs$core$aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, G__14778);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$aget.cljs$lang$maxFixedArity = 2;
  cljs$core$aget.cljs$lang$applyTo = cljs$core$aget__3.cljs$lang$applyTo;
  cljs$core$aget.cljs$core$IFn$_invoke$arity$2 = cljs$core$aget__2;
  cljs$core$aget.cljs$core$IFn$_invoke$arity$variadic = cljs$core$aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$aget;
}();
cljs.core.aset = function() {
  var cljs$core$aset = null;
  var cljs$core$aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var cljs$core$aset__4 = function() {
    var G__14788__delegate = function(array, idx, idx2, idxv) {
      var G__14784 = cljs$core$aset;
      var G__14785 = array[idx];
      var G__14786 = idx2;
      var G__14787 = idxv;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__14784, G__14785, G__14786, G__14787) : cljs.core.apply.call(null, G__14784, G__14785, G__14786, G__14787);
    };
    var G__14788 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        var G__14789__i = 0, G__14789__a = new Array(arguments.length - 3);
        while (G__14789__i < G__14789__a.length) {
          G__14789__a[G__14789__i] = arguments[G__14789__i + 3];
          ++G__14789__i;
        }
        idxv = new cljs.core.IndexedSeq(G__14789__a, 0);
      }
      return G__14788__delegate.call(this, array, idx, idx2, idxv);
    };
    G__14788.cljs$lang$maxFixedArity = 3;
    G__14788.cljs$lang$applyTo = function(arglist__14790) {
      var array = cljs.core.first(arglist__14790);
      arglist__14790 = cljs.core.next(arglist__14790);
      var idx = cljs.core.first(arglist__14790);
      arglist__14790 = cljs.core.next(arglist__14790);
      var idx2 = cljs.core.first(arglist__14790);
      var idxv = cljs.core.rest(arglist__14790);
      return G__14788__delegate(array, idx, idx2, idxv);
    };
    G__14788.cljs$core$IFn$_invoke$arity$variadic = G__14788__delegate;
    return G__14788;
  }();
  cljs$core$aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$aset__3.call(this, array, idx, idx2);
      default:
        var G__14791 = null;
        if (arguments.length > 3) {
          var G__14792__i = 0, G__14792__a = new Array(arguments.length - 3);
          while (G__14792__i < G__14792__a.length) {
            G__14792__a[G__14792__i] = arguments[G__14792__i + 3];
            ++G__14792__i;
          }
          G__14791 = new cljs.core.IndexedSeq(G__14792__a, 0);
        }
        return cljs$core$aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, G__14791);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$aset.cljs$lang$maxFixedArity = 3;
  cljs$core$aset.cljs$lang$applyTo = cljs$core$aset__4.cljs$lang$applyTo;
  cljs$core$aset.cljs$core$IFn$_invoke$arity$3 = cljs$core$aset__3;
  cljs$core$aset.cljs$core$IFn$_invoke$arity$variadic = cljs$core$aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$aset;
}();
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var cljs$core$into_array = null;
  var cljs$core$into_array__1 = function(aseq) {
    return cljs$core$into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
  };
  var cljs$core$into_array__2 = function(type, aseq) {
    var G__14798 = function(a, x) {
      a.push(x);
      return a;
    };
    var G__14799 = [];
    var G__14800 = aseq;
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__14798, G__14799, G__14800) : cljs.core.reduce.call(null, G__14798, G__14799, G__14800);
  };
  cljs$core$into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$into_array__1.call(this, type);
      case 2:
        return cljs$core$into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$into_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$into_array__1;
  cljs$core$into_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$into_array__2;
  return cljs$core$into_array;
}();
cljs.core.js_invoke = function() {
  var cljs$core$js_invoke__delegate = function(obj, s, args) {
    return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
  };
  var cljs$core$js_invoke = function(obj, s, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__14801__i = 0, G__14801__a = new Array(arguments.length - 2);
      while (G__14801__i < G__14801__a.length) {
        G__14801__a[G__14801__i] = arguments[G__14801__i + 2];
        ++G__14801__i;
      }
      args = new cljs.core.IndexedSeq(G__14801__a, 0);
    }
    return cljs$core$js_invoke__delegate.call(this, obj, s, args);
  };
  cljs$core$js_invoke.cljs$lang$maxFixedArity = 2;
  cljs$core$js_invoke.cljs$lang$applyTo = function(arglist__14802) {
    var obj = cljs.core.first(arglist__14802);
    arglist__14802 = cljs.core.next(arglist__14802);
    var s = cljs.core.first(arglist__14802);
    var args = cljs.core.rest(arglist__14802);
    return cljs$core$js_invoke__delegate(obj, s, args);
  };
  cljs$core$js_invoke.cljs$core$IFn$_invoke$arity$variadic = cljs$core$js_invoke__delegate;
  return cljs$core$js_invoke;
}();
cljs.core.Fn = function() {
  var obj14804 = {};
  return obj14804;
}();
cljs.core.IFn = function() {
  var obj14806 = {};
  return obj14806;
}();
cljs.core._invoke = function() {
  var cljs$core$_invoke = null;
  var cljs$core$_invoke__1 = function(this$) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14852 = x__4758__auto__;
          return goog.typeOf(G__14852);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var cljs$core$_invoke__2 = function(this$, a) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14854 = x__4758__auto__;
          return goog.typeOf(G__14854);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var cljs$core$_invoke__3 = function(this$, a, b) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14856 = x__4758__auto__;
          return goog.typeOf(G__14856);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var cljs$core$_invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14858 = x__4758__auto__;
          return goog.typeOf(G__14858);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var cljs$core$_invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14860 = x__4758__auto__;
          return goog.typeOf(G__14860);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var cljs$core$_invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14862 = x__4758__auto__;
          return goog.typeOf(G__14862);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var cljs$core$_invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14864 = x__4758__auto__;
          return goog.typeOf(G__14864);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var cljs$core$_invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14866 = x__4758__auto__;
          return goog.typeOf(G__14866);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var cljs$core$_invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14868 = x__4758__auto__;
          return goog.typeOf(G__14868);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var cljs$core$_invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14870 = x__4758__auto__;
          return goog.typeOf(G__14870);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var cljs$core$_invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14872 = x__4758__auto__;
          return goog.typeOf(G__14872);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var cljs$core$_invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14874 = x__4758__auto__;
          return goog.typeOf(G__14874);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var cljs$core$_invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14876 = x__4758__auto__;
          return goog.typeOf(G__14876);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var cljs$core$_invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14878 = x__4758__auto__;
          return goog.typeOf(G__14878);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var cljs$core$_invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14880 = x__4758__auto__;
          return goog.typeOf(G__14880);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var cljs$core$_invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14882 = x__4758__auto__;
          return goog.typeOf(G__14882);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var cljs$core$_invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14884 = x__4758__auto__;
          return goog.typeOf(G__14884);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var cljs$core$_invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14886 = x__4758__auto__;
          return goog.typeOf(G__14886);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var cljs$core$_invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14888 = x__4758__auto__;
          return goog.typeOf(G__14888);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var cljs$core$_invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14890 = x__4758__auto__;
          return goog.typeOf(G__14890);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var cljs$core$_invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14892 = x__4758__auto__;
          return goog.typeOf(G__14892);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var cljs$core$_invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__4110__auto__ = this$;
      if (and__4110__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4758__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4122__auto__ = cljs.core._invoke[function() {
          var G__14894 = x__4758__auto__;
          return goog.typeOf(G__14894);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._invoke["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  cljs$core$_invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return cljs$core$_invoke__1.call(this, this$);
      case 2:
        return cljs$core$_invoke__2.call(this, this$, a);
      case 3:
        return cljs$core$_invoke__3.call(this, this$, a, b);
      case 4:
        return cljs$core$_invoke__4.call(this, this$, a, b, c);
      case 5:
        return cljs$core$_invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return cljs$core$_invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return cljs$core$_invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return cljs$core$_invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return cljs$core$_invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return cljs$core$_invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return cljs$core$_invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return cljs$core$_invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return cljs$core$_invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return cljs$core$_invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return cljs$core$_invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return cljs$core$_invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return cljs$core$_invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return cljs$core$_invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return cljs$core$_invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return cljs$core$_invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return cljs$core$_invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return cljs$core$_invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$1 = cljs$core$_invoke__1;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$2 = cljs$core$_invoke__2;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$3 = cljs$core$_invoke__3;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$4 = cljs$core$_invoke__4;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$5 = cljs$core$_invoke__5;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$6 = cljs$core$_invoke__6;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$7 = cljs$core$_invoke__7;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$8 = cljs$core$_invoke__8;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$9 = cljs$core$_invoke__9;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$10 = cljs$core$_invoke__10;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$11 = cljs$core$_invoke__11;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$12 = cljs$core$_invoke__12;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$13 = cljs$core$_invoke__13;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$14 = cljs$core$_invoke__14;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$15 = cljs$core$_invoke__15;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$16 = cljs$core$_invoke__16;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$17 = cljs$core$_invoke__17;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$18 = cljs$core$_invoke__18;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$19 = cljs$core$_invoke__19;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$20 = cljs$core$_invoke__20;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$21 = cljs$core$_invoke__21;
  cljs$core$_invoke.cljs$core$IFn$_invoke$arity$22 = cljs$core$_invoke__22;
  return cljs$core$_invoke;
}();
cljs.core.ICloneable = function() {
  var obj14896 = {};
  return obj14896;
}();
cljs.core._clone = function cljs$core$_clone(value) {
  if (function() {
    var and__4110__auto__ = value;
    if (and__4110__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4758__auto__ = value == null ? null : value;
    return function() {
      var or__4122__auto__ = cljs.core._clone[function() {
        var G__14900 = x__4758__auto__;
        return goog.typeOf(G__14900);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._clone["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj14902 = {};
  return obj14902;
}();
cljs.core._count = function cljs$core$_count(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._count[function() {
        var G__14906 = x__4758__auto__;
        return goog.typeOf(G__14906);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._count["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj14908 = {};
  return obj14908;
}();
cljs.core._empty = function cljs$core$_empty(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._empty[function() {
        var G__14912 = x__4758__auto__;
        return goog.typeOf(G__14912);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._empty["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj14914 = {};
  return obj14914;
}();
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._conj[function() {
        var G__14918 = x__4758__auto__;
        return goog.typeOf(G__14918);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._conj["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj14920 = {};
  return obj14920;
}();
cljs.core._nth = function() {
  var cljs$core$_nth = null;
  var cljs$core$_nth__2 = function(coll, n) {
    if (function() {
      var and__4110__auto__ = coll;
      if (and__4110__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4758__auto__ = coll == null ? null : coll;
      return function() {
        var or__4122__auto__ = cljs.core._nth[function() {
          var G__14926 = x__4758__auto__;
          return goog.typeOf(G__14926);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._nth["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var cljs$core$_nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__4110__auto__ = coll;
      if (and__4110__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4758__auto__ = coll == null ? null : coll;
      return function() {
        var or__4122__auto__ = cljs.core._nth[function() {
          var G__14928 = x__4758__auto__;
          return goog.typeOf(G__14928);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._nth["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  cljs$core$_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$_nth__2.call(this, coll, n);
      case 3:
        return cljs$core$_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_nth.cljs$core$IFn$_invoke$arity$2 = cljs$core$_nth__2;
  cljs$core$_nth.cljs$core$IFn$_invoke$arity$3 = cljs$core$_nth__3;
  return cljs$core$_nth;
}();
cljs.core.ASeq = function() {
  var obj14930 = {};
  return obj14930;
}();
cljs.core.ISeq = function() {
  var obj14932 = {};
  return obj14932;
}();
cljs.core._first = function cljs$core$_first(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._first[function() {
        var G__14936 = x__4758__auto__;
        return goog.typeOf(G__14936);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._first["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._rest[function() {
        var G__14940 = x__4758__auto__;
        return goog.typeOf(G__14940);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._rest["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj14942 = {};
  return obj14942;
}();
cljs.core._next = function cljs$core$_next(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._next[function() {
        var G__14946 = x__4758__auto__;
        return goog.typeOf(G__14946);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._next["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj14948 = {};
  return obj14948;
}();
cljs.core._lookup = function() {
  var cljs$core$_lookup = null;
  var cljs$core$_lookup__2 = function(o, k) {
    if (function() {
      var and__4110__auto__ = o;
      if (and__4110__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4758__auto__ = o == null ? null : o;
      return function() {
        var or__4122__auto__ = cljs.core._lookup[function() {
          var G__14954 = x__4758__auto__;
          return goog.typeOf(G__14954);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._lookup["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var cljs$core$_lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__4110__auto__ = o;
      if (and__4110__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4758__auto__ = o == null ? null : o;
      return function() {
        var or__4122__auto__ = cljs.core._lookup[function() {
          var G__14956 = x__4758__auto__;
          return goog.typeOf(G__14956);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._lookup["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  cljs$core$_lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$_lookup__2.call(this, o, k);
      case 3:
        return cljs$core$_lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_lookup.cljs$core$IFn$_invoke$arity$2 = cljs$core$_lookup__2;
  cljs$core$_lookup.cljs$core$IFn$_invoke$arity$3 = cljs$core$_lookup__3;
  return cljs$core$_lookup;
}();
cljs.core.IAssociative = function() {
  var obj14958 = {};
  return obj14958;
}();
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._contains_key_QMARK_[function() {
        var G__14962 = x__4758__auto__;
        return goog.typeOf(G__14962);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._assoc[function() {
        var G__14966 = x__4758__auto__;
        return goog.typeOf(G__14966);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._assoc["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj14968 = {};
  return obj14968;
}();
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._dissoc[function() {
        var G__14972 = x__4758__auto__;
        return goog.typeOf(G__14972);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._dissoc["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj14974 = {};
  return obj14974;
}();
cljs.core._key = function cljs$core$_key(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._key[function() {
        var G__14978 = x__4758__auto__;
        return goog.typeOf(G__14978);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._key["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._val[function() {
        var G__14982 = x__4758__auto__;
        return goog.typeOf(G__14982);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._val["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj14984 = {};
  return obj14984;
}();
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._disjoin[function() {
        var G__14988 = x__4758__auto__;
        return goog.typeOf(G__14988);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._disjoin["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj14990 = {};
  return obj14990;
}();
cljs.core._peek = function cljs$core$_peek(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._peek[function() {
        var G__14994 = x__4758__auto__;
        return goog.typeOf(G__14994);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._peek["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._pop[function() {
        var G__14998 = x__4758__auto__;
        return goog.typeOf(G__14998);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._pop["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj15000 = {};
  return obj15000;
}();
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._assoc_n[function() {
        var G__15004 = x__4758__auto__;
        return goog.typeOf(G__15004);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._assoc_n["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj15006 = {};
  return obj15006;
}();
cljs.core._deref = function cljs$core$_deref(o) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._deref[function() {
        var G__15010 = x__4758__auto__;
        return goog.typeOf(G__15010);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._deref["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj15012 = {};
  return obj15012;
}();
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._deref_with_timeout[function() {
        var G__15016 = x__4758__auto__;
        return goog.typeOf(G__15016);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj15018 = {};
  return obj15018;
}();
cljs.core._meta = function cljs$core$_meta(o) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._meta[function() {
        var G__15022 = x__4758__auto__;
        return goog.typeOf(G__15022);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._meta["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj15024 = {};
  return obj15024;
}();
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._with_meta[function() {
        var G__15028 = x__4758__auto__;
        return goog.typeOf(G__15028);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._with_meta["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj15030 = {};
  return obj15030;
}();
cljs.core._reduce = function() {
  var cljs$core$_reduce = null;
  var cljs$core$_reduce__2 = function(coll, f) {
    if (function() {
      var and__4110__auto__ = coll;
      if (and__4110__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4758__auto__ = coll == null ? null : coll;
      return function() {
        var or__4122__auto__ = cljs.core._reduce[function() {
          var G__15036 = x__4758__auto__;
          return goog.typeOf(G__15036);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._reduce["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var cljs$core$_reduce__3 = function(coll, f, start) {
    if (function() {
      var and__4110__auto__ = coll;
      if (and__4110__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4758__auto__ = coll == null ? null : coll;
      return function() {
        var or__4122__auto__ = cljs.core._reduce[function() {
          var G__15038 = x__4758__auto__;
          return goog.typeOf(G__15038);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._reduce["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  cljs$core$_reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return cljs$core$_reduce__2.call(this, coll, f);
      case 3:
        return cljs$core$_reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$_reduce__2;
  cljs$core$_reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$_reduce__3;
  return cljs$core$_reduce;
}();
cljs.core.IKVReduce = function() {
  var obj15040 = {};
  return obj15040;
}();
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._kv_reduce[function() {
        var G__15044 = x__4758__auto__;
        return goog.typeOf(G__15044);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj15046 = {};
  return obj15046;
}();
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._equiv[function() {
        var G__15050 = x__4758__auto__;
        return goog.typeOf(G__15050);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._equiv["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj15052 = {};
  return obj15052;
}();
cljs.core._hash = function cljs$core$_hash(o) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._hash[function() {
        var G__15056 = x__4758__auto__;
        return goog.typeOf(G__15056);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._hash["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj15058 = {};
  return obj15058;
}();
cljs.core._seq = function cljs$core$_seq(o) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._seq[function() {
        var G__15062 = x__4758__auto__;
        return goog.typeOf(G__15062);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._seq["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj15064 = {};
  return obj15064;
}();
cljs.core.IList = function() {
  var obj15066 = {};
  return obj15066;
}();
cljs.core.IRecord = function() {
  var obj15068 = {};
  return obj15068;
}();
cljs.core.IReversible = function() {
  var obj15070 = {};
  return obj15070;
}();
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._rseq[function() {
        var G__15074 = x__4758__auto__;
        return goog.typeOf(G__15074);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._rseq["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj15076 = {};
  return obj15076;
}();
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._sorted_seq[function() {
        var G__15080 = x__4758__auto__;
        return goog.typeOf(G__15080);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._sorted_seq_from[function() {
        var G__15084 = x__4758__auto__;
        return goog.typeOf(G__15084);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._entry_key[function() {
        var G__15088 = x__4758__auto__;
        return goog.typeOf(G__15088);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._entry_key["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._comparator[function() {
        var G__15092 = x__4758__auto__;
        return goog.typeOf(G__15092);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._comparator["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj15094 = {};
  return obj15094;
}();
cljs.core._write = function cljs$core$_write(writer, s) {
  if (function() {
    var and__4110__auto__ = writer;
    if (and__4110__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4758__auto__ = writer == null ? null : writer;
    return function() {
      var or__4122__auto__ = cljs.core._write[function() {
        var G__15098 = x__4758__auto__;
        return goog.typeOf(G__15098);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._write["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (function() {
    var and__4110__auto__ = writer;
    if (and__4110__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4758__auto__ = writer == null ? null : writer;
    return function() {
      var or__4122__auto__ = cljs.core._flush[function() {
        var G__15102 = x__4758__auto__;
        return goog.typeOf(G__15102);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._flush["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj15104 = {};
  return obj15104;
}();
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._pr_writer[function() {
        var G__15108 = x__4758__auto__;
        return goog.typeOf(G__15108);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._pr_writer["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj15110 = {};
  return obj15110;
}();
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(d) {
  if (function() {
    var and__4110__auto__ = d;
    if (and__4110__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4758__auto__ = d == null ? null : d;
    return function() {
      var or__4122__auto__ = cljs.core._realized_QMARK_[function() {
        var G__15114 = x__4758__auto__;
        return goog.typeOf(G__15114);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj15116 = {};
  return obj15116;
}();
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = cljs.core._notify_watches[function() {
        var G__15120 = x__4758__auto__;
        return goog.typeOf(G__15120);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._notify_watches["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = cljs.core._add_watch[function() {
        var G__15124 = x__4758__auto__;
        return goog.typeOf(G__15124);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._add_watch["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = cljs.core._remove_watch[function() {
        var G__15128 = x__4758__auto__;
        return goog.typeOf(G__15128);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._remove_watch["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj15130 = {};
  return obj15130;
}();
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._as_transient[function() {
        var G__15134 = x__4758__auto__;
        return goog.typeOf(G__15134);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._as_transient["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj15136 = {};
  return obj15136;
}();
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._conj_BANG_[function() {
        var G__15140 = x__4758__auto__;
        return goog.typeOf(G__15140);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._persistent_BANG_[function() {
        var G__15144 = x__4758__auto__;
        return goog.typeOf(G__15144);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj15146 = {};
  return obj15146;
}();
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._assoc_BANG_[function() {
        var G__15150 = x__4758__auto__;
        return goog.typeOf(G__15150);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj15152 = {};
  return obj15152;
}();
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._dissoc_BANG_[function() {
        var G__15156 = x__4758__auto__;
        return goog.typeOf(G__15156);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj15158 = {};
  return obj15158;
}();
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._assoc_n_BANG_[function() {
        var G__15162 = x__4758__auto__;
        return goog.typeOf(G__15162);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._pop_BANG_[function() {
        var G__15166 = x__4758__auto__;
        return goog.typeOf(G__15166);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj15168 = {};
  return obj15168;
}();
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__4110__auto__ = tcoll;
    if (and__4110__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4758__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4122__auto__ = cljs.core._disjoin_BANG_[function() {
        var G__15172 = x__4758__auto__;
        return goog.typeOf(G__15172);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj15174 = {};
  return obj15174;
}();
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = cljs.core._compare[function() {
        var G__15178 = x__4758__auto__;
        return goog.typeOf(G__15178);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._compare["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj15180 = {};
  return obj15180;
}();
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._drop_first[function() {
        var G__15184 = x__4758__auto__;
        return goog.typeOf(G__15184);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._drop_first["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj15186 = {};
  return obj15186;
}();
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._chunked_first[function() {
        var G__15190 = x__4758__auto__;
        return goog.typeOf(G__15190);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._chunked_first["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._chunked_rest[function() {
        var G__15194 = x__4758__auto__;
        return goog.typeOf(G__15194);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj15196 = {};
  return obj15196;
}();
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._chunked_next[function() {
        var G__15200 = x__4758__auto__;
        return goog.typeOf(G__15200);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._chunked_next["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj15202 = {};
  return obj15202;
}();
cljs.core._name = function cljs$core$_name(x) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = cljs.core._name[function() {
        var G__15206 = x__4758__auto__;
        return goog.typeOf(G__15206);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._name["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = cljs.core._namespace[function() {
        var G__15210 = x__4758__auto__;
        return goog.typeOf(G__15210);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._namespace["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj15212 = {};
  return obj15212;
}();
cljs.core.IReset = function() {
  var obj15214 = {};
  return obj15214;
}();
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._reset_BANG_[function() {
        var G__15218 = x__4758__auto__;
        return goog.typeOf(G__15218);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj15220 = {};
  return obj15220;
}();
cljs.core._swap_BANG_ = function() {
  var cljs$core$_swap_BANG_ = null;
  var cljs$core$_swap_BANG___2 = function(o, f) {
    if (function() {
      var and__4110__auto__ = o;
      if (and__4110__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4758__auto__ = o == null ? null : o;
      return function() {
        var or__4122__auto__ = cljs.core._swap_BANG_[function() {
          var G__15230 = x__4758__auto__;
          return goog.typeOf(G__15230);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var cljs$core$_swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__4110__auto__ = o;
      if (and__4110__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4758__auto__ = o == null ? null : o;
      return function() {
        var or__4122__auto__ = cljs.core._swap_BANG_[function() {
          var G__15232 = x__4758__auto__;
          return goog.typeOf(G__15232);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var cljs$core$_swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__4110__auto__ = o;
      if (and__4110__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4758__auto__ = o == null ? null : o;
      return function() {
        var or__4122__auto__ = cljs.core._swap_BANG_[function() {
          var G__15234 = x__4758__auto__;
          return goog.typeOf(G__15234);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var cljs$core$_swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__4110__auto__ = o;
      if (and__4110__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4758__auto__ = o == null ? null : o;
      return function() {
        var or__4122__auto__ = cljs.core._swap_BANG_[function() {
          var G__15236 = x__4758__auto__;
          return goog.typeOf(G__15236);
        }()];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  cljs$core$_swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return cljs$core$_swap_BANG___2.call(this, o, f);
      case 3:
        return cljs$core$_swap_BANG___3.call(this, o, f, a);
      case 4:
        return cljs$core$_swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return cljs$core$_swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_swap_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_swap_BANG___2;
  cljs$core$_swap_BANG_.cljs$core$IFn$_invoke$arity$3 = cljs$core$_swap_BANG___3;
  cljs$core$_swap_BANG_.cljs$core$IFn$_invoke$arity$4 = cljs$core$_swap_BANG___4;
  cljs$core$_swap_BANG_.cljs$core$IFn$_invoke$arity$5 = cljs$core$_swap_BANG___5;
  return cljs$core$_swap_BANG_;
}();
cljs.core.IVolatile = function() {
  var obj15238 = {};
  return obj15238;
}();
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (function() {
    var and__4110__auto__ = o;
    if (and__4110__auto__) {
      return o.cljs$core$IVolatile$_vreset_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__4758__auto__ = o == null ? null : o;
    return function() {
      var or__4122__auto__ = cljs.core._vreset_BANG_[function() {
        var G__15242 = x__4758__auto__;
        return goog.typeOf(G__15242);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._vreset_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.IIterable = function() {
  var obj15244 = {};
  return obj15244;
}();
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (function() {
    var and__4110__auto__ = coll;
    if (and__4110__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4758__auto__ = coll == null ? null : coll;
    return function() {
      var or__4122__auto__ = cljs.core._iterator[function() {
        var G__15248 = x__4758__auto__;
        return goog.typeOf(G__15248);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._iterator["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return[cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(function() {
  var G__15251 = 4294967295;
  var G__15252 = 5;
  return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__15251, G__15252) : Math.imul.call(null, G__15251, G__15252);
}() === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var G__15255 = a;
    var G__15256 = b;
    return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__15255, G__15256) : Math.imul.call(null, G__15255, G__15256);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__15257 = i + 2;
        var G__15258 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__15257;
        h1 = G__15258;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj15260 = {};
  return obj15260;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__15261 = i + 1;
          var G__15262 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__15261;
          hash = G__15262;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj15266 = {};
      return obj15266;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (function() {
    var G__15269 = o;
    if (G__15269) {
      var bit__4789__auto__ = G__15269.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4789__auto__ || G__15269.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return function() {
        var G__15270 = o;
        return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__15270) : Math.floor.call(null, G__15270);
      }() % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = cljs.core.not(a.ns);
      if (and__4110__auto__) {
        return b.ns;
      } else {
        return and__4110__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__15277 = a.ns;
            var G__15278 = b.ns;
            return goog.array.defaultCompare(G__15277, G__15278);
          }();
          if (0 === nsc) {
            var G__15279 = a.name;
            var G__15280 = b.name;
            return goog.array.defaultCompare(G__15279, G__15280);
          } else {
            return nsc;
          }
        }
      } else {
        var G__15281 = a.name;
        var G__15282 = b.name;
        return goog.array.defaultCompare(G__15281, G__15282);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4538__auto__ = self__._hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__15284 = null;
  var G__15284__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
  };
  var G__15284__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
  };
  G__15284 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15284__2.call(this, self__, coll);
      case 3:
        return G__15284__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15284.cljs$core$IFn$_invoke$arity$2 = G__15284__2;
  G__15284.cljs$core$IFn$_invoke$arity$3 = G__15284__3;
  return G__15284;
}();
cljs.core.Symbol.prototype.apply = function(self__, args15283) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15283)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var cljs$core$symbol = null;
  var cljs$core$symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return cljs$core$symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    }
  };
  var cljs$core$symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  cljs$core$symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return cljs$core$symbol__1.call(this, ns);
      case 2:
        return cljs$core$symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$symbol.cljs$core$IFn$_invoke$arity$1 = cljs$core$symbol__1;
  cljs$core$symbol.cljs$core$IFn$_invoke$arity$2 = cljs$core$symbol__2;
  return cljs$core$symbol;
}();
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 163841;
};
cljs.core.Var.prototype.call = function() {
  var G__15332 = null;
  var G__15332__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null);
  };
  var G__15332__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a);
  };
  var G__15332__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b);
  };
  var G__15332__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c);
  };
  var G__15332__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d);
  };
  var G__15332__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e);
  };
  var G__15332__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f);
  };
  var G__15332__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g);
  };
  var G__15332__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h);
  };
  var G__15332__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__15332__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__15332__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__15332__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__15332__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__15332__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__15332__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__15332__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__15332__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__15332__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__15332__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__15332__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__15332__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15288 = function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }();
    var G__15289 = a;
    var G__15290 = b;
    var G__15291 = c;
    var G__15292 = d;
    var G__15293 = e;
    var G__15294 = f;
    var G__15295 = g;
    var G__15296 = h;
    var G__15297 = i;
    var G__15298 = j;
    var G__15299 = k;
    var G__15300 = l;
    var G__15301 = m;
    var G__15302 = n;
    var G__15303 = o;
    var G__15304 = p;
    var G__15305 = q;
    var G__15306 = r;
    var G__15307 = s;
    var G__15308 = t;
    var G__15309 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__15288, G__15289, G__15290, G__15291, G__15292, G__15293, G__15294, G__15295, G__15296, G__15297, G__15298, G__15299, G__15300, G__15301, G__15302, G__15303, G__15304, G__15305, G__15306, G__15307, G__15308, G__15309) : cljs.core.apply.call(null, G__15288, G__15289, G__15290, G__15291, G__15292, G__15293, G__15294, G__15295, G__15296, G__15297, G__15298, G__15299, G__15300, G__15301, G__15302, 
    G__15303, G__15304, G__15305, G__15306, G__15307, G__15308, G__15309);
  };
  G__15332 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__15332__1.call(this, self__);
      case 2:
        return G__15332__2.call(this, self__, a);
      case 3:
        return G__15332__3.call(this, self__, a, b);
      case 4:
        return G__15332__4.call(this, self__, a, b, c);
      case 5:
        return G__15332__5.call(this, self__, a, b, c, d);
      case 6:
        return G__15332__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__15332__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__15332__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__15332__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__15332__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__15332__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__15332__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__15332__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__15332__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__15332__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__15332__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__15332__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__15332__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__15332__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__15332__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__15332__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__15332__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15332.cljs$core$IFn$_invoke$arity$1 = G__15332__1;
  G__15332.cljs$core$IFn$_invoke$arity$2 = G__15332__2;
  G__15332.cljs$core$IFn$_invoke$arity$3 = G__15332__3;
  G__15332.cljs$core$IFn$_invoke$arity$4 = G__15332__4;
  G__15332.cljs$core$IFn$_invoke$arity$5 = G__15332__5;
  G__15332.cljs$core$IFn$_invoke$arity$6 = G__15332__6;
  G__15332.cljs$core$IFn$_invoke$arity$7 = G__15332__7;
  G__15332.cljs$core$IFn$_invoke$arity$8 = G__15332__8;
  G__15332.cljs$core$IFn$_invoke$arity$9 = G__15332__9;
  G__15332.cljs$core$IFn$_invoke$arity$10 = G__15332__10;
  G__15332.cljs$core$IFn$_invoke$arity$11 = G__15332__11;
  G__15332.cljs$core$IFn$_invoke$arity$12 = G__15332__12;
  G__15332.cljs$core$IFn$_invoke$arity$13 = G__15332__13;
  G__15332.cljs$core$IFn$_invoke$arity$14 = G__15332__14;
  G__15332.cljs$core$IFn$_invoke$arity$15 = G__15332__15;
  G__15332.cljs$core$IFn$_invoke$arity$16 = G__15332__16;
  G__15332.cljs$core$IFn$_invoke$arity$17 = G__15332__17;
  G__15332.cljs$core$IFn$_invoke$arity$18 = G__15332__18;
  G__15332.cljs$core$IFn$_invoke$arity$19 = G__15332__19;
  G__15332.cljs$core$IFn$_invoke$arity$20 = G__15332__20;
  G__15332.cljs$core$IFn$_invoke$arity$21 = G__15332__21;
  G__15332.cljs$core$IFn$_invoke$arity$22 = G__15332__22;
  return G__15332;
}();
cljs.core.Var.prototype.apply = function(self__, args15287) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15287)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__15310 = function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }();
  var G__15311 = a;
  var G__15312 = b;
  var G__15313 = c;
  var G__15314 = d;
  var G__15315 = e;
  var G__15316 = f;
  var G__15317 = g;
  var G__15318 = h;
  var G__15319 = i;
  var G__15320 = j;
  var G__15321 = k;
  var G__15322 = l;
  var G__15323 = m;
  var G__15324 = n;
  var G__15325 = o;
  var G__15326 = p;
  var G__15327 = q;
  var G__15328 = r;
  var G__15329 = s;
  var G__15330 = t;
  var G__15331 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__15310, G__15311, G__15312, G__15313, G__15314, G__15315, G__15316, G__15317, G__15318, G__15319, G__15320, G__15321, G__15322, G__15323, G__15324, G__15325, G__15326, G__15327, G__15328, G__15329, G__15330, G__15331) : cljs.core.apply.call(null, G__15310, G__15311, G__15312, G__15313, G__15314, G__15315, G__15316, G__15317, G__15318, G__15319, G__15320, G__15321, G__15322, G__15323, G__15324, 
  G__15325, G__15326, G__15327, G__15328, G__15329, G__15330, G__15331);
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  var G__15334 = x;
  if (G__15334) {
    var bit__4796__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4122__auto__ = bit__4796__auto__;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return G__15334.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__15334.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__15334);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__15334);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  var G__15336 = value;
  if (G__15336) {
    var bit__4796__auto__ = G__15336.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4796__auto__ || G__15336.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__15336.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__15336);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__15336);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15338 = coll;
      if (G__15338) {
        var bit__4789__auto__ = G__15338.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4789__auto__ || G__15338.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15340 = coll;
      if (G__15340) {
        var bit__4789__auto__ = G__15340.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4789__auto__ || G__15340.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__15342 = coll;
      if (G__15342) {
        var bit__4789__auto__ = G__15342.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4789__auto__ || G__15342.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15344 = coll;
      if (G__15344) {
        var bit__4789__auto__ = G__15344.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4789__auto__ || G__15344.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var cljs$core$_EQ_ = null;
  var cljs$core$_EQ___1 = function(x) {
    return true;
  };
  var cljs$core$_EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv(x, y);
    }
  };
  var cljs$core$_EQ___3 = function() {
    var G__15349__delegate = function(x, y, more) {
      while (true) {
        if (cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__15350 = y;
            var G__15351 = cljs.core.first(more);
            var G__15352 = cljs.core.next(more);
            x = G__15350;
            y = G__15351;
            more = G__15352;
            continue;
          } else {
            return cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__15349 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__15353__i = 0, G__15353__a = new Array(arguments.length - 2);
        while (G__15353__i < G__15353__a.length) {
          G__15353__a[G__15353__i] = arguments[G__15353__i + 2];
          ++G__15353__i;
        }
        more = new cljs.core.IndexedSeq(G__15353__a, 0);
      }
      return G__15349__delegate.call(this, x, y, more);
    };
    G__15349.cljs$lang$maxFixedArity = 2;
    G__15349.cljs$lang$applyTo = function(arglist__15354) {
      var x = cljs.core.first(arglist__15354);
      arglist__15354 = cljs.core.next(arglist__15354);
      var y = cljs.core.first(arglist__15354);
      var more = cljs.core.rest(arglist__15354);
      return G__15349__delegate(x, y, more);
    };
    G__15349.cljs$core$IFn$_invoke$arity$variadic = G__15349__delegate;
    return G__15349;
  }();
  cljs$core$_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_EQ___1.call(this, x);
      case 2:
        return cljs$core$_EQ___2.call(this, x, y);
      default:
        var G__15355 = null;
        if (arguments.length > 2) {
          var G__15356__i = 0, G__15356__a = new Array(arguments.length - 2);
          while (G__15356__i < G__15356__a.length) {
            G__15356__a[G__15356__i] = arguments[G__15356__i + 2];
            ++G__15356__i;
          }
          G__15355 = new cljs.core.IndexedSeq(G__15356__a, 0);
        }
        return cljs$core$_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__15355);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$_EQ_.cljs$lang$applyTo = cljs$core$_EQ___3.cljs$lang$applyTo;
  cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_EQ___1;
  cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_EQ___2;
  cljs$core$_EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_EQ_;
}();
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = function() {
      var G__15357 = self__.iter;
      return cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(G__15357) : cljs.core.es6_iterator_seq.call(null, G__15357);
    }();
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__15358 = n + 1;
      var G__15359 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__15360 = cljs.core.next(coll__$1);
      n = G__15358;
      hash_code = G__15359;
      coll__$1 = G__15360;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__15361 = n + 1;
      var G__15362 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__15363 = cljs.core.next(coll__$1);
      n = G__15361;
      hash_code = G__15362;
      coll__$1 = G__15363;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IComparable$ = true;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  var G__15364 = this$__$1.valueOf();
  var G__15365 = other.valueOf();
  return goog.array.defaultCompare(G__15364, G__15365);
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  var G__15366 = o;
  return goog.getUid(G__15366);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    var G__15368 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__15368) : cljs.core.deref.call(null, G__15368);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function() {
  var cljs$core$ci_reduce = null;
  var cljs$core$ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count(cicoll);
    if (cnt === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__15375 = val;
            var G__15376 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15375, G__15376) : f.call(null, G__15375, G__15376);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__15381 = nval;
            var G__15382 = n + 1;
            val = G__15381;
            n = G__15382;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var cljs$core$ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__15377 = val__$1;
          var G__15378 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15377, G__15378) : f.call(null, G__15377, G__15378);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__15383 = nval;
          var G__15384 = n + 1;
          val__$1 = G__15383;
          n = G__15384;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var cljs$core$ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__15379 = val__$1;
          var G__15380 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15379, G__15380) : f.call(null, G__15379, G__15380);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__15385 = nval;
          var G__15386 = n + 1;
          val__$1 = G__15385;
          n = G__15386;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  cljs$core$ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return cljs$core$ci_reduce__2.call(this, cicoll, f);
      case 3:
        return cljs$core$ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return cljs$core$ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$ci_reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$ci_reduce__2;
  cljs$core$ci_reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$ci_reduce__3;
  cljs$core$ci_reduce.cljs$core$IFn$_invoke$arity$4 = cljs$core$ci_reduce__4;
  return cljs$core$ci_reduce;
}();
cljs.core.array_reduce = function() {
  var cljs$core$array_reduce = null;
  var cljs$core$array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__15393 = val;
            var G__15394 = arr[n];
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15393, G__15394) : f.call(null, G__15393, G__15394);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__15399 = nval;
            var G__15400 = n + 1;
            val = G__15399;
            n = G__15400;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var cljs$core$array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__15395 = val__$1;
          var G__15396 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15395, G__15396) : f.call(null, G__15395, G__15396);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__15401 = nval;
          var G__15402 = n + 1;
          val__$1 = G__15401;
          n = G__15402;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var cljs$core$array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__15397 = val__$1;
          var G__15398 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15397, G__15398) : f.call(null, G__15397, G__15398);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__15403 = nval;
          var G__15404 = n + 1;
          val__$1 = G__15403;
          n = G__15404;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  cljs$core$array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return cljs$core$array_reduce__2.call(this, arr, f);
      case 3:
        return cljs$core$array_reduce__3.call(this, arr, f, val);
      case 4:
        return cljs$core$array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$array_reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$array_reduce__2;
  cljs$core$array_reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$array_reduce__3;
  cljs$core$array_reduce.cljs$core$IFn$_invoke$arity$4 = cljs$core$array_reduce__4;
  return cljs$core$array_reduce;
}();
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  var G__15406 = x;
  if (G__15406) {
    var bit__4796__auto__ = G__15406.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4796__auto__ || G__15406.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__15406.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__15406);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__15406);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  var G__15408 = x;
  if (G__15408) {
    var bit__4796__auto__ = G__15408.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4796__auto__ || G__15408.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__15408.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__15408);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__15408);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__15409 = coll__$1;
  var G__15410 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__15409, G__15410) : cljs.core.equiv_sequential.call(null, G__15409, G__15410);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__15411 = o;
  var G__15412 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__15411, G__15412) : cljs.core.cons.call(null, G__15411, G__15412);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.prim_seq = function() {
  var cljs$core$prim_seq = null;
  var cljs$core$prim_seq__1 = function(prim) {
    return cljs$core$prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
  };
  var cljs$core$prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  cljs$core$prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return cljs$core$prim_seq__1.call(this, prim);
      case 2:
        return cljs$core$prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$prim_seq.cljs$core$IFn$_invoke$arity$1 = cljs$core$prim_seq__1;
  cljs$core$prim_seq.cljs$core$IFn$_invoke$arity$2 = cljs$core$prim_seq__2;
  return cljs$core$prim_seq;
}();
cljs.core.array_seq = function() {
  var cljs$core$array_seq = null;
  var cljs$core$array_seq__1 = function(array) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
  };
  var cljs$core$array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
  };
  cljs$core$array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return cljs$core$array_seq__1.call(this, array);
      case 2:
        return cljs$core$array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$array_seq.cljs$core$IFn$_invoke$arity$1 = cljs$core$array_seq__1;
  cljs$core$array_seq.cljs$core$IFn$_invoke$arity$2 = cljs$core$array_seq__2;
  return cljs$core$array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__15415 = coll__$1;
  var G__15416 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__15415, G__15416) : cljs.core.equiv_sequential.call(null, G__15415, G__15416);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__15417 = cljs.core.List.EMPTY;
  var G__15418 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__15417, G__15418) : cljs.core.with_meta.call(null, G__15417, G__15418);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  var G__15419 = f;
  var G__15420 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(G__15419, G__15420) : cljs.core.seq_reduce.call(null, G__15419, G__15420);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  var G__15421 = f;
  var G__15422 = start;
  var G__15423 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(G__15421, G__15422, G__15423) : cljs.core.seq_reduce.call(null, G__15421, G__15422, G__15423);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__15424 = o;
  var G__15425 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__15424, G__15425) : cljs.core.cons.call(null, G__15424, G__15425);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__15426 = sn;
      s = G__15426;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var cljs$core$conj = null;
  var cljs$core$conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var cljs$core$conj__1 = function(coll) {
    return coll;
  };
  var cljs$core$conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj(coll, x);
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, x);
    }
  };
  var cljs$core$conj__3 = function() {
    var G__15431__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__15432 = cljs$core$conj.cljs$core$IFn$_invoke$arity$2(coll, x);
          var G__15433 = cljs.core.first(xs);
          var G__15434 = cljs.core.next(xs);
          coll = G__15432;
          x = G__15433;
          xs = G__15434;
          continue;
        } else {
          return cljs$core$conj.cljs$core$IFn$_invoke$arity$2(coll, x);
        }
        break;
      }
    };
    var G__15431 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        var G__15435__i = 0, G__15435__a = new Array(arguments.length - 2);
        while (G__15435__i < G__15435__a.length) {
          G__15435__a[G__15435__i] = arguments[G__15435__i + 2];
          ++G__15435__i;
        }
        xs = new cljs.core.IndexedSeq(G__15435__a, 0);
      }
      return G__15431__delegate.call(this, coll, x, xs);
    };
    G__15431.cljs$lang$maxFixedArity = 2;
    G__15431.cljs$lang$applyTo = function(arglist__15436) {
      var coll = cljs.core.first(arglist__15436);
      arglist__15436 = cljs.core.next(arglist__15436);
      var x = cljs.core.first(arglist__15436);
      var xs = cljs.core.rest(arglist__15436);
      return G__15431__delegate(coll, x, xs);
    };
    G__15431.cljs$core$IFn$_invoke$arity$variadic = G__15431__delegate;
    return G__15431;
  }();
  cljs$core$conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$conj__0.call(this);
      case 1:
        return cljs$core$conj__1.call(this, coll);
      case 2:
        return cljs$core$conj__2.call(this, coll, x);
      default:
        var G__15437 = null;
        if (arguments.length > 2) {
          var G__15438__i = 0, G__15438__a = new Array(arguments.length - 2);
          while (G__15438__i < G__15438__a.length) {
            G__15438__a[G__15438__i] = arguments[G__15438__i + 2];
            ++G__15438__i;
          }
          G__15437 = new cljs.core.IndexedSeq(G__15438__a, 0);
        }
        return cljs$core$conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, G__15437);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$conj.cljs$lang$maxFixedArity = 2;
  cljs$core$conj.cljs$lang$applyTo = cljs$core$conj__3.cljs$lang$applyTo;
  cljs$core$conj.cljs$core$IFn$_invoke$arity$0 = cljs$core$conj__0;
  cljs$core$conj.cljs$core$IFn$_invoke$arity$1 = cljs$core$conj__1;
  cljs$core$conj.cljs$core$IFn$_invoke$arity$2 = cljs$core$conj__2;
  cljs$core$conj.cljs$core$IFn$_invoke$arity$variadic = cljs$core$conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$conj;
}();
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__15439 = cljs.core.next(s);
      var G__15440 = acc + 1;
      s = G__15439;
      acc = G__15440;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__15442 = coll;
      if (G__15442) {
        var bit__4789__auto__ = G__15442.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4789__auto__ || G__15442.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, coll)) {
            return cljs.core._count(coll);
          } else {
            return cljs.core.accumulating_seq_count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var cljs$core$linear_traversal_nth = null;
  var cljs$core$linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
          } else {
            if (cljs.core.seq(coll)) {
              var G__15443 = cljs.core.next(coll);
              var G__15444 = n - 1;
              coll = G__15443;
              n = G__15444;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var cljs$core$linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
          } else {
            if (cljs.core.seq(coll)) {
              var G__15445 = cljs.core.next(coll);
              var G__15446 = n - 1;
              var G__15447 = not_found;
              coll = G__15445;
              n = G__15446;
              not_found = G__15447;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  cljs$core$linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return cljs$core$linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = cljs$core$linear_traversal_nth__2;
  cljs$core$linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = cljs$core$linear_traversal_nth__3;
  return cljs$core$linear_traversal_nth;
}();
cljs.core.nth = function() {
  var cljs$core$nth = null;
  var cljs$core$nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__15452 = coll;
          if (G__15452) {
            var bit__4789__auto__ = G__15452.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4789__auto__ || G__15452.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
        } else {
          if (cljs.core.array_QMARK_(coll)) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__15453 = coll;
                  if (G__15453) {
                    var bit__4796__auto__ = G__15453.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4796__auto__ || G__15453.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__15453.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__15453);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__15453);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  var cljs$core$nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__15454 = coll;
          if (G__15454) {
            var bit__4789__auto__ = G__15454.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4789__auto__ || G__15454.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
        } else {
          if (cljs.core.array_QMARK_(coll)) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__15455 = coll;
                  if (G__15455) {
                    var bit__4796__auto__ = G__15455.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4796__auto__ || G__15455.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__15455.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__15455);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__15455);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  cljs$core$nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$nth__2.call(this, coll, n);
      case 3:
        return cljs$core$nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$nth.cljs$core$IFn$_invoke$arity$2 = cljs$core$nth__2;
  cljs$core$nth.cljs$core$IFn$_invoke$arity$3 = cljs$core$nth__3;
  return cljs$core$nth;
}();
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__15456 = n__$1 - 1;
      var G__15457 = cljs.core.rest(xs);
      n__$1 = G__15456;
      xs = G__15457;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function() {
  var cljs$core$get = null;
  var cljs$core$get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__15460 = o;
        if (G__15460) {
          var bit__4789__auto__ = G__15460.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4789__auto__ || G__15460.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$2(null, k);
      } else {
        if (cljs.core.array_QMARK_(o)) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var cljs$core$get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__15461 = o;
        if (G__15461) {
          var bit__4789__auto__ = G__15461.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4789__auto__ || G__15461.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
      } else {
        if (cljs.core.array_QMARK_(o)) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  cljs$core$get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$get__2.call(this, o, k);
      case 3:
        return cljs$core$get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$get.cljs$core$IFn$_invoke$arity$2 = cljs$core$get__2;
  cljs$core$get.cljs$core$IFn$_invoke$arity$3 = cljs$core$get__3;
  return cljs$core$get;
}();
cljs.core.assoc = function() {
  var cljs$core$assoc = null;
  var cljs$core$assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc(coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var cljs$core$assoc__4 = function() {
    var G__15465__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = cljs$core$assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__15466 = ret;
          var G__15467 = cljs.core.first(kvs);
          var G__15468 = cljs.core.second(kvs);
          var G__15469 = cljs.core.nnext(kvs);
          coll = G__15466;
          k = G__15467;
          v = G__15468;
          kvs = G__15469;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__15465 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__15470__i = 0, G__15470__a = new Array(arguments.length - 3);
        while (G__15470__i < G__15470__a.length) {
          G__15470__a[G__15470__i] = arguments[G__15470__i + 3];
          ++G__15470__i;
        }
        kvs = new cljs.core.IndexedSeq(G__15470__a, 0);
      }
      return G__15465__delegate.call(this, coll, k, v, kvs);
    };
    G__15465.cljs$lang$maxFixedArity = 3;
    G__15465.cljs$lang$applyTo = function(arglist__15471) {
      var coll = cljs.core.first(arglist__15471);
      arglist__15471 = cljs.core.next(arglist__15471);
      var k = cljs.core.first(arglist__15471);
      arglist__15471 = cljs.core.next(arglist__15471);
      var v = cljs.core.first(arglist__15471);
      var kvs = cljs.core.rest(arglist__15471);
      return G__15465__delegate(coll, k, v, kvs);
    };
    G__15465.cljs$core$IFn$_invoke$arity$variadic = G__15465__delegate;
    return G__15465;
  }();
  cljs$core$assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$assoc__3.call(this, coll, k, v);
      default:
        var G__15472 = null;
        if (arguments.length > 3) {
          var G__15473__i = 0, G__15473__a = new Array(arguments.length - 3);
          while (G__15473__i < G__15473__a.length) {
            G__15473__a[G__15473__i] = arguments[G__15473__i + 3];
            ++G__15473__i;
          }
          G__15472 = new cljs.core.IndexedSeq(G__15473__a, 0);
        }
        return cljs$core$assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, G__15472);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$assoc.cljs$lang$maxFixedArity = 3;
  cljs$core$assoc.cljs$lang$applyTo = cljs$core$assoc__4.cljs$lang$applyTo;
  cljs$core$assoc.cljs$core$IFn$_invoke$arity$3 = cljs$core$assoc__3;
  cljs$core$assoc.cljs$core$IFn$_invoke$arity$variadic = cljs$core$assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$assoc;
}();
cljs.core.dissoc = function() {
  var cljs$core$dissoc = null;
  var cljs$core$dissoc__1 = function(coll) {
    return coll;
  };
  var cljs$core$dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc(coll, k);
    }
  };
  var cljs$core$dissoc__3 = function() {
    var G__15476__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = cljs$core$dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__15477 = ret;
            var G__15478 = cljs.core.first(ks);
            var G__15479 = cljs.core.next(ks);
            coll = G__15477;
            k = G__15478;
            ks = G__15479;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__15476 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__15480__i = 0, G__15480__a = new Array(arguments.length - 2);
        while (G__15480__i < G__15480__a.length) {
          G__15480__a[G__15480__i] = arguments[G__15480__i + 2];
          ++G__15480__i;
        }
        ks = new cljs.core.IndexedSeq(G__15480__a, 0);
      }
      return G__15476__delegate.call(this, coll, k, ks);
    };
    G__15476.cljs$lang$maxFixedArity = 2;
    G__15476.cljs$lang$applyTo = function(arglist__15481) {
      var coll = cljs.core.first(arglist__15481);
      arglist__15481 = cljs.core.next(arglist__15481);
      var k = cljs.core.first(arglist__15481);
      var ks = cljs.core.rest(arglist__15481);
      return G__15476__delegate(coll, k, ks);
    };
    G__15476.cljs$core$IFn$_invoke$arity$variadic = G__15476__delegate;
    return G__15476;
  }();
  cljs$core$dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$dissoc__1.call(this, coll);
      case 2:
        return cljs$core$dissoc__2.call(this, coll, k);
      default:
        var G__15482 = null;
        if (arguments.length > 2) {
          var G__15483__i = 0, G__15483__a = new Array(arguments.length - 2);
          while (G__15483__i < G__15483__a.length) {
            G__15483__a[G__15483__i] = arguments[G__15483__i + 2];
            ++G__15483__i;
          }
          G__15482 = new cljs.core.IndexedSeq(G__15483__a, 0);
        }
        return cljs$core$dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__15482);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$dissoc.cljs$lang$maxFixedArity = 2;
  cljs$core$dissoc.cljs$lang$applyTo = cljs$core$dissoc__3.cljs$lang$applyTo;
  cljs$core$dissoc.cljs$core$IFn$_invoke$arity$1 = cljs$core$dissoc__1;
  cljs$core$dissoc.cljs$core$IFn$_invoke$arity$2 = cljs$core$dissoc__2;
  cljs$core$dissoc.cljs$core$IFn$_invoke$arity$variadic = cljs$core$dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$dissoc;
}();
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__4122__auto__ = function() {
    var G__15488 = f;
    return goog.isFunction(G__15488);
  }();
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    var G__15489 = f;
    if (G__15489) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto____$1 = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto____$1)) {
          return or__4122__auto____$1;
        } else {
          return G__15489.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__15489.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__15489);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__15489);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.prototype.call = function() {
  var G__15955 = null;
  var G__15955__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__15955__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15491 = a;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__15491) : self__.afn.call(null, G__15491);
  };
  var G__15955__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15492 = a;
    var G__15493 = b;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__15492, G__15493) : self__.afn.call(null, G__15492, G__15493);
  };
  var G__15955__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15494 = a;
    var G__15495 = b;
    var G__15496 = c;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__15494, G__15495, G__15496) : self__.afn.call(null, G__15494, G__15495, G__15496);
  };
  var G__15955__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15497 = a;
    var G__15498 = b;
    var G__15499 = c;
    var G__15500 = d;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__15497, G__15498, G__15499, G__15500) : self__.afn.call(null, G__15497, G__15498, G__15499, G__15500);
  };
  var G__15955__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15501 = a;
    var G__15502 = b;
    var G__15503 = c;
    var G__15504 = d;
    var G__15505 = e;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__15501, G__15502, G__15503, G__15504, G__15505) : self__.afn.call(null, G__15501, G__15502, G__15503, G__15504, G__15505);
  };
  var G__15955__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15506 = a;
    var G__15507 = b;
    var G__15508 = c;
    var G__15509 = d;
    var G__15510 = e;
    var G__15511 = f;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__15506, G__15507, G__15508, G__15509, G__15510, G__15511) : self__.afn.call(null, G__15506, G__15507, G__15508, G__15509, G__15510, G__15511);
  };
  var G__15955__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15512 = a;
    var G__15513 = b;
    var G__15514 = c;
    var G__15515 = d;
    var G__15516 = e;
    var G__15517 = f;
    var G__15518 = g;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__15512, G__15513, G__15514, G__15515, G__15516, G__15517, G__15518) : self__.afn.call(null, G__15512, G__15513, G__15514, G__15515, G__15516, G__15517, G__15518);
  };
  var G__15955__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15519 = a;
    var G__15520 = b;
    var G__15521 = c;
    var G__15522 = d;
    var G__15523 = e;
    var G__15524 = f;
    var G__15525 = g;
    var G__15526 = h;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__15519, G__15520, G__15521, G__15522, G__15523, G__15524, G__15525, G__15526) : self__.afn.call(null, G__15519, G__15520, G__15521, G__15522, G__15523, G__15524, G__15525, G__15526);
  };
  var G__15955__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15527 = a;
    var G__15528 = b;
    var G__15529 = c;
    var G__15530 = d;
    var G__15531 = e;
    var G__15532 = f;
    var G__15533 = g;
    var G__15534 = h;
    var G__15535 = i;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__15527, G__15528, G__15529, G__15530, G__15531, G__15532, G__15533, G__15534, G__15535) : self__.afn.call(null, G__15527, G__15528, G__15529, G__15530, G__15531, G__15532, G__15533, G__15534, G__15535);
  };
  var G__15955__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15536 = a;
    var G__15537 = b;
    var G__15538 = c;
    var G__15539 = d;
    var G__15540 = e;
    var G__15541 = f;
    var G__15542 = g;
    var G__15543 = h;
    var G__15544 = i;
    var G__15545 = j;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__15536, G__15537, G__15538, G__15539, G__15540, G__15541, G__15542, G__15543, G__15544, G__15545) : self__.afn.call(null, G__15536, G__15537, G__15538, G__15539, G__15540, G__15541, G__15542, G__15543, G__15544, G__15545);
  };
  var G__15955__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15546 = a;
    var G__15547 = b;
    var G__15548 = c;
    var G__15549 = d;
    var G__15550 = e;
    var G__15551 = f;
    var G__15552 = g;
    var G__15553 = h;
    var G__15554 = i;
    var G__15555 = j;
    var G__15556 = k;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__15546, G__15547, G__15548, G__15549, G__15550, G__15551, G__15552, G__15553, G__15554, G__15555, G__15556) : self__.afn.call(null, G__15546, G__15547, G__15548, G__15549, G__15550, G__15551, G__15552, G__15553, G__15554, G__15555, G__15556);
  };
  var G__15955__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15557 = a;
    var G__15558 = b;
    var G__15559 = c;
    var G__15560 = d;
    var G__15561 = e;
    var G__15562 = f;
    var G__15563 = g;
    var G__15564 = h;
    var G__15565 = i;
    var G__15566 = j;
    var G__15567 = k;
    var G__15568 = l;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__15557, G__15558, G__15559, G__15560, G__15561, G__15562, G__15563, G__15564, G__15565, G__15566, G__15567, G__15568) : self__.afn.call(null, G__15557, G__15558, G__15559, G__15560, G__15561, G__15562, G__15563, G__15564, G__15565, G__15566, G__15567, G__15568);
  };
  var G__15955__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15569 = a;
    var G__15570 = b;
    var G__15571 = c;
    var G__15572 = d;
    var G__15573 = e;
    var G__15574 = f;
    var G__15575 = g;
    var G__15576 = h;
    var G__15577 = i;
    var G__15578 = j;
    var G__15579 = k;
    var G__15580 = l;
    var G__15581 = m;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__15569, G__15570, G__15571, G__15572, G__15573, G__15574, G__15575, G__15576, G__15577, G__15578, G__15579, G__15580, G__15581) : self__.afn.call(null, G__15569, G__15570, G__15571, G__15572, G__15573, G__15574, G__15575, G__15576, G__15577, G__15578, G__15579, G__15580, G__15581);
  };
  var G__15955__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15582 = a;
    var G__15583 = b;
    var G__15584 = c;
    var G__15585 = d;
    var G__15586 = e;
    var G__15587 = f;
    var G__15588 = g;
    var G__15589 = h;
    var G__15590 = i;
    var G__15591 = j;
    var G__15592 = k;
    var G__15593 = l;
    var G__15594 = m;
    var G__15595 = n;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__15582, G__15583, G__15584, G__15585, G__15586, G__15587, G__15588, G__15589, G__15590, G__15591, G__15592, G__15593, G__15594, G__15595) : self__.afn.call(null, G__15582, G__15583, G__15584, G__15585, G__15586, G__15587, G__15588, G__15589, G__15590, G__15591, G__15592, G__15593, G__15594, G__15595);
  };
  var G__15955__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15596 = a;
    var G__15597 = b;
    var G__15598 = c;
    var G__15599 = d;
    var G__15600 = e;
    var G__15601 = f;
    var G__15602 = g;
    var G__15603 = h;
    var G__15604 = i;
    var G__15605 = j;
    var G__15606 = k;
    var G__15607 = l;
    var G__15608 = m;
    var G__15609 = n;
    var G__15610 = o;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__15596, G__15597, G__15598, G__15599, G__15600, G__15601, G__15602, G__15603, G__15604, G__15605, G__15606, G__15607, G__15608, G__15609, G__15610) : self__.afn.call(null, G__15596, G__15597, G__15598, G__15599, G__15600, G__15601, G__15602, G__15603, G__15604, G__15605, G__15606, G__15607, G__15608, G__15609, G__15610);
  };
  var G__15955__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15611 = a;
    var G__15612 = b;
    var G__15613 = c;
    var G__15614 = d;
    var G__15615 = e;
    var G__15616 = f;
    var G__15617 = g;
    var G__15618 = h;
    var G__15619 = i;
    var G__15620 = j;
    var G__15621 = k;
    var G__15622 = l;
    var G__15623 = m;
    var G__15624 = n;
    var G__15625 = o;
    var G__15626 = p;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__15611, G__15612, G__15613, G__15614, G__15615, G__15616, G__15617, G__15618, G__15619, G__15620, G__15621, G__15622, G__15623, G__15624, G__15625, G__15626) : self__.afn.call(null, G__15611, G__15612, G__15613, G__15614, G__15615, G__15616, G__15617, G__15618, G__15619, G__15620, G__15621, G__15622, G__15623, G__15624, G__15625, G__15626);
  };
  var G__15955__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15627 = a;
    var G__15628 = b;
    var G__15629 = c;
    var G__15630 = d;
    var G__15631 = e;
    var G__15632 = f;
    var G__15633 = g;
    var G__15634 = h;
    var G__15635 = i;
    var G__15636 = j;
    var G__15637 = k;
    var G__15638 = l;
    var G__15639 = m;
    var G__15640 = n;
    var G__15641 = o;
    var G__15642 = p;
    var G__15643 = q;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__15627, G__15628, G__15629, G__15630, G__15631, G__15632, G__15633, G__15634, G__15635, G__15636, G__15637, G__15638, G__15639, G__15640, G__15641, G__15642, G__15643) : self__.afn.call(null, G__15627, G__15628, G__15629, G__15630, G__15631, G__15632, G__15633, G__15634, G__15635, G__15636, G__15637, G__15638, G__15639, G__15640, G__15641, G__15642, G__15643);
  };
  var G__15955__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15644 = a;
    var G__15645 = b;
    var G__15646 = c;
    var G__15647 = d;
    var G__15648 = e;
    var G__15649 = f;
    var G__15650 = g;
    var G__15651 = h;
    var G__15652 = i;
    var G__15653 = j;
    var G__15654 = k;
    var G__15655 = l;
    var G__15656 = m;
    var G__15657 = n;
    var G__15658 = o;
    var G__15659 = p;
    var G__15660 = q;
    var G__15661 = r;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__15644, G__15645, G__15646, G__15647, G__15648, G__15649, G__15650, G__15651, G__15652, G__15653, G__15654, G__15655, G__15656, G__15657, G__15658, G__15659, G__15660, G__15661) : self__.afn.call(null, G__15644, G__15645, G__15646, G__15647, G__15648, G__15649, G__15650, G__15651, G__15652, G__15653, G__15654, G__15655, G__15656, G__15657, G__15658, G__15659, G__15660, G__15661);
  };
  var G__15955__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15662 = a;
    var G__15663 = b;
    var G__15664 = c;
    var G__15665 = d;
    var G__15666 = e;
    var G__15667 = f;
    var G__15668 = g;
    var G__15669 = h;
    var G__15670 = i;
    var G__15671 = j;
    var G__15672 = k;
    var G__15673 = l;
    var G__15674 = m;
    var G__15675 = n;
    var G__15676 = o;
    var G__15677 = p;
    var G__15678 = q;
    var G__15679 = r;
    var G__15680 = s;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__15662, G__15663, G__15664, G__15665, G__15666, G__15667, G__15668, G__15669, G__15670, G__15671, G__15672, G__15673, G__15674, G__15675, G__15676, G__15677, G__15678, G__15679, G__15680) : self__.afn.call(null, G__15662, G__15663, G__15664, G__15665, G__15666, G__15667, G__15668, G__15669, G__15670, G__15671, G__15672, G__15673, G__15674, G__15675, G__15676, G__15677, G__15678, G__15679, G__15680);
  };
  var G__15955__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15681 = a;
    var G__15682 = b;
    var G__15683 = c;
    var G__15684 = d;
    var G__15685 = e;
    var G__15686 = f;
    var G__15687 = g;
    var G__15688 = h;
    var G__15689 = i;
    var G__15690 = j;
    var G__15691 = k;
    var G__15692 = l;
    var G__15693 = m;
    var G__15694 = n;
    var G__15695 = o;
    var G__15696 = p;
    var G__15697 = q;
    var G__15698 = r;
    var G__15699 = s;
    var G__15700 = t;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__15681, G__15682, G__15683, G__15684, G__15685, G__15686, G__15687, G__15688, G__15689, G__15690, G__15691, G__15692, G__15693, G__15694, G__15695, G__15696, G__15697, G__15698, G__15699, G__15700) : self__.afn.call(null, G__15681, G__15682, G__15683, G__15684, G__15685, G__15686, G__15687, G__15688, G__15689, G__15690, G__15691, G__15692, G__15693, G__15694, G__15695, G__15696, G__15697, G__15698, 
    G__15699, G__15700);
  };
  var G__15955__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15701 = self__.afn;
    var G__15702 = a;
    var G__15703 = b;
    var G__15704 = c;
    var G__15705 = d;
    var G__15706 = e;
    var G__15707 = f;
    var G__15708 = g;
    var G__15709 = h;
    var G__15710 = i;
    var G__15711 = j;
    var G__15712 = k;
    var G__15713 = l;
    var G__15714 = m;
    var G__15715 = n;
    var G__15716 = o;
    var G__15717 = p;
    var G__15718 = q;
    var G__15719 = r;
    var G__15720 = s;
    var G__15721 = t;
    var G__15722 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__15701, G__15702, G__15703, G__15704, G__15705, G__15706, G__15707, G__15708, G__15709, G__15710, G__15711, G__15712, G__15713, G__15714, G__15715, G__15716, G__15717, G__15718, G__15719, G__15720, G__15721, G__15722) : cljs.core.apply.call(null, G__15701, G__15702, G__15703, G__15704, G__15705, G__15706, G__15707, G__15708, G__15709, G__15710, G__15711, G__15712, G__15713, G__15714, G__15715, 
    G__15716, G__15717, G__15718, G__15719, G__15720, G__15721, G__15722);
  };
  G__15955 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__15955__1.call(this, self__);
      case 2:
        return G__15955__2.call(this, self__, a);
      case 3:
        return G__15955__3.call(this, self__, a, b);
      case 4:
        return G__15955__4.call(this, self__, a, b, c);
      case 5:
        return G__15955__5.call(this, self__, a, b, c, d);
      case 6:
        return G__15955__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__15955__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__15955__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__15955__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__15955__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__15955__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__15955__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__15955__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__15955__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__15955__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__15955__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__15955__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__15955__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__15955__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__15955__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__15955__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__15955__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15955.cljs$core$IFn$_invoke$arity$1 = G__15955__1;
  G__15955.cljs$core$IFn$_invoke$arity$2 = G__15955__2;
  G__15955.cljs$core$IFn$_invoke$arity$3 = G__15955__3;
  G__15955.cljs$core$IFn$_invoke$arity$4 = G__15955__4;
  G__15955.cljs$core$IFn$_invoke$arity$5 = G__15955__5;
  G__15955.cljs$core$IFn$_invoke$arity$6 = G__15955__6;
  G__15955.cljs$core$IFn$_invoke$arity$7 = G__15955__7;
  G__15955.cljs$core$IFn$_invoke$arity$8 = G__15955__8;
  G__15955.cljs$core$IFn$_invoke$arity$9 = G__15955__9;
  G__15955.cljs$core$IFn$_invoke$arity$10 = G__15955__10;
  G__15955.cljs$core$IFn$_invoke$arity$11 = G__15955__11;
  G__15955.cljs$core$IFn$_invoke$arity$12 = G__15955__12;
  G__15955.cljs$core$IFn$_invoke$arity$13 = G__15955__13;
  G__15955.cljs$core$IFn$_invoke$arity$14 = G__15955__14;
  G__15955.cljs$core$IFn$_invoke$arity$15 = G__15955__15;
  G__15955.cljs$core$IFn$_invoke$arity$16 = G__15955__16;
  G__15955.cljs$core$IFn$_invoke$arity$17 = G__15955__17;
  G__15955.cljs$core$IFn$_invoke$arity$18 = G__15955__18;
  G__15955.cljs$core$IFn$_invoke$arity$19 = G__15955__19;
  G__15955.cljs$core$IFn$_invoke$arity$20 = G__15955__20;
  G__15955.cljs$core$IFn$_invoke$arity$21 = G__15955__21;
  G__15955.cljs$core$IFn$_invoke$arity$22 = G__15955__22;
  return G__15955;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args15490) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15490)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  var G__15723 = a;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__15723) : self__.afn.call(null, G__15723);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  var G__15724 = a;
  var G__15725 = b;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__15724, G__15725) : self__.afn.call(null, G__15724, G__15725);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  var G__15726 = a;
  var G__15727 = b;
  var G__15728 = c;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__15726, G__15727, G__15728) : self__.afn.call(null, G__15726, G__15727, G__15728);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  var G__15729 = a;
  var G__15730 = b;
  var G__15731 = c;
  var G__15732 = d;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__15729, G__15730, G__15731, G__15732) : self__.afn.call(null, G__15729, G__15730, G__15731, G__15732);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  var G__15733 = a;
  var G__15734 = b;
  var G__15735 = c;
  var G__15736 = d;
  var G__15737 = e;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__15733, G__15734, G__15735, G__15736, G__15737) : self__.afn.call(null, G__15733, G__15734, G__15735, G__15736, G__15737);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  var G__15738 = a;
  var G__15739 = b;
  var G__15740 = c;
  var G__15741 = d;
  var G__15742 = e;
  var G__15743 = f;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__15738, G__15739, G__15740, G__15741, G__15742, G__15743) : self__.afn.call(null, G__15738, G__15739, G__15740, G__15741, G__15742, G__15743);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  var G__15744 = a;
  var G__15745 = b;
  var G__15746 = c;
  var G__15747 = d;
  var G__15748 = e;
  var G__15749 = f;
  var G__15750 = g;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__15744, G__15745, G__15746, G__15747, G__15748, G__15749, G__15750) : self__.afn.call(null, G__15744, G__15745, G__15746, G__15747, G__15748, G__15749, G__15750);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  var G__15751 = a;
  var G__15752 = b;
  var G__15753 = c;
  var G__15754 = d;
  var G__15755 = e;
  var G__15756 = f;
  var G__15757 = g;
  var G__15758 = h;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__15751, G__15752, G__15753, G__15754, G__15755, G__15756, G__15757, G__15758) : self__.afn.call(null, G__15751, G__15752, G__15753, G__15754, G__15755, G__15756, G__15757, G__15758);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  var G__15759 = a;
  var G__15760 = b;
  var G__15761 = c;
  var G__15762 = d;
  var G__15763 = e;
  var G__15764 = f;
  var G__15765 = g;
  var G__15766 = h;
  var G__15767 = i;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__15759, G__15760, G__15761, G__15762, G__15763, G__15764, G__15765, G__15766, G__15767) : self__.afn.call(null, G__15759, G__15760, G__15761, G__15762, G__15763, G__15764, G__15765, G__15766, G__15767);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  var G__15768 = a;
  var G__15769 = b;
  var G__15770 = c;
  var G__15771 = d;
  var G__15772 = e;
  var G__15773 = f;
  var G__15774 = g;
  var G__15775 = h;
  var G__15776 = i;
  var G__15777 = j;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__15768, G__15769, G__15770, G__15771, G__15772, G__15773, G__15774, G__15775, G__15776, G__15777) : self__.afn.call(null, G__15768, G__15769, G__15770, G__15771, G__15772, G__15773, G__15774, G__15775, G__15776, G__15777);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  var G__15778 = a;
  var G__15779 = b;
  var G__15780 = c;
  var G__15781 = d;
  var G__15782 = e;
  var G__15783 = f;
  var G__15784 = g;
  var G__15785 = h;
  var G__15786 = i;
  var G__15787 = j;
  var G__15788 = k;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__15778, G__15779, G__15780, G__15781, G__15782, G__15783, G__15784, G__15785, G__15786, G__15787, G__15788) : self__.afn.call(null, G__15778, G__15779, G__15780, G__15781, G__15782, G__15783, G__15784, G__15785, G__15786, G__15787, G__15788);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  var G__15789 = a;
  var G__15790 = b;
  var G__15791 = c;
  var G__15792 = d;
  var G__15793 = e;
  var G__15794 = f;
  var G__15795 = g;
  var G__15796 = h;
  var G__15797 = i;
  var G__15798 = j;
  var G__15799 = k;
  var G__15800 = l;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__15789, G__15790, G__15791, G__15792, G__15793, G__15794, G__15795, G__15796, G__15797, G__15798, G__15799, G__15800) : self__.afn.call(null, G__15789, G__15790, G__15791, G__15792, G__15793, G__15794, G__15795, G__15796, G__15797, G__15798, G__15799, G__15800);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  var G__15801 = a;
  var G__15802 = b;
  var G__15803 = c;
  var G__15804 = d;
  var G__15805 = e;
  var G__15806 = f;
  var G__15807 = g;
  var G__15808 = h;
  var G__15809 = i;
  var G__15810 = j;
  var G__15811 = k;
  var G__15812 = l;
  var G__15813 = m;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__15801, G__15802, G__15803, G__15804, G__15805, G__15806, G__15807, G__15808, G__15809, G__15810, G__15811, G__15812, G__15813) : self__.afn.call(null, G__15801, G__15802, G__15803, G__15804, G__15805, G__15806, G__15807, G__15808, G__15809, G__15810, G__15811, G__15812, G__15813);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  var G__15814 = a;
  var G__15815 = b;
  var G__15816 = c;
  var G__15817 = d;
  var G__15818 = e;
  var G__15819 = f;
  var G__15820 = g;
  var G__15821 = h;
  var G__15822 = i;
  var G__15823 = j;
  var G__15824 = k;
  var G__15825 = l;
  var G__15826 = m;
  var G__15827 = n;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__15814, G__15815, G__15816, G__15817, G__15818, G__15819, G__15820, G__15821, G__15822, G__15823, G__15824, G__15825, G__15826, G__15827) : self__.afn.call(null, G__15814, G__15815, G__15816, G__15817, G__15818, G__15819, G__15820, G__15821, G__15822, G__15823, G__15824, G__15825, G__15826, G__15827);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  var G__15828 = a;
  var G__15829 = b;
  var G__15830 = c;
  var G__15831 = d;
  var G__15832 = e;
  var G__15833 = f;
  var G__15834 = g;
  var G__15835 = h;
  var G__15836 = i;
  var G__15837 = j;
  var G__15838 = k;
  var G__15839 = l;
  var G__15840 = m;
  var G__15841 = n;
  var G__15842 = o;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__15828, G__15829, G__15830, G__15831, G__15832, G__15833, G__15834, G__15835, G__15836, G__15837, G__15838, G__15839, G__15840, G__15841, G__15842) : self__.afn.call(null, G__15828, G__15829, G__15830, G__15831, G__15832, G__15833, G__15834, G__15835, G__15836, G__15837, G__15838, G__15839, G__15840, G__15841, G__15842);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  var G__15843 = a;
  var G__15844 = b;
  var G__15845 = c;
  var G__15846 = d;
  var G__15847 = e;
  var G__15848 = f;
  var G__15849 = g;
  var G__15850 = h;
  var G__15851 = i;
  var G__15852 = j;
  var G__15853 = k;
  var G__15854 = l;
  var G__15855 = m;
  var G__15856 = n;
  var G__15857 = o;
  var G__15858 = p;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__15843, G__15844, G__15845, G__15846, G__15847, G__15848, G__15849, G__15850, G__15851, G__15852, G__15853, G__15854, G__15855, G__15856, G__15857, G__15858) : self__.afn.call(null, G__15843, G__15844, G__15845, G__15846, G__15847, G__15848, G__15849, G__15850, G__15851, G__15852, G__15853, G__15854, G__15855, G__15856, G__15857, G__15858);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  var G__15859 = a;
  var G__15860 = b;
  var G__15861 = c;
  var G__15862 = d;
  var G__15863 = e;
  var G__15864 = f;
  var G__15865 = g;
  var G__15866 = h;
  var G__15867 = i;
  var G__15868 = j;
  var G__15869 = k;
  var G__15870 = l;
  var G__15871 = m;
  var G__15872 = n;
  var G__15873 = o;
  var G__15874 = p;
  var G__15875 = q;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__15859, G__15860, G__15861, G__15862, G__15863, G__15864, G__15865, G__15866, G__15867, G__15868, G__15869, G__15870, G__15871, G__15872, G__15873, G__15874, G__15875) : self__.afn.call(null, G__15859, G__15860, G__15861, G__15862, G__15863, G__15864, G__15865, G__15866, G__15867, G__15868, G__15869, G__15870, G__15871, G__15872, G__15873, G__15874, G__15875);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  var G__15876 = a;
  var G__15877 = b;
  var G__15878 = c;
  var G__15879 = d;
  var G__15880 = e;
  var G__15881 = f;
  var G__15882 = g;
  var G__15883 = h;
  var G__15884 = i;
  var G__15885 = j;
  var G__15886 = k;
  var G__15887 = l;
  var G__15888 = m;
  var G__15889 = n;
  var G__15890 = o;
  var G__15891 = p;
  var G__15892 = q;
  var G__15893 = r;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__15876, G__15877, G__15878, G__15879, G__15880, G__15881, G__15882, G__15883, G__15884, G__15885, G__15886, G__15887, G__15888, G__15889, G__15890, G__15891, G__15892, G__15893) : self__.afn.call(null, G__15876, G__15877, G__15878, G__15879, G__15880, G__15881, G__15882, G__15883, G__15884, G__15885, G__15886, G__15887, G__15888, G__15889, G__15890, G__15891, G__15892, G__15893);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  var G__15894 = a;
  var G__15895 = b;
  var G__15896 = c;
  var G__15897 = d;
  var G__15898 = e;
  var G__15899 = f;
  var G__15900 = g;
  var G__15901 = h;
  var G__15902 = i;
  var G__15903 = j;
  var G__15904 = k;
  var G__15905 = l;
  var G__15906 = m;
  var G__15907 = n;
  var G__15908 = o;
  var G__15909 = p;
  var G__15910 = q;
  var G__15911 = r;
  var G__15912 = s;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__15894, G__15895, G__15896, G__15897, G__15898, G__15899, G__15900, G__15901, G__15902, G__15903, G__15904, G__15905, G__15906, G__15907, G__15908, G__15909, G__15910, G__15911, G__15912) : self__.afn.call(null, G__15894, G__15895, G__15896, G__15897, G__15898, G__15899, G__15900, G__15901, G__15902, G__15903, G__15904, G__15905, G__15906, G__15907, G__15908, G__15909, G__15910, G__15911, G__15912);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  var G__15913 = a;
  var G__15914 = b;
  var G__15915 = c;
  var G__15916 = d;
  var G__15917 = e;
  var G__15918 = f;
  var G__15919 = g;
  var G__15920 = h;
  var G__15921 = i;
  var G__15922 = j;
  var G__15923 = k;
  var G__15924 = l;
  var G__15925 = m;
  var G__15926 = n;
  var G__15927 = o;
  var G__15928 = p;
  var G__15929 = q;
  var G__15930 = r;
  var G__15931 = s;
  var G__15932 = t;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__15913, G__15914, G__15915, G__15916, G__15917, G__15918, G__15919, G__15920, G__15921, G__15922, G__15923, G__15924, G__15925, G__15926, G__15927, G__15928, G__15929, G__15930, G__15931, G__15932) : self__.afn.call(null, G__15913, G__15914, G__15915, G__15916, G__15917, G__15918, G__15919, G__15920, G__15921, G__15922, G__15923, G__15924, G__15925, G__15926, G__15927, G__15928, G__15929, G__15930, G__15931, 
  G__15932);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__15933 = self__.afn;
  var G__15934 = a;
  var G__15935 = b;
  var G__15936 = c;
  var G__15937 = d;
  var G__15938 = e;
  var G__15939 = f;
  var G__15940 = g;
  var G__15941 = h;
  var G__15942 = i;
  var G__15943 = j;
  var G__15944 = k;
  var G__15945 = l;
  var G__15946 = m;
  var G__15947 = n;
  var G__15948 = o;
  var G__15949 = p;
  var G__15950 = q;
  var G__15951 = r;
  var G__15952 = s;
  var G__15953 = t;
  var G__15954 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__15933, G__15934, G__15935, G__15936, G__15937, G__15938, G__15939, G__15940, G__15941, G__15942, G__15943, G__15944, G__15945, G__15946, G__15947, G__15948, G__15949, G__15950, G__15951, G__15952, G__15953, G__15954) : cljs.core.apply.call(null, G__15933, G__15934, G__15935, G__15936, G__15937, G__15938, G__15939, G__15940, G__15941, G__15942, G__15943, G__15944, G__15945, G__15946, G__15947, 
  G__15948, G__15949, G__15950, G__15951, G__15952, G__15953, G__15954);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (cljs.core.fn_QMARK_(o) && !function() {
    var G__15959 = o;
    if (G__15959) {
      var bit__4796__auto__ = G__15959.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4796__auto__ || G__15959.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__15959.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__15959);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__15959);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__4110__auto__ = !(o == null);
    if (and__4110__auto__) {
      var G__15963 = o;
      if (G__15963) {
        var bit__4796__auto__ = G__15963.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4796__auto__ || G__15963.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__15963.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__15963);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__15963);
      }
    } else {
      return and__4110__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function() {
  var cljs$core$disj = null;
  var cljs$core$disj__1 = function(coll) {
    return coll;
  };
  var cljs$core$disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin(coll, k);
    }
  };
  var cljs$core$disj__3 = function() {
    var G__15966__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = cljs$core$disj.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__15967 = ret;
            var G__15968 = cljs.core.first(ks);
            var G__15969 = cljs.core.next(ks);
            coll = G__15967;
            k = G__15968;
            ks = G__15969;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__15966 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__15970__i = 0, G__15970__a = new Array(arguments.length - 2);
        while (G__15970__i < G__15970__a.length) {
          G__15970__a[G__15970__i] = arguments[G__15970__i + 2];
          ++G__15970__i;
        }
        ks = new cljs.core.IndexedSeq(G__15970__a, 0);
      }
      return G__15966__delegate.call(this, coll, k, ks);
    };
    G__15966.cljs$lang$maxFixedArity = 2;
    G__15966.cljs$lang$applyTo = function(arglist__15971) {
      var coll = cljs.core.first(arglist__15971);
      arglist__15971 = cljs.core.next(arglist__15971);
      var k = cljs.core.first(arglist__15971);
      var ks = cljs.core.rest(arglist__15971);
      return G__15966__delegate(coll, k, ks);
    };
    G__15966.cljs$core$IFn$_invoke$arity$variadic = G__15966__delegate;
    return G__15966;
  }();
  cljs$core$disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$disj__1.call(this, coll);
      case 2:
        return cljs$core$disj__2.call(this, coll, k);
      default:
        var G__15972 = null;
        if (arguments.length > 2) {
          var G__15973__i = 0, G__15973__a = new Array(arguments.length - 2);
          while (G__15973__i < G__15973__a.length) {
            G__15973__a[G__15973__i] = arguments[G__15973__i + 2];
            ++G__15973__i;
          }
          G__15972 = new cljs.core.IndexedSeq(G__15973__a, 0);
        }
        return cljs$core$disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__15972);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$disj.cljs$lang$maxFixedArity = 2;
  cljs$core$disj.cljs$lang$applyTo = cljs$core$disj__3.cljs$lang$applyTo;
  cljs$core$disj.cljs$core$IFn$_invoke$arity$1 = cljs$core$disj__1;
  cljs$core$disj.cljs$core$IFn$_invoke$arity$2 = cljs$core$disj__2;
  cljs$core$disj.cljs$core$IFn$_invoke$arity$variadic = cljs$core$disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$disj;
}();
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15975 = x;
    if (G__15975) {
      var bit__4796__auto__ = G__15975.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4796__auto__ || G__15975.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__15975.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__15975);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__15975);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15977 = x;
    if (G__15977) {
      var bit__4796__auto__ = G__15977.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4796__auto__ || G__15977.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__15977.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__15977);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__15977);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  var G__15979 = x;
  if (G__15979) {
    var bit__4796__auto__ = G__15979.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4796__auto__ || G__15979.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__15979.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__15979);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__15979);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  var G__15981 = x;
  if (G__15981) {
    var bit__4796__auto__ = G__15981.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4796__auto__ || G__15981.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__15981.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__15981);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__15981);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  var G__15983 = x;
  if (G__15983) {
    var bit__4796__auto__ = G__15983.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4796__auto__ || G__15983.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__15983.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__15983);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__15983);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  var G__15985 = x;
  if (G__15985) {
    var bit__4796__auto__ = G__15985.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4796__auto__ || G__15985.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__15985.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__15985);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__15985);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15987 = x;
    if (G__15987) {
      var bit__4796__auto__ = G__15987.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4796__auto__ || G__15987.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__15987.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__15987);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__15987);
    }
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  var G__15989 = x;
  if (G__15989) {
    var bit__4796__auto__ = G__15989.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4796__auto__ || G__15989.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__15989.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__15989);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__15989);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  var G__15991 = x;
  if (G__15991) {
    var bit__4789__auto__ = G__15991.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4789__auto__ || G__15991.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var cljs$core$js_obj = null;
  var cljs$core$js_obj__0 = function() {
    var obj15997 = {};
    return obj15997;
  };
  var cljs$core$js_obj__1 = function() {
    var G__16000__delegate = function(keyvals) {
      var G__15998 = goog.object.create;
      var G__15999 = keyvals;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__15998, G__15999) : cljs.core.apply.call(null, G__15998, G__15999);
    };
    var G__16000 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        var G__16001__i = 0, G__16001__a = new Array(arguments.length - 0);
        while (G__16001__i < G__16001__a.length) {
          G__16001__a[G__16001__i] = arguments[G__16001__i + 0];
          ++G__16001__i;
        }
        keyvals = new cljs.core.IndexedSeq(G__16001__a, 0);
      }
      return G__16000__delegate.call(this, keyvals);
    };
    G__16000.cljs$lang$maxFixedArity = 0;
    G__16000.cljs$lang$applyTo = function(arglist__16002) {
      var keyvals = cljs.core.seq(arglist__16002);
      return G__16000__delegate(keyvals);
    };
    G__16000.cljs$core$IFn$_invoke$arity$variadic = G__16000__delegate;
    return G__16000;
  }();
  cljs$core$js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$js_obj__0.call(this);
      default:
        var G__16003 = null;
        if (arguments.length > 0) {
          var G__16004__i = 0, G__16004__a = new Array(arguments.length - 0);
          while (G__16004__i < G__16004__a.length) {
            G__16004__a[G__16004__i] = arguments[G__16004__i + 0];
            ++G__16004__i;
          }
          G__16003 = new cljs.core.IndexedSeq(G__16004__a, 0);
        }
        return cljs$core$js_obj__1.cljs$core$IFn$_invoke$arity$variadic(G__16003);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$js_obj.cljs$lang$maxFixedArity = 0;
  cljs$core$js_obj.cljs$lang$applyTo = cljs$core$js_obj__1.cljs$lang$applyTo;
  cljs$core$js_obj.cljs$core$IFn$_invoke$arity$0 = cljs$core$js_obj__0;
  cljs$core$js_obj.cljs$core$IFn$_invoke$arity$variadic = cljs$core$js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$js_obj;
}();
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__16007_16009 = obj;
  var G__16008_16010 = function(G__16007_16009, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__16007_16009, keys);
  goog.object.forEach(G__16007_16009, G__16008_16010);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__16011 = i__$1 + 1;
      var G__16012 = j__$1 + 1;
      var G__16013 = len__$1 - 1;
      i__$1 = G__16011;
      j__$1 = G__16012;
      len__$1 = G__16013;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__16014 = i__$1 - 1;
      var G__16015 = j__$1 - 1;
      var G__16016 = len__$1 - 1;
      i__$1 = G__16014;
      j__$1 = G__16015;
      len__$1 = G__16016;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj16018 = {};
  return obj16018;
}();
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__16020 = s;
    if (G__16020) {
      var bit__4796__auto__ = G__16020.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4796__auto__ || G__16020.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__16020.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__16020);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__16020);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  var G__16022 = s;
  if (G__16022) {
    var bit__4796__auto__ = G__16022.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4796__auto__ || G__16022.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__16022.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__16022);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__16022);
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__4122__auto__ = cljs.core.fn_QMARK_(f);
  if (or__4122__auto__) {
    return or__4122__auto__;
  } else {
    var G__16026 = f;
    if (G__16026) {
      var bit__4796__auto__ = G__16026.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4796__auto__ || G__16026.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__16026.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__16026);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__16026);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && cljs.core.not(function() {
    var G__16039 = n;
    return isNaN(G__16039);
  }()) && !(n === Infinity) && function() {
    var G__16040 = n;
    return parseFloat(G__16040);
  }() === function() {
    var G__16041 = n;
    var G__16042 = 10;
    return parseInt(G__16041, G__16042);
  }();
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var cljs$core$distinct_QMARK_ = null;
  var cljs$core$distinct_QMARK___1 = function(x) {
    return true;
  };
  var cljs$core$distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var cljs$core$distinct_QMARK___3 = function() {
    var G__16043__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first(xs);
          var etc = cljs.core.next(xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_(s, x__$1)) {
              return false;
            } else {
              var G__16044 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
              var G__16045 = etc;
              s = G__16044;
              xs = G__16045;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__16043 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16046__i = 0, G__16046__a = new Array(arguments.length - 2);
        while (G__16046__i < G__16046__a.length) {
          G__16046__a[G__16046__i] = arguments[G__16046__i + 2];
          ++G__16046__i;
        }
        more = new cljs.core.IndexedSeq(G__16046__a, 0);
      }
      return G__16043__delegate.call(this, x, y, more);
    };
    G__16043.cljs$lang$maxFixedArity = 2;
    G__16043.cljs$lang$applyTo = function(arglist__16047) {
      var x = cljs.core.first(arglist__16047);
      arglist__16047 = cljs.core.next(arglist__16047);
      var y = cljs.core.first(arglist__16047);
      var more = cljs.core.rest(arglist__16047);
      return G__16043__delegate(x, y, more);
    };
    G__16043.cljs$core$IFn$_invoke$arity$variadic = G__16043__delegate;
    return G__16043;
  }();
  cljs$core$distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$distinct_QMARK___1.call(this, x);
      case 2:
        return cljs$core$distinct_QMARK___2.call(this, x, y);
      default:
        var G__16048 = null;
        if (arguments.length > 2) {
          var G__16049__i = 0, G__16049__a = new Array(arguments.length - 2);
          while (G__16049__i < G__16049__a.length) {
            G__16049__a[G__16049__i] = arguments[G__16049__i + 2];
            ++G__16049__i;
          }
          G__16048 = new cljs.core.IndexedSeq(G__16049__a, 0);
        }
        return cljs$core$distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16048);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  cljs$core$distinct_QMARK_.cljs$lang$applyTo = cljs$core$distinct_QMARK___3.cljs$lang$applyTo;
  cljs$core$distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = cljs$core$distinct_QMARK___1;
  cljs$core$distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = cljs$core$distinct_QMARK___2;
  cljs$core$distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$distinct_QMARK_;
}();
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type(x) === cljs.core.type(y)) {
          if (function() {
            var G__16053 = x;
            if (G__16053) {
              var bit__4789__auto__ = G__16053.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4789__auto__ || G__16053.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return x.cljs$core$IComparable$_compare$arity$2(null, y);
          } else {
            var G__16054 = x;
            var G__16055 = y;
            return goog.array.defaultCompare(G__16054, G__16055);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var cljs$core$compare_indexed = null;
  var cljs$core$compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count(xs);
    var yl = cljs.core.count(ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return cljs$core$compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  };
  var cljs$core$compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
      if (d === 0 && n + 1 < len) {
        var G__16060 = xs;
        var G__16061 = ys;
        var G__16062 = len;
        var G__16063 = n + 1;
        xs = G__16060;
        ys = G__16061;
        len = G__16062;
        n = G__16063;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  cljs$core$compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$compare_indexed__2.call(this, xs, ys);
      case 4:
        return cljs$core$compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$compare_indexed.cljs$core$IFn$_invoke$arity$2 = cljs$core$compare_indexed__2;
  cljs$core$compare_indexed.cljs$core$IFn$_invoke$arity$4 = cljs$core$compare_indexed__4;
  return cljs$core$compare_indexed;
}();
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = function() {
        var G__16068 = x;
        var G__16069 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16068, G__16069) : f.call(null, G__16068, G__16069);
      }();
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(function() {
            var G__16070 = y;
            var G__16071 = x;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16070, G__16071) : f.call(null, G__16070, G__16071);
          }())) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var cljs$core$sort = null;
  var cljs$core$sort__1 = function(coll) {
    return cljs$core$sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
  };
  var cljs$core$sort__2 = function(comp, coll) {
    if (cljs.core.seq(coll)) {
      var a = function() {
        var G__16077 = coll;
        return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__16077) : cljs.core.to_array.call(null, G__16077);
      }();
      var G__16078_16080 = a;
      var G__16079_16081 = cljs.core.fn__GT_comparator(comp);
      goog.array.stableSort(G__16078_16080, G__16079_16081);
      return cljs.core.seq(a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  cljs$core$sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$sort__1.call(this, comp);
      case 2:
        return cljs$core$sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$sort.cljs$core$IFn$_invoke$arity$1 = cljs$core$sort__1;
  cljs$core$sort.cljs$core$IFn$_invoke$arity$2 = cljs$core$sort__2;
  return cljs$core$sort;
}();
cljs.core.sort_by = function() {
  var cljs$core$sort_by = null;
  var cljs$core$sort_by__2 = function(keyfn, coll) {
    return cljs$core$sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
  };
  var cljs$core$sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
      return cljs.core.fn__GT_comparator(comp).call(null, function() {
        var G__16087 = x;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__16087) : keyfn.call(null, G__16087);
      }(), function() {
        var G__16088 = y;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__16088) : keyfn.call(null, G__16088);
      }());
    }, coll);
  };
  cljs$core$sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$sort_by__2.call(this, keyfn, comp);
      case 3:
        return cljs$core$sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$sort_by.cljs$core$IFn$_invoke$arity$2 = cljs$core$sort_by__2;
  cljs$core$sort_by.cljs$core$IFn$_invoke$arity$3 = cljs$core$sort_by__3;
  return cljs$core$sort_by;
}();
cljs.core.seq_reduce = function() {
  var cljs$core$seq_reduce = null;
  var cljs$core$seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq(coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      var G__16094 = f;
      var G__16095 = cljs.core.first(s);
      var G__16096 = cljs.core.next(s);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__16094, G__16095, G__16096) : cljs.core.reduce.call(null, G__16094, G__16095, G__16096);
    } else {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }
  };
  var cljs$core$seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq(coll);
    while (true) {
      if (coll__$1) {
        var nval = function() {
          var G__16097 = val__$1;
          var G__16098 = cljs.core.first(coll__$1);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16097, G__16098) : f.call(null, G__16097, G__16098);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__16099 = nval;
          var G__16100 = cljs.core.next(coll__$1);
          val__$1 = G__16099;
          coll__$1 = G__16100;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  cljs$core$seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$seq_reduce__2.call(this, f, val);
      case 3:
        return cljs$core$seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$seq_reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$seq_reduce__2;
  cljs$core$seq_reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$seq_reduce__3;
  return cljs$core$seq_reduce;
}();
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = function() {
    var G__16104 = coll;
    return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__16104) : cljs.core.to_array.call(null, G__16104);
  }();
  var G__16105_16107 = a;
  goog.array.shuffle(G__16105_16107);
  var G__16106 = a;
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(G__16106) : cljs.core.vec.call(null, G__16106);
};
cljs.core.reduce = function() {
  var cljs$core$reduce = null;
  var cljs$core$reduce__2 = function(f, coll) {
    if (function() {
      var G__16110 = coll;
      if (G__16110) {
        var bit__4789__auto__ = G__16110.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4789__auto__ || G__16110.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
          }
        }
      }
    }
  };
  var cljs$core$reduce__3 = function(f, val, coll) {
    if (function() {
      var G__16111 = coll;
      if (G__16111) {
        var bit__4789__auto__ = G__16111.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4789__auto__ || G__16111.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
          }
        }
      }
    }
  };
  cljs$core$reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$reduce__2.call(this, f, val);
      case 3:
        return cljs$core$reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$reduce.cljs$core$IFn$_invoke$arity$2 = cljs$core$reduce__2;
  cljs$core$reduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$reduce__3;
  return cljs$core$reduce;
}();
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function() {
  var cljs$core$completing = null;
  var cljs$core$completing__1 = function(f) {
    return cljs$core$completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
  };
  var cljs$core$completing__2 = function(f, cf) {
    return function() {
      var G__16120 = null;
      var G__16120__0 = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      };
      var G__16120__1 = function(x) {
        var G__16117 = x;
        return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(G__16117) : cf.call(null, G__16117);
      };
      var G__16120__2 = function(x, y) {
        var G__16118 = x;
        var G__16119 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16118, G__16119) : f.call(null, G__16118, G__16119);
      };
      G__16120 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__16120__0.call(this);
          case 1:
            return G__16120__1.call(this, x);
          case 2:
            return G__16120__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16120.cljs$core$IFn$_invoke$arity$0 = G__16120__0;
      G__16120.cljs$core$IFn$_invoke$arity$1 = G__16120__1;
      G__16120.cljs$core$IFn$_invoke$arity$2 = G__16120__2;
      return G__16120;
    }();
  };
  cljs$core$completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return cljs$core$completing__1.call(this, f);
      case 2:
        return cljs$core$completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$completing.cljs$core$IFn$_invoke$arity$1 = cljs$core$completing__1;
  cljs$core$completing.cljs$core$IFn$_invoke$arity$2 = cljs$core$completing__2;
  return cljs$core$completing;
}();
cljs.core.transduce = function() {
  var cljs$core$transduce = null;
  var cljs$core$transduce__3 = function(xform, f, coll) {
    return cljs$core$transduce.cljs$core$IFn$_invoke$arity$4(xform, f, function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }(), coll);
  };
  var cljs$core$transduce__4 = function(xform, f, init, coll) {
    var f__$1 = function() {
      var G__16127 = f;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__16127) : xform.call(null, G__16127);
    }();
    var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
    var G__16128 = ret;
    return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(G__16128) : f__$1.call(null, G__16128);
  };
  cljs$core$transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return cljs$core$transduce__3.call(this, xform, f, init);
      case 4:
        return cljs$core$transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$transduce.cljs$core$IFn$_invoke$arity$3 = cljs$core$transduce__3;
  cljs$core$transduce.cljs$core$IFn$_invoke$arity$4 = cljs$core$transduce__4;
  return cljs$core$transduce;
}();
cljs.core._PLUS_ = function() {
  var cljs$core$_PLUS_ = null;
  var cljs$core$_PLUS___0 = function() {
    return 0;
  };
  var cljs$core$_PLUS___1 = function(x) {
    return x;
  };
  var cljs$core$_PLUS___2 = function(x, y) {
    return x + y;
  };
  var cljs$core$_PLUS___3 = function() {
    var G__16129__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$_PLUS_, x + y, more);
    };
    var G__16129 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16130__i = 0, G__16130__a = new Array(arguments.length - 2);
        while (G__16130__i < G__16130__a.length) {
          G__16130__a[G__16130__i] = arguments[G__16130__i + 2];
          ++G__16130__i;
        }
        more = new cljs.core.IndexedSeq(G__16130__a, 0);
      }
      return G__16129__delegate.call(this, x, y, more);
    };
    G__16129.cljs$lang$maxFixedArity = 2;
    G__16129.cljs$lang$applyTo = function(arglist__16131) {
      var x = cljs.core.first(arglist__16131);
      arglist__16131 = cljs.core.next(arglist__16131);
      var y = cljs.core.first(arglist__16131);
      var more = cljs.core.rest(arglist__16131);
      return G__16129__delegate(x, y, more);
    };
    G__16129.cljs$core$IFn$_invoke$arity$variadic = G__16129__delegate;
    return G__16129;
  }();
  cljs$core$_PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$_PLUS___0.call(this);
      case 1:
        return cljs$core$_PLUS___1.call(this, x);
      case 2:
        return cljs$core$_PLUS___2.call(this, x, y);
      default:
        var G__16132 = null;
        if (arguments.length > 2) {
          var G__16133__i = 0, G__16133__a = new Array(arguments.length - 2);
          while (G__16133__i < G__16133__a.length) {
            G__16133__a[G__16133__i] = arguments[G__16133__i + 2];
            ++G__16133__i;
          }
          G__16132 = new cljs.core.IndexedSeq(G__16133__a, 0);
        }
        return cljs$core$_PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16132);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_PLUS_.cljs$lang$maxFixedArity = 2;
  cljs$core$_PLUS_.cljs$lang$applyTo = cljs$core$_PLUS___3.cljs$lang$applyTo;
  cljs$core$_PLUS_.cljs$core$IFn$_invoke$arity$0 = cljs$core$_PLUS___0;
  cljs$core$_PLUS_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_PLUS___1;
  cljs$core$_PLUS_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_PLUS___2;
  cljs$core$_PLUS_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_PLUS_;
}();
cljs.core._ = function() {
  var cljs$core$_ = null;
  var cljs$core$___1 = function(x) {
    return-x;
  };
  var cljs$core$___2 = function(x, y) {
    return x - y;
  };
  var cljs$core$___3 = function() {
    var G__16134__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$_, x - y, more);
    };
    var G__16134 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16135__i = 0, G__16135__a = new Array(arguments.length - 2);
        while (G__16135__i < G__16135__a.length) {
          G__16135__a[G__16135__i] = arguments[G__16135__i + 2];
          ++G__16135__i;
        }
        more = new cljs.core.IndexedSeq(G__16135__a, 0);
      }
      return G__16134__delegate.call(this, x, y, more);
    };
    G__16134.cljs$lang$maxFixedArity = 2;
    G__16134.cljs$lang$applyTo = function(arglist__16136) {
      var x = cljs.core.first(arglist__16136);
      arglist__16136 = cljs.core.next(arglist__16136);
      var y = cljs.core.first(arglist__16136);
      var more = cljs.core.rest(arglist__16136);
      return G__16134__delegate(x, y, more);
    };
    G__16134.cljs$core$IFn$_invoke$arity$variadic = G__16134__delegate;
    return G__16134;
  }();
  cljs$core$_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$___1.call(this, x);
      case 2:
        return cljs$core$___2.call(this, x, y);
      default:
        var G__16137 = null;
        if (arguments.length > 2) {
          var G__16138__i = 0, G__16138__a = new Array(arguments.length - 2);
          while (G__16138__i < G__16138__a.length) {
            G__16138__a[G__16138__i] = arguments[G__16138__i + 2];
            ++G__16138__i;
          }
          G__16137 = new cljs.core.IndexedSeq(G__16138__a, 0);
        }
        return cljs$core$___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16137);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_.cljs$lang$maxFixedArity = 2;
  cljs$core$_.cljs$lang$applyTo = cljs$core$___3.cljs$lang$applyTo;
  cljs$core$_.cljs$core$IFn$_invoke$arity$1 = cljs$core$___1;
  cljs$core$_.cljs$core$IFn$_invoke$arity$2 = cljs$core$___2;
  cljs$core$_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_;
}();
cljs.core._STAR_ = function() {
  var cljs$core$_STAR_ = null;
  var cljs$core$_STAR___0 = function() {
    return 1;
  };
  var cljs$core$_STAR___1 = function(x) {
    return x;
  };
  var cljs$core$_STAR___2 = function(x, y) {
    return x * y;
  };
  var cljs$core$_STAR___3 = function() {
    var G__16139__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$_STAR_, x * y, more);
    };
    var G__16139 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16140__i = 0, G__16140__a = new Array(arguments.length - 2);
        while (G__16140__i < G__16140__a.length) {
          G__16140__a[G__16140__i] = arguments[G__16140__i + 2];
          ++G__16140__i;
        }
        more = new cljs.core.IndexedSeq(G__16140__a, 0);
      }
      return G__16139__delegate.call(this, x, y, more);
    };
    G__16139.cljs$lang$maxFixedArity = 2;
    G__16139.cljs$lang$applyTo = function(arglist__16141) {
      var x = cljs.core.first(arglist__16141);
      arglist__16141 = cljs.core.next(arglist__16141);
      var y = cljs.core.first(arglist__16141);
      var more = cljs.core.rest(arglist__16141);
      return G__16139__delegate(x, y, more);
    };
    G__16139.cljs$core$IFn$_invoke$arity$variadic = G__16139__delegate;
    return G__16139;
  }();
  cljs$core$_STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$_STAR___0.call(this);
      case 1:
        return cljs$core$_STAR___1.call(this, x);
      case 2:
        return cljs$core$_STAR___2.call(this, x, y);
      default:
        var G__16142 = null;
        if (arguments.length > 2) {
          var G__16143__i = 0, G__16143__a = new Array(arguments.length - 2);
          while (G__16143__i < G__16143__a.length) {
            G__16143__a[G__16143__i] = arguments[G__16143__i + 2];
            ++G__16143__i;
          }
          G__16142 = new cljs.core.IndexedSeq(G__16143__a, 0);
        }
        return cljs$core$_STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16142);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_STAR_.cljs$lang$maxFixedArity = 2;
  cljs$core$_STAR_.cljs$lang$applyTo = cljs$core$_STAR___3.cljs$lang$applyTo;
  cljs$core$_STAR_.cljs$core$IFn$_invoke$arity$0 = cljs$core$_STAR___0;
  cljs$core$_STAR_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_STAR___1;
  cljs$core$_STAR_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_STAR___2;
  cljs$core$_STAR_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_STAR_;
}();
cljs.core._SLASH_ = function() {
  var cljs$core$_SLASH_ = null;
  var cljs$core$_SLASH___1 = function(x) {
    return cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var cljs$core$_SLASH___2 = function(x, y) {
    return x / y;
  };
  var cljs$core$_SLASH___3 = function() {
    var G__16148__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$_SLASH_, cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__16148 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16149__i = 0, G__16149__a = new Array(arguments.length - 2);
        while (G__16149__i < G__16149__a.length) {
          G__16149__a[G__16149__i] = arguments[G__16149__i + 2];
          ++G__16149__i;
        }
        more = new cljs.core.IndexedSeq(G__16149__a, 0);
      }
      return G__16148__delegate.call(this, x, y, more);
    };
    G__16148.cljs$lang$maxFixedArity = 2;
    G__16148.cljs$lang$applyTo = function(arglist__16150) {
      var x = cljs.core.first(arglist__16150);
      arglist__16150 = cljs.core.next(arglist__16150);
      var y = cljs.core.first(arglist__16150);
      var more = cljs.core.rest(arglist__16150);
      return G__16148__delegate(x, y, more);
    };
    G__16148.cljs$core$IFn$_invoke$arity$variadic = G__16148__delegate;
    return G__16148;
  }();
  cljs$core$_SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_SLASH___1.call(this, x);
      case 2:
        return cljs$core$_SLASH___2.call(this, x, y);
      default:
        var G__16151 = null;
        if (arguments.length > 2) {
          var G__16152__i = 0, G__16152__a = new Array(arguments.length - 2);
          while (G__16152__i < G__16152__a.length) {
            G__16152__a[G__16152__i] = arguments[G__16152__i + 2];
            ++G__16152__i;
          }
          G__16151 = new cljs.core.IndexedSeq(G__16152__a, 0);
        }
        return cljs$core$_SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16151);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_SLASH_.cljs$lang$maxFixedArity = 2;
  cljs$core$_SLASH_.cljs$lang$applyTo = cljs$core$_SLASH___3.cljs$lang$applyTo;
  cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_SLASH___1;
  cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_SLASH___2;
  cljs$core$_SLASH_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_SLASH_;
}();
cljs.core._LT_ = function() {
  var cljs$core$_LT_ = null;
  var cljs$core$_LT___1 = function(x) {
    return true;
  };
  var cljs$core$_LT___2 = function(x, y) {
    return x < y;
  };
  var cljs$core$_LT___3 = function() {
    var G__16153__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next(more)) {
            var G__16154 = y;
            var G__16155 = cljs.core.first(more);
            var G__16156 = cljs.core.next(more);
            x = G__16154;
            y = G__16155;
            more = G__16156;
            continue;
          } else {
            return y < cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16153 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16157__i = 0, G__16157__a = new Array(arguments.length - 2);
        while (G__16157__i < G__16157__a.length) {
          G__16157__a[G__16157__i] = arguments[G__16157__i + 2];
          ++G__16157__i;
        }
        more = new cljs.core.IndexedSeq(G__16157__a, 0);
      }
      return G__16153__delegate.call(this, x, y, more);
    };
    G__16153.cljs$lang$maxFixedArity = 2;
    G__16153.cljs$lang$applyTo = function(arglist__16158) {
      var x = cljs.core.first(arglist__16158);
      arglist__16158 = cljs.core.next(arglist__16158);
      var y = cljs.core.first(arglist__16158);
      var more = cljs.core.rest(arglist__16158);
      return G__16153__delegate(x, y, more);
    };
    G__16153.cljs$core$IFn$_invoke$arity$variadic = G__16153__delegate;
    return G__16153;
  }();
  cljs$core$_LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_LT___1.call(this, x);
      case 2:
        return cljs$core$_LT___2.call(this, x, y);
      default:
        var G__16159 = null;
        if (arguments.length > 2) {
          var G__16160__i = 0, G__16160__a = new Array(arguments.length - 2);
          while (G__16160__i < G__16160__a.length) {
            G__16160__a[G__16160__i] = arguments[G__16160__i + 2];
            ++G__16160__i;
          }
          G__16159 = new cljs.core.IndexedSeq(G__16160__a, 0);
        }
        return cljs$core$_LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16159);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_LT_.cljs$lang$maxFixedArity = 2;
  cljs$core$_LT_.cljs$lang$applyTo = cljs$core$_LT___3.cljs$lang$applyTo;
  cljs$core$_LT_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_LT___1;
  cljs$core$_LT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_LT___2;
  cljs$core$_LT_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_LT_;
}();
cljs.core._LT__EQ_ = function() {
  var cljs$core$_LT__EQ_ = null;
  var cljs$core$_LT__EQ___1 = function(x) {
    return true;
  };
  var cljs$core$_LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var cljs$core$_LT__EQ___3 = function() {
    var G__16161__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next(more)) {
            var G__16162 = y;
            var G__16163 = cljs.core.first(more);
            var G__16164 = cljs.core.next(more);
            x = G__16162;
            y = G__16163;
            more = G__16164;
            continue;
          } else {
            return y <= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16161 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16165__i = 0, G__16165__a = new Array(arguments.length - 2);
        while (G__16165__i < G__16165__a.length) {
          G__16165__a[G__16165__i] = arguments[G__16165__i + 2];
          ++G__16165__i;
        }
        more = new cljs.core.IndexedSeq(G__16165__a, 0);
      }
      return G__16161__delegate.call(this, x, y, more);
    };
    G__16161.cljs$lang$maxFixedArity = 2;
    G__16161.cljs$lang$applyTo = function(arglist__16166) {
      var x = cljs.core.first(arglist__16166);
      arglist__16166 = cljs.core.next(arglist__16166);
      var y = cljs.core.first(arglist__16166);
      var more = cljs.core.rest(arglist__16166);
      return G__16161__delegate(x, y, more);
    };
    G__16161.cljs$core$IFn$_invoke$arity$variadic = G__16161__delegate;
    return G__16161;
  }();
  cljs$core$_LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_LT__EQ___1.call(this, x);
      case 2:
        return cljs$core$_LT__EQ___2.call(this, x, y);
      default:
        var G__16167 = null;
        if (arguments.length > 2) {
          var G__16168__i = 0, G__16168__a = new Array(arguments.length - 2);
          while (G__16168__i < G__16168__a.length) {
            G__16168__a[G__16168__i] = arguments[G__16168__i + 2];
            ++G__16168__i;
          }
          G__16167 = new cljs.core.IndexedSeq(G__16168__a, 0);
        }
        return cljs$core$_LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16167);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_LT__EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$_LT__EQ_.cljs$lang$applyTo = cljs$core$_LT__EQ___3.cljs$lang$applyTo;
  cljs$core$_LT__EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_LT__EQ___1;
  cljs$core$_LT__EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_LT__EQ___2;
  cljs$core$_LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_LT__EQ_;
}();
cljs.core._GT_ = function() {
  var cljs$core$_GT_ = null;
  var cljs$core$_GT___1 = function(x) {
    return true;
  };
  var cljs$core$_GT___2 = function(x, y) {
    return x > y;
  };
  var cljs$core$_GT___3 = function() {
    var G__16169__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next(more)) {
            var G__16170 = y;
            var G__16171 = cljs.core.first(more);
            var G__16172 = cljs.core.next(more);
            x = G__16170;
            y = G__16171;
            more = G__16172;
            continue;
          } else {
            return y > cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16169 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16173__i = 0, G__16173__a = new Array(arguments.length - 2);
        while (G__16173__i < G__16173__a.length) {
          G__16173__a[G__16173__i] = arguments[G__16173__i + 2];
          ++G__16173__i;
        }
        more = new cljs.core.IndexedSeq(G__16173__a, 0);
      }
      return G__16169__delegate.call(this, x, y, more);
    };
    G__16169.cljs$lang$maxFixedArity = 2;
    G__16169.cljs$lang$applyTo = function(arglist__16174) {
      var x = cljs.core.first(arglist__16174);
      arglist__16174 = cljs.core.next(arglist__16174);
      var y = cljs.core.first(arglist__16174);
      var more = cljs.core.rest(arglist__16174);
      return G__16169__delegate(x, y, more);
    };
    G__16169.cljs$core$IFn$_invoke$arity$variadic = G__16169__delegate;
    return G__16169;
  }();
  cljs$core$_GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_GT___1.call(this, x);
      case 2:
        return cljs$core$_GT___2.call(this, x, y);
      default:
        var G__16175 = null;
        if (arguments.length > 2) {
          var G__16176__i = 0, G__16176__a = new Array(arguments.length - 2);
          while (G__16176__i < G__16176__a.length) {
            G__16176__a[G__16176__i] = arguments[G__16176__i + 2];
            ++G__16176__i;
          }
          G__16175 = new cljs.core.IndexedSeq(G__16176__a, 0);
        }
        return cljs$core$_GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16175);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_GT_.cljs$lang$maxFixedArity = 2;
  cljs$core$_GT_.cljs$lang$applyTo = cljs$core$_GT___3.cljs$lang$applyTo;
  cljs$core$_GT_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_GT___1;
  cljs$core$_GT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_GT___2;
  cljs$core$_GT_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_GT_;
}();
cljs.core._GT__EQ_ = function() {
  var cljs$core$_GT__EQ_ = null;
  var cljs$core$_GT__EQ___1 = function(x) {
    return true;
  };
  var cljs$core$_GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var cljs$core$_GT__EQ___3 = function() {
    var G__16177__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next(more)) {
            var G__16178 = y;
            var G__16179 = cljs.core.first(more);
            var G__16180 = cljs.core.next(more);
            x = G__16178;
            y = G__16179;
            more = G__16180;
            continue;
          } else {
            return y >= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16177 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16181__i = 0, G__16181__a = new Array(arguments.length - 2);
        while (G__16181__i < G__16181__a.length) {
          G__16181__a[G__16181__i] = arguments[G__16181__i + 2];
          ++G__16181__i;
        }
        more = new cljs.core.IndexedSeq(G__16181__a, 0);
      }
      return G__16177__delegate.call(this, x, y, more);
    };
    G__16177.cljs$lang$maxFixedArity = 2;
    G__16177.cljs$lang$applyTo = function(arglist__16182) {
      var x = cljs.core.first(arglist__16182);
      arglist__16182 = cljs.core.next(arglist__16182);
      var y = cljs.core.first(arglist__16182);
      var more = cljs.core.rest(arglist__16182);
      return G__16177__delegate(x, y, more);
    };
    G__16177.cljs$core$IFn$_invoke$arity$variadic = G__16177__delegate;
    return G__16177;
  }();
  cljs$core$_GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_GT__EQ___1.call(this, x);
      case 2:
        return cljs$core$_GT__EQ___2.call(this, x, y);
      default:
        var G__16183 = null;
        if (arguments.length > 2) {
          var G__16184__i = 0, G__16184__a = new Array(arguments.length - 2);
          while (G__16184__i < G__16184__a.length) {
            G__16184__a[G__16184__i] = arguments[G__16184__i + 2];
            ++G__16184__i;
          }
          G__16183 = new cljs.core.IndexedSeq(G__16184__a, 0);
        }
        return cljs$core$_GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16183);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_GT__EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$_GT__EQ_.cljs$lang$applyTo = cljs$core$_GT__EQ___3.cljs$lang$applyTo;
  cljs$core$_GT__EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_GT__EQ___1;
  cljs$core$_GT__EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_GT__EQ___2;
  cljs$core$_GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_GT__EQ_;
}();
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var cljs$core$max = null;
  var cljs$core$max__1 = function(x) {
    return x;
  };
  var cljs$core$max__2 = function(x, y) {
    var x__4434__auto__ = x;
    var y__4435__auto__ = y;
    return x__4434__auto__ > y__4435__auto__ ? x__4434__auto__ : y__4435__auto__;
  };
  var cljs$core$max__3 = function() {
    var G__16185__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$max, function() {
        var x__4434__auto__ = x;
        var y__4435__auto__ = y;
        return x__4434__auto__ > y__4435__auto__ ? x__4434__auto__ : y__4435__auto__;
      }(), more);
    };
    var G__16185 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16186__i = 0, G__16186__a = new Array(arguments.length - 2);
        while (G__16186__i < G__16186__a.length) {
          G__16186__a[G__16186__i] = arguments[G__16186__i + 2];
          ++G__16186__i;
        }
        more = new cljs.core.IndexedSeq(G__16186__a, 0);
      }
      return G__16185__delegate.call(this, x, y, more);
    };
    G__16185.cljs$lang$maxFixedArity = 2;
    G__16185.cljs$lang$applyTo = function(arglist__16187) {
      var x = cljs.core.first(arglist__16187);
      arglist__16187 = cljs.core.next(arglist__16187);
      var y = cljs.core.first(arglist__16187);
      var more = cljs.core.rest(arglist__16187);
      return G__16185__delegate(x, y, more);
    };
    G__16185.cljs$core$IFn$_invoke$arity$variadic = G__16185__delegate;
    return G__16185;
  }();
  cljs$core$max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$max__1.call(this, x);
      case 2:
        return cljs$core$max__2.call(this, x, y);
      default:
        var G__16188 = null;
        if (arguments.length > 2) {
          var G__16189__i = 0, G__16189__a = new Array(arguments.length - 2);
          while (G__16189__i < G__16189__a.length) {
            G__16189__a[G__16189__i] = arguments[G__16189__i + 2];
            ++G__16189__i;
          }
          G__16188 = new cljs.core.IndexedSeq(G__16189__a, 0);
        }
        return cljs$core$max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16188);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$max.cljs$lang$maxFixedArity = 2;
  cljs$core$max.cljs$lang$applyTo = cljs$core$max__3.cljs$lang$applyTo;
  cljs$core$max.cljs$core$IFn$_invoke$arity$1 = cljs$core$max__1;
  cljs$core$max.cljs$core$IFn$_invoke$arity$2 = cljs$core$max__2;
  cljs$core$max.cljs$core$IFn$_invoke$arity$variadic = cljs$core$max__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$max;
}();
cljs.core.min = function() {
  var cljs$core$min = null;
  var cljs$core$min__1 = function(x) {
    return x;
  };
  var cljs$core$min__2 = function(x, y) {
    var x__4441__auto__ = x;
    var y__4442__auto__ = y;
    return x__4441__auto__ < y__4442__auto__ ? x__4441__auto__ : y__4442__auto__;
  };
  var cljs$core$min__3 = function() {
    var G__16190__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$min, function() {
        var x__4441__auto__ = x;
        var y__4442__auto__ = y;
        return x__4441__auto__ < y__4442__auto__ ? x__4441__auto__ : y__4442__auto__;
      }(), more);
    };
    var G__16190 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16191__i = 0, G__16191__a = new Array(arguments.length - 2);
        while (G__16191__i < G__16191__a.length) {
          G__16191__a[G__16191__i] = arguments[G__16191__i + 2];
          ++G__16191__i;
        }
        more = new cljs.core.IndexedSeq(G__16191__a, 0);
      }
      return G__16190__delegate.call(this, x, y, more);
    };
    G__16190.cljs$lang$maxFixedArity = 2;
    G__16190.cljs$lang$applyTo = function(arglist__16192) {
      var x = cljs.core.first(arglist__16192);
      arglist__16192 = cljs.core.next(arglist__16192);
      var y = cljs.core.first(arglist__16192);
      var more = cljs.core.rest(arglist__16192);
      return G__16190__delegate(x, y, more);
    };
    G__16190.cljs$core$IFn$_invoke$arity$variadic = G__16190__delegate;
    return G__16190;
  }();
  cljs$core$min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$min__1.call(this, x);
      case 2:
        return cljs$core$min__2.call(this, x, y);
      default:
        var G__16193 = null;
        if (arguments.length > 2) {
          var G__16194__i = 0, G__16194__a = new Array(arguments.length - 2);
          while (G__16194__i < G__16194__a.length) {
            G__16194__a[G__16194__i] = arguments[G__16194__i + 2];
            ++G__16194__i;
          }
          G__16193 = new cljs.core.IndexedSeq(G__16194__a, 0);
        }
        return cljs$core$min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16193);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$min.cljs$lang$maxFixedArity = 2;
  cljs$core$min.cljs$lang$applyTo = cljs$core$min__3.cljs$lang$applyTo;
  cljs$core$min.cljs$core$IFn$_invoke$arity$1 = cljs$core$min__1;
  cljs$core$min.cljs$core$IFn$_invoke$arity$2 = cljs$core$min__2;
  cljs$core$min.cljs$core$IFn$_invoke$arity$variadic = cljs$core$min__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$min;
}();
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var cljs$core$unchecked_add = null;
  var cljs$core$unchecked_add__0 = function() {
    return 0;
  };
  var cljs$core$unchecked_add__1 = function(x) {
    return x;
  };
  var cljs$core$unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var cljs$core$unchecked_add__3 = function() {
    var G__16195__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_add, x + y, more);
    };
    var G__16195 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16196__i = 0, G__16196__a = new Array(arguments.length - 2);
        while (G__16196__i < G__16196__a.length) {
          G__16196__a[G__16196__i] = arguments[G__16196__i + 2];
          ++G__16196__i;
        }
        more = new cljs.core.IndexedSeq(G__16196__a, 0);
      }
      return G__16195__delegate.call(this, x, y, more);
    };
    G__16195.cljs$lang$maxFixedArity = 2;
    G__16195.cljs$lang$applyTo = function(arglist__16197) {
      var x = cljs.core.first(arglist__16197);
      arglist__16197 = cljs.core.next(arglist__16197);
      var y = cljs.core.first(arglist__16197);
      var more = cljs.core.rest(arglist__16197);
      return G__16195__delegate(x, y, more);
    };
    G__16195.cljs$core$IFn$_invoke$arity$variadic = G__16195__delegate;
    return G__16195;
  }();
  cljs$core$unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$unchecked_add__0.call(this);
      case 1:
        return cljs$core$unchecked_add__1.call(this, x);
      case 2:
        return cljs$core$unchecked_add__2.call(this, x, y);
      default:
        var G__16198 = null;
        if (arguments.length > 2) {
          var G__16199__i = 0, G__16199__a = new Array(arguments.length - 2);
          while (G__16199__i < G__16199__a.length) {
            G__16199__a[G__16199__i] = arguments[G__16199__i + 2];
            ++G__16199__i;
          }
          G__16198 = new cljs.core.IndexedSeq(G__16199__a, 0);
        }
        return cljs$core$unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16198);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_add.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_add.cljs$lang$applyTo = cljs$core$unchecked_add__3.cljs$lang$applyTo;
  cljs$core$unchecked_add.cljs$core$IFn$_invoke$arity$0 = cljs$core$unchecked_add__0;
  cljs$core$unchecked_add.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_add__1;
  cljs$core$unchecked_add.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_add__2;
  cljs$core$unchecked_add.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var cljs$core$unchecked_add_int = null;
  var cljs$core$unchecked_add_int__0 = function() {
    return 0;
  };
  var cljs$core$unchecked_add_int__1 = function(x) {
    return x;
  };
  var cljs$core$unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var cljs$core$unchecked_add_int__3 = function() {
    var G__16200__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_add_int, x + y, more);
    };
    var G__16200 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16201__i = 0, G__16201__a = new Array(arguments.length - 2);
        while (G__16201__i < G__16201__a.length) {
          G__16201__a[G__16201__i] = arguments[G__16201__i + 2];
          ++G__16201__i;
        }
        more = new cljs.core.IndexedSeq(G__16201__a, 0);
      }
      return G__16200__delegate.call(this, x, y, more);
    };
    G__16200.cljs$lang$maxFixedArity = 2;
    G__16200.cljs$lang$applyTo = function(arglist__16202) {
      var x = cljs.core.first(arglist__16202);
      arglist__16202 = cljs.core.next(arglist__16202);
      var y = cljs.core.first(arglist__16202);
      var more = cljs.core.rest(arglist__16202);
      return G__16200__delegate(x, y, more);
    };
    G__16200.cljs$core$IFn$_invoke$arity$variadic = G__16200__delegate;
    return G__16200;
  }();
  cljs$core$unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$unchecked_add_int__0.call(this);
      case 1:
        return cljs$core$unchecked_add_int__1.call(this, x);
      case 2:
        return cljs$core$unchecked_add_int__2.call(this, x, y);
      default:
        var G__16203 = null;
        if (arguments.length > 2) {
          var G__16204__i = 0, G__16204__a = new Array(arguments.length - 2);
          while (G__16204__i < G__16204__a.length) {
            G__16204__a[G__16204__i] = arguments[G__16204__i + 2];
            ++G__16204__i;
          }
          G__16203 = new cljs.core.IndexedSeq(G__16204__a, 0);
        }
        return cljs$core$unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16203);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_add_int.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_add_int.cljs$lang$applyTo = cljs$core$unchecked_add_int__3.cljs$lang$applyTo;
  cljs$core$unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = cljs$core$unchecked_add_int__0;
  cljs$core$unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_add_int__1;
  cljs$core$unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_add_int__2;
  cljs$core$unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_add_int;
}();
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var cljs$core$unchecked_divide_int = null;
  var cljs$core$unchecked_divide_int__1 = function(x) {
    return cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var cljs$core$unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var cljs$core$unchecked_divide_int__3 = function() {
    var G__16209__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_divide_int, cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__16209 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16210__i = 0, G__16210__a = new Array(arguments.length - 2);
        while (G__16210__i < G__16210__a.length) {
          G__16210__a[G__16210__i] = arguments[G__16210__i + 2];
          ++G__16210__i;
        }
        more = new cljs.core.IndexedSeq(G__16210__a, 0);
      }
      return G__16209__delegate.call(this, x, y, more);
    };
    G__16209.cljs$lang$maxFixedArity = 2;
    G__16209.cljs$lang$applyTo = function(arglist__16211) {
      var x = cljs.core.first(arglist__16211);
      arglist__16211 = cljs.core.next(arglist__16211);
      var y = cljs.core.first(arglist__16211);
      var more = cljs.core.rest(arglist__16211);
      return G__16209__delegate(x, y, more);
    };
    G__16209.cljs$core$IFn$_invoke$arity$variadic = G__16209__delegate;
    return G__16209;
  }();
  cljs$core$unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$unchecked_divide_int__1.call(this, x);
      case 2:
        return cljs$core$unchecked_divide_int__2.call(this, x, y);
      default:
        var G__16212 = null;
        if (arguments.length > 2) {
          var G__16213__i = 0, G__16213__a = new Array(arguments.length - 2);
          while (G__16213__i < G__16213__a.length) {
            G__16213__a[G__16213__i] = arguments[G__16213__i + 2];
            ++G__16213__i;
          }
          G__16212 = new cljs.core.IndexedSeq(G__16213__a, 0);
        }
        return cljs$core$unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16212);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_divide_int.cljs$lang$applyTo = cljs$core$unchecked_divide_int__3.cljs$lang$applyTo;
  cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_divide_int__1;
  cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_divide_int__2;
  cljs$core$unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_divide_int;
}();
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var cljs$core$unchecked_multiply = null;
  var cljs$core$unchecked_multiply__0 = function() {
    return 1;
  };
  var cljs$core$unchecked_multiply__1 = function(x) {
    return x;
  };
  var cljs$core$unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var cljs$core$unchecked_multiply__3 = function() {
    var G__16214__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_multiply, x * y, more);
    };
    var G__16214 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16215__i = 0, G__16215__a = new Array(arguments.length - 2);
        while (G__16215__i < G__16215__a.length) {
          G__16215__a[G__16215__i] = arguments[G__16215__i + 2];
          ++G__16215__i;
        }
        more = new cljs.core.IndexedSeq(G__16215__a, 0);
      }
      return G__16214__delegate.call(this, x, y, more);
    };
    G__16214.cljs$lang$maxFixedArity = 2;
    G__16214.cljs$lang$applyTo = function(arglist__16216) {
      var x = cljs.core.first(arglist__16216);
      arglist__16216 = cljs.core.next(arglist__16216);
      var y = cljs.core.first(arglist__16216);
      var more = cljs.core.rest(arglist__16216);
      return G__16214__delegate(x, y, more);
    };
    G__16214.cljs$core$IFn$_invoke$arity$variadic = G__16214__delegate;
    return G__16214;
  }();
  cljs$core$unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$unchecked_multiply__0.call(this);
      case 1:
        return cljs$core$unchecked_multiply__1.call(this, x);
      case 2:
        return cljs$core$unchecked_multiply__2.call(this, x, y);
      default:
        var G__16217 = null;
        if (arguments.length > 2) {
          var G__16218__i = 0, G__16218__a = new Array(arguments.length - 2);
          while (G__16218__i < G__16218__a.length) {
            G__16218__a[G__16218__i] = arguments[G__16218__i + 2];
            ++G__16218__i;
          }
          G__16217 = new cljs.core.IndexedSeq(G__16218__a, 0);
        }
        return cljs$core$unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16217);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_multiply.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_multiply.cljs$lang$applyTo = cljs$core$unchecked_multiply__3.cljs$lang$applyTo;
  cljs$core$unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = cljs$core$unchecked_multiply__0;
  cljs$core$unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_multiply__1;
  cljs$core$unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_multiply__2;
  cljs$core$unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var cljs$core$unchecked_multiply_int = null;
  var cljs$core$unchecked_multiply_int__0 = function() {
    return 1;
  };
  var cljs$core$unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var cljs$core$unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var cljs$core$unchecked_multiply_int__3 = function() {
    var G__16219__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_multiply_int, x * y, more);
    };
    var G__16219 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16220__i = 0, G__16220__a = new Array(arguments.length - 2);
        while (G__16220__i < G__16220__a.length) {
          G__16220__a[G__16220__i] = arguments[G__16220__i + 2];
          ++G__16220__i;
        }
        more = new cljs.core.IndexedSeq(G__16220__a, 0);
      }
      return G__16219__delegate.call(this, x, y, more);
    };
    G__16219.cljs$lang$maxFixedArity = 2;
    G__16219.cljs$lang$applyTo = function(arglist__16221) {
      var x = cljs.core.first(arglist__16221);
      arglist__16221 = cljs.core.next(arglist__16221);
      var y = cljs.core.first(arglist__16221);
      var more = cljs.core.rest(arglist__16221);
      return G__16219__delegate(x, y, more);
    };
    G__16219.cljs$core$IFn$_invoke$arity$variadic = G__16219__delegate;
    return G__16219;
  }();
  cljs$core$unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$unchecked_multiply_int__0.call(this);
      case 1:
        return cljs$core$unchecked_multiply_int__1.call(this, x);
      case 2:
        return cljs$core$unchecked_multiply_int__2.call(this, x, y);
      default:
        var G__16222 = null;
        if (arguments.length > 2) {
          var G__16223__i = 0, G__16223__a = new Array(arguments.length - 2);
          while (G__16223__i < G__16223__a.length) {
            G__16223__a[G__16223__i] = arguments[G__16223__i + 2];
            ++G__16223__i;
          }
          G__16222 = new cljs.core.IndexedSeq(G__16223__a, 0);
        }
        return cljs$core$unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16222);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_multiply_int.cljs$lang$applyTo = cljs$core$unchecked_multiply_int__3.cljs$lang$applyTo;
  cljs$core$unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = cljs$core$unchecked_multiply_int__0;
  cljs$core$unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_multiply_int__1;
  cljs$core$unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_multiply_int__2;
  cljs$core$unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  var G__16226 = x;
  var G__16227 = n;
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(G__16226, G__16227) : cljs.core.mod.call(null, G__16226, G__16227);
};
cljs.core.unchecked_subtract = function() {
  var cljs$core$unchecked_subtract = null;
  var cljs$core$unchecked_subtract__1 = function(x) {
    return-x;
  };
  var cljs$core$unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var cljs$core$unchecked_subtract__3 = function() {
    var G__16228__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_subtract, x - y, more);
    };
    var G__16228 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16229__i = 0, G__16229__a = new Array(arguments.length - 2);
        while (G__16229__i < G__16229__a.length) {
          G__16229__a[G__16229__i] = arguments[G__16229__i + 2];
          ++G__16229__i;
        }
        more = new cljs.core.IndexedSeq(G__16229__a, 0);
      }
      return G__16228__delegate.call(this, x, y, more);
    };
    G__16228.cljs$lang$maxFixedArity = 2;
    G__16228.cljs$lang$applyTo = function(arglist__16230) {
      var x = cljs.core.first(arglist__16230);
      arglist__16230 = cljs.core.next(arglist__16230);
      var y = cljs.core.first(arglist__16230);
      var more = cljs.core.rest(arglist__16230);
      return G__16228__delegate(x, y, more);
    };
    G__16228.cljs$core$IFn$_invoke$arity$variadic = G__16228__delegate;
    return G__16228;
  }();
  cljs$core$unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$unchecked_subtract__1.call(this, x);
      case 2:
        return cljs$core$unchecked_subtract__2.call(this, x, y);
      default:
        var G__16231 = null;
        if (arguments.length > 2) {
          var G__16232__i = 0, G__16232__a = new Array(arguments.length - 2);
          while (G__16232__i < G__16232__a.length) {
            G__16232__a[G__16232__i] = arguments[G__16232__i + 2];
            ++G__16232__i;
          }
          G__16231 = new cljs.core.IndexedSeq(G__16232__a, 0);
        }
        return cljs$core$unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16231);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_subtract.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_subtract.cljs$lang$applyTo = cljs$core$unchecked_subtract__3.cljs$lang$applyTo;
  cljs$core$unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_subtract__1;
  cljs$core$unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_subtract__2;
  cljs$core$unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var cljs$core$unchecked_subtract_int = null;
  var cljs$core$unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var cljs$core$unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var cljs$core$unchecked_subtract_int__3 = function() {
    var G__16233__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$unchecked_subtract_int, x - y, more);
    };
    var G__16233 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16234__i = 0, G__16234__a = new Array(arguments.length - 2);
        while (G__16234__i < G__16234__a.length) {
          G__16234__a[G__16234__i] = arguments[G__16234__i + 2];
          ++G__16234__i;
        }
        more = new cljs.core.IndexedSeq(G__16234__a, 0);
      }
      return G__16233__delegate.call(this, x, y, more);
    };
    G__16233.cljs$lang$maxFixedArity = 2;
    G__16233.cljs$lang$applyTo = function(arglist__16235) {
      var x = cljs.core.first(arglist__16235);
      arglist__16235 = cljs.core.next(arglist__16235);
      var y = cljs.core.first(arglist__16235);
      var more = cljs.core.rest(arglist__16235);
      return G__16233__delegate(x, y, more);
    };
    G__16233.cljs$core$IFn$_invoke$arity$variadic = G__16233__delegate;
    return G__16233;
  }();
  cljs$core$unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$unchecked_subtract_int__1.call(this, x);
      case 2:
        return cljs$core$unchecked_subtract_int__2.call(this, x, y);
      default:
        var G__16236 = null;
        if (arguments.length > 2) {
          var G__16237__i = 0, G__16237__a = new Array(arguments.length - 2);
          while (G__16237__i < G__16237__a.length) {
            G__16237__a[G__16237__i] = arguments[G__16237__i + 2];
            ++G__16237__i;
          }
          G__16236 = new cljs.core.IndexedSeq(G__16237__a, 0);
        }
        return cljs$core$unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16236);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  cljs$core$unchecked_subtract_int.cljs$lang$applyTo = cljs$core$unchecked_subtract_int__3.cljs$lang$applyTo;
  cljs$core$unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = cljs$core$unchecked_subtract_int__1;
  cljs$core$unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = cljs$core$unchecked_subtract_int__2;
  cljs$core$unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = cljs$core$unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$unchecked_subtract_int;
}();
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    var G__16240 = q;
    return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__16240) : Math.floor.call(null, G__16240);
  } else {
    var G__16241 = q;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__16241) : Math.ceil.call(null, G__16241);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function() {
  var cljs$core$bit_xor = null;
  var cljs$core$bit_xor__2 = function(x, y) {
    return x ^ y;
  };
  var cljs$core$bit_xor__3 = function() {
    var G__16242__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$bit_xor, x ^ y, more);
    };
    var G__16242 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16243__i = 0, G__16243__a = new Array(arguments.length - 2);
        while (G__16243__i < G__16243__a.length) {
          G__16243__a[G__16243__i] = arguments[G__16243__i + 2];
          ++G__16243__i;
        }
        more = new cljs.core.IndexedSeq(G__16243__a, 0);
      }
      return G__16242__delegate.call(this, x, y, more);
    };
    G__16242.cljs$lang$maxFixedArity = 2;
    G__16242.cljs$lang$applyTo = function(arglist__16244) {
      var x = cljs.core.first(arglist__16244);
      arglist__16244 = cljs.core.next(arglist__16244);
      var y = cljs.core.first(arglist__16244);
      var more = cljs.core.rest(arglist__16244);
      return G__16242__delegate(x, y, more);
    };
    G__16242.cljs$core$IFn$_invoke$arity$variadic = G__16242__delegate;
    return G__16242;
  }();
  cljs$core$bit_xor = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$bit_xor__2.call(this, x, y);
      default:
        var G__16245 = null;
        if (arguments.length > 2) {
          var G__16246__i = 0, G__16246__a = new Array(arguments.length - 2);
          while (G__16246__i < G__16246__a.length) {
            G__16246__a[G__16246__i] = arguments[G__16246__i + 2];
            ++G__16246__i;
          }
          G__16245 = new cljs.core.IndexedSeq(G__16246__a, 0);
        }
        return cljs$core$bit_xor__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16245);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$bit_xor.cljs$lang$maxFixedArity = 2;
  cljs$core$bit_xor.cljs$lang$applyTo = cljs$core$bit_xor__3.cljs$lang$applyTo;
  cljs$core$bit_xor.cljs$core$IFn$_invoke$arity$2 = cljs$core$bit_xor__2;
  cljs$core$bit_xor.cljs$core$IFn$_invoke$arity$variadic = cljs$core$bit_xor__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$bit_xor;
}();
cljs.core.bit_and = function() {
  var cljs$core$bit_and = null;
  var cljs$core$bit_and__2 = function(x, y) {
    return x & y;
  };
  var cljs$core$bit_and__3 = function() {
    var G__16247__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$bit_and, x & y, more);
    };
    var G__16247 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16248__i = 0, G__16248__a = new Array(arguments.length - 2);
        while (G__16248__i < G__16248__a.length) {
          G__16248__a[G__16248__i] = arguments[G__16248__i + 2];
          ++G__16248__i;
        }
        more = new cljs.core.IndexedSeq(G__16248__a, 0);
      }
      return G__16247__delegate.call(this, x, y, more);
    };
    G__16247.cljs$lang$maxFixedArity = 2;
    G__16247.cljs$lang$applyTo = function(arglist__16249) {
      var x = cljs.core.first(arglist__16249);
      arglist__16249 = cljs.core.next(arglist__16249);
      var y = cljs.core.first(arglist__16249);
      var more = cljs.core.rest(arglist__16249);
      return G__16247__delegate(x, y, more);
    };
    G__16247.cljs$core$IFn$_invoke$arity$variadic = G__16247__delegate;
    return G__16247;
  }();
  cljs$core$bit_and = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$bit_and__2.call(this, x, y);
      default:
        var G__16250 = null;
        if (arguments.length > 2) {
          var G__16251__i = 0, G__16251__a = new Array(arguments.length - 2);
          while (G__16251__i < G__16251__a.length) {
            G__16251__a[G__16251__i] = arguments[G__16251__i + 2];
            ++G__16251__i;
          }
          G__16250 = new cljs.core.IndexedSeq(G__16251__a, 0);
        }
        return cljs$core$bit_and__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16250);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$bit_and.cljs$lang$maxFixedArity = 2;
  cljs$core$bit_and.cljs$lang$applyTo = cljs$core$bit_and__3.cljs$lang$applyTo;
  cljs$core$bit_and.cljs$core$IFn$_invoke$arity$2 = cljs$core$bit_and__2;
  cljs$core$bit_and.cljs$core$IFn$_invoke$arity$variadic = cljs$core$bit_and__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$bit_and;
}();
cljs.core.bit_or = function() {
  var cljs$core$bit_or = null;
  var cljs$core$bit_or__2 = function(x, y) {
    return x | y;
  };
  var cljs$core$bit_or__3 = function() {
    var G__16252__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$bit_or, x | y, more);
    };
    var G__16252 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16253__i = 0, G__16253__a = new Array(arguments.length - 2);
        while (G__16253__i < G__16253__a.length) {
          G__16253__a[G__16253__i] = arguments[G__16253__i + 2];
          ++G__16253__i;
        }
        more = new cljs.core.IndexedSeq(G__16253__a, 0);
      }
      return G__16252__delegate.call(this, x, y, more);
    };
    G__16252.cljs$lang$maxFixedArity = 2;
    G__16252.cljs$lang$applyTo = function(arglist__16254) {
      var x = cljs.core.first(arglist__16254);
      arglist__16254 = cljs.core.next(arglist__16254);
      var y = cljs.core.first(arglist__16254);
      var more = cljs.core.rest(arglist__16254);
      return G__16252__delegate(x, y, more);
    };
    G__16252.cljs$core$IFn$_invoke$arity$variadic = G__16252__delegate;
    return G__16252;
  }();
  cljs$core$bit_or = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$bit_or__2.call(this, x, y);
      default:
        var G__16255 = null;
        if (arguments.length > 2) {
          var G__16256__i = 0, G__16256__a = new Array(arguments.length - 2);
          while (G__16256__i < G__16256__a.length) {
            G__16256__a[G__16256__i] = arguments[G__16256__i + 2];
            ++G__16256__i;
          }
          G__16255 = new cljs.core.IndexedSeq(G__16256__a, 0);
        }
        return cljs$core$bit_or__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16255);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$bit_or.cljs$lang$maxFixedArity = 2;
  cljs$core$bit_or.cljs$lang$applyTo = cljs$core$bit_or__3.cljs$lang$applyTo;
  cljs$core$bit_or.cljs$core$IFn$_invoke$arity$2 = cljs$core$bit_or__2;
  cljs$core$bit_or.cljs$core$IFn$_invoke$arity$variadic = cljs$core$bit_or__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$bit_or;
}();
cljs.core.bit_and_not = function() {
  var cljs$core$bit_and_not = null;
  var cljs$core$bit_and_not__2 = function(x, y) {
    return x & ~y;
  };
  var cljs$core$bit_and_not__3 = function() {
    var G__16257__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs$core$bit_and_not, x & ~y, more);
    };
    var G__16257 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16258__i = 0, G__16258__a = new Array(arguments.length - 2);
        while (G__16258__i < G__16258__a.length) {
          G__16258__a[G__16258__i] = arguments[G__16258__i + 2];
          ++G__16258__i;
        }
        more = new cljs.core.IndexedSeq(G__16258__a, 0);
      }
      return G__16257__delegate.call(this, x, y, more);
    };
    G__16257.cljs$lang$maxFixedArity = 2;
    G__16257.cljs$lang$applyTo = function(arglist__16259) {
      var x = cljs.core.first(arglist__16259);
      arglist__16259 = cljs.core.next(arglist__16259);
      var y = cljs.core.first(arglist__16259);
      var more = cljs.core.rest(arglist__16259);
      return G__16257__delegate(x, y, more);
    };
    G__16257.cljs$core$IFn$_invoke$arity$variadic = G__16257__delegate;
    return G__16257;
  }();
  cljs$core$bit_and_not = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$bit_and_not__2.call(this, x, y);
      default:
        var G__16260 = null;
        if (arguments.length > 2) {
          var G__16261__i = 0, G__16261__a = new Array(arguments.length - 2);
          while (G__16261__i < G__16261__a.length) {
            G__16261__a[G__16261__i] = arguments[G__16261__i + 2];
            ++G__16261__i;
          }
          G__16260 = new cljs.core.IndexedSeq(G__16261__a, 0);
        }
        return cljs$core$bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16260);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$bit_and_not.cljs$lang$maxFixedArity = 2;
  cljs$core$bit_and_not.cljs$lang$applyTo = cljs$core$bit_and_not__3.cljs$lang$applyTo;
  cljs$core$bit_and_not.cljs$core$IFn$_invoke$arity$2 = cljs$core$bit_and_not__2;
  cljs$core$bit_and_not.cljs$core$IFn$_invoke$arity$variadic = cljs$core$bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$bit_and_not;
}();
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var cljs$core$_EQ__EQ_ = null;
  var cljs$core$_EQ__EQ___1 = function(x) {
    return true;
  };
  var cljs$core$_EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv(x, y);
  };
  var cljs$core$_EQ__EQ___3 = function() {
    var G__16266__delegate = function(x, y, more) {
      while (true) {
        if (cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__16267 = y;
            var G__16268 = cljs.core.first(more);
            var G__16269 = cljs.core.next(more);
            x = G__16267;
            y = G__16268;
            more = G__16269;
            continue;
          } else {
            return cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16266 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16270__i = 0, G__16270__a = new Array(arguments.length - 2);
        while (G__16270__i < G__16270__a.length) {
          G__16270__a[G__16270__i] = arguments[G__16270__i + 2];
          ++G__16270__i;
        }
        more = new cljs.core.IndexedSeq(G__16270__a, 0);
      }
      return G__16266__delegate.call(this, x, y, more);
    };
    G__16266.cljs$lang$maxFixedArity = 2;
    G__16266.cljs$lang$applyTo = function(arglist__16271) {
      var x = cljs.core.first(arglist__16271);
      arglist__16271 = cljs.core.next(arglist__16271);
      var y = cljs.core.first(arglist__16271);
      var more = cljs.core.rest(arglist__16271);
      return G__16266__delegate(x, y, more);
    };
    G__16266.cljs$core$IFn$_invoke$arity$variadic = G__16266__delegate;
    return G__16266;
  }();
  cljs$core$_EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$_EQ__EQ___1.call(this, x);
      case 2:
        return cljs$core$_EQ__EQ___2.call(this, x, y);
      default:
        var G__16272 = null;
        if (arguments.length > 2) {
          var G__16273__i = 0, G__16273__a = new Array(arguments.length - 2);
          while (G__16273__i < G__16273__a.length) {
            G__16273__a[G__16273__i] = arguments[G__16273__i + 2];
            ++G__16273__i;
          }
          G__16272 = new cljs.core.IndexedSeq(G__16273__a, 0);
        }
        return cljs$core$_EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16272);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$_EQ__EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$_EQ__EQ_.cljs$lang$applyTo = cljs$core$_EQ__EQ___3.cljs$lang$applyTo;
  cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$_EQ__EQ___1;
  cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$_EQ__EQ___2;
  cljs$core$_EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$_EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$_EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__16274 = n__$1 - 1;
      var G__16275 = cljs.core.next(xs);
      n__$1 = G__16274;
      xs = G__16275;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var cljs$core$str = null;
  var cljs$core$str__0 = function() {
    return "";
  };
  var cljs$core$str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      var G__16279 = x;
      return goog.string.buildString(G__16279);
    }
  };
  var cljs$core$str__2 = function() {
    var G__16280__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(cljs$core$str.cljs$core$IFn$_invoke$arity$1(x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__16281 = sb.append(cljs$core$str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(more)));
          var G__16282 = cljs.core.next(more);
          sb = G__16281;
          more = G__16282;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__16280 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        var G__16283__i = 0, G__16283__a = new Array(arguments.length - 1);
        while (G__16283__i < G__16283__a.length) {
          G__16283__a[G__16283__i] = arguments[G__16283__i + 1];
          ++G__16283__i;
        }
        ys = new cljs.core.IndexedSeq(G__16283__a, 0);
      }
      return G__16280__delegate.call(this, x, ys);
    };
    G__16280.cljs$lang$maxFixedArity = 1;
    G__16280.cljs$lang$applyTo = function(arglist__16284) {
      var x = cljs.core.first(arglist__16284);
      var ys = cljs.core.rest(arglist__16284);
      return G__16280__delegate(x, ys);
    };
    G__16280.cljs$core$IFn$_invoke$arity$variadic = G__16280__delegate;
    return G__16280;
  }();
  cljs$core$str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$str__0.call(this);
      case 1:
        return cljs$core$str__1.call(this, x);
      default:
        var G__16285 = null;
        if (arguments.length > 1) {
          var G__16286__i = 0, G__16286__a = new Array(arguments.length - 1);
          while (G__16286__i < G__16286__a.length) {
            G__16286__a[G__16286__i] = arguments[G__16286__i + 1];
            ++G__16286__i;
          }
          G__16285 = new cljs.core.IndexedSeq(G__16286__a, 0);
        }
        return cljs$core$str__2.cljs$core$IFn$_invoke$arity$variadic(x, G__16285);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$str.cljs$lang$maxFixedArity = 1;
  cljs$core$str.cljs$lang$applyTo = cljs$core$str__2.cljs$lang$applyTo;
  cljs$core$str.cljs$core$IFn$_invoke$arity$0 = cljs$core$str__0;
  cljs$core$str.cljs$core$IFn$_invoke$arity$1 = cljs$core$str__1;
  cljs$core$str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$str__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$str;
}();
cljs.core.subs = function() {
  var cljs$core$subs = null;
  var cljs$core$subs__2 = function(s, start) {
    return s.substring(start);
  };
  var cljs$core$subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  cljs$core$subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return cljs$core$subs__2.call(this, s, start);
      case 3:
        return cljs$core$subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$subs.cljs$core$IFn$_invoke$arity$2 = cljs$core$subs__2;
  cljs$core$subs.cljs$core$IFn$_invoke$arity$3 = cljs$core$subs__3;
  return cljs$core$subs;
}();
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__16287 = cljs.core.next(xs);
            var G__16288 = cljs.core.next(ys);
            xs = G__16287;
            ys = G__16288;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__16289 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__16290 = cljs.core.next(s);
        res = G__16289;
        s = G__16290;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__16295 = (h + (cljs.core.hash(function() {
        var G__16293 = e;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__16293) : cljs.core.key.call(null, G__16293);
      }()) ^ cljs.core.hash(function() {
        var G__16294 = e;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__16294) : cljs.core.val.call(null, G__16294);
      }()))) % 4503599627370496;
      var G__16296 = cljs.core.next(s);
      h = G__16295;
      s = G__16296;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__16297 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__16298 = cljs.core.next(s__$1);
      h = G__16297;
      s__$1 = G__16298;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__16309_16319 = cljs.core.seq(fn_map);
  var chunk__16310_16320 = null;
  var count__16311_16321 = 0;
  var i__16312_16322 = 0;
  while (true) {
    if (i__16312_16322 < count__16311_16321) {
      var vec__16313_16323 = chunk__16310_16320.cljs$core$IIndexed$_nth$arity$2(null, i__16312_16322);
      var key_name_16324 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16313_16323, 0, null);
      var f_16325 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16313_16323, 1, null);
      var str_name_16326 = function() {
        var G__16314 = key_name_16324;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__16314) : cljs.core.name.call(null, G__16314);
      }();
      obj[str_name_16326] = f_16325;
      var G__16327 = seq__16309_16319;
      var G__16328 = chunk__16310_16320;
      var G__16329 = count__16311_16321;
      var G__16330 = i__16312_16322 + 1;
      seq__16309_16319 = G__16327;
      chunk__16310_16320 = G__16328;
      count__16311_16321 = G__16329;
      i__16312_16322 = G__16330;
      continue;
    } else {
      var temp__4126__auto___16331 = cljs.core.seq(seq__16309_16319);
      if (temp__4126__auto___16331) {
        var seq__16309_16332__$1 = temp__4126__auto___16331;
        if (cljs.core.chunked_seq_QMARK_(seq__16309_16332__$1)) {
          var c__4907__auto___16333 = function() {
            var G__16315 = seq__16309_16332__$1;
            return cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(G__16315) : cljs.core.chunk_first.call(null, G__16315);
          }();
          var G__16334 = function() {
            var G__16316 = seq__16309_16332__$1;
            return cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(G__16316) : cljs.core.chunk_rest.call(null, G__16316);
          }();
          var G__16335 = c__4907__auto___16333;
          var G__16336 = cljs.core.count(c__4907__auto___16333);
          var G__16337 = 0;
          seq__16309_16319 = G__16334;
          chunk__16310_16320 = G__16335;
          count__16311_16321 = G__16336;
          i__16312_16322 = G__16337;
          continue;
        } else {
          var vec__16317_16338 = cljs.core.first(seq__16309_16332__$1);
          var key_name_16339 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16317_16338, 0, null);
          var f_16340 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16317_16338, 1, null);
          var str_name_16341 = function() {
            var G__16318 = key_name_16339;
            return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__16318) : cljs.core.name.call(null, G__16318);
          }();
          obj[str_name_16341] = f_16340;
          var G__16342 = cljs.core.next(seq__16309_16332__$1);
          var G__16343 = null;
          var G__16344 = 0;
          var G__16345 = 0;
          seq__16309_16319 = G__16342;
          chunk__16310_16320 = G__16343;
          count__16311_16321 = G__16344;
          i__16312_16322 = G__16345;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  var G__16347 = coll;
  if (G__16347) {
    var bit__4796__auto__ = G__16347.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4796__auto__ || G__16347.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__16347.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__16347);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__16347);
  }
};
cljs.core.rseq = function cljs$core$rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var cljs$core$list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
          var G__16348 = xs__$1.cljs$core$INext$_next$arity$1(null);
          xs__$1 = G__16348;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__16349 = i - 1;
        var G__16350 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
        i = G__16349;
        r = G__16350;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var cljs$core$list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      var G__16351__i = 0, G__16351__a = new Array(arguments.length - 0);
      while (G__16351__i < G__16351__a.length) {
        G__16351__a[G__16351__i] = arguments[G__16351__i + 0];
        ++G__16351__i;
      }
      xs = new cljs.core.IndexedSeq(G__16351__a, 0);
    }
    return cljs$core$list__delegate.call(this, xs);
  };
  cljs$core$list.cljs$lang$maxFixedArity = 0;
  cljs$core$list.cljs$lang$applyTo = function(arglist__16352) {
    var xs = cljs.core.seq(arglist__16352);
    return cljs$core$list__delegate(xs);
  };
  cljs$core$list.cljs$core$IFn$_invoke$arity$variadic = cljs$core$list__delegate;
  return cljs$core$list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__4122__auto__ = coll == null;
    if (or__4122__auto__) {
      return or__4122__auto__;
    } else {
      var G__16356 = coll;
      if (G__16356) {
        var bit__4789__auto__ = G__16356.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4789__auto__ || G__16356.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  var G__16358 = x;
  if (G__16358) {
    var bit__4796__auto__ = G__16358.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4796__auto__ || G__16358.cljs$core$IList$) {
      return true;
    } else {
      if (!G__16358.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__16358);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__16358);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = cljs.core.not(a.ns);
      if (and__4110__auto__) {
        return b.ns;
      } else {
        return and__4110__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__16365 = a.ns;
            var G__16366 = b.ns;
            return goog.array.defaultCompare(G__16365, G__16366);
          }();
          if (0 === nsc) {
            var G__16367 = a.name;
            var G__16368 = b.name;
            return goog.array.defaultCompare(G__16367, G__16368);
          } else {
            return nsc;
          }
        }
      } else {
        var G__16369 = a.name;
        var G__16370 = b.name;
        return goog.array.defaultCompare(G__16369, G__16370);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4538__auto__ = self__._hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__16372 = null;
  var G__16372__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__16372__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__16372 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16372__2.call(this, self__, coll);
      case 3:
        return G__16372__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16372.cljs$core$IFn$_invoke$arity$2 = G__16372__2;
  G__16372.cljs$core$IFn$_invoke$arity$3 = G__16372__3;
  return G__16372;
}();
cljs.core.Keyword.prototype.apply = function(self__, args16371) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16371)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (function() {
    var G__16374 = x;
    if (G__16374) {
      var bit__4789__auto__ = G__16374.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4789__auto__ || G__16374.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var cljs$core$keyword = null;
  var cljs$core$keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace(name), function() {
          var G__16376 = name;
          return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__16376) : cljs.core.name.call(null, G__16376);
        }(), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var cljs$core$keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  cljs$core$keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return cljs$core$keyword__1.call(this, ns);
      case 2:
        return cljs$core$keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$keyword.cljs$core$IFn$_invoke$arity$1 = cljs$core$keyword__1;
  cljs$core$keyword.cljs$core$IFn$_invoke$arity$2 = cljs$core$keyword__2;
  return cljs$core$keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = function() {
      return self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    }();
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__16377 = ls.sval();
        ls = G__16377;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var cljs$core$array_chunk = null;
  var cljs$core$array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var cljs$core$array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var cljs$core$array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  cljs$core$array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return cljs$core$array_chunk__1.call(this, arr);
      case 2:
        return cljs$core$array_chunk__2.call(this, arr, off);
      case 3:
        return cljs$core$array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$array_chunk.cljs$core$IFn$_invoke$arity$1 = cljs$core$array_chunk__1;
  cljs$core$array_chunk.cljs$core$IFn$_invoke$arity$2 = cljs$core$array_chunk__2;
  cljs$core$array_chunk.cljs$core$IFn$_invoke$arity$3 = cljs$core$array_chunk__3;
  return cljs$core$array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (function() {
    var G__16379 = s;
    if (G__16379) {
      var bit__4789__auto__ = G__16379.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4789__auto__ || G__16379.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__16380 = cljs.core.next(s__$1);
      s__$1 = G__16380;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_16381 = 0;
  var xs_16382 = cljs.core.seq(coll);
  while (true) {
    if (xs_16382) {
      ret[i_16381] = cljs.core.to_array(cljs.core.first(xs_16382));
      var G__16383 = i_16381 + 1;
      var G__16384 = cljs.core.next(xs_16382);
      i_16381 = G__16383;
      xs_16382 = G__16384;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var cljs$core$int_array = null;
  var cljs$core$int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return cljs$core$int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var cljs$core$int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__16387 = i + 1;
          var G__16388 = cljs.core.next(s__$1);
          i = G__16387;
          s__$1 = G__16388;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__5007__auto___16389 = size;
      var i_16390 = 0;
      while (true) {
        if (i_16390 < n__5007__auto___16389) {
          a[i_16390] = init_val_or_seq;
          var G__16391 = i_16390 + 1;
          i_16390 = G__16391;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  cljs$core$int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$int_array__1.call(this, size);
      case 2:
        return cljs$core$int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$int_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$int_array__1;
  cljs$core$int_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$int_array__2;
  return cljs$core$int_array;
}();
cljs.core.long_array = function() {
  var cljs$core$long_array = null;
  var cljs$core$long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return cljs$core$long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var cljs$core$long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__16394 = i + 1;
          var G__16395 = cljs.core.next(s__$1);
          i = G__16394;
          s__$1 = G__16395;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__5007__auto___16396 = size;
      var i_16397 = 0;
      while (true) {
        if (i_16397 < n__5007__auto___16396) {
          a[i_16397] = init_val_or_seq;
          var G__16398 = i_16397 + 1;
          i_16397 = G__16398;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  cljs$core$long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$long_array__1.call(this, size);
      case 2:
        return cljs$core$long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$long_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$long_array__1;
  cljs$core$long_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$long_array__2;
  return cljs$core$long_array;
}();
cljs.core.double_array = function() {
  var cljs$core$double_array = null;
  var cljs$core$double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return cljs$core$double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var cljs$core$double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__16401 = i + 1;
          var G__16402 = cljs.core.next(s__$1);
          i = G__16401;
          s__$1 = G__16402;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__5007__auto___16403 = size;
      var i_16404 = 0;
      while (true) {
        if (i_16404 < n__5007__auto___16403) {
          a[i_16404] = init_val_or_seq;
          var G__16405 = i_16404 + 1;
          i_16404 = G__16405;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  cljs$core$double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$double_array__1.call(this, size);
      case 2:
        return cljs$core$double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$double_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$double_array__1;
  cljs$core$double_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$double_array__2;
  return cljs$core$double_array;
}();
cljs.core.object_array = function() {
  var cljs$core$object_array = null;
  var cljs$core$object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return cljs$core$object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var cljs$core$object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__16408 = i + 1;
          var G__16409 = cljs.core.next(s__$1);
          i = G__16408;
          s__$1 = G__16409;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__5007__auto___16410 = size;
      var i_16411 = 0;
      while (true) {
        if (i_16411 < n__5007__auto___16410) {
          a[i_16411] = init_val_or_seq;
          var G__16412 = i_16411 + 1;
          i_16411 = G__16412;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  cljs$core$object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return cljs$core$object_array__1.call(this, size);
      case 2:
        return cljs$core$object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$object_array.cljs$core$IFn$_invoke$arity$1 = cljs$core$object_array__1;
  cljs$core$object_array.cljs$core$IFn$_invoke$arity$2 = cljs$core$object_array__2;
  return cljs$core$object_array;
}();
cljs.core.bounded_count = function cljs$core$bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__16413 = cljs.core.next(s__$1);
        var G__16414 = i - 1;
        var G__16415 = sum + 1;
        s__$1 = G__16413;
        i = G__16414;
        sum = G__16415;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs$core$spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function() {
  var cljs$core$concat = null;
  var cljs$core$concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var cljs$core$concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var cljs$core$concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq(x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_(s)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs$core$concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
        } else {
          return cljs.core.cons(cljs.core.first(s), cljs$core$concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var cljs$core$concat__3 = function() {
    var G__16435__delegate = function(x, y, zs) {
      var cat = function cljs$core$concat_$_cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq(xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
              return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$concat_$_cat(cljs.core.chunk_rest(xys__$1), zs__$1));
            } else {
              return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$concat_$_cat(cljs.core.rest(xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cljs$core$concat_$_cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat(cljs$core$concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
    };
    var G__16435 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        var G__16436__i = 0, G__16436__a = new Array(arguments.length - 2);
        while (G__16436__i < G__16436__a.length) {
          G__16436__a[G__16436__i] = arguments[G__16436__i + 2];
          ++G__16436__i;
        }
        zs = new cljs.core.IndexedSeq(G__16436__a, 0);
      }
      return G__16435__delegate.call(this, x, y, zs);
    };
    G__16435.cljs$lang$maxFixedArity = 2;
    G__16435.cljs$lang$applyTo = function(arglist__16437) {
      var x = cljs.core.first(arglist__16437);
      arglist__16437 = cljs.core.next(arglist__16437);
      var y = cljs.core.first(arglist__16437);
      var zs = cljs.core.rest(arglist__16437);
      return G__16435__delegate(x, y, zs);
    };
    G__16435.cljs$core$IFn$_invoke$arity$variadic = G__16435__delegate;
    return G__16435;
  }();
  cljs$core$concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$concat__0.call(this);
      case 1:
        return cljs$core$concat__1.call(this, x);
      case 2:
        return cljs$core$concat__2.call(this, x, y);
      default:
        var G__16438 = null;
        if (arguments.length > 2) {
          var G__16439__i = 0, G__16439__a = new Array(arguments.length - 2);
          while (G__16439__i < G__16439__a.length) {
            G__16439__a[G__16439__i] = arguments[G__16439__i + 2];
            ++G__16439__i;
          }
          G__16438 = new cljs.core.IndexedSeq(G__16439__a, 0);
        }
        return cljs$core$concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16438);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$concat.cljs$lang$maxFixedArity = 2;
  cljs$core$concat.cljs$lang$applyTo = cljs$core$concat__3.cljs$lang$applyTo;
  cljs$core$concat.cljs$core$IFn$_invoke$arity$0 = cljs$core$concat__0;
  cljs$core$concat.cljs$core$IFn$_invoke$arity$1 = cljs$core$concat__1;
  cljs$core$concat.cljs$core$IFn$_invoke$arity$2 = cljs$core$concat__2;
  cljs$core$concat.cljs$core$IFn$_invoke$arity$variadic = cljs$core$concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$concat;
}();
cljs.core.list_STAR_ = function() {
  var cljs$core$list_STAR_ = null;
  var cljs$core$list_STAR___1 = function(args) {
    return cljs.core.seq(args);
  };
  var cljs$core$list_STAR___2 = function(a, args) {
    return cljs.core.cons(a, args);
  };
  var cljs$core$list_STAR___3 = function(a, b, args) {
    return cljs.core.cons(a, cljs.core.cons(b, args));
  };
  var cljs$core$list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
  };
  var cljs$core$list_STAR___5 = function() {
    var G__16440__delegate = function(a, b, c, d, more) {
      return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
    };
    var G__16440 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__16441__i = 0, G__16441__a = new Array(arguments.length - 4);
        while (G__16441__i < G__16441__a.length) {
          G__16441__a[G__16441__i] = arguments[G__16441__i + 4];
          ++G__16441__i;
        }
        more = new cljs.core.IndexedSeq(G__16441__a, 0);
      }
      return G__16440__delegate.call(this, a, b, c, d, more);
    };
    G__16440.cljs$lang$maxFixedArity = 4;
    G__16440.cljs$lang$applyTo = function(arglist__16442) {
      var a = cljs.core.first(arglist__16442);
      arglist__16442 = cljs.core.next(arglist__16442);
      var b = cljs.core.first(arglist__16442);
      arglist__16442 = cljs.core.next(arglist__16442);
      var c = cljs.core.first(arglist__16442);
      arglist__16442 = cljs.core.next(arglist__16442);
      var d = cljs.core.first(arglist__16442);
      var more = cljs.core.rest(arglist__16442);
      return G__16440__delegate(a, b, c, d, more);
    };
    G__16440.cljs$core$IFn$_invoke$arity$variadic = G__16440__delegate;
    return G__16440;
  }();
  cljs$core$list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$list_STAR___1.call(this, a);
      case 2:
        return cljs$core$list_STAR___2.call(this, a, b);
      case 3:
        return cljs$core$list_STAR___3.call(this, a, b, c);
      case 4:
        return cljs$core$list_STAR___4.call(this, a, b, c, d);
      default:
        var G__16443 = null;
        if (arguments.length > 4) {
          var G__16444__i = 0, G__16444__a = new Array(arguments.length - 4);
          while (G__16444__i < G__16444__a.length) {
            G__16444__a[G__16444__i] = arguments[G__16444__i + 4];
            ++G__16444__i;
          }
          G__16443 = new cljs.core.IndexedSeq(G__16444__a, 0);
        }
        return cljs$core$list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, G__16443);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$list_STAR_.cljs$lang$maxFixedArity = 4;
  cljs$core$list_STAR_.cljs$lang$applyTo = cljs$core$list_STAR___5.cljs$lang$applyTo;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$1 = cljs$core$list_STAR___1;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$2 = cljs$core$list_STAR___2;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$3 = cljs$core$list_STAR___3;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$4 = cljs$core$list_STAR___4;
  cljs$core$list_STAR_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$list_STAR_;
}();
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function() {
  var cljs$core$conj_BANG_ = null;
  var cljs$core$conj_BANG___0 = function() {
    return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
  };
  var cljs$core$conj_BANG___1 = function(coll) {
    return coll;
  };
  var cljs$core$conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_(tcoll, val);
  };
  var cljs$core$conj_BANG___3 = function() {
    var G__16445__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__16446 = ntcoll;
          var G__16447 = cljs.core.first(vals);
          var G__16448 = cljs.core.next(vals);
          tcoll = G__16446;
          val = G__16447;
          vals = G__16448;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16445 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__16449__i = 0, G__16449__a = new Array(arguments.length - 2);
        while (G__16449__i < G__16449__a.length) {
          G__16449__a[G__16449__i] = arguments[G__16449__i + 2];
          ++G__16449__i;
        }
        vals = new cljs.core.IndexedSeq(G__16449__a, 0);
      }
      return G__16445__delegate.call(this, tcoll, val, vals);
    };
    G__16445.cljs$lang$maxFixedArity = 2;
    G__16445.cljs$lang$applyTo = function(arglist__16450) {
      var tcoll = cljs.core.first(arglist__16450);
      arglist__16450 = cljs.core.next(arglist__16450);
      var val = cljs.core.first(arglist__16450);
      var vals = cljs.core.rest(arglist__16450);
      return G__16445__delegate(tcoll, val, vals);
    };
    G__16445.cljs$core$IFn$_invoke$arity$variadic = G__16445__delegate;
    return G__16445;
  }();
  cljs$core$conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$conj_BANG___0.call(this);
      case 1:
        return cljs$core$conj_BANG___1.call(this, tcoll);
      case 2:
        return cljs$core$conj_BANG___2.call(this, tcoll, val);
      default:
        var G__16451 = null;
        if (arguments.length > 2) {
          var G__16452__i = 0, G__16452__a = new Array(arguments.length - 2);
          while (G__16452__i < G__16452__a.length) {
            G__16452__a[G__16452__i] = arguments[G__16452__i + 2];
            ++G__16452__i;
          }
          G__16451 = new cljs.core.IndexedSeq(G__16452__a, 0);
        }
        return cljs$core$conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__16451);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$conj_BANG_.cljs$lang$maxFixedArity = 2;
  cljs$core$conj_BANG_.cljs$lang$applyTo = cljs$core$conj_BANG___3.cljs$lang$applyTo;
  cljs$core$conj_BANG_.cljs$core$IFn$_invoke$arity$0 = cljs$core$conj_BANG___0;
  cljs$core$conj_BANG_.cljs$core$IFn$_invoke$arity$1 = cljs$core$conj_BANG___1;
  cljs$core$conj_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$conj_BANG___2;
  cljs$core$conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var cljs$core$assoc_BANG_ = null;
  var cljs$core$assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_(tcoll, key, val);
  };
  var cljs$core$assoc_BANG___4 = function() {
    var G__16453__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__16454 = ntcoll;
          var G__16455 = cljs.core.first(kvs);
          var G__16456 = cljs.core.second(kvs);
          var G__16457 = cljs.core.nnext(kvs);
          tcoll = G__16454;
          key = G__16455;
          val = G__16456;
          kvs = G__16457;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16453 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__16458__i = 0, G__16458__a = new Array(arguments.length - 3);
        while (G__16458__i < G__16458__a.length) {
          G__16458__a[G__16458__i] = arguments[G__16458__i + 3];
          ++G__16458__i;
        }
        kvs = new cljs.core.IndexedSeq(G__16458__a, 0);
      }
      return G__16453__delegate.call(this, tcoll, key, val, kvs);
    };
    G__16453.cljs$lang$maxFixedArity = 3;
    G__16453.cljs$lang$applyTo = function(arglist__16459) {
      var tcoll = cljs.core.first(arglist__16459);
      arglist__16459 = cljs.core.next(arglist__16459);
      var key = cljs.core.first(arglist__16459);
      arglist__16459 = cljs.core.next(arglist__16459);
      var val = cljs.core.first(arglist__16459);
      var kvs = cljs.core.rest(arglist__16459);
      return G__16453__delegate(tcoll, key, val, kvs);
    };
    G__16453.cljs$core$IFn$_invoke$arity$variadic = G__16453__delegate;
    return G__16453;
  }();
  cljs$core$assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$assoc_BANG___3.call(this, tcoll, key, val);
      default:
        var G__16460 = null;
        if (arguments.length > 3) {
          var G__16461__i = 0, G__16461__a = new Array(arguments.length - 3);
          while (G__16461__i < G__16461__a.length) {
            G__16461__a[G__16461__i] = arguments[G__16461__i + 3];
            ++G__16461__i;
          }
          G__16460 = new cljs.core.IndexedSeq(G__16461__a, 0);
        }
        return cljs$core$assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, G__16460);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$assoc_BANG_.cljs$lang$maxFixedArity = 3;
  cljs$core$assoc_BANG_.cljs$lang$applyTo = cljs$core$assoc_BANG___4.cljs$lang$applyTo;
  cljs$core$assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = cljs$core$assoc_BANG___3;
  cljs$core$assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var cljs$core$dissoc_BANG_ = null;
  var cljs$core$dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_(tcoll, key);
  };
  var cljs$core$dissoc_BANG___3 = function() {
    var G__16462__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__16463 = ntcoll;
          var G__16464 = cljs.core.first(ks);
          var G__16465 = cljs.core.next(ks);
          tcoll = G__16463;
          key = G__16464;
          ks = G__16465;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16462 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__16466__i = 0, G__16466__a = new Array(arguments.length - 2);
        while (G__16466__i < G__16466__a.length) {
          G__16466__a[G__16466__i] = arguments[G__16466__i + 2];
          ++G__16466__i;
        }
        ks = new cljs.core.IndexedSeq(G__16466__a, 0);
      }
      return G__16462__delegate.call(this, tcoll, key, ks);
    };
    G__16462.cljs$lang$maxFixedArity = 2;
    G__16462.cljs$lang$applyTo = function(arglist__16467) {
      var tcoll = cljs.core.first(arglist__16467);
      arglist__16467 = cljs.core.next(arglist__16467);
      var key = cljs.core.first(arglist__16467);
      var ks = cljs.core.rest(arglist__16467);
      return G__16462__delegate(tcoll, key, ks);
    };
    G__16462.cljs$core$IFn$_invoke$arity$variadic = G__16462__delegate;
    return G__16462;
  }();
  cljs$core$dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$dissoc_BANG___2.call(this, tcoll, key);
      default:
        var G__16468 = null;
        if (arguments.length > 2) {
          var G__16469__i = 0, G__16469__a = new Array(arguments.length - 2);
          while (G__16469__i < G__16469__a.length) {
            G__16469__a[G__16469__i] = arguments[G__16469__i + 2];
            ++G__16469__i;
          }
          G__16468 = new cljs.core.IndexedSeq(G__16469__a, 0);
        }
        return cljs$core$dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, G__16468);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  cljs$core$dissoc_BANG_.cljs$lang$applyTo = cljs$core$dissoc_BANG___3.cljs$lang$applyTo;
  cljs$core$dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$dissoc_BANG___2;
  cljs$core$dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function() {
  var cljs$core$disj_BANG_ = null;
  var cljs$core$disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_(tcoll, val);
  };
  var cljs$core$disj_BANG___3 = function() {
    var G__16470__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__16471 = ntcoll;
          var G__16472 = cljs.core.first(vals);
          var G__16473 = cljs.core.next(vals);
          tcoll = G__16471;
          val = G__16472;
          vals = G__16473;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16470 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__16474__i = 0, G__16474__a = new Array(arguments.length - 2);
        while (G__16474__i < G__16474__a.length) {
          G__16474__a[G__16474__i] = arguments[G__16474__i + 2];
          ++G__16474__i;
        }
        vals = new cljs.core.IndexedSeq(G__16474__a, 0);
      }
      return G__16470__delegate.call(this, tcoll, val, vals);
    };
    G__16470.cljs$lang$maxFixedArity = 2;
    G__16470.cljs$lang$applyTo = function(arglist__16475) {
      var tcoll = cljs.core.first(arglist__16475);
      arglist__16475 = cljs.core.next(arglist__16475);
      var val = cljs.core.first(arglist__16475);
      var vals = cljs.core.rest(arglist__16475);
      return G__16470__delegate(tcoll, val, vals);
    };
    G__16470.cljs$core$IFn$_invoke$arity$variadic = G__16470__delegate;
    return G__16470;
  }();
  cljs$core$disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$disj_BANG___2.call(this, tcoll, val);
      default:
        var G__16476 = null;
        if (arguments.length > 2) {
          var G__16477__i = 0, G__16477__a = new Array(arguments.length - 2);
          while (G__16477__i < G__16477__a.length) {
            G__16477__a[G__16477__i] = arguments[G__16477__i + 2];
            ++G__16477__i;
          }
          G__16476 = new cljs.core.IndexedSeq(G__16477__a, 0);
        }
        return cljs$core$disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__16476);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$disj_BANG_.cljs$lang$maxFixedArity = 2;
  cljs$core$disj_BANG_.cljs$lang$applyTo = cljs$core$disj_BANG___3.cljs$lang$applyTo;
  cljs$core$disj_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$disj_BANG___2;
  cljs$core$disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$disj_BANG_;
}();
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a5051 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a5051);
      } else {
        var G__16688 = a5051;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16688) : f.call(null, G__16688);
      }
    } else {
      var b5052 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a5051, b5052);
        } else {
          var G__16689 = a5051;
          var G__16690 = b5052;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16689, G__16690) : f.call(null, G__16689, G__16690);
        }
      } else {
        var c5053 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a5051, b5052, c5053);
          } else {
            var G__16691 = a5051;
            var G__16692 = b5052;
            var G__16693 = c5053;
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16691, G__16692, G__16693) : f.call(null, G__16691, G__16692, G__16693);
          }
        } else {
          var d5054 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a5051, b5052, c5053, d5054);
            } else {
              var G__16694 = a5051;
              var G__16695 = b5052;
              var G__16696 = c5053;
              var G__16697 = d5054;
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__16694, G__16695, G__16696, G__16697) : f.call(null, G__16694, G__16695, G__16696, G__16697);
            }
          } else {
            var e5055 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a5051, b5052, c5053, d5054, e5055);
              } else {
                var G__16698 = a5051;
                var G__16699 = b5052;
                var G__16700 = c5053;
                var G__16701 = d5054;
                var G__16702 = e5055;
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__16698, G__16699, G__16700, G__16701, G__16702) : f.call(null, G__16698, G__16699, G__16700, G__16701, G__16702);
              }
            } else {
              var f5056 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a5051, b5052, c5053, d5054, e5055, f5056);
                } else {
                  var G__16703 = a5051;
                  var G__16704 = b5052;
                  var G__16705 = c5053;
                  var G__16706 = d5054;
                  var G__16707 = e5055;
                  var G__16708 = f5056;
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__16703, G__16704, G__16705, G__16706, G__16707, G__16708) : f.call(null, G__16703, G__16704, G__16705, G__16706, G__16707, G__16708);
                }
              } else {
                var g5057 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a5051, b5052, c5053, d5054, e5055, f5056, g5057);
                  } else {
                    var G__16709 = a5051;
                    var G__16710 = b5052;
                    var G__16711 = c5053;
                    var G__16712 = d5054;
                    var G__16713 = e5055;
                    var G__16714 = f5056;
                    var G__16715 = g5057;
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(G__16709, G__16710, G__16711, G__16712, G__16713, G__16714, G__16715) : f.call(null, G__16709, G__16710, G__16711, G__16712, G__16713, G__16714, G__16715);
                  }
                } else {
                  var h5058 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058);
                    } else {
                      var G__16716 = a5051;
                      var G__16717 = b5052;
                      var G__16718 = c5053;
                      var G__16719 = d5054;
                      var G__16720 = e5055;
                      var G__16721 = f5056;
                      var G__16722 = g5057;
                      var G__16723 = h5058;
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(G__16716, G__16717, G__16718, G__16719, G__16720, G__16721, G__16722, G__16723) : f.call(null, G__16716, G__16717, G__16718, G__16719, G__16720, G__16721, G__16722, G__16723);
                    }
                  } else {
                    var i5059 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059);
                      } else {
                        var G__16724 = a5051;
                        var G__16725 = b5052;
                        var G__16726 = c5053;
                        var G__16727 = d5054;
                        var G__16728 = e5055;
                        var G__16729 = f5056;
                        var G__16730 = g5057;
                        var G__16731 = h5058;
                        var G__16732 = i5059;
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(G__16724, G__16725, G__16726, G__16727, G__16728, G__16729, G__16730, G__16731, G__16732) : f.call(null, G__16724, G__16725, G__16726, G__16727, G__16728, G__16729, G__16730, G__16731, G__16732);
                      }
                    } else {
                      var j5060 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060);
                        } else {
                          var G__16733 = a5051;
                          var G__16734 = b5052;
                          var G__16735 = c5053;
                          var G__16736 = d5054;
                          var G__16737 = e5055;
                          var G__16738 = f5056;
                          var G__16739 = g5057;
                          var G__16740 = h5058;
                          var G__16741 = i5059;
                          var G__16742 = j5060;
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(G__16733, G__16734, G__16735, G__16736, G__16737, G__16738, G__16739, G__16740, G__16741, G__16742) : f.call(null, G__16733, G__16734, G__16735, G__16736, G__16737, G__16738, G__16739, G__16740, G__16741, G__16742);
                        }
                      } else {
                        var k5061 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061);
                          } else {
                            var G__16743 = a5051;
                            var G__16744 = b5052;
                            var G__16745 = c5053;
                            var G__16746 = d5054;
                            var G__16747 = e5055;
                            var G__16748 = f5056;
                            var G__16749 = g5057;
                            var G__16750 = h5058;
                            var G__16751 = i5059;
                            var G__16752 = j5060;
                            var G__16753 = k5061;
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(G__16743, G__16744, G__16745, G__16746, G__16747, G__16748, G__16749, G__16750, G__16751, G__16752, G__16753) : f.call(null, G__16743, G__16744, G__16745, G__16746, G__16747, G__16748, G__16749, G__16750, G__16751, G__16752, G__16753);
                          }
                        } else {
                          var l5062 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062);
                            } else {
                              var G__16754 = a5051;
                              var G__16755 = b5052;
                              var G__16756 = c5053;
                              var G__16757 = d5054;
                              var G__16758 = e5055;
                              var G__16759 = f5056;
                              var G__16760 = g5057;
                              var G__16761 = h5058;
                              var G__16762 = i5059;
                              var G__16763 = j5060;
                              var G__16764 = k5061;
                              var G__16765 = l5062;
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(G__16754, G__16755, G__16756, G__16757, G__16758, G__16759, G__16760, G__16761, G__16762, G__16763, G__16764, G__16765) : f.call(null, G__16754, G__16755, G__16756, G__16757, G__16758, G__16759, G__16760, G__16761, G__16762, G__16763, G__16764, G__16765);
                            }
                          } else {
                            var m5063 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063);
                              } else {
                                var G__16766 = a5051;
                                var G__16767 = b5052;
                                var G__16768 = c5053;
                                var G__16769 = d5054;
                                var G__16770 = e5055;
                                var G__16771 = f5056;
                                var G__16772 = g5057;
                                var G__16773 = h5058;
                                var G__16774 = i5059;
                                var G__16775 = j5060;
                                var G__16776 = k5061;
                                var G__16777 = l5062;
                                var G__16778 = m5063;
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(G__16766, G__16767, G__16768, G__16769, G__16770, G__16771, G__16772, G__16773, G__16774, G__16775, G__16776, G__16777, G__16778) : f.call(null, G__16766, G__16767, G__16768, G__16769, G__16770, G__16771, G__16772, G__16773, G__16774, G__16775, G__16776, G__16777, G__16778);
                              }
                            } else {
                              var n5064 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064);
                                } else {
                                  var G__16779 = a5051;
                                  var G__16780 = b5052;
                                  var G__16781 = c5053;
                                  var G__16782 = d5054;
                                  var G__16783 = e5055;
                                  var G__16784 = f5056;
                                  var G__16785 = g5057;
                                  var G__16786 = h5058;
                                  var G__16787 = i5059;
                                  var G__16788 = j5060;
                                  var G__16789 = k5061;
                                  var G__16790 = l5062;
                                  var G__16791 = m5063;
                                  var G__16792 = n5064;
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(G__16779, G__16780, G__16781, G__16782, G__16783, G__16784, G__16785, G__16786, G__16787, G__16788, G__16789, G__16790, G__16791, G__16792) : f.call(null, G__16779, G__16780, G__16781, G__16782, G__16783, G__16784, G__16785, G__16786, G__16787, G__16788, G__16789, G__16790, G__16791, G__16792);
                                }
                              } else {
                                var o5065 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064, o5065);
                                  } else {
                                    var G__16793 = a5051;
                                    var G__16794 = b5052;
                                    var G__16795 = c5053;
                                    var G__16796 = d5054;
                                    var G__16797 = e5055;
                                    var G__16798 = f5056;
                                    var G__16799 = g5057;
                                    var G__16800 = h5058;
                                    var G__16801 = i5059;
                                    var G__16802 = j5060;
                                    var G__16803 = k5061;
                                    var G__16804 = l5062;
                                    var G__16805 = m5063;
                                    var G__16806 = n5064;
                                    var G__16807 = o5065;
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(G__16793, G__16794, G__16795, G__16796, G__16797, G__16798, G__16799, G__16800, G__16801, G__16802, G__16803, G__16804, G__16805, G__16806, G__16807) : f.call(null, G__16793, G__16794, G__16795, G__16796, G__16797, G__16798, G__16799, G__16800, G__16801, G__16802, G__16803, G__16804, G__16805, G__16806, G__16807);
                                  }
                                } else {
                                  var p5066 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064, o5065, p5066);
                                    } else {
                                      var G__16808 = a5051;
                                      var G__16809 = b5052;
                                      var G__16810 = c5053;
                                      var G__16811 = d5054;
                                      var G__16812 = e5055;
                                      var G__16813 = f5056;
                                      var G__16814 = g5057;
                                      var G__16815 = h5058;
                                      var G__16816 = i5059;
                                      var G__16817 = j5060;
                                      var G__16818 = k5061;
                                      var G__16819 = l5062;
                                      var G__16820 = m5063;
                                      var G__16821 = n5064;
                                      var G__16822 = o5065;
                                      var G__16823 = p5066;
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(G__16808, G__16809, G__16810, G__16811, G__16812, G__16813, G__16814, G__16815, G__16816, G__16817, G__16818, G__16819, G__16820, G__16821, G__16822, G__16823) : f.call(null, G__16808, G__16809, G__16810, G__16811, G__16812, G__16813, G__16814, G__16815, G__16816, G__16817, G__16818, G__16819, G__16820, G__16821, G__16822, G__16823);
                                    }
                                  } else {
                                    var q5067 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064, o5065, p5066, q5067);
                                      } else {
                                        var G__16824 = a5051;
                                        var G__16825 = b5052;
                                        var G__16826 = c5053;
                                        var G__16827 = d5054;
                                        var G__16828 = e5055;
                                        var G__16829 = f5056;
                                        var G__16830 = g5057;
                                        var G__16831 = h5058;
                                        var G__16832 = i5059;
                                        var G__16833 = j5060;
                                        var G__16834 = k5061;
                                        var G__16835 = l5062;
                                        var G__16836 = m5063;
                                        var G__16837 = n5064;
                                        var G__16838 = o5065;
                                        var G__16839 = p5066;
                                        var G__16840 = q5067;
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(G__16824, G__16825, G__16826, G__16827, G__16828, G__16829, G__16830, G__16831, G__16832, G__16833, G__16834, G__16835, G__16836, G__16837, G__16838, G__16839, G__16840) : f.call(null, G__16824, G__16825, G__16826, G__16827, G__16828, G__16829, G__16830, G__16831, G__16832, G__16833, G__16834, G__16835, G__16836, G__16837, G__16838, G__16839, G__16840);
                                      }
                                    } else {
                                      var r5068 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064, o5065, p5066, q5067, r5068);
                                        } else {
                                          var G__16841 = a5051;
                                          var G__16842 = b5052;
                                          var G__16843 = c5053;
                                          var G__16844 = d5054;
                                          var G__16845 = e5055;
                                          var G__16846 = f5056;
                                          var G__16847 = g5057;
                                          var G__16848 = h5058;
                                          var G__16849 = i5059;
                                          var G__16850 = j5060;
                                          var G__16851 = k5061;
                                          var G__16852 = l5062;
                                          var G__16853 = m5063;
                                          var G__16854 = n5064;
                                          var G__16855 = o5065;
                                          var G__16856 = p5066;
                                          var G__16857 = q5067;
                                          var G__16858 = r5068;
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(G__16841, G__16842, G__16843, G__16844, G__16845, G__16846, G__16847, G__16848, G__16849, G__16850, G__16851, G__16852, G__16853, G__16854, G__16855, G__16856, G__16857, G__16858) : f.call(null, G__16841, G__16842, G__16843, G__16844, G__16845, G__16846, G__16847, G__16848, G__16849, G__16850, G__16851, G__16852, G__16853, G__16854, G__16855, G__16856, G__16857, G__16858);
                                        }
                                      } else {
                                        var s5069 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064, o5065, p5066, q5067, r5068, s5069);
                                          } else {
                                            var G__16859 = a5051;
                                            var G__16860 = b5052;
                                            var G__16861 = c5053;
                                            var G__16862 = d5054;
                                            var G__16863 = e5055;
                                            var G__16864 = f5056;
                                            var G__16865 = g5057;
                                            var G__16866 = h5058;
                                            var G__16867 = i5059;
                                            var G__16868 = j5060;
                                            var G__16869 = k5061;
                                            var G__16870 = l5062;
                                            var G__16871 = m5063;
                                            var G__16872 = n5064;
                                            var G__16873 = o5065;
                                            var G__16874 = p5066;
                                            var G__16875 = q5067;
                                            var G__16876 = r5068;
                                            var G__16877 = s5069;
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(G__16859, G__16860, G__16861, G__16862, G__16863, G__16864, G__16865, G__16866, G__16867, G__16868, G__16869, G__16870, G__16871, G__16872, G__16873, G__16874, G__16875, G__16876, G__16877) : f.call(null, G__16859, G__16860, G__16861, G__16862, G__16863, G__16864, G__16865, G__16866, G__16867, G__16868, G__16869, G__16870, G__16871, G__16872, G__16873, G__16874, G__16875, G__16876, 
                                            G__16877);
                                          }
                                        } else {
                                          var t5070 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a5051, b5052, c5053, d5054, e5055, f5056, g5057, h5058, i5059, j5060, k5061, l5062, m5063, n5064, o5065, p5066, q5067, r5068, s5069, t5070);
                                            } else {
                                              var G__16878 = a5051;
                                              var G__16879 = b5052;
                                              var G__16880 = c5053;
                                              var G__16881 = d5054;
                                              var G__16882 = e5055;
                                              var G__16883 = f5056;
                                              var G__16884 = g5057;
                                              var G__16885 = h5058;
                                              var G__16886 = i5059;
                                              var G__16887 = j5060;
                                              var G__16888 = k5061;
                                              var G__16889 = l5062;
                                              var G__16890 = m5063;
                                              var G__16891 = n5064;
                                              var G__16892 = o5065;
                                              var G__16893 = p5066;
                                              var G__16894 = q5067;
                                              var G__16895 = r5068;
                                              var G__16896 = s5069;
                                              var G__16897 = t5070;
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(G__16878, G__16879, G__16880, G__16881, G__16882, G__16883, G__16884, G__16885, G__16886, G__16887, G__16888, G__16889, G__16890, G__16891, G__16892, G__16893, G__16894, G__16895, G__16896, G__16897) : f.call(null, G__16878, G__16879, G__16880, G__16881, G__16882, G__16883, G__16884, G__16885, G__16886, G__16887, G__16888, G__16889, G__16890, G__16891, G__16892, G__16893, G__16894, 
                                              G__16895, G__16896, G__16897);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var cljs$core$apply = null;
  var cljs$core$apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array(args));
    }
  };
  var cljs$core$apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var cljs$core$apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var cljs$core$apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var cljs$core$apply__6 = function() {
    var G__16898__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to(f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array(arglist));
      }
    };
    var G__16898 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        var G__16899__i = 0, G__16899__a = new Array(arguments.length - 5);
        while (G__16899__i < G__16899__a.length) {
          G__16899__a[G__16899__i] = arguments[G__16899__i + 5];
          ++G__16899__i;
        }
        args = new cljs.core.IndexedSeq(G__16899__a, 0);
      }
      return G__16898__delegate.call(this, f, a, b, c, d, args);
    };
    G__16898.cljs$lang$maxFixedArity = 5;
    G__16898.cljs$lang$applyTo = function(arglist__16900) {
      var f = cljs.core.first(arglist__16900);
      arglist__16900 = cljs.core.next(arglist__16900);
      var a = cljs.core.first(arglist__16900);
      arglist__16900 = cljs.core.next(arglist__16900);
      var b = cljs.core.first(arglist__16900);
      arglist__16900 = cljs.core.next(arglist__16900);
      var c = cljs.core.first(arglist__16900);
      arglist__16900 = cljs.core.next(arglist__16900);
      var d = cljs.core.first(arglist__16900);
      var args = cljs.core.rest(arglist__16900);
      return G__16898__delegate(f, a, b, c, d, args);
    };
    G__16898.cljs$core$IFn$_invoke$arity$variadic = G__16898__delegate;
    return G__16898;
  }();
  cljs$core$apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$apply__2.call(this, f, a);
      case 3:
        return cljs$core$apply__3.call(this, f, a, b);
      case 4:
        return cljs$core$apply__4.call(this, f, a, b, c);
      case 5:
        return cljs$core$apply__5.call(this, f, a, b, c, d);
      default:
        var G__16901 = null;
        if (arguments.length > 5) {
          var G__16902__i = 0, G__16902__a = new Array(arguments.length - 5);
          while (G__16902__i < G__16902__a.length) {
            G__16902__a[G__16902__i] = arguments[G__16902__i + 5];
            ++G__16902__i;
          }
          G__16901 = new cljs.core.IndexedSeq(G__16902__a, 0);
        }
        return cljs$core$apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, G__16901);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$apply.cljs$lang$maxFixedArity = 5;
  cljs$core$apply.cljs$lang$applyTo = cljs$core$apply__6.cljs$lang$applyTo;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$2 = cljs$core$apply__2;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$3 = cljs$core$apply__3;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$4 = cljs$core$apply__4;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$5 = cljs$core$apply__5;
  cljs$core$apply.cljs$core$IFn$_invoke$arity$variadic = cljs$core$apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$apply;
}();
cljs.core.vary_meta = function() {
  var cljs$core$vary_meta = null;
  var cljs$core$vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta(obj, function() {
      var G__16918 = cljs.core.meta(obj);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16918) : f.call(null, G__16918);
    }());
  };
  var cljs$core$vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta(obj, function() {
      var G__16919 = cljs.core.meta(obj);
      var G__16920 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16919, G__16920) : f.call(null, G__16919, G__16920);
    }());
  };
  var cljs$core$vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta(obj, function() {
      var G__16921 = cljs.core.meta(obj);
      var G__16922 = a;
      var G__16923 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16921, G__16922, G__16923) : f.call(null, G__16921, G__16922, G__16923);
    }());
  };
  var cljs$core$vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta(obj, function() {
      var G__16924 = cljs.core.meta(obj);
      var G__16925 = a;
      var G__16926 = b;
      var G__16927 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__16924, G__16925, G__16926, G__16927) : f.call(null, G__16924, G__16925, G__16926, G__16927);
    }());
  };
  var cljs$core$vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta(obj, function() {
      var G__16928 = cljs.core.meta(obj);
      var G__16929 = a;
      var G__16930 = b;
      var G__16931 = c;
      var G__16932 = d;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__16928, G__16929, G__16930, G__16931, G__16932) : f.call(null, G__16928, G__16929, G__16930, G__16931, G__16932);
    }());
  };
  var cljs$core$vary_meta__7 = function() {
    var G__16933__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
    };
    var G__16933 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__16934__i = 0, G__16934__a = new Array(arguments.length - 6);
        while (G__16934__i < G__16934__a.length) {
          G__16934__a[G__16934__i] = arguments[G__16934__i + 6];
          ++G__16934__i;
        }
        args = new cljs.core.IndexedSeq(G__16934__a, 0);
      }
      return G__16933__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__16933.cljs$lang$maxFixedArity = 6;
    G__16933.cljs$lang$applyTo = function(arglist__16935) {
      var obj = cljs.core.first(arglist__16935);
      arglist__16935 = cljs.core.next(arglist__16935);
      var f = cljs.core.first(arglist__16935);
      arglist__16935 = cljs.core.next(arglist__16935);
      var a = cljs.core.first(arglist__16935);
      arglist__16935 = cljs.core.next(arglist__16935);
      var b = cljs.core.first(arglist__16935);
      arglist__16935 = cljs.core.next(arglist__16935);
      var c = cljs.core.first(arglist__16935);
      arglist__16935 = cljs.core.next(arglist__16935);
      var d = cljs.core.first(arglist__16935);
      var args = cljs.core.rest(arglist__16935);
      return G__16933__delegate(obj, f, a, b, c, d, args);
    };
    G__16933.cljs$core$IFn$_invoke$arity$variadic = G__16933__delegate;
    return G__16933;
  }();
  cljs$core$vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$vary_meta__2.call(this, obj, f);
      case 3:
        return cljs$core$vary_meta__3.call(this, obj, f, a);
      case 4:
        return cljs$core$vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return cljs$core$vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return cljs$core$vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        var G__16936 = null;
        if (arguments.length > 6) {
          var G__16937__i = 0, G__16937__a = new Array(arguments.length - 6);
          while (G__16937__i < G__16937__a.length) {
            G__16937__a[G__16937__i] = arguments[G__16937__i + 6];
            ++G__16937__i;
          }
          G__16936 = new cljs.core.IndexedSeq(G__16937__a, 0);
        }
        return cljs$core$vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, G__16936);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$vary_meta.cljs$lang$maxFixedArity = 6;
  cljs$core$vary_meta.cljs$lang$applyTo = cljs$core$vary_meta__7.cljs$lang$applyTo;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$2 = cljs$core$vary_meta__2;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$3 = cljs$core$vary_meta__3;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$4 = cljs$core$vary_meta__4;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$5 = cljs$core$vary_meta__5;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$6 = cljs$core$vary_meta__6;
  cljs$core$vary_meta.cljs$core$IFn$_invoke$arity$variadic = cljs$core$vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var cljs$core$not_EQ_ = null;
  var cljs$core$not_EQ___1 = function(x) {
    return false;
  };
  var cljs$core$not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var cljs$core$not_EQ___3 = function() {
    var G__16938__delegate = function(x, y, more) {
      return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
    };
    var G__16938 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__16939__i = 0, G__16939__a = new Array(arguments.length - 2);
        while (G__16939__i < G__16939__a.length) {
          G__16939__a[G__16939__i] = arguments[G__16939__i + 2];
          ++G__16939__i;
        }
        more = new cljs.core.IndexedSeq(G__16939__a, 0);
      }
      return G__16938__delegate.call(this, x, y, more);
    };
    G__16938.cljs$lang$maxFixedArity = 2;
    G__16938.cljs$lang$applyTo = function(arglist__16940) {
      var x = cljs.core.first(arglist__16940);
      arglist__16940 = cljs.core.next(arglist__16940);
      var y = cljs.core.first(arglist__16940);
      var more = cljs.core.rest(arglist__16940);
      return G__16938__delegate(x, y, more);
    };
    G__16938.cljs$core$IFn$_invoke$arity$variadic = G__16938__delegate;
    return G__16938;
  }();
  cljs$core$not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$not_EQ___1.call(this, x);
      case 2:
        return cljs$core$not_EQ___2.call(this, x, y);
      default:
        var G__16941 = null;
        if (arguments.length > 2) {
          var G__16942__i = 0, G__16942__a = new Array(arguments.length - 2);
          while (G__16942__i < G__16942__a.length) {
            G__16942__a[G__16942__i] = arguments[G__16942__i + 2];
            ++G__16942__i;
          }
          G__16941 = new cljs.core.IndexedSeq(G__16942__a, 0);
        }
        return cljs$core$not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16941);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$not_EQ_.cljs$lang$maxFixedArity = 2;
  cljs$core$not_EQ_.cljs$lang$applyTo = cljs$core$not_EQ___3.cljs$lang$applyTo;
  cljs$core$not_EQ_.cljs$core$IFn$_invoke$arity$1 = cljs$core$not_EQ___1;
  cljs$core$not_EQ_.cljs$core$IFn$_invoke$arity$2 = cljs$core$not_EQ___2;
  cljs$core$not_EQ_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$not_EQ_;
}();
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t16946 !== "undefined") {
  } else {
    cljs.core.t16946 = function(nil_iter, meta16947) {
      this.nil_iter = nil_iter;
      this.meta16947 = meta16947;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t16946.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t16946.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t16946.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t16946.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16948) {
      var self__ = this;
      var _16948__$1 = this;
      return self__.meta16947;
    };
    cljs.core.t16946.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16948, meta16947__$1) {
      var self__ = this;
      var _16948__$1 = this;
      return new cljs.core.t16946(self__.nil_iter, meta16947__$1);
    };
    cljs.core.t16946.cljs$lang$type = true;
    cljs.core.t16946.cljs$lang$ctorStr = "cljs.core/t16946";
    cljs.core.t16946.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write(writer__4702__auto__, "cljs.core/t16946");
    };
    cljs.core.__GT_t16946 = function cljs$core$nil_iter_$___GT_t16946(nil_iter__$1, meta16947) {
      return new cljs.core.t16946(nil_iter__$1, meta16947);
    };
  }
  return new cljs.core.t16946(cljs$core$nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.iterable_QMARK_(coll)) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = !(lt.stepper == null);
      if (and__4110__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__4110__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__16949 = lt;
        var G__16950 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__16949, G__16950) : self__.xform.call(null, G__16949, G__16950);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__16951 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__16951) : self__.xform.call(null, G__16951);
  }
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(function() {
    var G__16953 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__16953) : xform.call(null, G__16953);
  }(), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__16955 = cljs.core.next(iters__$1);
        iters__$1 = G__16955;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__5007__auto___16956 = self__.iters.length;
  var i_16957 = 0;
  while (true) {
    if (i_16957 < n__5007__auto___16956) {
      self__.nexts[i_16957] = self__.iters[i_16957].next();
      var G__16958 = i_16957 + 1;
      i_16957 = G__16958;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = !(lt.stepper == null);
      if (and__4110__auto__) {
        return this$.hasNext();
      } else {
        return and__4110__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__16954 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__16954) : self__.xform.call(null, G__16954);
  }
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var cljs$core$multi_stepper = null;
  var cljs$core$multi_stepper__2 = function(xform, iters) {
    return cljs$core$multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
  };
  var cljs$core$multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var cljs$core$multi_stepper_$_stepfn = null;
      var cljs$core$multi_stepper_$_stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
        lt.stepper = null;
        return lt;
      };
      var cljs$core$multi_stepper_$_stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer(lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      cljs$core$multi_stepper_$_stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return cljs$core$multi_stepper_$_stepfn__1.call(this, result);
          case 2:
            return cljs$core$multi_stepper_$_stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$multi_stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$multi_stepper_$_stepfn__1;
      cljs$core$multi_stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$multi_stepper_$_stepfn__2;
      return cljs$core$multi_stepper_$_stepfn;
    }();
    return new cljs.core.MultiStepper(function() {
      var G__16963 = stepfn;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__16963) : xform.call(null, G__16963);
    }(), iters, nexts);
  };
  cljs$core$multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return cljs$core$multi_stepper__2.call(this, xform, iters);
      case 3:
        return cljs$core$multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$multi_stepper.cljs$core$IFn$_invoke$arity$2 = cljs$core$multi_stepper__2;
  cljs$core$multi_stepper.cljs$core$IFn$_invoke$arity$3 = cljs$core$multi_stepper__3;
  return cljs$core$multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__16964_16968 = cljs.core.seq(colls);
  var chunk__16965_16969 = null;
  var count__16966_16970 = 0;
  var i__16967_16971 = 0;
  while (true) {
    if (i__16967_16971 < count__16966_16970) {
      var coll_16972 = chunk__16965_16969.cljs$core$IIndexed$_nth$arity$2(null, i__16967_16971);
      iters.push(cljs.core.iter(coll_16972));
      var G__16973 = seq__16964_16968;
      var G__16974 = chunk__16965_16969;
      var G__16975 = count__16966_16970;
      var G__16976 = i__16967_16971 + 1;
      seq__16964_16968 = G__16973;
      chunk__16965_16969 = G__16974;
      count__16966_16970 = G__16975;
      i__16967_16971 = G__16976;
      continue;
    } else {
      var temp__4126__auto___16977 = cljs.core.seq(seq__16964_16968);
      if (temp__4126__auto___16977) {
        var seq__16964_16978__$1 = temp__4126__auto___16977;
        if (cljs.core.chunked_seq_QMARK_(seq__16964_16978__$1)) {
          var c__4907__auto___16979 = cljs.core.chunk_first(seq__16964_16978__$1);
          var G__16980 = cljs.core.chunk_rest(seq__16964_16978__$1);
          var G__16981 = c__4907__auto___16979;
          var G__16982 = cljs.core.count(c__4907__auto___16979);
          var G__16983 = 0;
          seq__16964_16968 = G__16980;
          chunk__16965_16969 = G__16981;
          count__16966_16970 = G__16982;
          i__16967_16971 = G__16983;
          continue;
        } else {
          var coll_16984 = cljs.core.first(seq__16964_16978__$1);
          iters.push(cljs.core.iter(coll_16984));
          var G__16985 = cljs.core.next(seq__16964_16978__$1);
          var G__16986 = null;
          var G__16987 = 0;
          var G__16988 = 0;
          seq__16964_16968 = G__16985;
          chunk__16965_16969 = G__16986;
          count__16966_16970 = G__16987;
          i__16967_16971 = G__16988;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var cljs$core$sequence = null;
  var cljs$core$sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_(coll)) {
      return coll;
    } else {
      var or__4122__auto__ = cljs.core.seq(coll);
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var cljs$core$sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var cljs$core$sequence__3 = function() {
    var G__16989__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
    };
    var G__16989 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__16990__i = 0, G__16990__a = new Array(arguments.length - 2);
        while (G__16990__i < G__16990__a.length) {
          G__16990__a[G__16990__i] = arguments[G__16990__i + 2];
          ++G__16990__i;
        }
        colls = new cljs.core.IndexedSeq(G__16990__a, 0);
      }
      return G__16989__delegate.call(this, xform, coll, colls);
    };
    G__16989.cljs$lang$maxFixedArity = 2;
    G__16989.cljs$lang$applyTo = function(arglist__16991) {
      var xform = cljs.core.first(arglist__16991);
      arglist__16991 = cljs.core.next(arglist__16991);
      var coll = cljs.core.first(arglist__16991);
      var colls = cljs.core.rest(arglist__16991);
      return G__16989__delegate(xform, coll, colls);
    };
    G__16989.cljs$core$IFn$_invoke$arity$variadic = G__16989__delegate;
    return G__16989;
  }();
  cljs$core$sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$sequence__1.call(this, xform);
      case 2:
        return cljs$core$sequence__2.call(this, xform, coll);
      default:
        var G__16992 = null;
        if (arguments.length > 2) {
          var G__16993__i = 0, G__16993__a = new Array(arguments.length - 2);
          while (G__16993__i < G__16993__a.length) {
            G__16993__a[G__16993__i] = arguments[G__16993__i + 2];
            ++G__16993__i;
          }
          G__16992 = new cljs.core.IndexedSeq(G__16993__a, 0);
        }
        return cljs$core$sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, G__16992);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$sequence.cljs$lang$maxFixedArity = 2;
  cljs$core$sequence.cljs$lang$applyTo = cljs$core$sequence__3.cljs$lang$applyTo;
  cljs$core$sequence.cljs$core$IFn$_invoke$arity$1 = cljs$core$sequence__1;
  cljs$core$sequence.cljs$core$IFn$_invoke$arity$2 = cljs$core$sequence__2;
  cljs$core$sequence.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$sequence;
}();
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__16995 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__16995) : pred.call(null, G__16995);
      }())) {
        var G__16996 = pred;
        var G__16997 = cljs.core.next(coll);
        pred = G__16996;
        coll = G__16997;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__4122__auto__ = function() {
        var G__17001 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__17001) : pred.call(null, G__17001);
      }();
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        var G__17002 = pred;
        var G__17003 = cljs.core.next(coll);
        pred = G__17002;
        coll = G__17003;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return!cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__17010 = null;
    var G__17010__0 = function() {
      return cljs.core.not(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    };
    var G__17010__1 = function(x) {
      return cljs.core.not(function() {
        var G__17007 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17007) : f.call(null, G__17007);
      }());
    };
    var G__17010__2 = function(x, y) {
      return cljs.core.not(function() {
        var G__17008 = x;
        var G__17009 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17008, G__17009) : f.call(null, G__17008, G__17009);
      }());
    };
    var G__17010__3 = function() {
      var G__17011__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__17011 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__17012__i = 0, G__17012__a = new Array(arguments.length - 2);
          while (G__17012__i < G__17012__a.length) {
            G__17012__a[G__17012__i] = arguments[G__17012__i + 2];
            ++G__17012__i;
          }
          zs = new cljs.core.IndexedSeq(G__17012__a, 0);
        }
        return G__17011__delegate.call(this, x, y, zs);
      };
      G__17011.cljs$lang$maxFixedArity = 2;
      G__17011.cljs$lang$applyTo = function(arglist__17013) {
        var x = cljs.core.first(arglist__17013);
        arglist__17013 = cljs.core.next(arglist__17013);
        var y = cljs.core.first(arglist__17013);
        var zs = cljs.core.rest(arglist__17013);
        return G__17011__delegate(x, y, zs);
      };
      G__17011.cljs$core$IFn$_invoke$arity$variadic = G__17011__delegate;
      return G__17011;
    }();
    G__17010 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__17010__0.call(this);
        case 1:
          return G__17010__1.call(this, x);
        case 2:
          return G__17010__2.call(this, x, y);
        default:
          var G__17014 = null;
          if (arguments.length > 2) {
            var G__17015__i = 0, G__17015__a = new Array(arguments.length - 2);
            while (G__17015__i < G__17015__a.length) {
              G__17015__a[G__17015__i] = arguments[G__17015__i + 2];
              ++G__17015__i;
            }
            G__17014 = new cljs.core.IndexedSeq(G__17015__a, 0);
          }
          return G__17010__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17014);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17010.cljs$lang$maxFixedArity = 2;
    G__17010.cljs$lang$applyTo = G__17010__3.cljs$lang$applyTo;
    G__17010.cljs$core$IFn$_invoke$arity$0 = G__17010__0;
    G__17010.cljs$core$IFn$_invoke$arity$1 = G__17010__1;
    G__17010.cljs$core$IFn$_invoke$arity$2 = G__17010__2;
    G__17010.cljs$core$IFn$_invoke$arity$variadic = G__17010__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__17010;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__17016__delegate = function(args) {
      return x;
    };
    var G__17016 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__17017__i = 0, G__17017__a = new Array(arguments.length - 0);
        while (G__17017__i < G__17017__a.length) {
          G__17017__a[G__17017__i] = arguments[G__17017__i + 0];
          ++G__17017__i;
        }
        args = new cljs.core.IndexedSeq(G__17017__a, 0);
      }
      return G__17016__delegate.call(this, args);
    };
    G__17016.cljs$lang$maxFixedArity = 0;
    G__17016.cljs$lang$applyTo = function(arglist__17018) {
      var args = cljs.core.seq(arglist__17018);
      return G__17016__delegate(args);
    };
    G__17016.cljs$core$IFn$_invoke$arity$variadic = G__17016__delegate;
    return G__17016;
  }();
};
cljs.core.comp = function() {
  var cljs$core$comp = null;
  var cljs$core$comp__0 = function() {
    return cljs.core.identity;
  };
  var cljs$core$comp__1 = function(f) {
    return f;
  };
  var cljs$core$comp__2 = function(f, g) {
    return function() {
      var G__17073 = null;
      var G__17073__0 = function() {
        var G__17046 = function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17046) : f.call(null, G__17046);
      };
      var G__17073__1 = function(x) {
        var G__17047 = function() {
          var G__17048 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17048) : g.call(null, G__17048);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17047) : f.call(null, G__17047);
      };
      var G__17073__2 = function(x, y) {
        var G__17049 = function() {
          var G__17050 = x;
          var G__17051 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__17050, G__17051) : g.call(null, G__17050, G__17051);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17049) : f.call(null, G__17049);
      };
      var G__17073__3 = function(x, y, z) {
        var G__17052 = function() {
          var G__17053 = x;
          var G__17054 = y;
          var G__17055 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__17053, G__17054, G__17055) : g.call(null, G__17053, G__17054, G__17055);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17052) : f.call(null, G__17052);
      };
      var G__17073__4 = function() {
        var G__17074__delegate = function(x, y, z, args) {
          var G__17056 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17056) : f.call(null, G__17056);
        };
        var G__17074 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__17075__i = 0, G__17075__a = new Array(arguments.length - 3);
            while (G__17075__i < G__17075__a.length) {
              G__17075__a[G__17075__i] = arguments[G__17075__i + 3];
              ++G__17075__i;
            }
            args = new cljs.core.IndexedSeq(G__17075__a, 0);
          }
          return G__17074__delegate.call(this, x, y, z, args);
        };
        G__17074.cljs$lang$maxFixedArity = 3;
        G__17074.cljs$lang$applyTo = function(arglist__17076) {
          var x = cljs.core.first(arglist__17076);
          arglist__17076 = cljs.core.next(arglist__17076);
          var y = cljs.core.first(arglist__17076);
          arglist__17076 = cljs.core.next(arglist__17076);
          var z = cljs.core.first(arglist__17076);
          var args = cljs.core.rest(arglist__17076);
          return G__17074__delegate(x, y, z, args);
        };
        G__17074.cljs$core$IFn$_invoke$arity$variadic = G__17074__delegate;
        return G__17074;
      }();
      G__17073 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__17073__0.call(this);
          case 1:
            return G__17073__1.call(this, x);
          case 2:
            return G__17073__2.call(this, x, y);
          case 3:
            return G__17073__3.call(this, x, y, z);
          default:
            var G__17077 = null;
            if (arguments.length > 3) {
              var G__17078__i = 0, G__17078__a = new Array(arguments.length - 3);
              while (G__17078__i < G__17078__a.length) {
                G__17078__a[G__17078__i] = arguments[G__17078__i + 3];
                ++G__17078__i;
              }
              G__17077 = new cljs.core.IndexedSeq(G__17078__a, 0);
            }
            return G__17073__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17077);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17073.cljs$lang$maxFixedArity = 3;
      G__17073.cljs$lang$applyTo = G__17073__4.cljs$lang$applyTo;
      G__17073.cljs$core$IFn$_invoke$arity$0 = G__17073__0;
      G__17073.cljs$core$IFn$_invoke$arity$1 = G__17073__1;
      G__17073.cljs$core$IFn$_invoke$arity$2 = G__17073__2;
      G__17073.cljs$core$IFn$_invoke$arity$3 = G__17073__3;
      G__17073.cljs$core$IFn$_invoke$arity$variadic = G__17073__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__17073;
    }();
  };
  var cljs$core$comp__3 = function(f, g, h) {
    return function() {
      var G__17079 = null;
      var G__17079__0 = function() {
        var G__17057 = function() {
          var G__17058 = function() {
            return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17058) : g.call(null, G__17058);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17057) : f.call(null, G__17057);
      };
      var G__17079__1 = function(x) {
        var G__17059 = function() {
          var G__17060 = function() {
            var G__17061 = x;
            return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__17061) : h.call(null, G__17061);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17060) : g.call(null, G__17060);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17059) : f.call(null, G__17059);
      };
      var G__17079__2 = function(x, y) {
        var G__17062 = function() {
          var G__17063 = function() {
            var G__17064 = x;
            var G__17065 = y;
            return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__17064, G__17065) : h.call(null, G__17064, G__17065);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17063) : g.call(null, G__17063);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17062) : f.call(null, G__17062);
      };
      var G__17079__3 = function(x, y, z) {
        var G__17066 = function() {
          var G__17067 = function() {
            var G__17068 = x;
            var G__17069 = y;
            var G__17070 = z;
            return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__17068, G__17069, G__17070) : h.call(null, G__17068, G__17069, G__17070);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17067) : g.call(null, G__17067);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17066) : f.call(null, G__17066);
      };
      var G__17079__4 = function() {
        var G__17080__delegate = function(x, y, z, args) {
          var G__17071 = function() {
            var G__17072 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
            return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17072) : g.call(null, G__17072);
          }();
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17071) : f.call(null, G__17071);
        };
        var G__17080 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__17081__i = 0, G__17081__a = new Array(arguments.length - 3);
            while (G__17081__i < G__17081__a.length) {
              G__17081__a[G__17081__i] = arguments[G__17081__i + 3];
              ++G__17081__i;
            }
            args = new cljs.core.IndexedSeq(G__17081__a, 0);
          }
          return G__17080__delegate.call(this, x, y, z, args);
        };
        G__17080.cljs$lang$maxFixedArity = 3;
        G__17080.cljs$lang$applyTo = function(arglist__17082) {
          var x = cljs.core.first(arglist__17082);
          arglist__17082 = cljs.core.next(arglist__17082);
          var y = cljs.core.first(arglist__17082);
          arglist__17082 = cljs.core.next(arglist__17082);
          var z = cljs.core.first(arglist__17082);
          var args = cljs.core.rest(arglist__17082);
          return G__17080__delegate(x, y, z, args);
        };
        G__17080.cljs$core$IFn$_invoke$arity$variadic = G__17080__delegate;
        return G__17080;
      }();
      G__17079 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__17079__0.call(this);
          case 1:
            return G__17079__1.call(this, x);
          case 2:
            return G__17079__2.call(this, x, y);
          case 3:
            return G__17079__3.call(this, x, y, z);
          default:
            var G__17083 = null;
            if (arguments.length > 3) {
              var G__17084__i = 0, G__17084__a = new Array(arguments.length - 3);
              while (G__17084__i < G__17084__a.length) {
                G__17084__a[G__17084__i] = arguments[G__17084__i + 3];
                ++G__17084__i;
              }
              G__17083 = new cljs.core.IndexedSeq(G__17084__a, 0);
            }
            return G__17079__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17083);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17079.cljs$lang$maxFixedArity = 3;
      G__17079.cljs$lang$applyTo = G__17079__4.cljs$lang$applyTo;
      G__17079.cljs$core$IFn$_invoke$arity$0 = G__17079__0;
      G__17079.cljs$core$IFn$_invoke$arity$1 = G__17079__1;
      G__17079.cljs$core$IFn$_invoke$arity$2 = G__17079__2;
      G__17079.cljs$core$IFn$_invoke$arity$3 = G__17079__3;
      G__17079.cljs$core$IFn$_invoke$arity$variadic = G__17079__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__17079;
    }();
  };
  var cljs$core$comp__4 = function() {
    var G__17085__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__17086__delegate = function(args) {
            var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
            var fs__$2 = cljs.core.next(fs__$1);
            while (true) {
              if (fs__$2) {
                var G__17087 = cljs.core.first(fs__$2).call(null, ret);
                var G__17088 = cljs.core.next(fs__$2);
                ret = G__17087;
                fs__$2 = G__17088;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__17086 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              var G__17089__i = 0, G__17089__a = new Array(arguments.length - 0);
              while (G__17089__i < G__17089__a.length) {
                G__17089__a[G__17089__i] = arguments[G__17089__i + 0];
                ++G__17089__i;
              }
              args = new cljs.core.IndexedSeq(G__17089__a, 0);
            }
            return G__17086__delegate.call(this, args);
          };
          G__17086.cljs$lang$maxFixedArity = 0;
          G__17086.cljs$lang$applyTo = function(arglist__17090) {
            var args = cljs.core.seq(arglist__17090);
            return G__17086__delegate(args);
          };
          G__17086.cljs$core$IFn$_invoke$arity$variadic = G__17086__delegate;
          return G__17086;
        }();
      }(fs__$1);
    };
    var G__17085 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__17091__i = 0, G__17091__a = new Array(arguments.length - 3);
        while (G__17091__i < G__17091__a.length) {
          G__17091__a[G__17091__i] = arguments[G__17091__i + 3];
          ++G__17091__i;
        }
        fs = new cljs.core.IndexedSeq(G__17091__a, 0);
      }
      return G__17085__delegate.call(this, f1, f2, f3, fs);
    };
    G__17085.cljs$lang$maxFixedArity = 3;
    G__17085.cljs$lang$applyTo = function(arglist__17092) {
      var f1 = cljs.core.first(arglist__17092);
      arglist__17092 = cljs.core.next(arglist__17092);
      var f2 = cljs.core.first(arglist__17092);
      arglist__17092 = cljs.core.next(arglist__17092);
      var f3 = cljs.core.first(arglist__17092);
      var fs = cljs.core.rest(arglist__17092);
      return G__17085__delegate(f1, f2, f3, fs);
    };
    G__17085.cljs$core$IFn$_invoke$arity$variadic = G__17085__delegate;
    return G__17085;
  }();
  cljs$core$comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$comp__0.call(this);
      case 1:
        return cljs$core$comp__1.call(this, f1);
      case 2:
        return cljs$core$comp__2.call(this, f1, f2);
      case 3:
        return cljs$core$comp__3.call(this, f1, f2, f3);
      default:
        var G__17093 = null;
        if (arguments.length > 3) {
          var G__17094__i = 0, G__17094__a = new Array(arguments.length - 3);
          while (G__17094__i < G__17094__a.length) {
            G__17094__a[G__17094__i] = arguments[G__17094__i + 3];
            ++G__17094__i;
          }
          G__17093 = new cljs.core.IndexedSeq(G__17094__a, 0);
        }
        return cljs$core$comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, G__17093);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$comp.cljs$lang$maxFixedArity = 3;
  cljs$core$comp.cljs$lang$applyTo = cljs$core$comp__4.cljs$lang$applyTo;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$0 = cljs$core$comp__0;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$1 = cljs$core$comp__1;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$2 = cljs$core$comp__2;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$3 = cljs$core$comp__3;
  cljs$core$comp.cljs$core$IFn$_invoke$arity$variadic = cljs$core$comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$comp;
}();
cljs.core.partial = function() {
  var cljs$core$partial = null;
  var cljs$core$partial__1 = function(f) {
    return f;
  };
  var cljs$core$partial__2 = function(f, arg1) {
    return function() {
      var G__17179 = null;
      var G__17179__0 = function() {
        var G__17137 = arg1;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17137) : f.call(null, G__17137);
      };
      var G__17179__1 = function(x) {
        var G__17138 = arg1;
        var G__17139 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17138, G__17139) : f.call(null, G__17138, G__17139);
      };
      var G__17179__2 = function(x, y) {
        var G__17140 = arg1;
        var G__17141 = x;
        var G__17142 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17140, G__17141, G__17142) : f.call(null, G__17140, G__17141, G__17142);
      };
      var G__17179__3 = function(x, y, z) {
        var G__17143 = arg1;
        var G__17144 = x;
        var G__17145 = y;
        var G__17146 = z;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__17143, G__17144, G__17145, G__17146) : f.call(null, G__17143, G__17144, G__17145, G__17146);
      };
      var G__17179__4 = function() {
        var G__17180__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
        };
        var G__17180 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__17181__i = 0, G__17181__a = new Array(arguments.length - 3);
            while (G__17181__i < G__17181__a.length) {
              G__17181__a[G__17181__i] = arguments[G__17181__i + 3];
              ++G__17181__i;
            }
            args = new cljs.core.IndexedSeq(G__17181__a, 0);
          }
          return G__17180__delegate.call(this, x, y, z, args);
        };
        G__17180.cljs$lang$maxFixedArity = 3;
        G__17180.cljs$lang$applyTo = function(arglist__17182) {
          var x = cljs.core.first(arglist__17182);
          arglist__17182 = cljs.core.next(arglist__17182);
          var y = cljs.core.first(arglist__17182);
          arglist__17182 = cljs.core.next(arglist__17182);
          var z = cljs.core.first(arglist__17182);
          var args = cljs.core.rest(arglist__17182);
          return G__17180__delegate(x, y, z, args);
        };
        G__17180.cljs$core$IFn$_invoke$arity$variadic = G__17180__delegate;
        return G__17180;
      }();
      G__17179 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__17179__0.call(this);
          case 1:
            return G__17179__1.call(this, x);
          case 2:
            return G__17179__2.call(this, x, y);
          case 3:
            return G__17179__3.call(this, x, y, z);
          default:
            var G__17183 = null;
            if (arguments.length > 3) {
              var G__17184__i = 0, G__17184__a = new Array(arguments.length - 3);
              while (G__17184__i < G__17184__a.length) {
                G__17184__a[G__17184__i] = arguments[G__17184__i + 3];
                ++G__17184__i;
              }
              G__17183 = new cljs.core.IndexedSeq(G__17184__a, 0);
            }
            return G__17179__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17183);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17179.cljs$lang$maxFixedArity = 3;
      G__17179.cljs$lang$applyTo = G__17179__4.cljs$lang$applyTo;
      G__17179.cljs$core$IFn$_invoke$arity$0 = G__17179__0;
      G__17179.cljs$core$IFn$_invoke$arity$1 = G__17179__1;
      G__17179.cljs$core$IFn$_invoke$arity$2 = G__17179__2;
      G__17179.cljs$core$IFn$_invoke$arity$3 = G__17179__3;
      G__17179.cljs$core$IFn$_invoke$arity$variadic = G__17179__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__17179;
    }();
  };
  var cljs$core$partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__17185 = null;
      var G__17185__0 = function() {
        var G__17147 = arg1;
        var G__17148 = arg2;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17147, G__17148) : f.call(null, G__17147, G__17148);
      };
      var G__17185__1 = function(x) {
        var G__17149 = arg1;
        var G__17150 = arg2;
        var G__17151 = x;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17149, G__17150, G__17151) : f.call(null, G__17149, G__17150, G__17151);
      };
      var G__17185__2 = function(x, y) {
        var G__17152 = arg1;
        var G__17153 = arg2;
        var G__17154 = x;
        var G__17155 = y;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__17152, G__17153, G__17154, G__17155) : f.call(null, G__17152, G__17153, G__17154, G__17155);
      };
      var G__17185__3 = function(x, y, z) {
        var G__17156 = arg1;
        var G__17157 = arg2;
        var G__17158 = x;
        var G__17159 = y;
        var G__17160 = z;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__17156, G__17157, G__17158, G__17159, G__17160) : f.call(null, G__17156, G__17157, G__17158, G__17159, G__17160);
      };
      var G__17185__4 = function() {
        var G__17186__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
        };
        var G__17186 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__17187__i = 0, G__17187__a = new Array(arguments.length - 3);
            while (G__17187__i < G__17187__a.length) {
              G__17187__a[G__17187__i] = arguments[G__17187__i + 3];
              ++G__17187__i;
            }
            args = new cljs.core.IndexedSeq(G__17187__a, 0);
          }
          return G__17186__delegate.call(this, x, y, z, args);
        };
        G__17186.cljs$lang$maxFixedArity = 3;
        G__17186.cljs$lang$applyTo = function(arglist__17188) {
          var x = cljs.core.first(arglist__17188);
          arglist__17188 = cljs.core.next(arglist__17188);
          var y = cljs.core.first(arglist__17188);
          arglist__17188 = cljs.core.next(arglist__17188);
          var z = cljs.core.first(arglist__17188);
          var args = cljs.core.rest(arglist__17188);
          return G__17186__delegate(x, y, z, args);
        };
        G__17186.cljs$core$IFn$_invoke$arity$variadic = G__17186__delegate;
        return G__17186;
      }();
      G__17185 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__17185__0.call(this);
          case 1:
            return G__17185__1.call(this, x);
          case 2:
            return G__17185__2.call(this, x, y);
          case 3:
            return G__17185__3.call(this, x, y, z);
          default:
            var G__17189 = null;
            if (arguments.length > 3) {
              var G__17190__i = 0, G__17190__a = new Array(arguments.length - 3);
              while (G__17190__i < G__17190__a.length) {
                G__17190__a[G__17190__i] = arguments[G__17190__i + 3];
                ++G__17190__i;
              }
              G__17189 = new cljs.core.IndexedSeq(G__17190__a, 0);
            }
            return G__17185__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17189);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17185.cljs$lang$maxFixedArity = 3;
      G__17185.cljs$lang$applyTo = G__17185__4.cljs$lang$applyTo;
      G__17185.cljs$core$IFn$_invoke$arity$0 = G__17185__0;
      G__17185.cljs$core$IFn$_invoke$arity$1 = G__17185__1;
      G__17185.cljs$core$IFn$_invoke$arity$2 = G__17185__2;
      G__17185.cljs$core$IFn$_invoke$arity$3 = G__17185__3;
      G__17185.cljs$core$IFn$_invoke$arity$variadic = G__17185__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__17185;
    }();
  };
  var cljs$core$partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__17191 = null;
      var G__17191__0 = function() {
        var G__17161 = arg1;
        var G__17162 = arg2;
        var G__17163 = arg3;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17161, G__17162, G__17163) : f.call(null, G__17161, G__17162, G__17163);
      };
      var G__17191__1 = function(x) {
        var G__17164 = arg1;
        var G__17165 = arg2;
        var G__17166 = arg3;
        var G__17167 = x;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__17164, G__17165, G__17166, G__17167) : f.call(null, G__17164, G__17165, G__17166, G__17167);
      };
      var G__17191__2 = function(x, y) {
        var G__17168 = arg1;
        var G__17169 = arg2;
        var G__17170 = arg3;
        var G__17171 = x;
        var G__17172 = y;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__17168, G__17169, G__17170, G__17171, G__17172) : f.call(null, G__17168, G__17169, G__17170, G__17171, G__17172);
      };
      var G__17191__3 = function(x, y, z) {
        var G__17173 = arg1;
        var G__17174 = arg2;
        var G__17175 = arg3;
        var G__17176 = x;
        var G__17177 = y;
        var G__17178 = z;
        return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__17173, G__17174, G__17175, G__17176, G__17177, G__17178) : f.call(null, G__17173, G__17174, G__17175, G__17176, G__17177, G__17178);
      };
      var G__17191__4 = function() {
        var G__17192__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
        };
        var G__17192 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__17193__i = 0, G__17193__a = new Array(arguments.length - 3);
            while (G__17193__i < G__17193__a.length) {
              G__17193__a[G__17193__i] = arguments[G__17193__i + 3];
              ++G__17193__i;
            }
            args = new cljs.core.IndexedSeq(G__17193__a, 0);
          }
          return G__17192__delegate.call(this, x, y, z, args);
        };
        G__17192.cljs$lang$maxFixedArity = 3;
        G__17192.cljs$lang$applyTo = function(arglist__17194) {
          var x = cljs.core.first(arglist__17194);
          arglist__17194 = cljs.core.next(arglist__17194);
          var y = cljs.core.first(arglist__17194);
          arglist__17194 = cljs.core.next(arglist__17194);
          var z = cljs.core.first(arglist__17194);
          var args = cljs.core.rest(arglist__17194);
          return G__17192__delegate(x, y, z, args);
        };
        G__17192.cljs$core$IFn$_invoke$arity$variadic = G__17192__delegate;
        return G__17192;
      }();
      G__17191 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__17191__0.call(this);
          case 1:
            return G__17191__1.call(this, x);
          case 2:
            return G__17191__2.call(this, x, y);
          case 3:
            return G__17191__3.call(this, x, y, z);
          default:
            var G__17195 = null;
            if (arguments.length > 3) {
              var G__17196__i = 0, G__17196__a = new Array(arguments.length - 3);
              while (G__17196__i < G__17196__a.length) {
                G__17196__a[G__17196__i] = arguments[G__17196__i + 3];
                ++G__17196__i;
              }
              G__17195 = new cljs.core.IndexedSeq(G__17196__a, 0);
            }
            return G__17191__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17195);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17191.cljs$lang$maxFixedArity = 3;
      G__17191.cljs$lang$applyTo = G__17191__4.cljs$lang$applyTo;
      G__17191.cljs$core$IFn$_invoke$arity$0 = G__17191__0;
      G__17191.cljs$core$IFn$_invoke$arity$1 = G__17191__1;
      G__17191.cljs$core$IFn$_invoke$arity$2 = G__17191__2;
      G__17191.cljs$core$IFn$_invoke$arity$3 = G__17191__3;
      G__17191.cljs$core$IFn$_invoke$arity$variadic = G__17191__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__17191;
    }();
  };
  var cljs$core$partial__5 = function() {
    var G__17197__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__17198__delegate = function(args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
        };
        var G__17198 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            var G__17199__i = 0, G__17199__a = new Array(arguments.length - 0);
            while (G__17199__i < G__17199__a.length) {
              G__17199__a[G__17199__i] = arguments[G__17199__i + 0];
              ++G__17199__i;
            }
            args = new cljs.core.IndexedSeq(G__17199__a, 0);
          }
          return G__17198__delegate.call(this, args);
        };
        G__17198.cljs$lang$maxFixedArity = 0;
        G__17198.cljs$lang$applyTo = function(arglist__17200) {
          var args = cljs.core.seq(arglist__17200);
          return G__17198__delegate(args);
        };
        G__17198.cljs$core$IFn$_invoke$arity$variadic = G__17198__delegate;
        return G__17198;
      }();
    };
    var G__17197 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__17201__i = 0, G__17201__a = new Array(arguments.length - 4);
        while (G__17201__i < G__17201__a.length) {
          G__17201__a[G__17201__i] = arguments[G__17201__i + 4];
          ++G__17201__i;
        }
        more = new cljs.core.IndexedSeq(G__17201__a, 0);
      }
      return G__17197__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__17197.cljs$lang$maxFixedArity = 4;
    G__17197.cljs$lang$applyTo = function(arglist__17202) {
      var f = cljs.core.first(arglist__17202);
      arglist__17202 = cljs.core.next(arglist__17202);
      var arg1 = cljs.core.first(arglist__17202);
      arglist__17202 = cljs.core.next(arglist__17202);
      var arg2 = cljs.core.first(arglist__17202);
      arglist__17202 = cljs.core.next(arglist__17202);
      var arg3 = cljs.core.first(arglist__17202);
      var more = cljs.core.rest(arglist__17202);
      return G__17197__delegate(f, arg1, arg2, arg3, more);
    };
    G__17197.cljs$core$IFn$_invoke$arity$variadic = G__17197__delegate;
    return G__17197;
  }();
  cljs$core$partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$partial__1.call(this, f);
      case 2:
        return cljs$core$partial__2.call(this, f, arg1);
      case 3:
        return cljs$core$partial__3.call(this, f, arg1, arg2);
      case 4:
        return cljs$core$partial__4.call(this, f, arg1, arg2, arg3);
      default:
        var G__17203 = null;
        if (arguments.length > 4) {
          var G__17204__i = 0, G__17204__a = new Array(arguments.length - 4);
          while (G__17204__i < G__17204__a.length) {
            G__17204__a[G__17204__i] = arguments[G__17204__i + 4];
            ++G__17204__i;
          }
          G__17203 = new cljs.core.IndexedSeq(G__17204__a, 0);
        }
        return cljs$core$partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, G__17203);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$partial.cljs$lang$maxFixedArity = 4;
  cljs$core$partial.cljs$lang$applyTo = cljs$core$partial__5.cljs$lang$applyTo;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$1 = cljs$core$partial__1;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$2 = cljs$core$partial__2;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$3 = cljs$core$partial__3;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$4 = cljs$core$partial__4;
  cljs$core$partial.cljs$core$IFn$_invoke$arity$variadic = cljs$core$partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$partial;
}();
cljs.core.fnil = function() {
  var cljs$core$fnil = null;
  var cljs$core$fnil__2 = function(f, x) {
    return function() {
      var G__17237 = null;
      var G__17237__1 = function(a) {
        var G__17221 = a == null ? x : a;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17221) : f.call(null, G__17221);
      };
      var G__17237__2 = function(a, b) {
        var G__17222 = a == null ? x : a;
        var G__17223 = b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17222, G__17223) : f.call(null, G__17222, G__17223);
      };
      var G__17237__3 = function(a, b, c) {
        var G__17224 = a == null ? x : a;
        var G__17225 = b;
        var G__17226 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17224, G__17225, G__17226) : f.call(null, G__17224, G__17225, G__17226);
      };
      var G__17237__4 = function() {
        var G__17238__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
        };
        var G__17238 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__17239__i = 0, G__17239__a = new Array(arguments.length - 3);
            while (G__17239__i < G__17239__a.length) {
              G__17239__a[G__17239__i] = arguments[G__17239__i + 3];
              ++G__17239__i;
            }
            ds = new cljs.core.IndexedSeq(G__17239__a, 0);
          }
          return G__17238__delegate.call(this, a, b, c, ds);
        };
        G__17238.cljs$lang$maxFixedArity = 3;
        G__17238.cljs$lang$applyTo = function(arglist__17240) {
          var a = cljs.core.first(arglist__17240);
          arglist__17240 = cljs.core.next(arglist__17240);
          var b = cljs.core.first(arglist__17240);
          arglist__17240 = cljs.core.next(arglist__17240);
          var c = cljs.core.first(arglist__17240);
          var ds = cljs.core.rest(arglist__17240);
          return G__17238__delegate(a, b, c, ds);
        };
        G__17238.cljs$core$IFn$_invoke$arity$variadic = G__17238__delegate;
        return G__17238;
      }();
      G__17237 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__17237__1.call(this, a);
          case 2:
            return G__17237__2.call(this, a, b);
          case 3:
            return G__17237__3.call(this, a, b, c);
          default:
            var G__17241 = null;
            if (arguments.length > 3) {
              var G__17242__i = 0, G__17242__a = new Array(arguments.length - 3);
              while (G__17242__i < G__17242__a.length) {
                G__17242__a[G__17242__i] = arguments[G__17242__i + 3];
                ++G__17242__i;
              }
              G__17241 = new cljs.core.IndexedSeq(G__17242__a, 0);
            }
            return G__17237__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__17241);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17237.cljs$lang$maxFixedArity = 3;
      G__17237.cljs$lang$applyTo = G__17237__4.cljs$lang$applyTo;
      G__17237.cljs$core$IFn$_invoke$arity$1 = G__17237__1;
      G__17237.cljs$core$IFn$_invoke$arity$2 = G__17237__2;
      G__17237.cljs$core$IFn$_invoke$arity$3 = G__17237__3;
      G__17237.cljs$core$IFn$_invoke$arity$variadic = G__17237__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__17237;
    }();
  };
  var cljs$core$fnil__3 = function(f, x, y) {
    return function() {
      var G__17243 = null;
      var G__17243__2 = function(a, b) {
        var G__17227 = a == null ? x : a;
        var G__17228 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17227, G__17228) : f.call(null, G__17227, G__17228);
      };
      var G__17243__3 = function(a, b, c) {
        var G__17229 = a == null ? x : a;
        var G__17230 = b == null ? y : b;
        var G__17231 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17229, G__17230, G__17231) : f.call(null, G__17229, G__17230, G__17231);
      };
      var G__17243__4 = function() {
        var G__17244__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__17244 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__17245__i = 0, G__17245__a = new Array(arguments.length - 3);
            while (G__17245__i < G__17245__a.length) {
              G__17245__a[G__17245__i] = arguments[G__17245__i + 3];
              ++G__17245__i;
            }
            ds = new cljs.core.IndexedSeq(G__17245__a, 0);
          }
          return G__17244__delegate.call(this, a, b, c, ds);
        };
        G__17244.cljs$lang$maxFixedArity = 3;
        G__17244.cljs$lang$applyTo = function(arglist__17246) {
          var a = cljs.core.first(arglist__17246);
          arglist__17246 = cljs.core.next(arglist__17246);
          var b = cljs.core.first(arglist__17246);
          arglist__17246 = cljs.core.next(arglist__17246);
          var c = cljs.core.first(arglist__17246);
          var ds = cljs.core.rest(arglist__17246);
          return G__17244__delegate(a, b, c, ds);
        };
        G__17244.cljs$core$IFn$_invoke$arity$variadic = G__17244__delegate;
        return G__17244;
      }();
      G__17243 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__17243__2.call(this, a, b);
          case 3:
            return G__17243__3.call(this, a, b, c);
          default:
            var G__17247 = null;
            if (arguments.length > 3) {
              var G__17248__i = 0, G__17248__a = new Array(arguments.length - 3);
              while (G__17248__i < G__17248__a.length) {
                G__17248__a[G__17248__i] = arguments[G__17248__i + 3];
                ++G__17248__i;
              }
              G__17247 = new cljs.core.IndexedSeq(G__17248__a, 0);
            }
            return G__17243__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__17247);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17243.cljs$lang$maxFixedArity = 3;
      G__17243.cljs$lang$applyTo = G__17243__4.cljs$lang$applyTo;
      G__17243.cljs$core$IFn$_invoke$arity$2 = G__17243__2;
      G__17243.cljs$core$IFn$_invoke$arity$3 = G__17243__3;
      G__17243.cljs$core$IFn$_invoke$arity$variadic = G__17243__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__17243;
    }();
  };
  var cljs$core$fnil__4 = function(f, x, y, z) {
    return function() {
      var G__17249 = null;
      var G__17249__2 = function(a, b) {
        var G__17232 = a == null ? x : a;
        var G__17233 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17232, G__17233) : f.call(null, G__17232, G__17233);
      };
      var G__17249__3 = function(a, b, c) {
        var G__17234 = a == null ? x : a;
        var G__17235 = b == null ? y : b;
        var G__17236 = c == null ? z : c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17234, G__17235, G__17236) : f.call(null, G__17234, G__17235, G__17236);
      };
      var G__17249__4 = function() {
        var G__17250__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__17250 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__17251__i = 0, G__17251__a = new Array(arguments.length - 3);
            while (G__17251__i < G__17251__a.length) {
              G__17251__a[G__17251__i] = arguments[G__17251__i + 3];
              ++G__17251__i;
            }
            ds = new cljs.core.IndexedSeq(G__17251__a, 0);
          }
          return G__17250__delegate.call(this, a, b, c, ds);
        };
        G__17250.cljs$lang$maxFixedArity = 3;
        G__17250.cljs$lang$applyTo = function(arglist__17252) {
          var a = cljs.core.first(arglist__17252);
          arglist__17252 = cljs.core.next(arglist__17252);
          var b = cljs.core.first(arglist__17252);
          arglist__17252 = cljs.core.next(arglist__17252);
          var c = cljs.core.first(arglist__17252);
          var ds = cljs.core.rest(arglist__17252);
          return G__17250__delegate(a, b, c, ds);
        };
        G__17250.cljs$core$IFn$_invoke$arity$variadic = G__17250__delegate;
        return G__17250;
      }();
      G__17249 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__17249__2.call(this, a, b);
          case 3:
            return G__17249__3.call(this, a, b, c);
          default:
            var G__17253 = null;
            if (arguments.length > 3) {
              var G__17254__i = 0, G__17254__a = new Array(arguments.length - 3);
              while (G__17254__i < G__17254__a.length) {
                G__17254__a[G__17254__i] = arguments[G__17254__i + 3];
                ++G__17254__i;
              }
              G__17253 = new cljs.core.IndexedSeq(G__17254__a, 0);
            }
            return G__17249__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__17253);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17249.cljs$lang$maxFixedArity = 3;
      G__17249.cljs$lang$applyTo = G__17249__4.cljs$lang$applyTo;
      G__17249.cljs$core$IFn$_invoke$arity$2 = G__17249__2;
      G__17249.cljs$core$IFn$_invoke$arity$3 = G__17249__3;
      G__17249.cljs$core$IFn$_invoke$arity$variadic = G__17249__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__17249;
    }();
  };
  cljs$core$fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return cljs$core$fnil__2.call(this, f, x);
      case 3:
        return cljs$core$fnil__3.call(this, f, x, y);
      case 4:
        return cljs$core$fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$fnil.cljs$core$IFn$_invoke$arity$2 = cljs$core$fnil__2;
  cljs$core$fnil.cljs$core$IFn$_invoke$arity$3 = cljs$core$fnil__3;
  cljs$core$fnil.cljs$core$IFn$_invoke$arity$4 = cljs$core$fnil__4;
  return cljs$core$fnil;
}();
cljs.core.map_indexed = function() {
  var cljs$core$map_indexed = null;
  var cljs$core$map_indexed__1 = function(f) {
    return function(rf) {
      var i = function() {
        var G__17285 = -1;
        return cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(G__17285) : cljs.core.volatile_BANG_.call(null, G__17285);
      }();
      return function(i) {
        return function() {
          var G__17315 = null;
          var G__17315__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__17315__1 = function(result) {
            var G__17286 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17286) : rf.call(null, G__17286);
          };
          var G__17315__2 = function(result, input) {
            var G__17287 = result;
            var G__17288 = function() {
              var G__17289 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
              var G__17290 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17289, G__17290) : f.call(null, G__17289, G__17290);
            }();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17287, G__17288) : rf.call(null, G__17287, G__17288);
          };
          G__17315 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__17315__0.call(this);
              case 1:
                return G__17315__1.call(this, result);
              case 2:
                return G__17315__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__17315.cljs$core$IFn$_invoke$arity$0 = G__17315__0;
          G__17315.cljs$core$IFn$_invoke$arity$1 = G__17315__1;
          G__17315.cljs$core$IFn$_invoke$arity$2 = G__17315__2;
          return G__17315;
        }();
      }(i);
    };
  };
  var cljs$core$map_indexed__2 = function(f, coll) {
    var mapi = function cljs$core$map_indexed_$_mapi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__5007__auto___17316 = size;
            var i_17317 = 0;
            while (true) {
              if (i_17317 < n__5007__auto___17316) {
                cljs.core.chunk_append(b, function() {
                  var G__17311 = idx + i_17317;
                  var G__17312 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_17317);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17311, G__17312) : f.call(null, G__17311, G__17312);
                }());
                var G__17318 = i_17317 + 1;
                i_17317 = G__17318;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$map_indexed_$_mapi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            return cljs.core.cons(function() {
              var G__17313 = idx;
              var G__17314 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17313, G__17314) : f.call(null, G__17313, G__17314);
            }(), cljs$core$map_indexed_$_mapi(idx + 1, cljs.core.rest(s)));
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return mapi(0, coll);
  };
  cljs$core$map_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$map_indexed__1.call(this, f);
      case 2:
        return cljs$core$map_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$map_indexed.cljs$core$IFn$_invoke$arity$1 = cljs$core$map_indexed__1;
  cljs$core$map_indexed.cljs$core$IFn$_invoke$arity$2 = cljs$core$map_indexed__2;
  return cljs$core$map_indexed;
}();
cljs.core.keep = function() {
  var cljs$core$keep = null;
  var cljs$core$keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__17337 = null;
        var G__17337__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__17337__1 = function(result) {
          var G__17331 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17331) : rf.call(null, G__17331);
        };
        var G__17337__2 = function(result, input) {
          var v = function() {
            var G__17332 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17332) : f.call(null, G__17332);
          }();
          if (v == null) {
            return result;
          } else {
            var G__17333 = result;
            var G__17334 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17333, G__17334) : rf.call(null, G__17333, G__17334);
          }
        };
        G__17337 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__17337__0.call(this);
            case 1:
              return G__17337__1.call(this, result);
            case 2:
              return G__17337__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__17337.cljs$core$IFn$_invoke$arity$0 = G__17337__0;
        G__17337.cljs$core$IFn$_invoke$arity$1 = G__17337__1;
        G__17337.cljs$core$IFn$_invoke$arity$2 = G__17337__2;
        return G__17337;
      }();
    };
  };
  var cljs$core$keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5007__auto___17338 = size;
          var i_17339 = 0;
          while (true) {
            if (i_17339 < n__5007__auto___17338) {
              var x_17340 = function() {
                var G__17335 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_17339);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17335) : f.call(null, G__17335);
              }();
              if (x_17340 == null) {
              } else {
                cljs.core.chunk_append(b, x_17340);
              }
              var G__17341 = i_17339 + 1;
              i_17339 = G__17341;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__17336 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17336) : f.call(null, G__17336);
          }();
          if (x == null) {
            return cljs$core$keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$keep__1.call(this, f);
      case 2:
        return cljs$core$keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$keep.cljs$core$IFn$_invoke$arity$1 = cljs$core$keep__1;
  cljs$core$keep.cljs$core$IFn$_invoke$arity$2 = cljs$core$keep__2;
  return cljs$core$keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__17342 = this$__$1;
  return goog.getUid(G__17342);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__17343 = cljs.core.seq(self__.watches);
  var chunk__17344 = null;
  var count__17345 = 0;
  var i__17346 = 0;
  while (true) {
    if (i__17346 < count__17345) {
      var vec__17347 = chunk__17344.cljs$core$IIndexed$_nth$arity$2(null, i__17346);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17347, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17347, 1, null);
      var G__17348_17357 = key;
      var G__17349_17358 = this$__$1;
      var G__17350_17359 = oldval;
      var G__17351_17360 = newval;
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__17348_17357, G__17349_17358, G__17350_17359, G__17351_17360) : f.call(null, G__17348_17357, G__17349_17358, G__17350_17359, G__17351_17360);
      var G__17361 = seq__17343;
      var G__17362 = chunk__17344;
      var G__17363 = count__17345;
      var G__17364 = i__17346 + 1;
      seq__17343 = G__17361;
      chunk__17344 = G__17362;
      count__17345 = G__17363;
      i__17346 = G__17364;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__17343);
      if (temp__4126__auto__) {
        var seq__17343__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__17343__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__17343__$1);
          var G__17365 = cljs.core.chunk_rest(seq__17343__$1);
          var G__17366 = c__4907__auto__;
          var G__17367 = cljs.core.count(c__4907__auto__);
          var G__17368 = 0;
          seq__17343 = G__17365;
          chunk__17344 = G__17366;
          count__17345 = G__17367;
          i__17346 = G__17368;
          continue;
        } else {
          var vec__17352 = cljs.core.first(seq__17343__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17352, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17352, 1, null);
          var G__17353_17369 = key;
          var G__17354_17370 = this$__$1;
          var G__17355_17371 = oldval;
          var G__17356_17372 = newval;
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__17353_17369, G__17354_17370, G__17355_17371, G__17356_17372) : f.call(null, G__17353_17369, G__17354_17370, G__17355_17371, G__17356_17372);
          var G__17373 = cljs.core.next(seq__17343__$1);
          var G__17374 = null;
          var G__17375 = 0;
          var G__17376 = 0;
          seq__17343 = G__17373;
          chunk__17344 = G__17374;
          count__17345 = G__17375;
          i__17346 = G__17376;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var cljs$core$atom = null;
  var cljs$core$atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var cljs$core$atom__2 = function() {
    var G__17380__delegate = function(x, p__17377) {
      var map__17379 = p__17377;
      var map__17379__$1 = cljs.core.seq_QMARK_(map__17379) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__17379) : map__17379;
      var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__17379__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__17379__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__17380 = function(x, var_args) {
      var p__17377 = null;
      if (arguments.length > 1) {
        var G__17381__i = 0, G__17381__a = new Array(arguments.length - 1);
        while (G__17381__i < G__17381__a.length) {
          G__17381__a[G__17381__i] = arguments[G__17381__i + 1];
          ++G__17381__i;
        }
        p__17377 = new cljs.core.IndexedSeq(G__17381__a, 0);
      }
      return G__17380__delegate.call(this, x, p__17377);
    };
    G__17380.cljs$lang$maxFixedArity = 1;
    G__17380.cljs$lang$applyTo = function(arglist__17382) {
      var x = cljs.core.first(arglist__17382);
      var p__17377 = cljs.core.rest(arglist__17382);
      return G__17380__delegate(x, p__17377);
    };
    G__17380.cljs$core$IFn$_invoke$arity$variadic = G__17380__delegate;
    return G__17380;
  }();
  cljs$core$atom = function(x, var_args) {
    var p__17377 = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$atom__1.call(this, x);
      default:
        var G__17383 = null;
        if (arguments.length > 1) {
          var G__17384__i = 0, G__17384__a = new Array(arguments.length - 1);
          while (G__17384__i < G__17384__a.length) {
            G__17384__a[G__17384__i] = arguments[G__17384__i + 1];
            ++G__17384__i;
          }
          G__17383 = new cljs.core.IndexedSeq(G__17384__a, 0);
        }
        return cljs$core$atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__17383);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$atom.cljs$lang$maxFixedArity = 1;
  cljs$core$atom.cljs$lang$applyTo = cljs$core$atom__2.cljs$lang$applyTo;
  cljs$core$atom.cljs$core$IFn$_invoke$arity$1 = cljs$core$atom__1;
  cljs$core$atom.cljs$core$IFn$_invoke$arity$variadic = cljs$core$atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$atom;
}();
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(function() {
        var G__17387 = new_value;
        return validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(G__17387) : validate.call(null, G__17387);
      }())) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__17388 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__17388) : cljs.core.pr_str.call(null, G__17388);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var cljs$core$swap_BANG_ = null;
  var cljs$core$swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__17395 = a.state;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17395) : f.call(null, G__17395);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
    }
  };
  var cljs$core$swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__17396 = a.state;
        var G__17397 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17396, G__17397) : f.call(null, G__17396, G__17397);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
    }
  };
  var cljs$core$swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__17398 = a.state;
        var G__17399 = x;
        var G__17400 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17398, G__17399, G__17400) : f.call(null, G__17398, G__17399, G__17400);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
    }
  };
  var cljs$core$swap_BANG___5 = function() {
    var G__17401__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
      }
    };
    var G__17401 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__17402__i = 0, G__17402__a = new Array(arguments.length - 4);
        while (G__17402__i < G__17402__a.length) {
          G__17402__a[G__17402__i] = arguments[G__17402__i + 4];
          ++G__17402__i;
        }
        more = new cljs.core.IndexedSeq(G__17402__a, 0);
      }
      return G__17401__delegate.call(this, a, f, x, y, more);
    };
    G__17401.cljs$lang$maxFixedArity = 4;
    G__17401.cljs$lang$applyTo = function(arglist__17403) {
      var a = cljs.core.first(arglist__17403);
      arglist__17403 = cljs.core.next(arglist__17403);
      var f = cljs.core.first(arglist__17403);
      arglist__17403 = cljs.core.next(arglist__17403);
      var x = cljs.core.first(arglist__17403);
      arglist__17403 = cljs.core.next(arglist__17403);
      var y = cljs.core.first(arglist__17403);
      var more = cljs.core.rest(arglist__17403);
      return G__17401__delegate(a, f, x, y, more);
    };
    G__17401.cljs$core$IFn$_invoke$arity$variadic = G__17401__delegate;
    return G__17401;
  }();
  cljs$core$swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$swap_BANG___2.call(this, a, f);
      case 3:
        return cljs$core$swap_BANG___3.call(this, a, f, x);
      case 4:
        return cljs$core$swap_BANG___4.call(this, a, f, x, y);
      default:
        var G__17404 = null;
        if (arguments.length > 4) {
          var G__17405__i = 0, G__17405__a = new Array(arguments.length - 4);
          while (G__17405__i < G__17405__a.length) {
            G__17405__a[G__17405__i] = arguments[G__17405__i + 4];
            ++G__17405__i;
          }
          G__17404 = new cljs.core.IndexedSeq(G__17405__a, 0);
        }
        return cljs$core$swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, G__17404);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$swap_BANG_.cljs$lang$maxFixedArity = 4;
  cljs$core$swap_BANG_.cljs$lang$applyTo = cljs$core$swap_BANG___5.cljs$lang$applyTo;
  cljs$core$swap_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$swap_BANG___2;
  cljs$core$swap_BANG_.cljs$core$IFn$_invoke$arity$3 = cljs$core$swap_BANG___3;
  cljs$core$swap_BANG_.cljs$core$IFn$_invoke$arity$4 = cljs$core$swap_BANG___4;
  cljs$core$swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function() {
  var cljs$core$keep_indexed = null;
  var cljs$core$keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__17472 = null;
          var G__17472__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__17472__1 = function(result) {
            var G__17439 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17439) : rf.call(null, G__17439);
          };
          var G__17472__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            var v = function() {
              var G__17440 = i;
              var G__17441 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17440, G__17441) : f.call(null, G__17440, G__17441);
            }();
            if (v == null) {
              return result;
            } else {
              var G__17442 = result;
              var G__17443 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17442, G__17443) : rf.call(null, G__17442, G__17443);
            }
          };
          G__17472 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__17472__0.call(this);
              case 1:
                return G__17472__1.call(this, result);
              case 2:
                return G__17472__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__17472.cljs$core$IFn$_invoke$arity$0 = G__17472__0;
          G__17472.cljs$core$IFn$_invoke$arity$1 = G__17472__1;
          G__17472.cljs$core$IFn$_invoke$arity$2 = G__17472__2;
          return G__17472;
        }();
      }(ia);
    };
  };
  var cljs$core$keep_indexed__2 = function(f, coll) {
    var keepi = function cljs$core$keep_indexed_$_keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__5007__auto___17473 = size;
            var i_17474 = 0;
            while (true) {
              if (i_17474 < n__5007__auto___17473) {
                var x_17475 = function() {
                  var G__17468 = idx + i_17474;
                  var G__17469 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_17474);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17468, G__17469) : f.call(null, G__17468, G__17469);
                }();
                if (x_17475 == null) {
                } else {
                  cljs.core.chunk_append(b, x_17475);
                }
                var G__17476 = i_17474 + 1;
                i_17474 = G__17476;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keep_indexed_$_keepi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            var x = function() {
              var G__17470 = idx;
              var G__17471 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17470, G__17471) : f.call(null, G__17470, G__17471);
            }();
            if (x == null) {
              return cljs$core$keep_indexed_$_keepi(idx + 1, cljs.core.rest(s));
            } else {
              return cljs.core.cons(x, cljs$core$keep_indexed_$_keepi(idx + 1, cljs.core.rest(s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi(0, coll);
  };
  cljs$core$keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$keep_indexed__1.call(this, f);
      case 2:
        return cljs$core$keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$keep_indexed.cljs$core$IFn$_invoke$arity$1 = cljs$core$keep_indexed__1;
  cljs$core$keep_indexed.cljs$core$IFn$_invoke$arity$2 = cljs$core$keep_indexed__2;
  return cljs$core$keep_indexed;
}();
cljs.core.every_pred = function() {
  var cljs$core$every_pred = null;
  var cljs$core$every_pred__1 = function(p) {
    return function() {
      var cljs$core$every_pred_$_ep1 = null;
      var cljs$core$every_pred_$_ep1__0 = function() {
        return true;
      };
      var cljs$core$every_pred_$_ep1__1 = function(x) {
        return cljs.core.boolean$(function() {
          var G__17690 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__17690) : p.call(null, G__17690);
        }());
      };
      var cljs$core$every_pred_$_ep1__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__17692 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__17692) : p.call(null, G__17692);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var G__17693 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__17693) : p.call(null, G__17693);
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep1__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__17695 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__17695) : p.call(null, G__17695);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var and__4110__auto____$1 = function() {
              var G__17697 = y;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__17697) : p.call(null, G__17697);
            }();
            if (cljs.core.truth_(and__4110__auto____$1)) {
              var G__17698 = z;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__17698) : p.call(null, G__17698);
            } else {
              return and__4110__auto____$1;
            }
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep1__4 = function() {
        var G__17867__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(p, args));
        };
        var G__17867 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__17868__i = 0, G__17868__a = new Array(arguments.length - 3);
            while (G__17868__i < G__17868__a.length) {
              G__17868__a[G__17868__i] = arguments[G__17868__i + 3];
              ++G__17868__i;
            }
            args = new cljs.core.IndexedSeq(G__17868__a, 0);
          }
          return G__17867__delegate.call(this, x, y, z, args);
        };
        G__17867.cljs$lang$maxFixedArity = 3;
        G__17867.cljs$lang$applyTo = function(arglist__17869) {
          var x = cljs.core.first(arglist__17869);
          arglist__17869 = cljs.core.next(arglist__17869);
          var y = cljs.core.first(arglist__17869);
          arglist__17869 = cljs.core.next(arglist__17869);
          var z = cljs.core.first(arglist__17869);
          var args = cljs.core.rest(arglist__17869);
          return G__17867__delegate(x, y, z, args);
        };
        G__17867.cljs$core$IFn$_invoke$arity$variadic = G__17867__delegate;
        return G__17867;
      }();
      cljs$core$every_pred_$_ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$every_pred_$_ep1__0.call(this);
          case 1:
            return cljs$core$every_pred_$_ep1__1.call(this, x);
          case 2:
            return cljs$core$every_pred_$_ep1__2.call(this, x, y);
          case 3:
            return cljs$core$every_pred_$_ep1__3.call(this, x, y, z);
          default:
            var G__17870 = null;
            if (arguments.length > 3) {
              var G__17871__i = 0, G__17871__a = new Array(arguments.length - 3);
              while (G__17871__i < G__17871__a.length) {
                G__17871__a[G__17871__i] = arguments[G__17871__i + 3];
                ++G__17871__i;
              }
              G__17870 = new cljs.core.IndexedSeq(G__17871__a, 0);
            }
            return cljs$core$every_pred_$_ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17870);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$every_pred_$_ep1.cljs$lang$maxFixedArity = 3;
      cljs$core$every_pred_$_ep1.cljs$lang$applyTo = cljs$core$every_pred_$_ep1__4.cljs$lang$applyTo;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$every_pred_$_ep1__0;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred_$_ep1__1;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred_$_ep1__2;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred_$_ep1__3;
      cljs$core$every_pred_$_ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred_$_ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$every_pred_$_ep1;
    }();
  };
  var cljs$core$every_pred__2 = function(p1, p2) {
    return function() {
      var cljs$core$every_pred_$_ep2 = null;
      var cljs$core$every_pred_$_ep2__0 = function() {
        return true;
      };
      var cljs$core$every_pred_$_ep2__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__17730 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__17730) : p1.call(null, G__17730);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var G__17731 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__17731) : p2.call(null, G__17731);
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep2__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__17733 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__17733) : p1.call(null, G__17733);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var and__4110__auto____$1 = function() {
              var G__17735 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__17735) : p1.call(null, G__17735);
            }();
            if (cljs.core.truth_(and__4110__auto____$1)) {
              var and__4110__auto____$2 = function() {
                var G__17737 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__17737) : p2.call(null, G__17737);
              }();
              if (cljs.core.truth_(and__4110__auto____$2)) {
                var G__17738 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__17738) : p2.call(null, G__17738);
              } else {
                return and__4110__auto____$2;
              }
            } else {
              return and__4110__auto____$1;
            }
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep2__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__17740 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__17740) : p1.call(null, G__17740);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var and__4110__auto____$1 = function() {
              var G__17742 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__17742) : p1.call(null, G__17742);
            }();
            if (cljs.core.truth_(and__4110__auto____$1)) {
              var and__4110__auto____$2 = function() {
                var G__17744 = z;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__17744) : p1.call(null, G__17744);
              }();
              if (cljs.core.truth_(and__4110__auto____$2)) {
                var and__4110__auto____$3 = function() {
                  var G__17746 = x;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__17746) : p2.call(null, G__17746);
                }();
                if (cljs.core.truth_(and__4110__auto____$3)) {
                  var and__4110__auto____$4 = function() {
                    var G__17748 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__17748) : p2.call(null, G__17748);
                  }();
                  if (cljs.core.truth_(and__4110__auto____$4)) {
                    var G__17749 = z;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__17749) : p2.call(null, G__17749);
                  } else {
                    return and__4110__auto____$4;
                  }
                } else {
                  return and__4110__auto____$3;
                }
              } else {
                return and__4110__auto____$2;
              }
            } else {
              return and__4110__auto____$1;
            }
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep2__4 = function() {
        var G__17872__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__17477_SHARP_) {
            var and__4110__auto__ = function() {
              var G__17754 = p1__17477_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__17754) : p1.call(null, G__17754);
            }();
            if (cljs.core.truth_(and__4110__auto__)) {
              var G__17755 = p1__17477_SHARP_;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__17755) : p2.call(null, G__17755);
            } else {
              return and__4110__auto__;
            }
          }, args));
        };
        var G__17872 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__17873__i = 0, G__17873__a = new Array(arguments.length - 3);
            while (G__17873__i < G__17873__a.length) {
              G__17873__a[G__17873__i] = arguments[G__17873__i + 3];
              ++G__17873__i;
            }
            args = new cljs.core.IndexedSeq(G__17873__a, 0);
          }
          return G__17872__delegate.call(this, x, y, z, args);
        };
        G__17872.cljs$lang$maxFixedArity = 3;
        G__17872.cljs$lang$applyTo = function(arglist__17874) {
          var x = cljs.core.first(arglist__17874);
          arglist__17874 = cljs.core.next(arglist__17874);
          var y = cljs.core.first(arglist__17874);
          arglist__17874 = cljs.core.next(arglist__17874);
          var z = cljs.core.first(arglist__17874);
          var args = cljs.core.rest(arglist__17874);
          return G__17872__delegate(x, y, z, args);
        };
        G__17872.cljs$core$IFn$_invoke$arity$variadic = G__17872__delegate;
        return G__17872;
      }();
      cljs$core$every_pred_$_ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$every_pred_$_ep2__0.call(this);
          case 1:
            return cljs$core$every_pred_$_ep2__1.call(this, x);
          case 2:
            return cljs$core$every_pred_$_ep2__2.call(this, x, y);
          case 3:
            return cljs$core$every_pred_$_ep2__3.call(this, x, y, z);
          default:
            var G__17875 = null;
            if (arguments.length > 3) {
              var G__17876__i = 0, G__17876__a = new Array(arguments.length - 3);
              while (G__17876__i < G__17876__a.length) {
                G__17876__a[G__17876__i] = arguments[G__17876__i + 3];
                ++G__17876__i;
              }
              G__17875 = new cljs.core.IndexedSeq(G__17876__a, 0);
            }
            return cljs$core$every_pred_$_ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17875);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$every_pred_$_ep2.cljs$lang$maxFixedArity = 3;
      cljs$core$every_pred_$_ep2.cljs$lang$applyTo = cljs$core$every_pred_$_ep2__4.cljs$lang$applyTo;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$every_pred_$_ep2__0;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred_$_ep2__1;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred_$_ep2__2;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred_$_ep2__3;
      cljs$core$every_pred_$_ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred_$_ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$every_pred_$_ep2;
    }();
  };
  var cljs$core$every_pred__3 = function(p1, p2, p3) {
    return function() {
      var cljs$core$every_pred_$_ep3 = null;
      var cljs$core$every_pred_$_ep3__0 = function() {
        return true;
      };
      var cljs$core$every_pred_$_ep3__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__17801 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__17801) : p1.call(null, G__17801);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var and__4110__auto____$1 = function() {
              var G__17803 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__17803) : p2.call(null, G__17803);
            }();
            if (cljs.core.truth_(and__4110__auto____$1)) {
              var G__17804 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__17804) : p3.call(null, G__17804);
            } else {
              return and__4110__auto____$1;
            }
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep3__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__17806 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__17806) : p1.call(null, G__17806);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var and__4110__auto____$1 = function() {
              var G__17808 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__17808) : p2.call(null, G__17808);
            }();
            if (cljs.core.truth_(and__4110__auto____$1)) {
              var and__4110__auto____$2 = function() {
                var G__17810 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__17810) : p3.call(null, G__17810);
              }();
              if (cljs.core.truth_(and__4110__auto____$2)) {
                var and__4110__auto____$3 = function() {
                  var G__17812 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__17812) : p1.call(null, G__17812);
                }();
                if (cljs.core.truth_(and__4110__auto____$3)) {
                  var and__4110__auto____$4 = function() {
                    var G__17814 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__17814) : p2.call(null, G__17814);
                  }();
                  if (cljs.core.truth_(and__4110__auto____$4)) {
                    var G__17815 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__17815) : p3.call(null, G__17815);
                  } else {
                    return and__4110__auto____$4;
                  }
                } else {
                  return and__4110__auto____$3;
                }
              } else {
                return and__4110__auto____$2;
              }
            } else {
              return and__4110__auto____$1;
            }
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep3__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__4110__auto__ = function() {
            var G__17817 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__17817) : p1.call(null, G__17817);
          }();
          if (cljs.core.truth_(and__4110__auto__)) {
            var and__4110__auto____$1 = function() {
              var G__17819 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__17819) : p2.call(null, G__17819);
            }();
            if (cljs.core.truth_(and__4110__auto____$1)) {
              var and__4110__auto____$2 = function() {
                var G__17821 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__17821) : p3.call(null, G__17821);
              }();
              if (cljs.core.truth_(and__4110__auto____$2)) {
                var and__4110__auto____$3 = function() {
                  var G__17823 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__17823) : p1.call(null, G__17823);
                }();
                if (cljs.core.truth_(and__4110__auto____$3)) {
                  var and__4110__auto____$4 = function() {
                    var G__17825 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__17825) : p2.call(null, G__17825);
                  }();
                  if (cljs.core.truth_(and__4110__auto____$4)) {
                    var and__4110__auto____$5 = function() {
                      var G__17827 = y;
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__17827) : p3.call(null, G__17827);
                    }();
                    if (cljs.core.truth_(and__4110__auto____$5)) {
                      var and__4110__auto____$6 = function() {
                        var G__17829 = z;
                        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__17829) : p1.call(null, G__17829);
                      }();
                      if (cljs.core.truth_(and__4110__auto____$6)) {
                        var and__4110__auto____$7 = function() {
                          var G__17831 = z;
                          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__17831) : p2.call(null, G__17831);
                        }();
                        if (cljs.core.truth_(and__4110__auto____$7)) {
                          var G__17832 = z;
                          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__17832) : p3.call(null, G__17832);
                        } else {
                          return and__4110__auto____$7;
                        }
                      } else {
                        return and__4110__auto____$6;
                      }
                    } else {
                      return and__4110__auto____$5;
                    }
                  } else {
                    return and__4110__auto____$4;
                  }
                } else {
                  return and__4110__auto____$3;
                }
              } else {
                return and__4110__auto____$2;
              }
            } else {
              return and__4110__auto____$1;
            }
          } else {
            return and__4110__auto__;
          }
        }());
      };
      var cljs$core$every_pred_$_ep3__4 = function() {
        var G__17877__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__17478_SHARP_) {
            var and__4110__auto__ = function() {
              var G__17839 = p1__17478_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__17839) : p1.call(null, G__17839);
            }();
            if (cljs.core.truth_(and__4110__auto__)) {
              var and__4110__auto____$1 = function() {
                var G__17841 = p1__17478_SHARP_;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__17841) : p2.call(null, G__17841);
              }();
              if (cljs.core.truth_(and__4110__auto____$1)) {
                var G__17842 = p1__17478_SHARP_;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__17842) : p3.call(null, G__17842);
              } else {
                return and__4110__auto____$1;
              }
            } else {
              return and__4110__auto__;
            }
          }, args));
        };
        var G__17877 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__17878__i = 0, G__17878__a = new Array(arguments.length - 3);
            while (G__17878__i < G__17878__a.length) {
              G__17878__a[G__17878__i] = arguments[G__17878__i + 3];
              ++G__17878__i;
            }
            args = new cljs.core.IndexedSeq(G__17878__a, 0);
          }
          return G__17877__delegate.call(this, x, y, z, args);
        };
        G__17877.cljs$lang$maxFixedArity = 3;
        G__17877.cljs$lang$applyTo = function(arglist__17879) {
          var x = cljs.core.first(arglist__17879);
          arglist__17879 = cljs.core.next(arglist__17879);
          var y = cljs.core.first(arglist__17879);
          arglist__17879 = cljs.core.next(arglist__17879);
          var z = cljs.core.first(arglist__17879);
          var args = cljs.core.rest(arglist__17879);
          return G__17877__delegate(x, y, z, args);
        };
        G__17877.cljs$core$IFn$_invoke$arity$variadic = G__17877__delegate;
        return G__17877;
      }();
      cljs$core$every_pred_$_ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$every_pred_$_ep3__0.call(this);
          case 1:
            return cljs$core$every_pred_$_ep3__1.call(this, x);
          case 2:
            return cljs$core$every_pred_$_ep3__2.call(this, x, y);
          case 3:
            return cljs$core$every_pred_$_ep3__3.call(this, x, y, z);
          default:
            var G__17880 = null;
            if (arguments.length > 3) {
              var G__17881__i = 0, G__17881__a = new Array(arguments.length - 3);
              while (G__17881__i < G__17881__a.length) {
                G__17881__a[G__17881__i] = arguments[G__17881__i + 3];
                ++G__17881__i;
              }
              G__17880 = new cljs.core.IndexedSeq(G__17881__a, 0);
            }
            return cljs$core$every_pred_$_ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17880);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$every_pred_$_ep3.cljs$lang$maxFixedArity = 3;
      cljs$core$every_pred_$_ep3.cljs$lang$applyTo = cljs$core$every_pred_$_ep3__4.cljs$lang$applyTo;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$every_pred_$_ep3__0;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred_$_ep3__1;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred_$_ep3__2;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred_$_ep3__3;
      cljs$core$every_pred_$_ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred_$_ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$every_pred_$_ep3;
    }();
  };
  var cljs$core$every_pred__4 = function() {
    var G__17882__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var cljs$core$every_pred_$_epn = null;
          var cljs$core$every_pred_$_epn__0 = function() {
            return true;
          };
          var cljs$core$every_pred_$_epn__1 = function(x) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__17479_SHARP_) {
                var G__17858 = x;
                return p1__17479_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__17479_SHARP_.cljs$core$IFn$_invoke$arity$1(G__17858) : p1__17479_SHARP_.call(null, G__17858);
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$every_pred_$_epn__2 = function(x, y) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__17480_SHARP_) {
                var and__4110__auto__ = function() {
                  var G__17860 = x;
                  return p1__17480_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__17480_SHARP_.cljs$core$IFn$_invoke$arity$1(G__17860) : p1__17480_SHARP_.call(null, G__17860);
                }();
                if (cljs.core.truth_(and__4110__auto__)) {
                  var G__17861 = y;
                  return p1__17480_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__17480_SHARP_.cljs$core$IFn$_invoke$arity$1(G__17861) : p1__17480_SHARP_.call(null, G__17861);
                } else {
                  return and__4110__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$every_pred_$_epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__17481_SHARP_) {
                var and__4110__auto__ = function() {
                  var G__17863 = x;
                  return p1__17481_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__17481_SHARP_.cljs$core$IFn$_invoke$arity$1(G__17863) : p1__17481_SHARP_.call(null, G__17863);
                }();
                if (cljs.core.truth_(and__4110__auto__)) {
                  var and__4110__auto____$1 = function() {
                    var G__17865 = y;
                    return p1__17481_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__17481_SHARP_.cljs$core$IFn$_invoke$arity$1(G__17865) : p1__17481_SHARP_.call(null, G__17865);
                  }();
                  if (cljs.core.truth_(and__4110__auto____$1)) {
                    var G__17866 = z;
                    return p1__17481_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__17481_SHARP_.cljs$core$IFn$_invoke$arity$1(G__17866) : p1__17481_SHARP_.call(null, G__17866);
                  } else {
                    return and__4110__auto____$1;
                  }
                } else {
                  return and__4110__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$every_pred_$_epn__4 = function() {
            var G__17883__delegate = function(x, y, z, args) {
              return cljs.core.boolean$(cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(ps__$1) {
                return function(p1__17482_SHARP_) {
                  return cljs.core.every_QMARK_(p1__17482_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__17883 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__17884__i = 0, G__17884__a = new Array(arguments.length - 3);
                while (G__17884__i < G__17884__a.length) {
                  G__17884__a[G__17884__i] = arguments[G__17884__i + 3];
                  ++G__17884__i;
                }
                args = new cljs.core.IndexedSeq(G__17884__a, 0);
              }
              return G__17883__delegate.call(this, x, y, z, args);
            };
            G__17883.cljs$lang$maxFixedArity = 3;
            G__17883.cljs$lang$applyTo = function(arglist__17885) {
              var x = cljs.core.first(arglist__17885);
              arglist__17885 = cljs.core.next(arglist__17885);
              var y = cljs.core.first(arglist__17885);
              arglist__17885 = cljs.core.next(arglist__17885);
              var z = cljs.core.first(arglist__17885);
              var args = cljs.core.rest(arglist__17885);
              return G__17883__delegate(x, y, z, args);
            };
            G__17883.cljs$core$IFn$_invoke$arity$variadic = G__17883__delegate;
            return G__17883;
          }();
          cljs$core$every_pred_$_epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return cljs$core$every_pred_$_epn__0.call(this);
              case 1:
                return cljs$core$every_pred_$_epn__1.call(this, x);
              case 2:
                return cljs$core$every_pred_$_epn__2.call(this, x, y);
              case 3:
                return cljs$core$every_pred_$_epn__3.call(this, x, y, z);
              default:
                var G__17886 = null;
                if (arguments.length > 3) {
                  var G__17887__i = 0, G__17887__a = new Array(arguments.length - 3);
                  while (G__17887__i < G__17887__a.length) {
                    G__17887__a[G__17887__i] = arguments[G__17887__i + 3];
                    ++G__17887__i;
                  }
                  G__17886 = new cljs.core.IndexedSeq(G__17887__a, 0);
                }
                return cljs$core$every_pred_$_epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17886);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          cljs$core$every_pred_$_epn.cljs$lang$maxFixedArity = 3;
          cljs$core$every_pred_$_epn.cljs$lang$applyTo = cljs$core$every_pred_$_epn__4.cljs$lang$applyTo;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$every_pred_$_epn__0;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred_$_epn__1;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred_$_epn__2;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred_$_epn__3;
          cljs$core$every_pred_$_epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred_$_epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return cljs$core$every_pred_$_epn;
        }();
      }(ps__$1);
    };
    var G__17882 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__17888__i = 0, G__17888__a = new Array(arguments.length - 3);
        while (G__17888__i < G__17888__a.length) {
          G__17888__a[G__17888__i] = arguments[G__17888__i + 3];
          ++G__17888__i;
        }
        ps = new cljs.core.IndexedSeq(G__17888__a, 0);
      }
      return G__17882__delegate.call(this, p1, p2, p3, ps);
    };
    G__17882.cljs$lang$maxFixedArity = 3;
    G__17882.cljs$lang$applyTo = function(arglist__17889) {
      var p1 = cljs.core.first(arglist__17889);
      arglist__17889 = cljs.core.next(arglist__17889);
      var p2 = cljs.core.first(arglist__17889);
      arglist__17889 = cljs.core.next(arglist__17889);
      var p3 = cljs.core.first(arglist__17889);
      var ps = cljs.core.rest(arglist__17889);
      return G__17882__delegate(p1, p2, p3, ps);
    };
    G__17882.cljs$core$IFn$_invoke$arity$variadic = G__17882__delegate;
    return G__17882;
  }();
  cljs$core$every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$every_pred__1.call(this, p1);
      case 2:
        return cljs$core$every_pred__2.call(this, p1, p2);
      case 3:
        return cljs$core$every_pred__3.call(this, p1, p2, p3);
      default:
        var G__17890 = null;
        if (arguments.length > 3) {
          var G__17891__i = 0, G__17891__a = new Array(arguments.length - 3);
          while (G__17891__i < G__17891__a.length) {
            G__17891__a[G__17891__i] = arguments[G__17891__i + 3];
            ++G__17891__i;
          }
          G__17890 = new cljs.core.IndexedSeq(G__17891__a, 0);
        }
        return cljs$core$every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__17890);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$every_pred.cljs$lang$maxFixedArity = 3;
  cljs$core$every_pred.cljs$lang$applyTo = cljs$core$every_pred__4.cljs$lang$applyTo;
  cljs$core$every_pred.cljs$core$IFn$_invoke$arity$1 = cljs$core$every_pred__1;
  cljs$core$every_pred.cljs$core$IFn$_invoke$arity$2 = cljs$core$every_pred__2;
  cljs$core$every_pred.cljs$core$IFn$_invoke$arity$3 = cljs$core$every_pred__3;
  cljs$core$every_pred.cljs$core$IFn$_invoke$arity$variadic = cljs$core$every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$every_pred;
}();
cljs.core.some_fn = function() {
  var cljs$core$some_fn = null;
  var cljs$core$some_fn__1 = function(p) {
    return function() {
      var cljs$core$some_fn_$_sp1 = null;
      var cljs$core$some_fn_$_sp1__0 = function() {
        return null;
      };
      var cljs$core$some_fn_$_sp1__1 = function(x) {
        var G__18097 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18097) : p.call(null, G__18097);
      };
      var cljs$core$some_fn_$_sp1__2 = function(x, y) {
        var or__4122__auto__ = function() {
          var G__18099 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18099) : p.call(null, G__18099);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var G__18100 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18100) : p.call(null, G__18100);
        }
      };
      var cljs$core$some_fn_$_sp1__3 = function(x, y, z) {
        var or__4122__auto__ = function() {
          var G__18102 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18102) : p.call(null, G__18102);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = function() {
            var G__18104 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18104) : p.call(null, G__18104);
          }();
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            var G__18105 = z;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18105) : p.call(null, G__18105);
          }
        }
      };
      var cljs$core$some_fn_$_sp1__4 = function() {
        var G__18266__delegate = function(x, y, z, args) {
          var or__4122__auto__ = cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return cljs.core.some(p, args);
          }
        };
        var G__18266 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__18267__i = 0, G__18267__a = new Array(arguments.length - 3);
            while (G__18267__i < G__18267__a.length) {
              G__18267__a[G__18267__i] = arguments[G__18267__i + 3];
              ++G__18267__i;
            }
            args = new cljs.core.IndexedSeq(G__18267__a, 0);
          }
          return G__18266__delegate.call(this, x, y, z, args);
        };
        G__18266.cljs$lang$maxFixedArity = 3;
        G__18266.cljs$lang$applyTo = function(arglist__18268) {
          var x = cljs.core.first(arglist__18268);
          arglist__18268 = cljs.core.next(arglist__18268);
          var y = cljs.core.first(arglist__18268);
          arglist__18268 = cljs.core.next(arglist__18268);
          var z = cljs.core.first(arglist__18268);
          var args = cljs.core.rest(arglist__18268);
          return G__18266__delegate(x, y, z, args);
        };
        G__18266.cljs$core$IFn$_invoke$arity$variadic = G__18266__delegate;
        return G__18266;
      }();
      cljs$core$some_fn_$_sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$some_fn_$_sp1__0.call(this);
          case 1:
            return cljs$core$some_fn_$_sp1__1.call(this, x);
          case 2:
            return cljs$core$some_fn_$_sp1__2.call(this, x, y);
          case 3:
            return cljs$core$some_fn_$_sp1__3.call(this, x, y, z);
          default:
            var G__18269 = null;
            if (arguments.length > 3) {
              var G__18270__i = 0, G__18270__a = new Array(arguments.length - 3);
              while (G__18270__i < G__18270__a.length) {
                G__18270__a[G__18270__i] = arguments[G__18270__i + 3];
                ++G__18270__i;
              }
              G__18269 = new cljs.core.IndexedSeq(G__18270__a, 0);
            }
            return cljs$core$some_fn_$_sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18269);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$some_fn_$_sp1.cljs$lang$maxFixedArity = 3;
      cljs$core$some_fn_$_sp1.cljs$lang$applyTo = cljs$core$some_fn_$_sp1__4.cljs$lang$applyTo;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$some_fn_$_sp1__0;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn_$_sp1__1;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn_$_sp1__2;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn_$_sp1__3;
      cljs$core$some_fn_$_sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn_$_sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$some_fn_$_sp1;
    }();
  };
  var cljs$core$some_fn__2 = function(p1, p2) {
    return function() {
      var cljs$core$some_fn_$_sp2 = null;
      var cljs$core$some_fn_$_sp2__0 = function() {
        return null;
      };
      var cljs$core$some_fn_$_sp2__1 = function(x) {
        var or__4122__auto__ = function() {
          var G__18137 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18137) : p1.call(null, G__18137);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var G__18138 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18138) : p2.call(null, G__18138);
        }
      };
      var cljs$core$some_fn_$_sp2__2 = function(x, y) {
        var or__4122__auto__ = function() {
          var G__18140 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18140) : p1.call(null, G__18140);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = function() {
            var G__18142 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18142) : p1.call(null, G__18142);
          }();
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            var or__4122__auto____$2 = function() {
              var G__18144 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18144) : p2.call(null, G__18144);
            }();
            if (cljs.core.truth_(or__4122__auto____$2)) {
              return or__4122__auto____$2;
            } else {
              var G__18145 = y;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18145) : p2.call(null, G__18145);
            }
          }
        }
      };
      var cljs$core$some_fn_$_sp2__3 = function(x, y, z) {
        var or__4122__auto__ = function() {
          var G__18147 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18147) : p1.call(null, G__18147);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = function() {
            var G__18149 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18149) : p1.call(null, G__18149);
          }();
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            var or__4122__auto____$2 = function() {
              var G__18151 = z;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18151) : p1.call(null, G__18151);
            }();
            if (cljs.core.truth_(or__4122__auto____$2)) {
              return or__4122__auto____$2;
            } else {
              var or__4122__auto____$3 = function() {
                var G__18153 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18153) : p2.call(null, G__18153);
              }();
              if (cljs.core.truth_(or__4122__auto____$3)) {
                return or__4122__auto____$3;
              } else {
                var or__4122__auto____$4 = function() {
                  var G__18155 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18155) : p2.call(null, G__18155);
                }();
                if (cljs.core.truth_(or__4122__auto____$4)) {
                  return or__4122__auto____$4;
                } else {
                  var G__18156 = z;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18156) : p2.call(null, G__18156);
                }
              }
            }
          }
        }
      };
      var cljs$core$some_fn_$_sp2__4 = function() {
        var G__18271__delegate = function(x, y, z, args) {
          var or__4122__auto__ = cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return cljs.core.some(function(or__4122__auto__) {
              return function(p1__17892_SHARP_) {
                var or__4122__auto____$1 = function() {
                  var G__18158 = p1__17892_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18158) : p1.call(null, G__18158);
                }();
                if (cljs.core.truth_(or__4122__auto____$1)) {
                  return or__4122__auto____$1;
                } else {
                  var G__18159 = p1__17892_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18159) : p2.call(null, G__18159);
                }
              };
            }(or__4122__auto__), args);
          }
        };
        var G__18271 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__18272__i = 0, G__18272__a = new Array(arguments.length - 3);
            while (G__18272__i < G__18272__a.length) {
              G__18272__a[G__18272__i] = arguments[G__18272__i + 3];
              ++G__18272__i;
            }
            args = new cljs.core.IndexedSeq(G__18272__a, 0);
          }
          return G__18271__delegate.call(this, x, y, z, args);
        };
        G__18271.cljs$lang$maxFixedArity = 3;
        G__18271.cljs$lang$applyTo = function(arglist__18273) {
          var x = cljs.core.first(arglist__18273);
          arglist__18273 = cljs.core.next(arglist__18273);
          var y = cljs.core.first(arglist__18273);
          arglist__18273 = cljs.core.next(arglist__18273);
          var z = cljs.core.first(arglist__18273);
          var args = cljs.core.rest(arglist__18273);
          return G__18271__delegate(x, y, z, args);
        };
        G__18271.cljs$core$IFn$_invoke$arity$variadic = G__18271__delegate;
        return G__18271;
      }();
      cljs$core$some_fn_$_sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$some_fn_$_sp2__0.call(this);
          case 1:
            return cljs$core$some_fn_$_sp2__1.call(this, x);
          case 2:
            return cljs$core$some_fn_$_sp2__2.call(this, x, y);
          case 3:
            return cljs$core$some_fn_$_sp2__3.call(this, x, y, z);
          default:
            var G__18274 = null;
            if (arguments.length > 3) {
              var G__18275__i = 0, G__18275__a = new Array(arguments.length - 3);
              while (G__18275__i < G__18275__a.length) {
                G__18275__a[G__18275__i] = arguments[G__18275__i + 3];
                ++G__18275__i;
              }
              G__18274 = new cljs.core.IndexedSeq(G__18275__a, 0);
            }
            return cljs$core$some_fn_$_sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18274);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$some_fn_$_sp2.cljs$lang$maxFixedArity = 3;
      cljs$core$some_fn_$_sp2.cljs$lang$applyTo = cljs$core$some_fn_$_sp2__4.cljs$lang$applyTo;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$some_fn_$_sp2__0;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn_$_sp2__1;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn_$_sp2__2;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn_$_sp2__3;
      cljs$core$some_fn_$_sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn_$_sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$some_fn_$_sp2;
    }();
  };
  var cljs$core$some_fn__3 = function(p1, p2, p3) {
    return function() {
      var cljs$core$some_fn_$_sp3 = null;
      var cljs$core$some_fn_$_sp3__0 = function() {
        return null;
      };
      var cljs$core$some_fn_$_sp3__1 = function(x) {
        var or__4122__auto__ = function() {
          var G__18205 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18205) : p1.call(null, G__18205);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = function() {
            var G__18207 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18207) : p2.call(null, G__18207);
          }();
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            var G__18208 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18208) : p3.call(null, G__18208);
          }
        }
      };
      var cljs$core$some_fn_$_sp3__2 = function(x, y) {
        var or__4122__auto__ = function() {
          var G__18210 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18210) : p1.call(null, G__18210);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = function() {
            var G__18212 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18212) : p2.call(null, G__18212);
          }();
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            var or__4122__auto____$2 = function() {
              var G__18214 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18214) : p3.call(null, G__18214);
            }();
            if (cljs.core.truth_(or__4122__auto____$2)) {
              return or__4122__auto____$2;
            } else {
              var or__4122__auto____$3 = function() {
                var G__18216 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18216) : p1.call(null, G__18216);
              }();
              if (cljs.core.truth_(or__4122__auto____$3)) {
                return or__4122__auto____$3;
              } else {
                var or__4122__auto____$4 = function() {
                  var G__18218 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18218) : p2.call(null, G__18218);
                }();
                if (cljs.core.truth_(or__4122__auto____$4)) {
                  return or__4122__auto____$4;
                } else {
                  var G__18219 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18219) : p3.call(null, G__18219);
                }
              }
            }
          }
        }
      };
      var cljs$core$some_fn_$_sp3__3 = function(x, y, z) {
        var or__4122__auto__ = function() {
          var G__18221 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18221) : p1.call(null, G__18221);
        }();
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = function() {
            var G__18223 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18223) : p2.call(null, G__18223);
          }();
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            var or__4122__auto____$2 = function() {
              var G__18225 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18225) : p3.call(null, G__18225);
            }();
            if (cljs.core.truth_(or__4122__auto____$2)) {
              return or__4122__auto____$2;
            } else {
              var or__4122__auto____$3 = function() {
                var G__18227 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18227) : p1.call(null, G__18227);
              }();
              if (cljs.core.truth_(or__4122__auto____$3)) {
                return or__4122__auto____$3;
              } else {
                var or__4122__auto____$4 = function() {
                  var G__18229 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18229) : p2.call(null, G__18229);
                }();
                if (cljs.core.truth_(or__4122__auto____$4)) {
                  return or__4122__auto____$4;
                } else {
                  var or__4122__auto____$5 = function() {
                    var G__18231 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18231) : p3.call(null, G__18231);
                  }();
                  if (cljs.core.truth_(or__4122__auto____$5)) {
                    return or__4122__auto____$5;
                  } else {
                    var or__4122__auto____$6 = function() {
                      var G__18233 = z;
                      return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18233) : p1.call(null, G__18233);
                    }();
                    if (cljs.core.truth_(or__4122__auto____$6)) {
                      return or__4122__auto____$6;
                    } else {
                      var or__4122__auto____$7 = function() {
                        var G__18235 = z;
                        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18235) : p2.call(null, G__18235);
                      }();
                      if (cljs.core.truth_(or__4122__auto____$7)) {
                        return or__4122__auto____$7;
                      } else {
                        var G__18236 = z;
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18236) : p3.call(null, G__18236);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var cljs$core$some_fn_$_sp3__4 = function() {
        var G__18276__delegate = function(x, y, z, args) {
          var or__4122__auto__ = cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return cljs.core.some(function(or__4122__auto__) {
              return function(p1__17893_SHARP_) {
                var or__4122__auto____$1 = function() {
                  var G__18238 = p1__17893_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18238) : p1.call(null, G__18238);
                }();
                if (cljs.core.truth_(or__4122__auto____$1)) {
                  return or__4122__auto____$1;
                } else {
                  var or__4122__auto____$2 = function() {
                    var G__18240 = p1__17893_SHARP_;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18240) : p2.call(null, G__18240);
                  }();
                  if (cljs.core.truth_(or__4122__auto____$2)) {
                    return or__4122__auto____$2;
                  } else {
                    var G__18241 = p1__17893_SHARP_;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18241) : p3.call(null, G__18241);
                  }
                }
              };
            }(or__4122__auto__), args);
          }
        };
        var G__18276 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__18277__i = 0, G__18277__a = new Array(arguments.length - 3);
            while (G__18277__i < G__18277__a.length) {
              G__18277__a[G__18277__i] = arguments[G__18277__i + 3];
              ++G__18277__i;
            }
            args = new cljs.core.IndexedSeq(G__18277__a, 0);
          }
          return G__18276__delegate.call(this, x, y, z, args);
        };
        G__18276.cljs$lang$maxFixedArity = 3;
        G__18276.cljs$lang$applyTo = function(arglist__18278) {
          var x = cljs.core.first(arglist__18278);
          arglist__18278 = cljs.core.next(arglist__18278);
          var y = cljs.core.first(arglist__18278);
          arglist__18278 = cljs.core.next(arglist__18278);
          var z = cljs.core.first(arglist__18278);
          var args = cljs.core.rest(arglist__18278);
          return G__18276__delegate(x, y, z, args);
        };
        G__18276.cljs$core$IFn$_invoke$arity$variadic = G__18276__delegate;
        return G__18276;
      }();
      cljs$core$some_fn_$_sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$some_fn_$_sp3__0.call(this);
          case 1:
            return cljs$core$some_fn_$_sp3__1.call(this, x);
          case 2:
            return cljs$core$some_fn_$_sp3__2.call(this, x, y);
          case 3:
            return cljs$core$some_fn_$_sp3__3.call(this, x, y, z);
          default:
            var G__18279 = null;
            if (arguments.length > 3) {
              var G__18280__i = 0, G__18280__a = new Array(arguments.length - 3);
              while (G__18280__i < G__18280__a.length) {
                G__18280__a[G__18280__i] = arguments[G__18280__i + 3];
                ++G__18280__i;
              }
              G__18279 = new cljs.core.IndexedSeq(G__18280__a, 0);
            }
            return cljs$core$some_fn_$_sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18279);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$some_fn_$_sp3.cljs$lang$maxFixedArity = 3;
      cljs$core$some_fn_$_sp3.cljs$lang$applyTo = cljs$core$some_fn_$_sp3__4.cljs$lang$applyTo;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$some_fn_$_sp3__0;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn_$_sp3__1;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn_$_sp3__2;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn_$_sp3__3;
      cljs$core$some_fn_$_sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn_$_sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$some_fn_$_sp3;
    }();
  };
  var cljs$core$some_fn__4 = function() {
    var G__18281__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var cljs$core$some_fn_$_spn = null;
          var cljs$core$some_fn_$_spn__0 = function() {
            return null;
          };
          var cljs$core$some_fn_$_spn__1 = function(x) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__17894_SHARP_) {
                var G__18257 = x;
                return p1__17894_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__17894_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18257) : p1__17894_SHARP_.call(null, G__18257);
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$some_fn_$_spn__2 = function(x, y) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__17895_SHARP_) {
                var or__4122__auto__ = function() {
                  var G__18259 = x;
                  return p1__17895_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__17895_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18259) : p1__17895_SHARP_.call(null, G__18259);
                }();
                if (cljs.core.truth_(or__4122__auto__)) {
                  return or__4122__auto__;
                } else {
                  var G__18260 = y;
                  return p1__17895_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__17895_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18260) : p1__17895_SHARP_.call(null, G__18260);
                }
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$some_fn_$_spn__3 = function(x, y, z) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__17896_SHARP_) {
                var or__4122__auto__ = function() {
                  var G__18262 = x;
                  return p1__17896_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__17896_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18262) : p1__17896_SHARP_.call(null, G__18262);
                }();
                if (cljs.core.truth_(or__4122__auto__)) {
                  return or__4122__auto__;
                } else {
                  var or__4122__auto____$1 = function() {
                    var G__18264 = y;
                    return p1__17896_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__17896_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18264) : p1__17896_SHARP_.call(null, G__18264);
                  }();
                  if (cljs.core.truth_(or__4122__auto____$1)) {
                    return or__4122__auto____$1;
                  } else {
                    var G__18265 = z;
                    return p1__17896_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__17896_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18265) : p1__17896_SHARP_.call(null, G__18265);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var cljs$core$some_fn_$_spn__4 = function() {
            var G__18282__delegate = function(x, y, z, args) {
              var or__4122__auto__ = cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
              if (cljs.core.truth_(or__4122__auto__)) {
                return or__4122__auto__;
              } else {
                return cljs.core.some(function(or__4122__auto__, ps__$1) {
                  return function(p1__17897_SHARP_) {
                    return cljs.core.some(p1__17897_SHARP_, args);
                  };
                }(or__4122__auto__, ps__$1), ps__$1);
              }
            };
            var G__18282 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__18283__i = 0, G__18283__a = new Array(arguments.length - 3);
                while (G__18283__i < G__18283__a.length) {
                  G__18283__a[G__18283__i] = arguments[G__18283__i + 3];
                  ++G__18283__i;
                }
                args = new cljs.core.IndexedSeq(G__18283__a, 0);
              }
              return G__18282__delegate.call(this, x, y, z, args);
            };
            G__18282.cljs$lang$maxFixedArity = 3;
            G__18282.cljs$lang$applyTo = function(arglist__18284) {
              var x = cljs.core.first(arglist__18284);
              arglist__18284 = cljs.core.next(arglist__18284);
              var y = cljs.core.first(arglist__18284);
              arglist__18284 = cljs.core.next(arglist__18284);
              var z = cljs.core.first(arglist__18284);
              var args = cljs.core.rest(arglist__18284);
              return G__18282__delegate(x, y, z, args);
            };
            G__18282.cljs$core$IFn$_invoke$arity$variadic = G__18282__delegate;
            return G__18282;
          }();
          cljs$core$some_fn_$_spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return cljs$core$some_fn_$_spn__0.call(this);
              case 1:
                return cljs$core$some_fn_$_spn__1.call(this, x);
              case 2:
                return cljs$core$some_fn_$_spn__2.call(this, x, y);
              case 3:
                return cljs$core$some_fn_$_spn__3.call(this, x, y, z);
              default:
                var G__18285 = null;
                if (arguments.length > 3) {
                  var G__18286__i = 0, G__18286__a = new Array(arguments.length - 3);
                  while (G__18286__i < G__18286__a.length) {
                    G__18286__a[G__18286__i] = arguments[G__18286__i + 3];
                    ++G__18286__i;
                  }
                  G__18285 = new cljs.core.IndexedSeq(G__18286__a, 0);
                }
                return cljs$core$some_fn_$_spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18285);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          cljs$core$some_fn_$_spn.cljs$lang$maxFixedArity = 3;
          cljs$core$some_fn_$_spn.cljs$lang$applyTo = cljs$core$some_fn_$_spn__4.cljs$lang$applyTo;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$some_fn_$_spn__0;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn_$_spn__1;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn_$_spn__2;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn_$_spn__3;
          cljs$core$some_fn_$_spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn_$_spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return cljs$core$some_fn_$_spn;
        }();
      }(ps__$1);
    };
    var G__18281 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__18287__i = 0, G__18287__a = new Array(arguments.length - 3);
        while (G__18287__i < G__18287__a.length) {
          G__18287__a[G__18287__i] = arguments[G__18287__i + 3];
          ++G__18287__i;
        }
        ps = new cljs.core.IndexedSeq(G__18287__a, 0);
      }
      return G__18281__delegate.call(this, p1, p2, p3, ps);
    };
    G__18281.cljs$lang$maxFixedArity = 3;
    G__18281.cljs$lang$applyTo = function(arglist__18288) {
      var p1 = cljs.core.first(arglist__18288);
      arglist__18288 = cljs.core.next(arglist__18288);
      var p2 = cljs.core.first(arglist__18288);
      arglist__18288 = cljs.core.next(arglist__18288);
      var p3 = cljs.core.first(arglist__18288);
      var ps = cljs.core.rest(arglist__18288);
      return G__18281__delegate(p1, p2, p3, ps);
    };
    G__18281.cljs$core$IFn$_invoke$arity$variadic = G__18281__delegate;
    return G__18281;
  }();
  cljs$core$some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$some_fn__1.call(this, p1);
      case 2:
        return cljs$core$some_fn__2.call(this, p1, p2);
      case 3:
        return cljs$core$some_fn__3.call(this, p1, p2, p3);
      default:
        var G__18289 = null;
        if (arguments.length > 3) {
          var G__18290__i = 0, G__18290__a = new Array(arguments.length - 3);
          while (G__18290__i < G__18290__a.length) {
            G__18290__a[G__18290__i] = arguments[G__18290__i + 3];
            ++G__18290__i;
          }
          G__18289 = new cljs.core.IndexedSeq(G__18290__a, 0);
        }
        return cljs$core$some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__18289);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$some_fn.cljs$lang$maxFixedArity = 3;
  cljs$core$some_fn.cljs$lang$applyTo = cljs$core$some_fn__4.cljs$lang$applyTo;
  cljs$core$some_fn.cljs$core$IFn$_invoke$arity$1 = cljs$core$some_fn__1;
  cljs$core$some_fn.cljs$core$IFn$_invoke$arity$2 = cljs$core$some_fn__2;
  cljs$core$some_fn.cljs$core$IFn$_invoke$arity$3 = cljs$core$some_fn__3;
  cljs$core$some_fn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$some_fn;
}();
cljs.core.map = function() {
  var cljs$core$map = null;
  var cljs$core$map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__18345 = null;
        var G__18345__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__18345__1 = function(result) {
          var G__18331 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18331) : rf.call(null, G__18331);
        };
        var G__18345__2 = function(result, input) {
          var G__18332 = result;
          var G__18333 = function() {
            var G__18334 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18334) : f.call(null, G__18334);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18332, G__18333) : rf.call(null, G__18332, G__18333);
        };
        var G__18345__3 = function() {
          var G__18346__delegate = function(result, input, inputs) {
            var G__18335 = result;
            var G__18336 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18335, G__18336) : rf.call(null, G__18335, G__18336);
          };
          var G__18346 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              var G__18347__i = 0, G__18347__a = new Array(arguments.length - 2);
              while (G__18347__i < G__18347__a.length) {
                G__18347__a[G__18347__i] = arguments[G__18347__i + 2];
                ++G__18347__i;
              }
              inputs = new cljs.core.IndexedSeq(G__18347__a, 0);
            }
            return G__18346__delegate.call(this, result, input, inputs);
          };
          G__18346.cljs$lang$maxFixedArity = 2;
          G__18346.cljs$lang$applyTo = function(arglist__18348) {
            var result = cljs.core.first(arglist__18348);
            arglist__18348 = cljs.core.next(arglist__18348);
            var input = cljs.core.first(arglist__18348);
            var inputs = cljs.core.rest(arglist__18348);
            return G__18346__delegate(result, input, inputs);
          };
          G__18346.cljs$core$IFn$_invoke$arity$variadic = G__18346__delegate;
          return G__18346;
        }();
        G__18345 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__18345__0.call(this);
            case 1:
              return G__18345__1.call(this, result);
            case 2:
              return G__18345__2.call(this, result, input);
            default:
              var G__18349 = null;
              if (arguments.length > 2) {
                var G__18350__i = 0, G__18350__a = new Array(arguments.length - 2);
                while (G__18350__i < G__18350__a.length) {
                  G__18350__a[G__18350__i] = arguments[G__18350__i + 2];
                  ++G__18350__i;
                }
                G__18349 = new cljs.core.IndexedSeq(G__18350__a, 0);
              }
              return G__18345__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__18349);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__18345.cljs$lang$maxFixedArity = 2;
        G__18345.cljs$lang$applyTo = G__18345__3.cljs$lang$applyTo;
        G__18345.cljs$core$IFn$_invoke$arity$0 = G__18345__0;
        G__18345.cljs$core$IFn$_invoke$arity$1 = G__18345__1;
        G__18345.cljs$core$IFn$_invoke$arity$2 = G__18345__2;
        G__18345.cljs$core$IFn$_invoke$arity$variadic = G__18345__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__18345;
      }();
    };
  };
  var cljs$core$map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5007__auto___18351 = size;
          var i_18352 = 0;
          while (true) {
            if (i_18352 < n__5007__auto___18351) {
              cljs.core.chunk_append(b, function() {
                var G__18337 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_18352);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18337) : f.call(null, G__18337);
              }());
              var G__18353 = i_18352 + 1;
              i_18352 = G__18353;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__18338 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18338) : f.call(null, G__18338);
          }(), cljs$core$map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(function() {
          var G__18339 = cljs.core.first(s1);
          var G__18340 = cljs.core.first(s2);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18339, G__18340) : f.call(null, G__18339, G__18340);
        }(), cljs$core$map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      var s3 = cljs.core.seq(c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons(function() {
          var G__18341 = cljs.core.first(s1);
          var G__18342 = cljs.core.first(s2);
          var G__18343 = cljs.core.first(s3);
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18341, G__18342, G__18343) : f.call(null, G__18341, G__18342, G__18343);
        }(), cljs$core$map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$map__5 = function() {
    var G__18354__delegate = function(f, c1, c2, c3, colls) {
      var step = function cljs$core$map_$_step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = cljs$core$map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
          if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
            return cljs.core.cons(cljs$core$map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$map_$_step(cljs$core$map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return cljs$core$map.cljs$core$IFn$_invoke$arity$2(function(step) {
        return function(p1__18291_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__18291_SHARP_);
        };
      }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
    };
    var G__18354 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__18355__i = 0, G__18355__a = new Array(arguments.length - 4);
        while (G__18355__i < G__18355__a.length) {
          G__18355__a[G__18355__i] = arguments[G__18355__i + 4];
          ++G__18355__i;
        }
        colls = new cljs.core.IndexedSeq(G__18355__a, 0);
      }
      return G__18354__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__18354.cljs$lang$maxFixedArity = 4;
    G__18354.cljs$lang$applyTo = function(arglist__18356) {
      var f = cljs.core.first(arglist__18356);
      arglist__18356 = cljs.core.next(arglist__18356);
      var c1 = cljs.core.first(arglist__18356);
      arglist__18356 = cljs.core.next(arglist__18356);
      var c2 = cljs.core.first(arglist__18356);
      arglist__18356 = cljs.core.next(arglist__18356);
      var c3 = cljs.core.first(arglist__18356);
      var colls = cljs.core.rest(arglist__18356);
      return G__18354__delegate(f, c1, c2, c3, colls);
    };
    G__18354.cljs$core$IFn$_invoke$arity$variadic = G__18354__delegate;
    return G__18354;
  }();
  cljs$core$map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$map__1.call(this, f);
      case 2:
        return cljs$core$map__2.call(this, f, c1);
      case 3:
        return cljs$core$map__3.call(this, f, c1, c2);
      case 4:
        return cljs$core$map__4.call(this, f, c1, c2, c3);
      default:
        var G__18357 = null;
        if (arguments.length > 4) {
          var G__18358__i = 0, G__18358__a = new Array(arguments.length - 4);
          while (G__18358__i < G__18358__a.length) {
            G__18358__a[G__18358__i] = arguments[G__18358__i + 4];
            ++G__18358__i;
          }
          G__18357 = new cljs.core.IndexedSeq(G__18358__a, 0);
        }
        return cljs$core$map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__18357);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$map.cljs$lang$maxFixedArity = 4;
  cljs$core$map.cljs$lang$applyTo = cljs$core$map__5.cljs$lang$applyTo;
  cljs$core$map.cljs$core$IFn$_invoke$arity$1 = cljs$core$map__1;
  cljs$core$map.cljs$core$IFn$_invoke$arity$2 = cljs$core$map__2;
  cljs$core$map.cljs$core$IFn$_invoke$arity$3 = cljs$core$map__3;
  cljs$core$map.cljs$core$IFn$_invoke$arity$4 = cljs$core$map__4;
  cljs$core$map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$map__5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$map;
}();
cljs.core.take = function() {
  var cljs$core$take = null;
  var cljs$core$take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__18367 = null;
          var G__18367__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__18367__1 = function(result) {
            var G__18364 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18364) : rf.call(null, G__18364);
          };
          var G__18367__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            var nn = na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            var result__$1 = n__$1 > 0 ? function() {
              var G__18365 = result;
              var G__18366 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18365, G__18366) : rf.call(null, G__18365, G__18366);
            }() : result;
            if (!(nn > 0)) {
              return cljs.core.ensure_reduced(result__$1);
            } else {
              return result__$1;
            }
          };
          G__18367 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__18367__0.call(this);
              case 1:
                return G__18367__1.call(this, result);
              case 2:
                return G__18367__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__18367.cljs$core$IFn$_invoke$arity$0 = G__18367__0;
          G__18367.cljs$core$IFn$_invoke$arity$1 = G__18367__1;
          G__18367.cljs$core$IFn$_invoke$arity$2 = G__18367__2;
          return G__18367;
        }();
      }(na);
    };
  };
  var cljs$core$take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq(coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons(cljs.core.first(s), cljs$core$take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$take__1.call(this, n);
      case 2:
        return cljs$core$take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$take.cljs$core$IFn$_invoke$arity$1 = cljs$core$take__1;
  cljs$core$take.cljs$core$IFn$_invoke$arity$2 = cljs$core$take__2;
  return cljs$core$take;
}();
cljs.core.drop = function() {
  var cljs$core$drop = null;
  var cljs$core$drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__18374 = null;
          var G__18374__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__18374__1 = function(result) {
            var G__18371 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18371) : rf.call(null, G__18371);
          };
          var G__18374__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            if (n__$1 > 0) {
              return result;
            } else {
              var G__18372 = result;
              var G__18373 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18372, G__18373) : rf.call(null, G__18372, G__18373);
            }
          };
          G__18374 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__18374__0.call(this);
              case 1:
                return G__18374__1.call(this, result);
              case 2:
                return G__18374__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__18374.cljs$core$IFn$_invoke$arity$0 = G__18374__0;
          G__18374.cljs$core$IFn$_invoke$arity$1 = G__18374__1;
          G__18374.cljs$core$IFn$_invoke$arity$2 = G__18374__2;
          return G__18374;
        }();
      }(na);
    };
  };
  var cljs$core$drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (n__$1 > 0 && s) {
          var G__18375 = n__$1 - 1;
          var G__18376 = cljs.core.rest(s);
          n__$1 = G__18375;
          coll__$1 = G__18376;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(n, coll);
      };
    }(step), null, null);
  };
  cljs$core$drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$drop__1.call(this, n);
      case 2:
        return cljs$core$drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$drop.cljs$core$IFn$_invoke$arity$1 = cljs$core$drop__1;
  cljs$core$drop.cljs$core$IFn$_invoke$arity$2 = cljs$core$drop__2;
  return cljs$core$drop;
}();
cljs.core.drop_last = function() {
  var cljs$core$drop_last = null;
  var cljs$core$drop_last__1 = function(s) {
    return cljs$core$drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
  };
  var cljs$core$drop_last__2 = function(n, s) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
      return x;
    }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
  };
  cljs$core$drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return cljs$core$drop_last__1.call(this, n);
      case 2:
        return cljs$core$drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$drop_last.cljs$core$IFn$_invoke$arity$1 = cljs$core$drop_last__1;
  cljs$core$drop_last.cljs$core$IFn$_invoke$arity$2 = cljs$core$drop_last__2;
  return cljs$core$drop_last;
}();
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__18379 = cljs.core.next(s);
      var G__18380 = cljs.core.next(lead);
      s = G__18379;
      lead = G__18380;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var cljs$core$drop_while = null;
  var cljs$core$drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.volatile_BANG_(true);
      return function(da) {
        return function() {
          var G__18393 = null;
          var G__18393__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__18393__1 = function(result) {
            var G__18387 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18387) : rf.call(null, G__18387);
          };
          var G__18393__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref(da);
            if (cljs.core.truth_(function() {
              var and__4110__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__4110__auto__)) {
                var G__18388 = input;
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18388) : pred.call(null, G__18388);
              } else {
                return and__4110__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.vreset_BANG_(da, null);
              var G__18389 = result;
              var G__18390 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18389, G__18390) : rf.call(null, G__18389, G__18390);
            }
          };
          G__18393 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__18393__0.call(this);
              case 1:
                return G__18393__1.call(this, result);
              case 2:
                return G__18393__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__18393.cljs$core$IFn$_invoke$arity$0 = G__18393__0;
          G__18393.cljs$core$IFn$_invoke$arity$1 = G__18393__1;
          G__18393.cljs$core$IFn$_invoke$arity$2 = G__18393__2;
          return G__18393;
        }();
      }(da);
    };
  };
  var cljs$core$drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (cljs.core.truth_(function() {
          var and__4110__auto__ = s;
          if (and__4110__auto__) {
            var G__18392 = cljs.core.first(s);
            return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__18392) : pred__$1.call(null, G__18392);
          } else {
            return and__4110__auto__;
          }
        }())) {
          var G__18394 = pred__$1;
          var G__18395 = cljs.core.rest(s);
          pred__$1 = G__18394;
          coll__$1 = G__18395;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(pred, coll);
      };
    }(step), null, null);
  };
  cljs$core$drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$drop_while__1.call(this, pred);
      case 2:
        return cljs$core$drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$drop_while.cljs$core$IFn$_invoke$arity$1 = cljs$core$drop_while__1;
  cljs$core$drop_while.cljs$core$IFn$_invoke$arity$2 = cljs$core$drop_while__2;
  return cljs$core$drop_while;
}();
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs$core$cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function() {
  var cljs$core$repeat = null;
  var cljs$core$repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(x, cljs$core$repeat.cljs$core$IFn$_invoke$arity$1(x));
    }, null, null);
  };
  var cljs$core$repeat__2 = function(n, x) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs$core$repeat.cljs$core$IFn$_invoke$arity$1(x));
  };
  cljs$core$repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return cljs$core$repeat__1.call(this, n);
      case 2:
        return cljs$core$repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$repeat.cljs$core$IFn$_invoke$arity$1 = cljs$core$repeat__1;
  cljs$core$repeat.cljs$core$IFn$_invoke$arity$2 = cljs$core$repeat__2;
  return cljs$core$repeat;
}();
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function() {
  var cljs$core$repeatedly = null;
  var cljs$core$repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), cljs$core$repeatedly.cljs$core$IFn$_invoke$arity$1(f));
    }, null, null);
  };
  var cljs$core$repeatedly__2 = function(n, f) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs$core$repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  };
  cljs$core$repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return cljs$core$repeatedly__1.call(this, n);
      case 2:
        return cljs$core$repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$repeatedly.cljs$core$IFn$_invoke$arity$1 = cljs$core$repeatedly__1;
  cljs$core$repeatedly.cljs$core$IFn$_invoke$arity$2 = cljs$core$repeatedly__2;
  return cljs$core$repeatedly;
}();
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return cljs$core$iterate(f, function() {
      var G__18404 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18404) : f.call(null, G__18404);
    }());
  }, null, null));
};
cljs.core.interleave = function() {
  var cljs$core$interleave = null;
  var cljs$core$interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs$core$interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$interleave__3 = function() {
    var G__18407__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
        if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
          return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs$core$interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__18407 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__18408__i = 0, G__18408__a = new Array(arguments.length - 2);
        while (G__18408__i < G__18408__a.length) {
          G__18408__a[G__18408__i] = arguments[G__18408__i + 2];
          ++G__18408__i;
        }
        colls = new cljs.core.IndexedSeq(G__18408__a, 0);
      }
      return G__18407__delegate.call(this, c1, c2, colls);
    };
    G__18407.cljs$lang$maxFixedArity = 2;
    G__18407.cljs$lang$applyTo = function(arglist__18409) {
      var c1 = cljs.core.first(arglist__18409);
      arglist__18409 = cljs.core.next(arglist__18409);
      var c2 = cljs.core.first(arglist__18409);
      var colls = cljs.core.rest(arglist__18409);
      return G__18407__delegate(c1, c2, colls);
    };
    G__18407.cljs$core$IFn$_invoke$arity$variadic = G__18407__delegate;
    return G__18407;
  }();
  cljs$core$interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$interleave__2.call(this, c1, c2);
      default:
        var G__18410 = null;
        if (arguments.length > 2) {
          var G__18411__i = 0, G__18411__a = new Array(arguments.length - 2);
          while (G__18411__i < G__18411__a.length) {
            G__18411__a[G__18411__i] = arguments[G__18411__i + 2];
            ++G__18411__i;
          }
          G__18410 = new cljs.core.IndexedSeq(G__18411__a, 0);
        }
        return cljs$core$interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, G__18410);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$interleave.cljs$lang$maxFixedArity = 2;
  cljs$core$interleave.cljs$lang$applyTo = cljs$core$interleave__3.cljs$lang$applyTo;
  cljs$core$interleave.cljs$core$IFn$_invoke$arity$2 = cljs$core$interleave__2;
  cljs$core$interleave.cljs$core$IFn$_invoke$arity$variadic = cljs$core$interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$interleave;
}();
cljs.core.interpose = function() {
  var cljs$core$interpose = null;
  var cljs$core$interpose__1 = function(sep) {
    return function(rf) {
      var started = cljs.core.volatile_BANG_(false);
      return function(started) {
        return function() {
          var G__18426 = null;
          var G__18426__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__18426__1 = function(result) {
            var G__18419 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18419) : rf.call(null, G__18419);
          };
          var G__18426__2 = function(result, input) {
            if (cljs.core.truth_(cljs.core.deref(started))) {
              var sepr = function() {
                var G__18420 = result;
                var G__18421 = sep;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18420, G__18421) : rf.call(null, G__18420, G__18421);
              }();
              if (cljs.core.reduced_QMARK_(sepr)) {
                return sepr;
              } else {
                var G__18422 = sepr;
                var G__18423 = input;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18422, G__18423) : rf.call(null, G__18422, G__18423);
              }
            } else {
              cljs.core.vreset_BANG_(started, true);
              var G__18424 = result;
              var G__18425 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18424, G__18425) : rf.call(null, G__18424, G__18425);
            }
          };
          G__18426 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__18426__0.call(this);
              case 1:
                return G__18426__1.call(this, result);
              case 2:
                return G__18426__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__18426.cljs$core$IFn$_invoke$arity$0 = G__18426__0;
          G__18426.cljs$core$IFn$_invoke$arity$1 = G__18426__1;
          G__18426.cljs$core$IFn$_invoke$arity$2 = G__18426__2;
          return G__18426;
        }();
      }(started);
    };
  };
  var cljs$core$interpose__2 = function(sep, coll) {
    return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
  };
  cljs$core$interpose = function(sep, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$interpose__1.call(this, sep);
      case 2:
        return cljs$core$interpose__2.call(this, sep, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$interpose.cljs$core$IFn$_invoke$arity$1 = cljs$core$interpose__1;
  cljs$core$interpose.cljs$core$IFn$_invoke$arity$2 = cljs$core$interpose__2;
  return cljs$core$interpose;
}();
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function() {
  var cljs$core$mapcat = null;
  var cljs$core$mapcat__1 = function(f) {
    return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
  };
  var cljs$core$mapcat__2 = function() {
    var G__18435__delegate = function(f, colls) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
    };
    var G__18435 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        var G__18436__i = 0, G__18436__a = new Array(arguments.length - 1);
        while (G__18436__i < G__18436__a.length) {
          G__18436__a[G__18436__i] = arguments[G__18436__i + 1];
          ++G__18436__i;
        }
        colls = new cljs.core.IndexedSeq(G__18436__a, 0);
      }
      return G__18435__delegate.call(this, f, colls);
    };
    G__18435.cljs$lang$maxFixedArity = 1;
    G__18435.cljs$lang$applyTo = function(arglist__18437) {
      var f = cljs.core.first(arglist__18437);
      var colls = cljs.core.rest(arglist__18437);
      return G__18435__delegate(f, colls);
    };
    G__18435.cljs$core$IFn$_invoke$arity$variadic = G__18435__delegate;
    return G__18435;
  }();
  cljs$core$mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$mapcat__1.call(this, f);
      default:
        var G__18438 = null;
        if (arguments.length > 1) {
          var G__18439__i = 0, G__18439__a = new Array(arguments.length - 1);
          while (G__18439__i < G__18439__a.length) {
            G__18439__a[G__18439__i] = arguments[G__18439__i + 1];
            ++G__18439__i;
          }
          G__18438 = new cljs.core.IndexedSeq(G__18439__a, 0);
        }
        return cljs$core$mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, G__18438);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$mapcat.cljs$lang$maxFixedArity = 1;
  cljs$core$mapcat.cljs$lang$applyTo = cljs$core$mapcat__2.cljs$lang$applyTo;
  cljs$core$mapcat.cljs$core$IFn$_invoke$arity$1 = cljs$core$mapcat__1;
  cljs$core$mapcat.cljs$core$IFn$_invoke$arity$variadic = cljs$core$mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$mapcat;
}();
cljs.core.filter = function() {
  var cljs$core$filter = null;
  var cljs$core$filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__18458 = null;
        var G__18458__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__18458__1 = function(result) {
          var G__18452 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18452) : rf.call(null, G__18452);
        };
        var G__18458__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__18453 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18453) : pred.call(null, G__18453);
          }())) {
            var G__18454 = result;
            var G__18455 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18454, G__18455) : rf.call(null, G__18454, G__18455);
          } else {
            return result;
          }
        };
        G__18458 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__18458__0.call(this);
            case 1:
              return G__18458__1.call(this, result);
            case 2:
              return G__18458__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__18458.cljs$core$IFn$_invoke$arity$0 = G__18458__0;
        G__18458.cljs$core$IFn$_invoke$arity$1 = G__18458__1;
        G__18458.cljs$core$IFn$_invoke$arity$2 = G__18458__2;
        return G__18458;
      }();
    };
  };
  var cljs$core$filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5007__auto___18459 = size;
          var i_18460 = 0;
          while (true) {
            if (i_18460 < n__5007__auto___18459) {
              if (cljs.core.truth_(function() {
                var G__18456 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_18460);
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18456) : pred.call(null, G__18456);
              }())) {
                cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_18460));
              } else {
              }
              var G__18461 = i_18460 + 1;
              i_18460 = G__18461;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
        } else {
          var f = cljs.core.first(s);
          var r = cljs.core.rest(s);
          if (cljs.core.truth_(function() {
            var G__18457 = f;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18457) : pred.call(null, G__18457);
          }())) {
            return cljs.core.cons(f, cljs$core$filter.cljs$core$IFn$_invoke$arity$2(pred, r));
          } else {
            return cljs$core$filter.cljs$core$IFn$_invoke$arity$2(pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$filter__1.call(this, pred);
      case 2:
        return cljs$core$filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$filter.cljs$core$IFn$_invoke$arity$1 = cljs$core$filter__1;
  cljs$core$filter.cljs$core$IFn$_invoke$arity$2 = cljs$core$filter__2;
  return cljs$core$filter;
}();
cljs.core.remove = function() {
  var cljs$core$remove = null;
  var cljs$core$remove__1 = function(pred) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
  };
  var cljs$core$remove__2 = function(pred, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
  };
  cljs$core$remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$remove__1.call(this, pred);
      case 2:
        return cljs$core$remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$remove.cljs$core$IFn$_invoke$arity$1 = cljs$core$remove__1;
  cljs$core$remove.cljs$core$IFn$_invoke$arity$2 = cljs$core$remove__2;
  return cljs$core$remove;
}();
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(function() {
        var G__18468 = node;
        return branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(G__18468) : branch_QMARK_.call(null, G__18468);
      }()) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([function() {
        var G__18469 = node;
        return children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(G__18469) : children.call(null, G__18469);
      }()], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__18470_SHARP_) {
    return!cljs.core.sequential_QMARK_(p1__18470_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var cljs$core$into = null;
  var cljs$core$into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__18473 = to;
        if (G__18473) {
          var bit__4789__auto__ = G__18473.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4789__auto__ || G__18473.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
      } else {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var cljs$core$into__3 = function(to, xform, from) {
    if (function() {
      var G__18474 = to;
      if (G__18474) {
        var bit__4789__auto__ = G__18474.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4789__auto__ || G__18474.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
    }
  };
  cljs$core$into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return cljs$core$into__2.call(this, to, xform);
      case 3:
        return cljs$core$into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$into.cljs$core$IFn$_invoke$arity$2 = cljs$core$into__2;
  cljs$core$into.cljs$core$IFn$_invoke$arity$3 = cljs$core$into__3;
  return cljs$core$into;
}();
cljs.core.mapv = function() {
  var cljs$core$mapv = null;
  var cljs$core$mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, function() {
        var G__18476 = o;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18476) : f.call(null, G__18476);
      }());
    }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
  };
  var cljs$core$mapv__3 = function(f, c1, c2) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
  };
  var cljs$core$mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
  };
  var cljs$core$mapv__5 = function() {
    var G__18477__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
    };
    var G__18477 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__18478__i = 0, G__18478__a = new Array(arguments.length - 4);
        while (G__18478__i < G__18478__a.length) {
          G__18478__a[G__18478__i] = arguments[G__18478__i + 4];
          ++G__18478__i;
        }
        colls = new cljs.core.IndexedSeq(G__18478__a, 0);
      }
      return G__18477__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__18477.cljs$lang$maxFixedArity = 4;
    G__18477.cljs$lang$applyTo = function(arglist__18479) {
      var f = cljs.core.first(arglist__18479);
      arglist__18479 = cljs.core.next(arglist__18479);
      var c1 = cljs.core.first(arglist__18479);
      arglist__18479 = cljs.core.next(arglist__18479);
      var c2 = cljs.core.first(arglist__18479);
      arglist__18479 = cljs.core.next(arglist__18479);
      var c3 = cljs.core.first(arglist__18479);
      var colls = cljs.core.rest(arglist__18479);
      return G__18477__delegate(f, c1, c2, c3, colls);
    };
    G__18477.cljs$core$IFn$_invoke$arity$variadic = G__18477__delegate;
    return G__18477;
  }();
  cljs$core$mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$mapv__2.call(this, f, c1);
      case 3:
        return cljs$core$mapv__3.call(this, f, c1, c2);
      case 4:
        return cljs$core$mapv__4.call(this, f, c1, c2, c3);
      default:
        var G__18480 = null;
        if (arguments.length > 4) {
          var G__18481__i = 0, G__18481__a = new Array(arguments.length - 4);
          while (G__18481__i < G__18481__a.length) {
            G__18481__a[G__18481__i] = arguments[G__18481__i + 4];
            ++G__18481__i;
          }
          G__18480 = new cljs.core.IndexedSeq(G__18481__a, 0);
        }
        return cljs$core$mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__18480);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$mapv.cljs$lang$maxFixedArity = 4;
  cljs$core$mapv.cljs$lang$applyTo = cljs$core$mapv__5.cljs$lang$applyTo;
  cljs$core$mapv.cljs$core$IFn$_invoke$arity$2 = cljs$core$mapv__2;
  cljs$core$mapv.cljs$core$IFn$_invoke$arity$3 = cljs$core$mapv__3;
  cljs$core$mapv.cljs$core$IFn$_invoke$arity$4 = cljs$core$mapv__4;
  cljs$core$mapv.cljs$core$IFn$_invoke$arity$variadic = cljs$core$mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$mapv;
}();
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(function() {
      var G__18483 = o;
      return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18483) : pred.call(null, G__18483);
    }())) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var cljs$core$partition = null;
  var cljs$core$partition__2 = function(n, coll) {
    return cljs$core$partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var cljs$core$partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, cljs$core$partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var cljs$core$partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, cljs$core$partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$partition__2.call(this, n, step);
      case 3:
        return cljs$core$partition__3.call(this, n, step, pad);
      case 4:
        return cljs$core$partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$partition.cljs$core$IFn$_invoke$arity$2 = cljs$core$partition__2;
  cljs$core$partition.cljs$core$IFn$_invoke$arity$3 = cljs$core$partition__3;
  cljs$core$partition.cljs$core$IFn$_invoke$arity$4 = cljs$core$partition__4;
  return cljs$core$partition;
}();
cljs.core.get_in = function() {
  var cljs$core$get_in = null;
  var cljs$core$get_in__2 = function(m, ks) {
    return cljs$core$get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
  };
  var cljs$core$get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq(ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__18498 = m__$1;
          if (G__18498) {
            var bit__4796__auto__ = G__18498.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4796__auto__ || G__18498.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__18498.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__18498);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__18498);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__18499 = sentinel;
            var G__18500 = m__$2;
            var G__18501 = cljs.core.next(ks__$1);
            sentinel = G__18499;
            m__$1 = G__18500;
            ks__$1 = G__18501;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  cljs$core$get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return cljs$core$get_in__2.call(this, m, ks);
      case 3:
        return cljs$core$get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$get_in.cljs$core$IFn$_invoke$arity$2 = cljs$core$get_in__2;
  cljs$core$get_in.cljs$core$IFn$_invoke$arity$3 = cljs$core$get_in__3;
  return cljs$core$get_in;
}();
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__18502, v) {
  var vec__18507 = p__18502;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18507, 0, null);
  var ks = cljs.core.nthnext(vec__18507, 1);
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function() {
  var cljs$core$update_in = null;
  var cljs$core$update_in__3 = function(m, p__18508, f) {
    var vec__18546 = p__18508;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18546, 0, null);
    var ks = cljs.core.nthnext(vec__18546, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__18547 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18547) : f.call(null, G__18547);
      }());
    }
  };
  var cljs$core$update_in__4 = function(m, p__18509, f, a) {
    var vec__18548 = p__18509;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18548, 0, null);
    var ks = cljs.core.nthnext(vec__18548, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__18549 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__18550 = a;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18549, G__18550) : f.call(null, G__18549, G__18550);
      }());
    }
  };
  var cljs$core$update_in__5 = function(m, p__18510, f, a, b) {
    var vec__18551 = p__18510;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18551, 0, null);
    var ks = cljs.core.nthnext(vec__18551, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__18552 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__18553 = a;
        var G__18554 = b;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18552, G__18553, G__18554) : f.call(null, G__18552, G__18553, G__18554);
      }());
    }
  };
  var cljs$core$update_in__6 = function(m, p__18511, f, a, b, c) {
    var vec__18555 = p__18511;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18555, 0, null);
    var ks = cljs.core.nthnext(vec__18555, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__18556 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__18557 = a;
        var G__18558 = b;
        var G__18559 = c;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18556, G__18557, G__18558, G__18559) : f.call(null, G__18556, G__18557, G__18558, G__18559);
      }());
    }
  };
  var cljs$core$update_in__7 = function() {
    var G__18561__delegate = function(m, p__18512, f, a, b, c, args) {
      var vec__18560 = p__18512;
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18560, 0, null);
      var ks = cljs.core.nthnext(vec__18560, 1);
      if (ks) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs$core$update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
      }
    };
    var G__18561 = function(m, p__18512, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__18562__i = 0, G__18562__a = new Array(arguments.length - 6);
        while (G__18562__i < G__18562__a.length) {
          G__18562__a[G__18562__i] = arguments[G__18562__i + 6];
          ++G__18562__i;
        }
        args = new cljs.core.IndexedSeq(G__18562__a, 0);
      }
      return G__18561__delegate.call(this, m, p__18512, f, a, b, c, args);
    };
    G__18561.cljs$lang$maxFixedArity = 6;
    G__18561.cljs$lang$applyTo = function(arglist__18563) {
      var m = cljs.core.first(arglist__18563);
      arglist__18563 = cljs.core.next(arglist__18563);
      var p__18512 = cljs.core.first(arglist__18563);
      arglist__18563 = cljs.core.next(arglist__18563);
      var f = cljs.core.first(arglist__18563);
      arglist__18563 = cljs.core.next(arglist__18563);
      var a = cljs.core.first(arglist__18563);
      arglist__18563 = cljs.core.next(arglist__18563);
      var b = cljs.core.first(arglist__18563);
      arglist__18563 = cljs.core.next(arglist__18563);
      var c = cljs.core.first(arglist__18563);
      var args = cljs.core.rest(arglist__18563);
      return G__18561__delegate(m, p__18512, f, a, b, c, args);
    };
    G__18561.cljs$core$IFn$_invoke$arity$variadic = G__18561__delegate;
    return G__18561;
  }();
  cljs$core$update_in = function(m, p__18512, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$update_in__3.call(this, m, p__18512, f);
      case 4:
        return cljs$core$update_in__4.call(this, m, p__18512, f, a);
      case 5:
        return cljs$core$update_in__5.call(this, m, p__18512, f, a, b);
      case 6:
        return cljs$core$update_in__6.call(this, m, p__18512, f, a, b, c);
      default:
        var G__18564 = null;
        if (arguments.length > 6) {
          var G__18565__i = 0, G__18565__a = new Array(arguments.length - 6);
          while (G__18565__i < G__18565__a.length) {
            G__18565__a[G__18565__i] = arguments[G__18565__i + 6];
            ++G__18565__i;
          }
          G__18564 = new cljs.core.IndexedSeq(G__18565__a, 0);
        }
        return cljs$core$update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__18512, f, a, b, c, G__18564);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$update_in.cljs$lang$maxFixedArity = 6;
  cljs$core$update_in.cljs$lang$applyTo = cljs$core$update_in__7.cljs$lang$applyTo;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$3 = cljs$core$update_in__3;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$4 = cljs$core$update_in__4;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$5 = cljs$core$update_in__5;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$6 = cljs$core$update_in__6;
  cljs$core$update_in.cljs$core$IFn$_invoke$arity$variadic = cljs$core$update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$update_in;
}();
cljs.core.update = function() {
  var cljs$core$update = null;
  var cljs$core$update__3 = function(m, k, f) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__18576 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18576) : f.call(null, G__18576);
    }());
  };
  var cljs$core$update__4 = function(m, k, f, x) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__18577 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__18578 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18577, G__18578) : f.call(null, G__18577, G__18578);
    }());
  };
  var cljs$core$update__5 = function(m, k, f, x, y) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__18579 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__18580 = x;
      var G__18581 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18579, G__18580, G__18581) : f.call(null, G__18579, G__18580, G__18581);
    }());
  };
  var cljs$core$update__6 = function(m, k, f, x, y, z) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__18582 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__18583 = x;
      var G__18584 = y;
      var G__18585 = z;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18582, G__18583, G__18584, G__18585) : f.call(null, G__18582, G__18583, G__18584, G__18585);
    }());
  };
  var cljs$core$update__7 = function() {
    var G__18586__delegate = function(m, k, f, x, y, z, more) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
    };
    var G__18586 = function(m, k, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 6) {
        var G__18587__i = 0, G__18587__a = new Array(arguments.length - 6);
        while (G__18587__i < G__18587__a.length) {
          G__18587__a[G__18587__i] = arguments[G__18587__i + 6];
          ++G__18587__i;
        }
        more = new cljs.core.IndexedSeq(G__18587__a, 0);
      }
      return G__18586__delegate.call(this, m, k, f, x, y, z, more);
    };
    G__18586.cljs$lang$maxFixedArity = 6;
    G__18586.cljs$lang$applyTo = function(arglist__18588) {
      var m = cljs.core.first(arglist__18588);
      arglist__18588 = cljs.core.next(arglist__18588);
      var k = cljs.core.first(arglist__18588);
      arglist__18588 = cljs.core.next(arglist__18588);
      var f = cljs.core.first(arglist__18588);
      arglist__18588 = cljs.core.next(arglist__18588);
      var x = cljs.core.first(arglist__18588);
      arglist__18588 = cljs.core.next(arglist__18588);
      var y = cljs.core.first(arglist__18588);
      arglist__18588 = cljs.core.next(arglist__18588);
      var z = cljs.core.first(arglist__18588);
      var more = cljs.core.rest(arglist__18588);
      return G__18586__delegate(m, k, f, x, y, z, more);
    };
    G__18586.cljs$core$IFn$_invoke$arity$variadic = G__18586__delegate;
    return G__18586;
  }();
  cljs$core$update = function(m, k, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return cljs$core$update__3.call(this, m, k, f);
      case 4:
        return cljs$core$update__4.call(this, m, k, f, x);
      case 5:
        return cljs$core$update__5.call(this, m, k, f, x, y);
      case 6:
        return cljs$core$update__6.call(this, m, k, f, x, y, z);
      default:
        var G__18589 = null;
        if (arguments.length > 6) {
          var G__18590__i = 0, G__18590__a = new Array(arguments.length - 6);
          while (G__18590__i < G__18590__a.length) {
            G__18590__a[G__18590__i] = arguments[G__18590__i + 6];
            ++G__18590__i;
          }
          G__18589 = new cljs.core.IndexedSeq(G__18590__a, 0);
        }
        return cljs$core$update__7.cljs$core$IFn$_invoke$arity$variadic(m, k, f, x, y, z, G__18589);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$update.cljs$lang$maxFixedArity = 6;
  cljs$core$update.cljs$lang$applyTo = cljs$core$update__7.cljs$lang$applyTo;
  cljs$core$update.cljs$core$IFn$_invoke$arity$3 = cljs$core$update__3;
  cljs$core$update.cljs$core$IFn$_invoke$arity$4 = cljs$core$update__4;
  cljs$core$update.cljs$core$IFn$_invoke$arity$5 = cljs$core$update__5;
  cljs$core$update.cljs$core$IFn$_invoke$arity$6 = cljs$core$update__6;
  cljs$core$update.cljs$core$IFn$_invoke$arity$variadic = cljs$core$update__7.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$update;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__18591 = ll - 5;
      var G__18592 = r;
      ll = G__18591;
      ret = G__18592;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = cljs$core$push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__18597 = cljs.core.pv_aget(node, 0);
      var G__18598 = level - 5;
      node = G__18597;
      level = G__18598;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__18599 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__18600 = level - 5;
        node = G__18599;
        level = G__18600;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, cljs$core$do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__18610 = init__$2;
              var G__18611 = j + i;
              var G__18612 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18610, G__18611, G__18612) : f.call(null, G__18610, G__18611, G__18612);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__18623 = j + 1;
              var G__18624 = init__$3;
              j = G__18623;
              init__$2 = G__18624;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__18613 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18613) : cljs.core.deref.call(null, G__18613);
      } else {
        var G__18625 = i + len;
        var G__18626 = init__$2;
        i = G__18625;
        init__$1 = G__18626;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, function() {
    var G__18614 = self__.root;
    return cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(G__18614) : cljs.core.tv_editable_root.call(null, G__18614);
  }(), function() {
    var G__18615 = self__.tail;
    return cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(G__18615) : cljs.core.tv_editable_tail.call(null, G__18615);
  }());
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__18616 = init__$2;
              var G__18617 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18616, G__18617) : f.call(null, G__18616, G__18617);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__18627 = j + 1;
              var G__18628 = init__$3;
              j = G__18627;
              init__$2 = G__18628;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__18618 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18618) : cljs.core.deref.call(null, G__18618);
      } else {
        var G__18629 = i + len;
        var G__18630 = init__$2;
        i = G__18629;
        init__$1 = G__18630;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__18619 = coll__$1;
      var G__18620 = cljs.core.first_array_for_longvec(coll__$1);
      var G__18621 = 0;
      var G__18622 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__18619, G__18620, G__18621, G__18622) : cljs.core.chunked_seq.call(null, G__18619, G__18620, G__18621, G__18622);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__5007__auto___18631 = len;
    var i_18632 = 0;
    while (true) {
      if (i_18632 < n__5007__auto___18631) {
        new_tail[i_18632] = self__.tail[i_18632];
        var G__18633 = i_18632 + 1;
        i_18632 = G__18633;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__18634 = null;
  var G__18634__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__18634__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__18634 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18634__2.call(this, self__, k);
      case 3:
        return G__18634__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18634.cljs$core$IFn$_invoke$arity$2 = G__18634__2;
  G__18634.cljs$core$IFn$_invoke$arity$3 = G__18634__3;
  return G__18634;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args18609) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18609)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__18635 = i + 1;
        var G__18636 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__18635;
        out = G__18636;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function() {
  var cljs$core$vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec(args);
    }
  };
  var cljs$core$vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      var G__18637__i = 0, G__18637__a = new Array(arguments.length - 0);
      while (G__18637__i < G__18637__a.length) {
        G__18637__a[G__18637__i] = arguments[G__18637__i + 0];
        ++G__18637__i;
      }
      args = new cljs.core.IndexedSeq(G__18637__a, 0);
    }
    return cljs$core$vector__delegate.call(this, args);
  };
  cljs$core$vector.cljs$lang$maxFixedArity = 0;
  cljs$core$vector.cljs$lang$applyTo = function(arglist__18638) {
    var args = cljs.core.seq(arglist__18638);
    return cljs$core$vector__delegate(args);
  };
  cljs$core$vector.cljs$core$IFn$_invoke$arity$variadic = cljs$core$vector__delegate;
  return cljs$core$vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__18639 = self__.vec;
      var G__18640 = self__.node;
      var G__18641 = self__.i;
      var G__18642 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__18639, G__18640, G__18641, G__18642) : cljs.core.chunked_seq.call(null, G__18639, G__18640, G__18641, G__18642);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__18643 = self__.vec;
    var G__18644 = self__.i + self__.off;
    var G__18645 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__18643, G__18644, G__18645) : cljs.core.subvec.call(null, G__18643, G__18644, G__18645);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__18646 = self__.vec;
    var G__18647 = self__.i + self__.off;
    var G__18648 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__18646, G__18647, G__18648) : cljs.core.subvec.call(null, G__18646, G__18647, G__18648);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__18649 = self__.vec;
      var G__18650 = self__.node;
      var G__18651 = self__.i;
      var G__18652 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__18649, G__18650, G__18651, G__18652) : cljs.core.chunked_seq.call(null, G__18649, G__18650, G__18651, G__18652);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__18653 = self__.vec;
    var G__18654 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__18655 = end;
    var G__18656 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__18653, G__18654, G__18655, G__18656) : cljs.core.chunked_seq.call(null, G__18653, G__18654, G__18655, G__18656);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  var G__18657 = self__.vec;
  var G__18658 = self__.node;
  var G__18659 = self__.i;
  var G__18660 = self__.off;
  var G__18661 = m;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(G__18657, G__18658, G__18659, G__18660, G__18661) : cljs.core.chunked_seq.call(null, G__18657, G__18658, G__18659, G__18660, G__18661);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__18662 = self__.vec;
    var G__18663 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__18664 = end;
    var G__18665 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__18662, G__18663, G__18664, G__18665) : cljs.core.chunked_seq.call(null, G__18662, G__18663, G__18664, G__18665);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.chunked_seq = function() {
  var cljs$core$chunked_seq = null;
  var cljs$core$chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
  };
  var cljs$core$chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var cljs$core$chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  cljs$core$chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return cljs$core$chunked_seq__3.call(this, vec, node, i);
      case 4:
        return cljs$core$chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return cljs$core$chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$chunked_seq.cljs$core$IFn$_invoke$arity$3 = cljs$core$chunked_seq__3;
  cljs$core$chunked_seq.cljs$core$IFn$_invoke$arity$4 = cljs$core$chunked_seq__4;
  cljs$core$chunked_seq.cljs$core$IFn$_invoke$arity$5 = cljs$core$chunked_seq__5;
  return cljs$core$chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__18667 = init__$1;
        var G__18668 = j;
        var G__18669 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18667, G__18668, G__18669) : f.call(null, G__18667, G__18668, G__18669);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__18670 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18670) : cljs.core.deref.call(null, G__18670);
      } else {
        var G__18692 = i + 1;
        var G__18693 = j + 1;
        var G__18694 = init__$2;
        i = G__18692;
        j = G__18693;
        init__$1 = G__18694;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__18671 = self__.meta;
  var G__18672 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__18673 = self__.start;
  var G__18674 = function() {
    var x__4434__auto__ = self__.end;
    var y__4435__auto__ = v_pos + 1;
    return x__4434__auto__ > y__4435__auto__ ? x__4434__auto__ : y__4435__auto__;
  }();
  var G__18675 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__18671, G__18672, G__18673, G__18674, G__18675) : cljs.core.build_subvec.call(null, G__18671, G__18672, G__18673, G__18674, G__18675);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__18676 = self__.meta;
    var G__18677 = self__.v;
    var G__18678 = self__.start;
    var G__18679 = self__.end - 1;
    var G__18680 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__18676, G__18677, G__18678, G__18679, G__18680) : cljs.core.build_subvec.call(null, G__18676, G__18677, G__18678, G__18679, G__18680);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  var G__18682 = meta__$1;
  var G__18683 = self__.v;
  var G__18684 = self__.start;
  var G__18685 = self__.end;
  var G__18686 = self__.__hash;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__18682, G__18683, G__18684, G__18685, G__18686) : cljs.core.build_subvec.call(null, G__18682, G__18683, G__18684, G__18685, G__18686);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__18687 = self__.meta;
  var G__18688 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__18689 = self__.start;
  var G__18690 = self__.end + 1;
  var G__18691 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__18687, G__18688, G__18689, G__18690, G__18691) : cljs.core.build_subvec.call(null, G__18687, G__18688, G__18689, G__18690, G__18691);
};
cljs.core.Subvec.prototype.call = function() {
  var G__18695 = null;
  var G__18695__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__18695__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__18695 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18695__2.call(this, self__, k);
      case 3:
        return G__18695__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18695.cljs$core$IFn$_invoke$arity$2 = G__18695__2;
  G__18695.cljs$core$IFn$_invoke$arity$3 = G__18695__3;
  return G__18695;
}();
cljs.core.Subvec.prototype.apply = function(self__, args18666) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18666)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__18696 = meta;
      var G__18697 = v.v;
      var G__18698 = v.start + start;
      var G__18699 = v.start + end;
      var G__18700 = __hash;
      meta = G__18696;
      v = G__18697;
      start = G__18698;
      end = G__18699;
      __hash = G__18700;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var cljs$core$subvec = null;
  var cljs$core$subvec__2 = function(v, start) {
    return cljs$core$subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
  };
  var cljs$core$subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec(null, v, start, end, null);
  };
  cljs$core$subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return cljs$core$subvec__2.call(this, v, start);
      case 3:
        return cljs$core$subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$subvec.cljs$core$IFn$_invoke$arity$2 = cljs$core$subvec__2;
  cljs$core$subvec.cljs$core$IFn$_invoke$arity$3 = cljs$core$subvec__3;
  return cljs$core$subvec;
}();
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj18707 = {};
    return obj18707;
  }(), cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return cljs$core$tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__18715 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__18716 = level - 5;
        node = G__18715;
        level = G__18716;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.prototype.call = function() {
  var G__18720 = null;
  var G__18720__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18720__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18720 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18720__2.call(this, self__, k);
      case 3:
        return G__18720__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18720.cljs$core$IFn$_invoke$arity$2 = G__18720__2;
  G__18720.cljs$core$IFn$_invoke$arity$3 = G__18720__3;
  return G__18720;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args18717) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18717)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next(self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next(self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__4122__auto__ = self__.front;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__4122__auto__ = self__.rear;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__18721 = i + incr;
        i = G__18721;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__18722 = i + 1;
      var G__18723 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__18722;
      out = G__18723;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = function() {
    var obj18727 = {};
    return obj18727;
  }();
  var l = ks.length;
  var i_18728 = 0;
  while (true) {
    if (i_18728 < l) {
      var k_18729 = ks[i_18728];
      new_obj[k_18729] = obj[k_18729];
      var G__18730 = i_18728 + 1;
      i_18728 = G__18730;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = function() {
      var G__18734 = k;
      return goog.isString(G__18734);
    }();
    if (cljs.core.truth_(and__4110__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4110__auto__;
    }
  }())) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__18735 = init__$1;
        var G__18736 = k;
        var G__18737 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18735, G__18736, G__18737) : f.call(null, G__18735, G__18736, G__18737);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__18738 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18738) : cljs.core.deref.call(null, G__18738);
      } else {
        var G__18744 = cljs.core.rest(keys__$1);
        var G__18745 = init__$2;
        keys__$1 = G__18744;
        init__$1 = G__18745;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = function() {
      var G__18740 = k;
      return goog.isString(G__18740);
    }();
    if (cljs.core.truth_(and__4110__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4110__auto__;
    }
  }())) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var G__18741 = k;
    return goog.isString(G__18741);
  }())) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = function() {
      var G__18743 = k;
      return goog.isString(G__18743);
    }();
    if (cljs.core.truth_(and__4110__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4110__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__18731_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__18731_SHARP_, self__.strobj[p1__18731_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__18746 = null;
  var G__18746__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18746__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18746 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18746__2.call(this, self__, k);
      case 3:
        return G__18746__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18746.cljs$core$IFn$_invoke$arity$2 = G__18746__2;
  G__18746.cljs$core$IFn$_invoke$arity$3 = G__18746__3;
  return G__18746;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args18732) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18732)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj18748 = {};
  return obj18748;
}(), 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__18749 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18749, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18749, 1, null);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function cljs$core$array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__18750 = i + 2;
        i = G__18750;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function cljs$core$array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__18751 = i + 2;
        i = G__18751;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function cljs$core$array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__18752 = i + 2;
        i = G__18752;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function cljs$core$array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__18753 = i + 2;
        i = G__18753;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function cljs$core$array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__18754 = i + 2;
        i = G__18754;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_(arr, m, k);
  } else {
    if (cljs.core.truth_(function() {
      var or__4122__auto__ = function() {
        var G__18758 = k;
        return goog.isString(G__18758);
      }();
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return typeof k === "number";
      }
    }())) {
      return cljs.core.array_map_index_of_identical_QMARK_(arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_(arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_(arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_(arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_18759 = 0;
  while (true) {
    if (i_18759 < l) {
      narr[i_18759] = arr[i_18759];
      var G__18760 = i_18759 + 1;
      i_18759 = G__18760;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__18762 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__18762) : cljs.core.keys.call(null, G__18762);
  }());
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__18763 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__18763) : cljs.core.vals.call(null, G__18763);
  }());
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__18764 = cljs.core.seq(coll);
  var chunk__18765 = null;
  var count__18766 = 0;
  var i__18767 = 0;
  while (true) {
    if (i__18767 < count__18766) {
      var vec__18768 = chunk__18765.cljs$core$IIndexed$_nth$arity$2(null, i__18767);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18768, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18768, 1, null);
      var G__18769_18782 = v;
      var G__18770_18783 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18769_18782, G__18770_18783) : f.call(null, G__18769_18782, G__18770_18783);
      var G__18784 = seq__18764;
      var G__18785 = chunk__18765;
      var G__18786 = count__18766;
      var G__18787 = i__18767 + 1;
      seq__18764 = G__18784;
      chunk__18765 = G__18785;
      count__18766 = G__18786;
      i__18767 = G__18787;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__18764);
      if (temp__4126__auto__) {
        var seq__18764__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__18764__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__18764__$1);
          var G__18788 = cljs.core.chunk_rest(seq__18764__$1);
          var G__18789 = c__4907__auto__;
          var G__18790 = cljs.core.count(c__4907__auto__);
          var G__18791 = 0;
          seq__18764 = G__18788;
          chunk__18765 = G__18789;
          count__18766 = G__18790;
          i__18767 = G__18791;
          continue;
        } else {
          var vec__18771 = cljs.core.first(seq__18764__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18771, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18771, 1, null);
          var G__18772_18792 = v;
          var G__18773_18793 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18772_18792, G__18773_18793) : f.call(null, G__18772_18792, G__18773_18793);
          var G__18794 = cljs.core.next(seq__18764__$1);
          var G__18795 = null;
          var G__18796 = 0;
          var G__18797 = 0;
          seq__18764 = G__18794;
          chunk__18765 = G__18795;
          count__18766 = G__18796;
          i__18767 = G__18797;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__18774 = init__$1;
        var G__18775 = self__.arr[i];
        var G__18776 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18774, G__18775, G__18776) : f.call(null, G__18774, G__18775, G__18776);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__18777 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18777) : cljs.core.deref.call(null, G__18777);
      } else {
        var G__18798 = i + 2;
        var G__18799 = init__$2;
        i = G__18798;
        init__$1 = G__18799;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__18778 = other;
    if (G__18778) {
      var bit__4789__auto__ = G__18778.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4789__auto__ || G__18778.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__18800 = i + 2;
              i = G__18800;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj18780 = {};
    return obj18780;
  }(), self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__18801 = s + 2;
            var G__18802 = d;
            s = G__18801;
            d = G__18802;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__18803 = s + 2;
            var G__18804 = d + 2;
            s = G__18803;
            d = G__18804;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__18781 = cljs.core.aclone(self__.arr);
        G__18781[idx + 1] = v;
        return G__18781;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__18805 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__18806 = cljs.core.next(es);
          ret = G__18805;
          es = G__18806;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__18807 = null;
  var G__18807__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18807__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18807 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18807__2.call(this, self__, k);
      case 3:
        return G__18807__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18807.cljs$core$IFn$_invoke$arity$2 = G__18807__2;
  G__18807.cljs$core$IFn$_invoke$arity$3 = G__18807__3;
  return G__18807;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args18761) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18761)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__18808 = i + 2;
        var G__18809 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
        i = G__18808;
        ret = G__18809;
        continue;
      } else {
        return cljs.core._persistent_BANG_(ret);
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__18810_18818 = self__.arr;
      G__18810_18818.pop();
      G__18810_18818.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(function() {
          var G__18811 = self__.len;
          var G__18812 = self__.arr;
          return cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(G__18811, G__18812) : cljs.core.array__GT_transient_hash_map.call(null, G__18811, G__18812);
        }(), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__18813 = o;
      if (G__18813) {
        var bit__4796__auto__ = G__18813.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4796__auto__ || G__18813.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__18813.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__18813);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__18813);
      }
    }()) {
      return cljs.core._assoc_BANG_(tcoll__$1, function() {
        var G__18814 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__18814) : cljs.core.key.call(null, G__18814);
      }(), function() {
        var G__18815 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__18815) : cljs.core.val.call(null, G__18815);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__18819 = cljs.core.next(es);
          var G__18820 = cljs.core._assoc_BANG_(tcoll__$2, function() {
            var G__18816 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__18816) : cljs.core.key.call(null, G__18816);
          }(), function() {
            var G__18817 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__18817) : cljs.core.val.call(null, G__18817);
          }());
          es = G__18819;
          tcoll__$2 = G__18820;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__18821 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__18822 = i + 2;
      out = G__18821;
      i = G__18822;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var cljs$core$clone_and_set = null;
  var cljs$core$clone_and_set__3 = function(arr, i, a) {
    var G__18825 = cljs.core.aclone(arr);
    G__18825[i] = a;
    return G__18825;
  };
  var cljs$core$clone_and_set__5 = function(arr, i, a, j, b) {
    var G__18826 = cljs.core.aclone(arr);
    G__18826[i] = a;
    G__18826[j] = b;
    return G__18826;
  };
  cljs$core$clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return cljs$core$clone_and_set__3.call(this, arr, i, a);
      case 5:
        return cljs$core$clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$clone_and_set.cljs$core$IFn$_invoke$arity$3 = cljs$core$clone_and_set__3;
  cljs$core$clone_and_set.cljs$core$IFn$_invoke$arity$5 = cljs$core$clone_and_set__5;
  return cljs$core$clone_and_set;
}();
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var cljs$core$edit_and_set = null;
  var cljs$core$edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var cljs$core$edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  cljs$core$edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return cljs$core$edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return cljs$core$edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$edit_and_set.cljs$core$IFn$_invoke$arity$4 = cljs$core$edit_and_set__4;
  cljs$core$edit_and_set.cljs$core$IFn$_invoke$arity$6 = cljs$core$edit_and_set__6;
  return cljs$core$edit_and_set;
}();
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__18831 = init__$1;
          var G__18832 = k;
          var G__18833 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18831, G__18832, G__18833) : f.call(null, G__18831, G__18832, G__18833);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__18834 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18834) : cljs.core.deref.call(null, G__18834);
      } else {
        var G__18835 = i + 2;
        var G__18836 = init__$2;
        i = G__18835;
        init__$1 = G__18836;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__18837 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__18837) : cljs.core.create_inode_seq.call(null, G__18837);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_18851 = 0;
        var j_18852 = 0;
        while (true) {
          if (i_18851 < 32) {
            if ((self__.bitmap >>> i_18851 & 1) === 0) {
              var G__18853 = i_18851 + 1;
              var G__18854 = j_18852;
              i_18851 = G__18853;
              j_18852 = G__18854;
              continue;
            } else {
              nodes[i_18851] = !(self__.arr[j_18852] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_18852]), self__.arr[j_18852], self__.arr[j_18852 + 1], added_leaf_QMARK_) : self__.arr[j_18852 + 1];
              var G__18855 = i_18851 + 1;
              var G__18856 = j_18852 + 2;
              i_18851 = G__18855;
              j_18852 = G__18856;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__18838 = edit__$1;
          var G__18839 = shift + 5;
          var G__18840 = key_or_nil;
          var G__18841 = val_or_node;
          var G__18842 = hash;
          var G__18843 = key;
          var G__18844 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__18838, G__18839, G__18840, G__18841, G__18842, G__18843, G__18844) : cljs.core.create_node.call(null, G__18838, G__18839, G__18840, G__18841, G__18842, G__18843, G__18844);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_18857 = 0;
      var j_18858 = 0;
      while (true) {
        if (i_18857 < 32) {
          if ((self__.bitmap >>> i_18857 & 1) === 0) {
            var G__18859 = i_18857 + 1;
            var G__18860 = j_18858;
            i_18857 = G__18859;
            j_18858 = G__18860;
            continue;
          } else {
            nodes[i_18857] = !(self__.arr[j_18858] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_18858]), self__.arr[j_18858], self__.arr[j_18858 + 1], added_leaf_QMARK_) : self__.arr[j_18858 + 1];
            var G__18861 = i_18857 + 1;
            var G__18862 = j_18858 + 2;
            i_18857 = G__18861;
            j_18858 = G__18862;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__18845 = shift + 5;
          var G__18846 = key_or_nil;
          var G__18847 = val_or_node;
          var G__18848 = hash;
          var G__18849 = key;
          var G__18850 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__18845, G__18846, G__18847, G__18848, G__18849, G__18850) : cljs.core.create_node.call(null, G__18845, G__18846, G__18847, G__18848, G__18849, G__18850);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__18863 = i + 1;
        var G__18864 = j + 2;
        var G__18865 = bitmap | 1 << i;
        i = G__18863;
        j = G__18864;
        bitmap = G__18865;
        continue;
      } else {
        var G__18866 = i + 1;
        var G__18867 = j;
        var G__18868 = bitmap;
        i = G__18866;
        j = G__18867;
        bitmap = G__18868;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__18869 = self__.arr;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(G__18869) : cljs.core.create_array_node_seq.call(null, G__18869);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          var G__18870 = init__$2;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18870) : cljs.core.deref.call(null, G__18870);
        } else {
          var G__18871 = i + 1;
          var G__18872 = init__$2;
          i = G__18871;
          init__$1 = G__18872;
          continue;
        }
      } else {
        var G__18873 = i + 1;
        var G__18874 = init__$1;
        i = G__18873;
        init__$1 = G__18874;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__18875 = i + 2;
        i = G__18875;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__18876 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__18876) : cljs.core.create_inode_seq.call(null, G__18876);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var cljs$core$create_node = null;
  var cljs$core$create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var cljs$core$create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  cljs$core$create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return cljs$core$create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return cljs$core$create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$create_node.cljs$core$IFn$_invoke$arity$6 = cljs$core$create_node__6;
  cljs$core$create_node.cljs$core$IFn$_invoke$arity$7 = cljs$core$create_node__7;
  return cljs$core$create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__18877 = self__.nodes;
    var G__18878 = self__.i + 2;
    var G__18879 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__18877, G__18878, G__18879) : cljs.core.create_inode_seq.call(null, G__18877, G__18878, G__18879);
  } else {
    var G__18880 = self__.nodes;
    var G__18881 = self__.i;
    var G__18882 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__18880, G__18881, G__18882) : cljs.core.create_inode_seq.call(null, G__18880, G__18881, G__18882);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.create_inode_seq = function() {
  var cljs$core$create_inode_seq = null;
  var cljs$core$create_inode_seq__1 = function(nodes) {
    return cljs$core$create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
  };
  var cljs$core$create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__18886 = j + 2;
                j = G__18886;
                continue;
              }
            } else {
              var G__18887 = j + 2;
              j = G__18887;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  cljs$core$create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return cljs$core$create_inode_seq__1.call(this, nodes);
      case 3:
        return cljs$core$create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$create_inode_seq.cljs$core$IFn$_invoke$arity$1 = cljs$core$create_inode_seq__1;
  cljs$core$create_inode_seq.cljs$core$IFn$_invoke$arity$3 = cljs$core$create_inode_seq__3;
  return cljs$core$create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__18888 = null;
  var G__18889 = self__.nodes;
  var G__18890 = self__.i;
  var G__18891 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__18888, G__18889, G__18890, G__18891) : cljs.core.create_array_node_seq.call(null, G__18888, G__18889, G__18890, G__18891);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.create_array_node_seq = function() {
  var cljs$core$create_array_node_seq = null;
  var cljs$core$create_array_node_seq__1 = function(nodes) {
    return cljs$core$create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
  };
  var cljs$core$create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__18896 = j + 1;
              j = G__18896;
              continue;
            }
          } else {
            var G__18897 = j + 1;
            j = G__18897;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  cljs$core$create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return cljs$core$create_array_node_seq__1.call(this, meta);
      case 4:
        return cljs$core$create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = cljs$core$create_array_node_seq__1;
  cljs$core$create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = cljs$core$create_array_node_seq__4;
  return cljs$core$create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__18899 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__18899) : cljs.core.keys.call(null, G__18899);
  }());
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__18900 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__18900) : cljs.core.vals.call(null, G__18900);
  }());
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__18901 = cljs.core.seq(coll);
  var chunk__18902 = null;
  var count__18903 = 0;
  var i__18904 = 0;
  while (true) {
    if (i__18904 < count__18903) {
      var vec__18905 = chunk__18902.cljs$core$IIndexed$_nth$arity$2(null, i__18904);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18905, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18905, 1, null);
      var G__18906_18917 = v;
      var G__18907_18918 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18906_18917, G__18907_18918) : f.call(null, G__18906_18917, G__18907_18918);
      var G__18919 = seq__18901;
      var G__18920 = chunk__18902;
      var G__18921 = count__18903;
      var G__18922 = i__18904 + 1;
      seq__18901 = G__18919;
      chunk__18902 = G__18920;
      count__18903 = G__18921;
      i__18904 = G__18922;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__18901);
      if (temp__4126__auto__) {
        var seq__18901__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__18901__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__18901__$1);
          var G__18923 = cljs.core.chunk_rest(seq__18901__$1);
          var G__18924 = c__4907__auto__;
          var G__18925 = cljs.core.count(c__4907__auto__);
          var G__18926 = 0;
          seq__18901 = G__18923;
          chunk__18902 = G__18924;
          count__18903 = G__18925;
          i__18904 = G__18926;
          continue;
        } else {
          var vec__18908 = cljs.core.first(seq__18901__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18908, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18908, 1, null);
          var G__18909_18927 = v;
          var G__18910_18928 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18909_18927, G__18910_18928) : f.call(null, G__18909_18927, G__18910_18928);
          var G__18929 = cljs.core.next(seq__18901__$1);
          var G__18930 = null;
          var G__18931 = 0;
          var G__18932 = 0;
          seq__18901 = G__18929;
          chunk__18902 = G__18930;
          count__18903 = G__18931;
          i__18904 = G__18932;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? function() {
    var G__18911 = init;
    var G__18912 = null;
    var G__18913 = self__.nil_val;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18911, G__18912, G__18913) : f.call(null, G__18911, G__18912, G__18913);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__18914 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18914) : cljs.core.deref.call(null, G__18914);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj18916 = {};
    return obj18916;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__18933 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__18934 = cljs.core.next(es);
          ret = G__18933;
          es = G__18934;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__18935 = null;
  var G__18935__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18935__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18935 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18935__2.call(this, self__, k);
      case 3:
        return G__18935__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18935.cljs$core$IFn$_invoke$arity$2 = G__18935__2;
  G__18935.cljs$core$IFn$_invoke$arity$3 = G__18935__3;
  return G__18935;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args18898) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18898)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__18936 = i + 2;
      var G__18937 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__18936;
      ret = G__18937;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__18938 = i + 1;
      var G__18939 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__18938;
      out = G__18939;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__18940 = o;
      if (G__18940) {
        var bit__4796__auto__ = G__18940.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4796__auto__ || G__18940.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__18940.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__18940);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__18940);
      }
    }()) {
      return tcoll.assoc_BANG_(function() {
        var G__18941 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__18941) : cljs.core.key.call(null, G__18941);
      }(), function() {
        var G__18942 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__18942) : cljs.core.val.call(null, G__18942);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__18945 = cljs.core.next(es);
          var G__18946 = tcoll__$1.assoc_BANG_(function() {
            var G__18943 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__18943) : cljs.core.key.call(null, G__18943);
          }(), function() {
            var G__18944 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__18944) : cljs.core.val.call(null, G__18944);
          }());
          es = G__18945;
          tcoll__$1 = G__18946;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__18947 = ascending_QMARK_ ? t.left : t.right;
      var G__18948 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__18947;
      stack__$1 = G__18948;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? cljs$core$tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__18961 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18961) : cljs.core.deref.call(null, G__18961);
  } else {
    var init__$2 = function() {
      var G__18962 = init__$1;
      var G__18963 = node.key;
      var G__18964 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18962, G__18963, G__18964) : f.call(null, G__18962, G__18963, G__18964);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      var G__18965 = init__$2;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18965) : cljs.core.deref.call(null, G__18965);
    } else {
      var init__$3 = !(node.right == null) ? cljs$core$tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        var G__18966 = init__$3;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18966) : cljs.core.deref.call(null, G__18966);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__18968 = null;
  var G__18968__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18968__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18968 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18968__2.call(this, self__, k);
      case 3:
        return G__18968__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18968.cljs$core$IFn$_invoke$arity$2 = G__18968__2;
  G__18968.cljs$core$IFn$_invoke$arity$3 = G__18968__3;
  return G__18968;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args18967) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18967)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__18970 = null;
  var G__18970__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18970__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18970 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18970__2.call(this, self__, k);
      case 3:
        return G__18970__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18970.cljs$core$IFn$_invoke$arity$2 = G__18970__2;
  G__18970.cljs$core$IFn$_invoke$arity$3 = G__18970__3;
  return G__18970;
}();
cljs.core.RedNode.prototype.apply = function(self__, args18969) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18969)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__18983 = k;
      var G__18984 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__18983, G__18984) : comp.call(null, G__18983, G__18984);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = cljs$core$tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = cljs$core$tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, cljs$core$tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, cljs$core$tree_map_append(left, right.left), right.right, null);
        } else {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__19003 = k;
      var G__19004 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__19003, G__19004) : comp.call(null, G__19003, G__19004);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = cljs$core$tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = cljs$core$tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = function() {
    var G__19015 = k;
    var G__19016 = tk;
    return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__19015, G__19016) : comp.call(null, G__19015, G__19016);
  }();
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, cljs$core$tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, cljs$core$tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__19018 = cljs.core.seq(coll);
  var chunk__19019 = null;
  var count__19020 = 0;
  var i__19021 = 0;
  while (true) {
    if (i__19021 < count__19020) {
      var vec__19022 = chunk__19019.cljs$core$IIndexed$_nth$arity$2(null, i__19021);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19022, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19022, 1, null);
      var G__19023_19035 = v;
      var G__19024_19036 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19023_19035, G__19024_19036) : f.call(null, G__19023_19035, G__19024_19036);
      var G__19037 = seq__19018;
      var G__19038 = chunk__19019;
      var G__19039 = count__19020;
      var G__19040 = i__19021 + 1;
      seq__19018 = G__19037;
      chunk__19019 = G__19038;
      count__19020 = G__19039;
      i__19021 = G__19040;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__19018);
      if (temp__4126__auto__) {
        var seq__19018__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19018__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__19018__$1);
          var G__19041 = cljs.core.chunk_rest(seq__19018__$1);
          var G__19042 = c__4907__auto__;
          var G__19043 = cljs.core.count(c__4907__auto__);
          var G__19044 = 0;
          seq__19018 = G__19041;
          chunk__19019 = G__19042;
          count__19020 = G__19043;
          i__19021 = G__19044;
          continue;
        } else {
          var vec__19025 = cljs.core.first(seq__19018__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19025, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19025, 1, null);
          var G__19026_19045 = v;
          var G__19027_19046 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19026_19045, G__19027_19046) : f.call(null, G__19026_19045, G__19027_19046);
          var G__19047 = cljs.core.next(seq__19018__$1);
          var G__19048 = null;
          var G__19049 = 0;
          var G__19050 = 0;
          seq__19018 = G__19047;
          chunk__19019 = G__19048;
          count__19020 = G__19049;
          i__19021 = G__19050;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__19028 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__19028) : cljs.core.keys.call(null, G__19028);
  }());
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__19029 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__19029) : cljs.core.vals.call(null, G__19029);
  }());
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__19030 = k;
        var G__19031 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__19030, G__19031) : self__.comp.call(null, G__19030, G__19031);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__19051 = t.left;
          t = G__19051;
          continue;
        } else {
          var G__19052 = t.right;
          t = G__19052;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__19053 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__19054 = cljs.core.next(es);
          ret = G__19053;
          es = G__19054;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__19055 = null;
  var G__19055__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19055__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19055 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19055__2.call(this, self__, k);
      case 3:
        return G__19055__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19055.cljs$core$IFn$_invoke$arity$2 = G__19055__2;
  G__19055.cljs$core$IFn$_invoke$arity$3 = G__19055__3;
  return G__19055;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args19017) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19017)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__19032 = k;
          var G__19033 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__19032, G__19033) : self__.comp.call(null, G__19032, G__19033);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__19056 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__19057 = t.left;
              stack = G__19056;
              t = G__19057;
              continue;
            } else {
              var G__19058 = stack;
              var G__19059 = t.right;
              stack = G__19058;
              t = G__19059;
              continue;
            }
          } else {
            if (c > 0) {
              var G__19060 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__19061 = t.right;
              stack = G__19060;
              t = G__19061;
              continue;
            } else {
              var G__19062 = stack;
              var G__19063 = t.left;
              stack = G__19062;
              t = G__19063;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  var G__19034 = entry;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__19034) : cljs.core.key.call(null, G__19034);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.hash_map = function() {
  var cljs$core$hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__19064 = cljs.core.nnext(in$);
        var G__19065 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__19064;
        out = G__19065;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  };
  var cljs$core$hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__19066__i = 0, G__19066__a = new Array(arguments.length - 0);
      while (G__19066__i < G__19066__a.length) {
        G__19066__a[G__19066__i] = arguments[G__19066__i + 0];
        ++G__19066__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__19066__a, 0);
    }
    return cljs$core$hash_map__delegate.call(this, keyvals);
  };
  cljs$core$hash_map.cljs$lang$maxFixedArity = 0;
  cljs$core$hash_map.cljs$lang$applyTo = function(arglist__19067) {
    var keyvals = cljs.core.seq(arglist__19067);
    return cljs$core$hash_map__delegate(keyvals);
  };
  cljs$core$hash_map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$hash_map__delegate;
  return cljs$core$hash_map;
}();
cljs.core.array_map = function() {
  var cljs$core$array_map__delegate = function(keyvals) {
    return cljs.core.PersistentArrayMap.fromArray(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array, keyvals), true, false);
  };
  var cljs$core$array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__19068__i = 0, G__19068__a = new Array(arguments.length - 0);
      while (G__19068__i < G__19068__a.length) {
        G__19068__a[G__19068__i] = arguments[G__19068__i + 0];
        ++G__19068__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__19068__a, 0);
    }
    return cljs$core$array_map__delegate.call(this, keyvals);
  };
  cljs$core$array_map.cljs$lang$maxFixedArity = 0;
  cljs$core$array_map.cljs$lang$applyTo = function(arglist__19069) {
    var keyvals = cljs.core.seq(arglist__19069);
    return cljs$core$array_map__delegate(keyvals);
  };
  cljs$core$array_map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$array_map__delegate;
  return cljs$core$array_map;
}();
cljs.core.obj_map = function() {
  var cljs$core$obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj19073 = {};
      return obj19073;
    }();
    var kvs = cljs.core.seq(keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first(kvs));
        obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
        var G__19074 = cljs.core.nnext(kvs);
        kvs = G__19074;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var cljs$core$obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__19075__i = 0, G__19075__a = new Array(arguments.length - 0);
      while (G__19075__i < G__19075__a.length) {
        G__19075__a[G__19075__i] = arguments[G__19075__i + 0];
        ++G__19075__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__19075__a, 0);
    }
    return cljs$core$obj_map__delegate.call(this, keyvals);
  };
  cljs$core$obj_map.cljs$lang$maxFixedArity = 0;
  cljs$core$obj_map.cljs$lang$applyTo = function(arglist__19076) {
    var keyvals = cljs.core.seq(arglist__19076);
    return cljs$core$obj_map__delegate(keyvals);
  };
  cljs$core$obj_map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$obj_map__delegate;
  return cljs$core$obj_map;
}();
cljs.core.sorted_map = function() {
  var cljs$core$sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__19077 = cljs.core.nnext(in$);
        var G__19078 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__19077;
        out = G__19078;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var cljs$core$sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__19079__i = 0, G__19079__a = new Array(arguments.length - 0);
      while (G__19079__i < G__19079__a.length) {
        G__19079__a[G__19079__i] = arguments[G__19079__i + 0];
        ++G__19079__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__19079__a, 0);
    }
    return cljs$core$sorted_map__delegate.call(this, keyvals);
  };
  cljs$core$sorted_map.cljs$lang$maxFixedArity = 0;
  cljs$core$sorted_map.cljs$lang$applyTo = function(arglist__19080) {
    var keyvals = cljs.core.seq(arglist__19080);
    return cljs$core$sorted_map__delegate(keyvals);
  };
  cljs$core$sorted_map.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sorted_map__delegate;
  return cljs$core$sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var cljs$core$sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__19081 = cljs.core.nnext(in$);
        var G__19082 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__19081;
        out = G__19082;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var cljs$core$sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      var G__19083__i = 0, G__19083__a = new Array(arguments.length - 1);
      while (G__19083__i < G__19083__a.length) {
        G__19083__a[G__19083__i] = arguments[G__19083__i + 1];
        ++G__19083__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__19083__a, 0);
    }
    return cljs$core$sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  cljs$core$sorted_map_by.cljs$lang$maxFixedArity = 1;
  cljs$core$sorted_map_by.cljs$lang$applyTo = function(arglist__19084) {
    var comparator = cljs.core.first(arglist__19084);
    var keyvals = cljs.core.rest(arglist__19084);
    return cljs$core$sorted_map_by__delegate(comparator, keyvals);
  };
  cljs$core$sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sorted_map_by__delegate;
  return cljs$core$sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__19085 = self__.mseq;
    if (G__19085) {
      var bit__4796__auto__ = G__19085.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4796__auto__ || G__19085.cljs$core$INext$) {
        return true;
      } else {
        if (!G__19085.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19085);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19085);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__19086 = self__.mseq;
    if (G__19086) {
      var bit__4796__auto__ = G__19086.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4796__auto__ || G__19086.cljs$core$INext$) {
        return true;
      } else {
        if (!G__19086.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19086);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19086);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__19087 = self__.mseq;
    if (G__19087) {
      var bit__4796__auto__ = G__19087.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4796__auto__ || G__19087.cljs$core$INext$) {
        return true;
      } else {
        if (!G__19087.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19087);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19087);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__19088 = self__.mseq;
    if (G__19088) {
      var bit__4796__auto__ = G__19088.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4796__auto__ || G__19088.cljs$core$INext$) {
        return true;
      } else {
        if (!G__19088.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19088);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19088);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function() {
  var cljs$core$merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__19089_SHARP_, p2__19090_SHARP_) {
        return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
          var or__4122__auto__ = p1__19089_SHARP_;
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__19090_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var cljs$core$merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      var G__19091__i = 0, G__19091__a = new Array(arguments.length - 0);
      while (G__19091__i < G__19091__a.length) {
        G__19091__a[G__19091__i] = arguments[G__19091__i + 0];
        ++G__19091__i;
      }
      maps = new cljs.core.IndexedSeq(G__19091__a, 0);
    }
    return cljs$core$merge__delegate.call(this, maps);
  };
  cljs$core$merge.cljs$lang$maxFixedArity = 0;
  cljs$core$merge.cljs$lang$applyTo = function(arglist__19092) {
    var maps = cljs.core.seq(arglist__19092);
    return cljs$core$merge__delegate(maps);
  };
  cljs$core$merge.cljs$core$IFn$_invoke$arity$variadic = cljs$core$merge__delegate;
  return cljs$core$merge;
}();
cljs.core.merge_with = function() {
  var cljs$core$merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first(e);
        var v = cljs.core.second(e);
        if (cljs.core.contains_QMARK_(m, k)) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
            var G__19095 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
            var G__19096 = v;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19095, G__19096) : f.call(null, G__19095, G__19096);
          }());
        } else {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
            var or__4122__auto__ = m1;
            if (cljs.core.truth_(or__4122__auto__)) {
              return or__4122__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq(m2));
        };
      }(merge_entry);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
    } else {
      return null;
    }
  };
  var cljs$core$merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      var G__19097__i = 0, G__19097__a = new Array(arguments.length - 1);
      while (G__19097__i < G__19097__a.length) {
        G__19097__a[G__19097__i] = arguments[G__19097__i + 1];
        ++G__19097__i;
      }
      maps = new cljs.core.IndexedSeq(G__19097__a, 0);
    }
    return cljs$core$merge_with__delegate.call(this, f, maps);
  };
  cljs$core$merge_with.cljs$lang$maxFixedArity = 1;
  cljs$core$merge_with.cljs$lang$applyTo = function(arglist__19098) {
    var f = cljs.core.first(arglist__19098);
    var maps = cljs.core.rest(arglist__19098);
    return cljs$core$merge_with__delegate(f, maps);
  };
  cljs$core$merge_with.cljs$core$IFn$_invoke$arity$variadic = cljs$core$merge_with__delegate;
  return cljs$core$merge_with;
}();
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__19099 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__19100 = cljs.core.next(keys);
      ret = G__19099;
      keys = G__19100;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__19103 = cljs.core.seq(coll);
  var chunk__19104 = null;
  var count__19105 = 0;
  var i__19106 = 0;
  while (true) {
    if (i__19106 < count__19105) {
      var vec__19107 = chunk__19104.cljs$core$IIndexed$_nth$arity$2(null, i__19106);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19107, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19107, 1, null);
      var G__19108_19113 = v;
      var G__19109_19114 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19108_19113, G__19109_19114) : f.call(null, G__19108_19113, G__19109_19114);
      var G__19115 = seq__19103;
      var G__19116 = chunk__19104;
      var G__19117 = count__19105;
      var G__19118 = i__19106 + 1;
      seq__19103 = G__19115;
      chunk__19104 = G__19116;
      count__19105 = G__19117;
      i__19106 = G__19118;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__19103);
      if (temp__4126__auto__) {
        var seq__19103__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19103__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__19103__$1);
          var G__19119 = cljs.core.chunk_rest(seq__19103__$1);
          var G__19120 = c__4907__auto__;
          var G__19121 = cljs.core.count(c__4907__auto__);
          var G__19122 = 0;
          seq__19103 = G__19119;
          chunk__19104 = G__19120;
          count__19105 = G__19121;
          i__19106 = G__19122;
          continue;
        } else {
          var vec__19110 = cljs.core.first(seq__19103__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19110, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19110, 1, null);
          var G__19111_19123 = v;
          var G__19112_19124 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19111_19123, G__19112_19124) : f.call(null, G__19111_19123, G__19112_19124);
          var G__19125 = cljs.core.next(seq__19103__$1);
          var G__19126 = null;
          var G__19127 = 0;
          var G__19128 = 0;
          seq__19103 = G__19125;
          chunk__19104 = G__19126;
          count__19105 = G__19127;
          i__19106 = G__19128;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__19101_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__19101_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__19129 = null;
  var G__19129__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19129__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19129 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19129__2.call(this, self__, k);
      case 3:
        return G__19129__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19129.cljs$core$IFn$_invoke$arity$2 = G__19129__2;
  G__19129.cljs$core$IFn$_invoke$arity$3 = G__19129__3;
  return G__19129;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args19102) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19102)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__19130 = i + 1;
        var G__19131 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__19130;
        out = G__19131;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__19132 = i + 1;
        var G__19133 = cljs.core._conj_BANG_(out, items[i]);
        i = G__19132;
        out = G__19133;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__19135 = null;
  var G__19135__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__19135__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__19135 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19135__2.call(this, self__, k);
      case 3:
        return G__19135__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19135.cljs$core$IFn$_invoke$arity$2 = G__19135__2;
  G__19135.cljs$core$IFn$_invoke$arity$3 = G__19135__3;
  return G__19135;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args19134) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19134)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__19138 = cljs.core.seq(coll);
  var chunk__19139 = null;
  var count__19140 = 0;
  var i__19141 = 0;
  while (true) {
    if (i__19141 < count__19140) {
      var vec__19142 = chunk__19139.cljs$core$IIndexed$_nth$arity$2(null, i__19141);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19142, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19142, 1, null);
      var G__19143_19148 = v;
      var G__19144_19149 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19143_19148, G__19144_19149) : f.call(null, G__19143_19148, G__19144_19149);
      var G__19150 = seq__19138;
      var G__19151 = chunk__19139;
      var G__19152 = count__19140;
      var G__19153 = i__19141 + 1;
      seq__19138 = G__19150;
      chunk__19139 = G__19151;
      count__19140 = G__19152;
      i__19141 = G__19153;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__19138);
      if (temp__4126__auto__) {
        var seq__19138__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19138__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__19138__$1);
          var G__19154 = cljs.core.chunk_rest(seq__19138__$1);
          var G__19155 = c__4907__auto__;
          var G__19156 = cljs.core.count(c__4907__auto__);
          var G__19157 = 0;
          seq__19138 = G__19154;
          chunk__19139 = G__19155;
          count__19140 = G__19156;
          i__19141 = G__19157;
          continue;
        } else {
          var vec__19145 = cljs.core.first(seq__19138__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19145, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19145, 1, null);
          var G__19146_19158 = v;
          var G__19147_19159 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19146_19158, G__19147_19159) : f.call(null, G__19146_19158, G__19147_19159);
          var G__19160 = cljs.core.next(seq__19138__$1);
          var G__19161 = null;
          var G__19162 = 0;
          var G__19163 = 0;
          seq__19138 = G__19160;
          chunk__19139 = G__19161;
          count__19140 = G__19162;
          i__19141 = G__19163;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__19136_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__19136_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__19164 = null;
  var G__19164__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19164__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19164 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19164__2.call(this, self__, k);
      case 3:
        return G__19164__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19164.cljs$core$IFn$_invoke$arity$2 = G__19164__2;
  G__19164.cljs$core$IFn$_invoke$arity$3 = G__19164__3;
  return G__19164;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args19137) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19137)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__5001__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__5001__auto__.length) {
        var G__19165 = i + 1;
        var G__19166 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__19165;
        res = G__19166;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__19167 = in$__$1.cljs$core$INext$_next$arity$1(null);
          var G__19168 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__19167;
          out = G__19168;
          continue;
        } else {
          return out.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var cljs$core$hash_set = null;
  var cljs$core$hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var cljs$core$hash_set__1 = function() {
    var G__19169__delegate = function(keys) {
      return cljs.core.set(keys);
    };
    var G__19169 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        var G__19170__i = 0, G__19170__a = new Array(arguments.length - 0);
        while (G__19170__i < G__19170__a.length) {
          G__19170__a[G__19170__i] = arguments[G__19170__i + 0];
          ++G__19170__i;
        }
        keys = new cljs.core.IndexedSeq(G__19170__a, 0);
      }
      return G__19169__delegate.call(this, keys);
    };
    G__19169.cljs$lang$maxFixedArity = 0;
    G__19169.cljs$lang$applyTo = function(arglist__19171) {
      var keys = cljs.core.seq(arglist__19171);
      return G__19169__delegate(keys);
    };
    G__19169.cljs$core$IFn$_invoke$arity$variadic = G__19169__delegate;
    return G__19169;
  }();
  cljs$core$hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return cljs$core$hash_set__0.call(this);
      default:
        var G__19172 = null;
        if (arguments.length > 0) {
          var G__19173__i = 0, G__19173__a = new Array(arguments.length - 0);
          while (G__19173__i < G__19173__a.length) {
            G__19173__a[G__19173__i] = arguments[G__19173__i + 0];
            ++G__19173__i;
          }
          G__19172 = new cljs.core.IndexedSeq(G__19173__a, 0);
        }
        return cljs$core$hash_set__1.cljs$core$IFn$_invoke$arity$variadic(G__19172);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$hash_set.cljs$lang$maxFixedArity = 0;
  cljs$core$hash_set.cljs$lang$applyTo = cljs$core$hash_set__1.cljs$lang$applyTo;
  cljs$core$hash_set.cljs$core$IFn$_invoke$arity$0 = cljs$core$hash_set__0;
  cljs$core$hash_set.cljs$core$IFn$_invoke$arity$variadic = cljs$core$hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$hash_set;
}();
cljs.core.sorted_set = function() {
  var cljs$core$sorted_set__delegate = function(keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var cljs$core$sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      var G__19174__i = 0, G__19174__a = new Array(arguments.length - 0);
      while (G__19174__i < G__19174__a.length) {
        G__19174__a[G__19174__i] = arguments[G__19174__i + 0];
        ++G__19174__i;
      }
      keys = new cljs.core.IndexedSeq(G__19174__a, 0);
    }
    return cljs$core$sorted_set__delegate.call(this, keys);
  };
  cljs$core$sorted_set.cljs$lang$maxFixedArity = 0;
  cljs$core$sorted_set.cljs$lang$applyTo = function(arglist__19175) {
    var keys = cljs.core.seq(arglist__19175);
    return cljs$core$sorted_set__delegate(keys);
  };
  cljs$core$sorted_set.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sorted_set__delegate;
  return cljs$core$sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var cljs$core$sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
  };
  var cljs$core$sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      var G__19176__i = 0, G__19176__a = new Array(arguments.length - 1);
      while (G__19176__i < G__19176__a.length) {
        G__19176__a[G__19176__i] = arguments[G__19176__i + 1];
        ++G__19176__i;
      }
      keys = new cljs.core.IndexedSeq(G__19176__a, 0);
    }
    return cljs$core$sorted_set_by__delegate.call(this, comparator, keys);
  };
  cljs$core$sorted_set_by.cljs$lang$maxFixedArity = 1;
  cljs$core$sorted_set_by.cljs$lang$applyTo = function(arglist__19177) {
    var comparator = cljs.core.first(arglist__19177);
    var keys = cljs.core.rest(arglist__19177);
    return cljs$core$sorted_set_by__delegate(comparator, keys);
  };
  cljs$core$sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sorted_set_by__delegate;
  return cljs$core$sorted_set_by;
}();
cljs.core.replace = function() {
  var cljs$core$replace = null;
  var cljs$core$replace__1 = function(smap) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__19178_SHARP_) {
      var temp__4124__auto__ = cljs.core.find(smap, p1__19178_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val(e);
      } else {
        return p1__19178_SHARP_;
      }
    });
  };
  var cljs$core$replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_(coll)) {
      var n = cljs.core.count(coll);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
    } else {
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__19179_SHARP_) {
        var temp__4124__auto__ = cljs.core.find(smap, p1__19179_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second(e);
        } else {
          return p1__19179_SHARP_;
        }
      }, coll);
    }
  };
  cljs$core$replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$replace__1.call(this, smap);
      case 2:
        return cljs$core$replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$replace.cljs$core$IFn$_invoke$arity$1 = cljs$core$replace__1;
  cljs$core$replace.cljs$core$IFn$_invoke$arity$2 = cljs$core$replace__2;
  return cljs$core$replace;
}();
cljs.core.distinct = function() {
  var cljs$core$distinct = null;
  var cljs$core$distinct__0 = function() {
    return function(rf) {
      var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
      return function(seen) {
        return function() {
          var G__19200 = null;
          var G__19200__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__19200__1 = function(result) {
            var G__19190 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19190) : rf.call(null, G__19190);
          };
          var G__19200__2 = function(result, input) {
            if (cljs.core.contains_QMARK_(function() {
              var G__19191 = seen;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19191) : cljs.core.deref.call(null, G__19191);
            }(), input)) {
              return result;
            } else {
              seen.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen.cljs$core$IDeref$_deref$arity$1(null), input));
              var G__19192 = result;
              var G__19193 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19192, G__19193) : rf.call(null, G__19192, G__19193);
            }
          };
          G__19200 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__19200__0.call(this);
              case 1:
                return G__19200__1.call(this, result);
              case 2:
                return G__19200__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__19200.cljs$core$IFn$_invoke$arity$0 = G__19200__0;
          G__19200.cljs$core$IFn$_invoke$arity$1 = G__19200__1;
          G__19200.cljs$core$IFn$_invoke$arity$2 = G__19200__2;
          return G__19200;
        }();
      }(seen);
    };
  };
  var cljs$core$distinct__1 = function(coll) {
    var step = function cljs$core$distinct_$_step(xs, seen) {
      return new cljs.core.LazySeq(null, function() {
        return function(p__19198, seen__$1) {
          while (true) {
            var vec__19199 = p__19198;
            var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19199, 0, null);
            var xs__$1 = vec__19199;
            var temp__4126__auto__ = cljs.core.seq(xs__$1);
            if (temp__4126__auto__) {
              var s = temp__4126__auto__;
              if (cljs.core.contains_QMARK_(seen__$1, f)) {
                var G__19201 = cljs.core.rest(s);
                var G__19202 = seen__$1;
                p__19198 = G__19201;
                seen__$1 = G__19202;
                continue;
              } else {
                return cljs.core.cons(f, cljs$core$distinct_$_step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
              }
            } else {
              return null;
            }
            break;
          }
        }.call(null, xs, seen);
      }, null, null);
    };
    return step(coll, cljs.core.PersistentHashSet.EMPTY);
  };
  cljs$core$distinct = function(coll) {
    switch(arguments.length) {
      case 0:
        return cljs$core$distinct__0.call(this);
      case 1:
        return cljs$core$distinct__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$distinct.cljs$core$IFn$_invoke$arity$0 = cljs$core$distinct__0;
  cljs$core$distinct.cljs$core$IFn$_invoke$arity$1 = cljs$core$distinct__1;
  return cljs$core$distinct;
}();
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__19203 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__19204 = cljs.core.next(s__$1);
      ret = G__19203;
      s__$1 = G__19204;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (function() {
    var G__19206 = x;
    if (G__19206) {
      var bit__4789__auto__ = G__19206.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4789__auto__ || G__19206.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__19207 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__19208 = cljs.core.next(ks);
      var G__19209 = cljs.core.next(vs);
      map = G__19207;
      ks = G__19208;
      vs = G__19209;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var cljs$core$max_key = null;
  var cljs$core$max_key__2 = function(k, x) {
    return x;
  };
  var cljs$core$max_key__3 = function(k, x, y) {
    if (function() {
      var G__19220 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__19220) : k.call(null, G__19220);
    }() > function() {
      var G__19221 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__19221) : k.call(null, G__19221);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var cljs$core$max_key__4 = function() {
    var G__19222__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__19210_SHARP_, p2__19211_SHARP_) {
        return cljs$core$max_key.cljs$core$IFn$_invoke$arity$3(k, p1__19210_SHARP_, p2__19211_SHARP_);
      }, cljs$core$max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__19222 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__19223__i = 0, G__19223__a = new Array(arguments.length - 3);
        while (G__19223__i < G__19223__a.length) {
          G__19223__a[G__19223__i] = arguments[G__19223__i + 3];
          ++G__19223__i;
        }
        more = new cljs.core.IndexedSeq(G__19223__a, 0);
      }
      return G__19222__delegate.call(this, k, x, y, more);
    };
    G__19222.cljs$lang$maxFixedArity = 3;
    G__19222.cljs$lang$applyTo = function(arglist__19224) {
      var k = cljs.core.first(arglist__19224);
      arglist__19224 = cljs.core.next(arglist__19224);
      var x = cljs.core.first(arglist__19224);
      arglist__19224 = cljs.core.next(arglist__19224);
      var y = cljs.core.first(arglist__19224);
      var more = cljs.core.rest(arglist__19224);
      return G__19222__delegate(k, x, y, more);
    };
    G__19222.cljs$core$IFn$_invoke$arity$variadic = G__19222__delegate;
    return G__19222;
  }();
  cljs$core$max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$max_key__2.call(this, k, x);
      case 3:
        return cljs$core$max_key__3.call(this, k, x, y);
      default:
        var G__19225 = null;
        if (arguments.length > 3) {
          var G__19226__i = 0, G__19226__a = new Array(arguments.length - 3);
          while (G__19226__i < G__19226__a.length) {
            G__19226__a[G__19226__i] = arguments[G__19226__i + 3];
            ++G__19226__i;
          }
          G__19225 = new cljs.core.IndexedSeq(G__19226__a, 0);
        }
        return cljs$core$max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__19225);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$max_key.cljs$lang$maxFixedArity = 3;
  cljs$core$max_key.cljs$lang$applyTo = cljs$core$max_key__4.cljs$lang$applyTo;
  cljs$core$max_key.cljs$core$IFn$_invoke$arity$2 = cljs$core$max_key__2;
  cljs$core$max_key.cljs$core$IFn$_invoke$arity$3 = cljs$core$max_key__3;
  cljs$core$max_key.cljs$core$IFn$_invoke$arity$variadic = cljs$core$max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$max_key;
}();
cljs.core.min_key = function() {
  var cljs$core$min_key = null;
  var cljs$core$min_key__2 = function(k, x) {
    return x;
  };
  var cljs$core$min_key__3 = function(k, x, y) {
    if (function() {
      var G__19237 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__19237) : k.call(null, G__19237);
    }() < function() {
      var G__19238 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__19238) : k.call(null, G__19238);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var cljs$core$min_key__4 = function() {
    var G__19239__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__19227_SHARP_, p2__19228_SHARP_) {
        return cljs$core$min_key.cljs$core$IFn$_invoke$arity$3(k, p1__19227_SHARP_, p2__19228_SHARP_);
      }, cljs$core$min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__19239 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__19240__i = 0, G__19240__a = new Array(arguments.length - 3);
        while (G__19240__i < G__19240__a.length) {
          G__19240__a[G__19240__i] = arguments[G__19240__i + 3];
          ++G__19240__i;
        }
        more = new cljs.core.IndexedSeq(G__19240__a, 0);
      }
      return G__19239__delegate.call(this, k, x, y, more);
    };
    G__19239.cljs$lang$maxFixedArity = 3;
    G__19239.cljs$lang$applyTo = function(arglist__19241) {
      var k = cljs.core.first(arglist__19241);
      arglist__19241 = cljs.core.next(arglist__19241);
      var x = cljs.core.first(arglist__19241);
      arglist__19241 = cljs.core.next(arglist__19241);
      var y = cljs.core.first(arglist__19241);
      var more = cljs.core.rest(arglist__19241);
      return G__19239__delegate(k, x, y, more);
    };
    G__19239.cljs$core$IFn$_invoke$arity$variadic = G__19239__delegate;
    return G__19239;
  }();
  cljs$core$min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return cljs$core$min_key__2.call(this, k, x);
      case 3:
        return cljs$core$min_key__3.call(this, k, x, y);
      default:
        var G__19242 = null;
        if (arguments.length > 3) {
          var G__19243__i = 0, G__19243__a = new Array(arguments.length - 3);
          while (G__19243__i < G__19243__a.length) {
            G__19243__a[G__19243__i] = arguments[G__19243__i + 3];
            ++G__19243__i;
          }
          G__19242 = new cljs.core.IndexedSeq(G__19243__a, 0);
        }
        return cljs$core$min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__19242);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$min_key.cljs$lang$maxFixedArity = 3;
  cljs$core$min_key.cljs$lang$applyTo = cljs$core$min_key__4.cljs$lang$applyTo;
  cljs$core$min_key.cljs$core$IFn$_invoke$arity$2 = cljs$core$min_key__2;
  cljs$core$min_key.cljs$core$IFn$_invoke$arity$3 = cljs$core$min_key__3;
  cljs$core$min_key.cljs$core$IFn$_invoke$arity$variadic = cljs$core$min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var cljs$core$partition_all = null;
  var cljs$core$partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list();
      return function(a) {
        return function() {
          var G__19260 = null;
          var G__19260__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__19260__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__19255 = result;
                var G__19256 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19255, G__19256) : rf.call(null, G__19255, G__19256);
              }());
            }();
            var G__19257 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19257) : rf.call(null, G__19257);
          };
          var G__19260__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var G__19258 = result;
              var G__19259 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19258, G__19259) : rf.call(null, G__19258, G__19259);
            } else {
              return result;
            }
          };
          G__19260 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__19260__0.call(this);
              case 1:
                return G__19260__1.call(this, result);
              case 2:
                return G__19260__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__19260.cljs$core$IFn$_invoke$arity$0 = G__19260__0;
          G__19260.cljs$core$IFn$_invoke$arity$1 = G__19260__1;
          G__19260.cljs$core$IFn$_invoke$arity$2 = G__19260__2;
          return G__19260;
        }();
      }(a);
    };
  };
  var cljs$core$partition_all__2 = function(n, coll) {
    return cljs$core$partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var cljs$core$partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs$core$partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$partition_all__1.call(this, n);
      case 2:
        return cljs$core$partition_all__2.call(this, n, step);
      case 3:
        return cljs$core$partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$partition_all.cljs$core$IFn$_invoke$arity$1 = cljs$core$partition_all__1;
  cljs$core$partition_all.cljs$core$IFn$_invoke$arity$2 = cljs$core$partition_all__2;
  cljs$core$partition_all.cljs$core$IFn$_invoke$arity$3 = cljs$core$partition_all__3;
  return cljs$core$partition_all;
}();
cljs.core.take_while = function() {
  var cljs$core$take_while = null;
  var cljs$core$take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__19273 = null;
        var G__19273__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__19273__1 = function(result) {
          var G__19268 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19268) : rf.call(null, G__19268);
        };
        var G__19273__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__19269 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__19269) : pred.call(null, G__19269);
          }())) {
            var G__19270 = result;
            var G__19271 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19270, G__19271) : rf.call(null, G__19270, G__19271);
          } else {
            return cljs.core.reduced(result);
          }
        };
        G__19273 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__19273__0.call(this);
            case 1:
              return G__19273__1.call(this, result);
            case 2:
              return G__19273__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__19273.cljs$core$IFn$_invoke$arity$0 = G__19273__0;
        G__19273.cljs$core$IFn$_invoke$arity$1 = G__19273__1;
        G__19273.cljs$core$IFn$_invoke$arity$2 = G__19273__2;
        return G__19273;
      }();
    };
  };
  var cljs$core$take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(function() {
          var G__19272 = cljs.core.first(s);
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__19272) : pred.call(null, G__19272);
        }())) {
          return cljs.core.cons(cljs.core.first(s), cljs$core$take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$take_while__1.call(this, pred);
      case 2:
        return cljs$core$take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$take_while.cljs$core$IFn$_invoke$arity$1 = cljs$core$take_while__1;
  cljs$core$take_while.cljs$core$IFn$_invoke$arity$2 = cljs$core$take_while__2;
  return cljs$core$take_while;
}();
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__19278 = function() {
      var G__19280 = cljs.core._entry_key(sc, e);
      var G__19281 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__19280, G__19281) : comp.call(null, G__19280, G__19281);
    }();
    var G__19279 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__19278, G__19279) : test.call(null, G__19278, G__19279);
  };
};
cljs.core.subseq = function() {
  var cljs$core$subseq = null;
  var cljs$core$subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__19285 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19285, 0, null);
        var s = vec__19285;
        if (cljs.core.truth_(function() {
          var G__19286 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__19286) : include.call(null, G__19286);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
    }
  };
  var cljs$core$subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__19287 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19287, 0, null);
      var s = vec__19287;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  cljs$core$subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return cljs$core$subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return cljs$core$subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$subseq.cljs$core$IFn$_invoke$arity$3 = cljs$core$subseq__3;
  cljs$core$subseq.cljs$core$IFn$_invoke$arity$5 = cljs$core$subseq__5;
  return cljs$core$subseq;
}();
cljs.core.rsubseq = function() {
  var cljs$core$rsubseq = null;
  var cljs$core$rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__19291 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19291, 0, null);
        var s = vec__19291;
        if (cljs.core.truth_(function() {
          var G__19292 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__19292) : include.call(null, G__19292);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
    }
  };
  var cljs$core$rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__19293 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19293, 0, null);
      var s = vec__19293;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  cljs$core$rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return cljs$core$rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return cljs$core$rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$rsubseq.cljs$core$IFn$_invoke$arity$3 = cljs$core$rsubseq__3;
  cljs$core$rsubseq.cljs$core$IFn$_invoke$arity$5 = cljs$core$rsubseq__5;
  return cljs$core$rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__19294 = (self__.end - self__.start) / self__.step;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__19294) : Math.ceil.call(null, G__19294);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = function() {
        var G__19295 = ret;
        var G__19296 = i;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19295, G__19296) : f.call(null, G__19295, G__19296);
      }();
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        var G__19297 = ret__$1;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19297) : cljs.core.deref.call(null, G__19297);
      } else {
        var G__19298 = i + self__.step;
        var G__19299 = ret__$1;
        i = G__19298;
        ret = G__19299;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.range = function() {
  var cljs$core$range = null;
  var cljs$core$range__0 = function() {
    return cljs$core$range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
  };
  var cljs$core$range__1 = function(end) {
    return cljs$core$range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
  };
  var cljs$core$range__2 = function(start, end) {
    return cljs$core$range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
  };
  var cljs$core$range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  cljs$core$range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return cljs$core$range__0.call(this);
      case 1:
        return cljs$core$range__1.call(this, start);
      case 2:
        return cljs$core$range__2.call(this, start, end);
      case 3:
        return cljs$core$range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$range.cljs$core$IFn$_invoke$arity$0 = cljs$core$range__0;
  cljs$core$range.cljs$core$IFn$_invoke$arity$1 = cljs$core$range__1;
  cljs$core$range.cljs$core$IFn$_invoke$arity$2 = cljs$core$range__2;
  cljs$core$range.cljs$core$IFn$_invoke$arity$3 = cljs$core$range__3;
  return cljs$core$range;
}();
cljs.core.take_nth = function() {
  var cljs$core$take_nth = null;
  var cljs$core$take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__19317 = null;
          var G__19317__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__19317__1 = function(result) {
            var G__19314 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19314) : rf.call(null, G__19314);
          };
          var G__19317__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            if (cljs.core.rem(i, n) === 0) {
              var G__19315 = result;
              var G__19316 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19315, G__19316) : rf.call(null, G__19315, G__19316);
            } else {
              return result;
            }
          };
          G__19317 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__19317__0.call(this);
              case 1:
                return G__19317__1.call(this, result);
              case 2:
                return G__19317__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__19317.cljs$core$IFn$_invoke$arity$0 = G__19317__0;
          G__19317.cljs$core$IFn$_invoke$arity$1 = G__19317__1;
          G__19317.cljs$core$IFn$_invoke$arity$2 = G__19317__2;
          return G__19317;
        }();
      }(ia);
    };
  };
  var cljs$core$take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs$core$take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$take_nth__1.call(this, n);
      case 2:
        return cljs$core$take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$take_nth.cljs$core$IFn$_invoke$arity$1 = cljs$core$take_nth__1;
  cljs$core$take_nth.cljs$core$IFn$_invoke$arity$2 = cljs$core$take_nth__2;
  return cljs$core$take_nth;
}();
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function() {
  var cljs$core$partition_by = null;
  var cljs$core$partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list();
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__19339 = null;
          var G__19339__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__19339__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__19330 = result;
                var G__19331 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19330, G__19331) : rf.call(null, G__19330, G__19331);
              }());
            }();
            var G__19332 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19332) : rf.call(null, G__19332);
          };
          var G__19339__2 = function(result, input) {
            var pval = function() {
              var G__19333 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19333) : cljs.core.deref.call(null, G__19333);
            }();
            var val = function() {
              var G__19334 = input;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19334) : f.call(null, G__19334);
            }();
            cljs.core.vreset_BANG_(pa, val);
            if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var ret = function() {
                var G__19335 = result;
                var G__19336 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19335, G__19336) : rf.call(null, G__19335, G__19336);
              }();
              if (cljs.core.reduced_QMARK_(ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__19339 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__19339__0.call(this);
              case 1:
                return G__19339__1.call(this, result);
              case 2:
                return G__19339__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__19339.cljs$core$IFn$_invoke$arity$0 = G__19339__0;
          G__19339.cljs$core$IFn$_invoke$arity$1 = G__19339__1;
          G__19339.cljs$core$IFn$_invoke$arity$2 = G__19339__2;
          return G__19339;
        }();
      }(a, pa);
    };
  };
  var cljs$core$partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first(s);
        var fv = function() {
          var G__19337 = fst;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19337) : f.call(null, G__19337);
        }();
        var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4126__auto__) {
          return function(p1__19318_SHARP_) {
            return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, function() {
              var G__19338 = p1__19318_SHARP_;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19338) : f.call(null, G__19338);
            }());
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next(s)));
        return cljs.core.cons(run, cljs$core$partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  cljs$core$partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$partition_by__1.call(this, f);
      case 2:
        return cljs$core$partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$partition_by.cljs$core$IFn$_invoke$arity$1 = cljs$core$partition_by__1;
  cljs$core$partition_by.cljs$core$IFn$_invoke$arity$2 = cljs$core$partition_by__2;
  return cljs$core$partition_by;
}();
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var cljs$core$reductions = null;
  var cljs$core$reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return cljs$core$reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }());
      }
    }, null, null);
  };
  var cljs$core$reductions__3 = function(f, init, coll) {
    return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs$core$reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
          var G__19348 = init;
          var G__19349 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19348, G__19349) : f.call(null, G__19348, G__19349);
        }(), cljs.core.rest(s));
      } else {
        return null;
      }
    }, null, null));
  };
  cljs$core$reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return cljs$core$reductions__2.call(this, f, init);
      case 3:
        return cljs$core$reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$reductions.cljs$core$IFn$_invoke$arity$2 = cljs$core$reductions__2;
  cljs$core$reductions.cljs$core$IFn$_invoke$arity$3 = cljs$core$reductions__3;
  return cljs$core$reductions;
}();
cljs.core.juxt = function() {
  var cljs$core$juxt = null;
  var cljs$core$juxt__1 = function(f) {
    return function() {
      var G__19444 = null;
      var G__19444__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }()], null);
      };
      var G__19444__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__19402 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19402) : f.call(null, G__19402);
        }()], null);
      };
      var G__19444__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__19403 = x;
          var G__19404 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19403, G__19404) : f.call(null, G__19403, G__19404);
        }()], null);
      };
      var G__19444__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__19405 = x;
          var G__19406 = y;
          var G__19407 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19405, G__19406, G__19407) : f.call(null, G__19405, G__19406, G__19407);
        }()], null);
      };
      var G__19444__4 = function() {
        var G__19445__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
        };
        var G__19445 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19446__i = 0, G__19446__a = new Array(arguments.length - 3);
            while (G__19446__i < G__19446__a.length) {
              G__19446__a[G__19446__i] = arguments[G__19446__i + 3];
              ++G__19446__i;
            }
            args = new cljs.core.IndexedSeq(G__19446__a, 0);
          }
          return G__19445__delegate.call(this, x, y, z, args);
        };
        G__19445.cljs$lang$maxFixedArity = 3;
        G__19445.cljs$lang$applyTo = function(arglist__19447) {
          var x = cljs.core.first(arglist__19447);
          arglist__19447 = cljs.core.next(arglist__19447);
          var y = cljs.core.first(arglist__19447);
          arglist__19447 = cljs.core.next(arglist__19447);
          var z = cljs.core.first(arglist__19447);
          var args = cljs.core.rest(arglist__19447);
          return G__19445__delegate(x, y, z, args);
        };
        G__19445.cljs$core$IFn$_invoke$arity$variadic = G__19445__delegate;
        return G__19445;
      }();
      G__19444 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__19444__0.call(this);
          case 1:
            return G__19444__1.call(this, x);
          case 2:
            return G__19444__2.call(this, x, y);
          case 3:
            return G__19444__3.call(this, x, y, z);
          default:
            var G__19448 = null;
            if (arguments.length > 3) {
              var G__19449__i = 0, G__19449__a = new Array(arguments.length - 3);
              while (G__19449__i < G__19449__a.length) {
                G__19449__a[G__19449__i] = arguments[G__19449__i + 3];
                ++G__19449__i;
              }
              G__19448 = new cljs.core.IndexedSeq(G__19449__a, 0);
            }
            return G__19444__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19448);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19444.cljs$lang$maxFixedArity = 3;
      G__19444.cljs$lang$applyTo = G__19444__4.cljs$lang$applyTo;
      G__19444.cljs$core$IFn$_invoke$arity$0 = G__19444__0;
      G__19444.cljs$core$IFn$_invoke$arity$1 = G__19444__1;
      G__19444.cljs$core$IFn$_invoke$arity$2 = G__19444__2;
      G__19444.cljs$core$IFn$_invoke$arity$3 = G__19444__3;
      G__19444.cljs$core$IFn$_invoke$arity$variadic = G__19444__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__19444;
    }();
  };
  var cljs$core$juxt__2 = function(f, g) {
    return function() {
      var G__19450 = null;
      var G__19450__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }()], null);
      };
      var G__19450__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__19408 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19408) : f.call(null, G__19408);
        }(), function() {
          var G__19409 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__19409) : g.call(null, G__19409);
        }()], null);
      };
      var G__19450__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__19410 = x;
          var G__19411 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19410, G__19411) : f.call(null, G__19410, G__19411);
        }(), function() {
          var G__19412 = x;
          var G__19413 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__19412, G__19413) : g.call(null, G__19412, G__19413);
        }()], null);
      };
      var G__19450__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__19414 = x;
          var G__19415 = y;
          var G__19416 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19414, G__19415, G__19416) : f.call(null, G__19414, G__19415, G__19416);
        }(), function() {
          var G__19417 = x;
          var G__19418 = y;
          var G__19419 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__19417, G__19418, G__19419) : g.call(null, G__19417, G__19418, G__19419);
        }()], null);
      };
      var G__19450__4 = function() {
        var G__19451__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
        };
        var G__19451 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19452__i = 0, G__19452__a = new Array(arguments.length - 3);
            while (G__19452__i < G__19452__a.length) {
              G__19452__a[G__19452__i] = arguments[G__19452__i + 3];
              ++G__19452__i;
            }
            args = new cljs.core.IndexedSeq(G__19452__a, 0);
          }
          return G__19451__delegate.call(this, x, y, z, args);
        };
        G__19451.cljs$lang$maxFixedArity = 3;
        G__19451.cljs$lang$applyTo = function(arglist__19453) {
          var x = cljs.core.first(arglist__19453);
          arglist__19453 = cljs.core.next(arglist__19453);
          var y = cljs.core.first(arglist__19453);
          arglist__19453 = cljs.core.next(arglist__19453);
          var z = cljs.core.first(arglist__19453);
          var args = cljs.core.rest(arglist__19453);
          return G__19451__delegate(x, y, z, args);
        };
        G__19451.cljs$core$IFn$_invoke$arity$variadic = G__19451__delegate;
        return G__19451;
      }();
      G__19450 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__19450__0.call(this);
          case 1:
            return G__19450__1.call(this, x);
          case 2:
            return G__19450__2.call(this, x, y);
          case 3:
            return G__19450__3.call(this, x, y, z);
          default:
            var G__19454 = null;
            if (arguments.length > 3) {
              var G__19455__i = 0, G__19455__a = new Array(arguments.length - 3);
              while (G__19455__i < G__19455__a.length) {
                G__19455__a[G__19455__i] = arguments[G__19455__i + 3];
                ++G__19455__i;
              }
              G__19454 = new cljs.core.IndexedSeq(G__19455__a, 0);
            }
            return G__19450__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19454);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19450.cljs$lang$maxFixedArity = 3;
      G__19450.cljs$lang$applyTo = G__19450__4.cljs$lang$applyTo;
      G__19450.cljs$core$IFn$_invoke$arity$0 = G__19450__0;
      G__19450.cljs$core$IFn$_invoke$arity$1 = G__19450__1;
      G__19450.cljs$core$IFn$_invoke$arity$2 = G__19450__2;
      G__19450.cljs$core$IFn$_invoke$arity$3 = G__19450__3;
      G__19450.cljs$core$IFn$_invoke$arity$variadic = G__19450__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__19450;
    }();
  };
  var cljs$core$juxt__3 = function(f, g, h) {
    return function() {
      var G__19456 = null;
      var G__19456__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }(), function() {
          return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        }()], null);
      };
      var G__19456__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__19420 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19420) : f.call(null, G__19420);
        }(), function() {
          var G__19421 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__19421) : g.call(null, G__19421);
        }(), function() {
          var G__19422 = x;
          return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__19422) : h.call(null, G__19422);
        }()], null);
      };
      var G__19456__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__19423 = x;
          var G__19424 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19423, G__19424) : f.call(null, G__19423, G__19424);
        }(), function() {
          var G__19425 = x;
          var G__19426 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__19425, G__19426) : g.call(null, G__19425, G__19426);
        }(), function() {
          var G__19427 = x;
          var G__19428 = y;
          return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__19427, G__19428) : h.call(null, G__19427, G__19428);
        }()], null);
      };
      var G__19456__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__19429 = x;
          var G__19430 = y;
          var G__19431 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19429, G__19430, G__19431) : f.call(null, G__19429, G__19430, G__19431);
        }(), function() {
          var G__19432 = x;
          var G__19433 = y;
          var G__19434 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__19432, G__19433, G__19434) : g.call(null, G__19432, G__19433, G__19434);
        }(), function() {
          var G__19435 = x;
          var G__19436 = y;
          var G__19437 = z;
          return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__19435, G__19436, G__19437) : h.call(null, G__19435, G__19436, G__19437);
        }()], null);
      };
      var G__19456__4 = function() {
        var G__19457__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
        };
        var G__19457 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19458__i = 0, G__19458__a = new Array(arguments.length - 3);
            while (G__19458__i < G__19458__a.length) {
              G__19458__a[G__19458__i] = arguments[G__19458__i + 3];
              ++G__19458__i;
            }
            args = new cljs.core.IndexedSeq(G__19458__a, 0);
          }
          return G__19457__delegate.call(this, x, y, z, args);
        };
        G__19457.cljs$lang$maxFixedArity = 3;
        G__19457.cljs$lang$applyTo = function(arglist__19459) {
          var x = cljs.core.first(arglist__19459);
          arglist__19459 = cljs.core.next(arglist__19459);
          var y = cljs.core.first(arglist__19459);
          arglist__19459 = cljs.core.next(arglist__19459);
          var z = cljs.core.first(arglist__19459);
          var args = cljs.core.rest(arglist__19459);
          return G__19457__delegate(x, y, z, args);
        };
        G__19457.cljs$core$IFn$_invoke$arity$variadic = G__19457__delegate;
        return G__19457;
      }();
      G__19456 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__19456__0.call(this);
          case 1:
            return G__19456__1.call(this, x);
          case 2:
            return G__19456__2.call(this, x, y);
          case 3:
            return G__19456__3.call(this, x, y, z);
          default:
            var G__19460 = null;
            if (arguments.length > 3) {
              var G__19461__i = 0, G__19461__a = new Array(arguments.length - 3);
              while (G__19461__i < G__19461__a.length) {
                G__19461__a[G__19461__i] = arguments[G__19461__i + 3];
                ++G__19461__i;
              }
              G__19460 = new cljs.core.IndexedSeq(G__19461__a, 0);
            }
            return G__19456__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19460);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19456.cljs$lang$maxFixedArity = 3;
      G__19456.cljs$lang$applyTo = G__19456__4.cljs$lang$applyTo;
      G__19456.cljs$core$IFn$_invoke$arity$0 = G__19456__0;
      G__19456.cljs$core$IFn$_invoke$arity$1 = G__19456__1;
      G__19456.cljs$core$IFn$_invoke$arity$2 = G__19456__2;
      G__19456.cljs$core$IFn$_invoke$arity$3 = G__19456__3;
      G__19456.cljs$core$IFn$_invoke$arity$variadic = G__19456__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__19456;
    }();
  };
  var cljs$core$juxt__4 = function() {
    var G__19462__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__19463 = null;
          var G__19463__0 = function() {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__19350_SHARP_, p2__19351_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__19350_SHARP_, function() {
                  return p2__19351_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__19351_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__19351_SHARP_.call(null);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__19463__1 = function(x) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__19352_SHARP_, p2__19353_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__19352_SHARP_, function() {
                  var G__19438 = x;
                  return p2__19353_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__19353_SHARP_.cljs$core$IFn$_invoke$arity$1(G__19438) : p2__19353_SHARP_.call(null, G__19438);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__19463__2 = function(x, y) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__19354_SHARP_, p2__19355_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__19354_SHARP_, function() {
                  var G__19439 = x;
                  var G__19440 = y;
                  return p2__19355_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__19355_SHARP_.cljs$core$IFn$_invoke$arity$2(G__19439, G__19440) : p2__19355_SHARP_.call(null, G__19439, G__19440);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__19463__3 = function(x, y, z) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__19356_SHARP_, p2__19357_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__19356_SHARP_, function() {
                  var G__19441 = x;
                  var G__19442 = y;
                  var G__19443 = z;
                  return p2__19357_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__19357_SHARP_.cljs$core$IFn$_invoke$arity$3(G__19441, G__19442, G__19443) : p2__19357_SHARP_.call(null, G__19441, G__19442, G__19443);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__19463__4 = function() {
            var G__19464__delegate = function(x, y, z, args) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
                return function(p1__19358_SHARP_, p2__19359_SHARP_) {
                  return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__19358_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__19359_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__19464 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__19465__i = 0, G__19465__a = new Array(arguments.length - 3);
                while (G__19465__i < G__19465__a.length) {
                  G__19465__a[G__19465__i] = arguments[G__19465__i + 3];
                  ++G__19465__i;
                }
                args = new cljs.core.IndexedSeq(G__19465__a, 0);
              }
              return G__19464__delegate.call(this, x, y, z, args);
            };
            G__19464.cljs$lang$maxFixedArity = 3;
            G__19464.cljs$lang$applyTo = function(arglist__19466) {
              var x = cljs.core.first(arglist__19466);
              arglist__19466 = cljs.core.next(arglist__19466);
              var y = cljs.core.first(arglist__19466);
              arglist__19466 = cljs.core.next(arglist__19466);
              var z = cljs.core.first(arglist__19466);
              var args = cljs.core.rest(arglist__19466);
              return G__19464__delegate(x, y, z, args);
            };
            G__19464.cljs$core$IFn$_invoke$arity$variadic = G__19464__delegate;
            return G__19464;
          }();
          G__19463 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__19463__0.call(this);
              case 1:
                return G__19463__1.call(this, x);
              case 2:
                return G__19463__2.call(this, x, y);
              case 3:
                return G__19463__3.call(this, x, y, z);
              default:
                var G__19467 = null;
                if (arguments.length > 3) {
                  var G__19468__i = 0, G__19468__a = new Array(arguments.length - 3);
                  while (G__19468__i < G__19468__a.length) {
                    G__19468__a[G__19468__i] = arguments[G__19468__i + 3];
                    ++G__19468__i;
                  }
                  G__19467 = new cljs.core.IndexedSeq(G__19468__a, 0);
                }
                return G__19463__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19467);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__19463.cljs$lang$maxFixedArity = 3;
          G__19463.cljs$lang$applyTo = G__19463__4.cljs$lang$applyTo;
          G__19463.cljs$core$IFn$_invoke$arity$0 = G__19463__0;
          G__19463.cljs$core$IFn$_invoke$arity$1 = G__19463__1;
          G__19463.cljs$core$IFn$_invoke$arity$2 = G__19463__2;
          G__19463.cljs$core$IFn$_invoke$arity$3 = G__19463__3;
          G__19463.cljs$core$IFn$_invoke$arity$variadic = G__19463__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__19463;
        }();
      }(fs__$1);
    };
    var G__19462 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__19469__i = 0, G__19469__a = new Array(arguments.length - 3);
        while (G__19469__i < G__19469__a.length) {
          G__19469__a[G__19469__i] = arguments[G__19469__i + 3];
          ++G__19469__i;
        }
        fs = new cljs.core.IndexedSeq(G__19469__a, 0);
      }
      return G__19462__delegate.call(this, f, g, h, fs);
    };
    G__19462.cljs$lang$maxFixedArity = 3;
    G__19462.cljs$lang$applyTo = function(arglist__19470) {
      var f = cljs.core.first(arglist__19470);
      arglist__19470 = cljs.core.next(arglist__19470);
      var g = cljs.core.first(arglist__19470);
      arglist__19470 = cljs.core.next(arglist__19470);
      var h = cljs.core.first(arglist__19470);
      var fs = cljs.core.rest(arglist__19470);
      return G__19462__delegate(f, g, h, fs);
    };
    G__19462.cljs$core$IFn$_invoke$arity$variadic = G__19462__delegate;
    return G__19462;
  }();
  cljs$core$juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$juxt__1.call(this, f);
      case 2:
        return cljs$core$juxt__2.call(this, f, g);
      case 3:
        return cljs$core$juxt__3.call(this, f, g, h);
      default:
        var G__19471 = null;
        if (arguments.length > 3) {
          var G__19472__i = 0, G__19472__a = new Array(arguments.length - 3);
          while (G__19472__i < G__19472__a.length) {
            G__19472__a[G__19472__i] = arguments[G__19472__i + 3];
            ++G__19472__i;
          }
          G__19471 = new cljs.core.IndexedSeq(G__19472__a, 0);
        }
        return cljs$core$juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, G__19471);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$juxt.cljs$lang$maxFixedArity = 3;
  cljs$core$juxt.cljs$lang$applyTo = cljs$core$juxt__4.cljs$lang$applyTo;
  cljs$core$juxt.cljs$core$IFn$_invoke$arity$1 = cljs$core$juxt__1;
  cljs$core$juxt.cljs$core$IFn$_invoke$arity$2 = cljs$core$juxt__2;
  cljs$core$juxt.cljs$core$IFn$_invoke$arity$3 = cljs$core$juxt__3;
  cljs$core$juxt.cljs$core$IFn$_invoke$arity$variadic = cljs$core$juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$juxt;
}();
cljs.core.dorun = function() {
  var cljs$core$dorun = null;
  var cljs$core$dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq(coll)) {
        var G__19473 = cljs.core.next(coll);
        coll = G__19473;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var cljs$core$dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq(coll) && n > 0) {
        var G__19474 = n - 1;
        var G__19475 = cljs.core.next(coll);
        n = G__19474;
        coll = G__19475;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  cljs$core$dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$dorun__1.call(this, n);
      case 2:
        return cljs$core$dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$dorun.cljs$core$IFn$_invoke$arity$1 = cljs$core$dorun__1;
  cljs$core$dorun.cljs$core$IFn$_invoke$arity$2 = cljs$core$dorun__2;
  return cljs$core$dorun;
}();
cljs.core.doall = function() {
  var cljs$core$doall = null;
  var cljs$core$doall__1 = function(coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
    return coll;
  };
  var cljs$core$doall__2 = function(n, coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
    return coll;
  };
  cljs$core$doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$doall__1.call(this, n);
      case 2:
        return cljs$core$doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$doall.cljs$core$IFn$_invoke$arity$1 = cljs$core$doall__1;
  cljs$core$doall.cljs$core$IFn$_invoke$arity$2 = cljs$core$doall__2;
  return cljs$core$doall;
}();
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs$core$re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__19479 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19479, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19479, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__4122__auto__ = flags;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_19487 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__4122__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__4122__auto__)) {
              return or__4122__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__19488_19494 = cljs.core.first(coll);
          var G__19489_19495 = writer;
          var G__19490_19496 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__19488_19494, G__19489_19495, G__19490_19496) : print_one.call(null, G__19488_19494, G__19489_19495, G__19490_19496);
        } else {
        }
        var coll_19497__$1 = cljs.core.next(coll);
        var n_19498 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_19497__$1 && (n_19498 == null || !(n_19498 === 0))) {
            cljs.core._write(writer, sep);
            var G__19491_19499 = cljs.core.first(coll_19497__$1);
            var G__19492_19500 = writer;
            var G__19493_19501 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__19491_19499, G__19492_19500, G__19493_19501) : print_one.call(null, G__19491_19499, G__19492_19500, G__19493_19501);
            var G__19502 = cljs.core.next(coll_19497__$1);
            var G__19503 = n_19498 - 1;
            coll_19497__$1 = G__19502;
            n_19498 = G__19503;
            continue;
          } else {
            if (cljs.core.seq(coll_19497__$1) && n_19498 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__4122__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__4122__auto__)) {
                  return or__4122__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_19487;
  }
};
cljs.core.write_all = function() {
  var cljs$core$write_all__delegate = function(writer, ss) {
    var seq__19508 = cljs.core.seq(ss);
    var chunk__19509 = null;
    var count__19510 = 0;
    var i__19511 = 0;
    while (true) {
      if (i__19511 < count__19510) {
        var s = chunk__19509.cljs$core$IIndexed$_nth$arity$2(null, i__19511);
        cljs.core._write(writer, s);
        var G__19512 = seq__19508;
        var G__19513 = chunk__19509;
        var G__19514 = count__19510;
        var G__19515 = i__19511 + 1;
        seq__19508 = G__19512;
        chunk__19509 = G__19513;
        count__19510 = G__19514;
        i__19511 = G__19515;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq(seq__19508);
        if (temp__4126__auto__) {
          var seq__19508__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(seq__19508__$1)) {
            var c__4907__auto__ = cljs.core.chunk_first(seq__19508__$1);
            var G__19516 = cljs.core.chunk_rest(seq__19508__$1);
            var G__19517 = c__4907__auto__;
            var G__19518 = cljs.core.count(c__4907__auto__);
            var G__19519 = 0;
            seq__19508 = G__19516;
            chunk__19509 = G__19517;
            count__19510 = G__19518;
            i__19511 = G__19519;
            continue;
          } else {
            var s = cljs.core.first(seq__19508__$1);
            cljs.core._write(writer, s);
            var G__19520 = cljs.core.next(seq__19508__$1);
            var G__19521 = null;
            var G__19522 = 0;
            var G__19523 = 0;
            seq__19508 = G__19520;
            chunk__19509 = G__19521;
            count__19510 = G__19522;
            i__19511 = G__19523;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var cljs$core$write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      var G__19524__i = 0, G__19524__a = new Array(arguments.length - 1);
      while (G__19524__i < G__19524__a.length) {
        G__19524__a[G__19524__i] = arguments[G__19524__i + 1];
        ++G__19524__i;
      }
      ss = new cljs.core.IndexedSeq(G__19524__a, 0);
    }
    return cljs$core$write_all__delegate.call(this, writer, ss);
  };
  cljs$core$write_all.cljs$lang$maxFixedArity = 1;
  cljs$core$write_all.cljs$lang$applyTo = function(arglist__19525) {
    var writer = cljs.core.first(arglist__19525);
    var ss = cljs.core.rest(arglist__19525);
    return cljs$core$write_all__delegate(writer, ss);
  };
  cljs$core$write_all.cljs$core$IFn$_invoke$arity$variadic = cljs$core$write_all__delegate;
  return cljs$core$write_all;
}();
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj19527 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj19527;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(function() {
    var G__19530 = '[\\\\"\b\f\n\r\t]';
    var G__19531 = "g";
    return RegExp(G__19530, G__19531);
  }(), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write(writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__4110__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__4110__auto__)) {
          var and__4110__auto____$1 = function() {
            var G__19545 = obj;
            if (G__19545) {
              var bit__4796__auto__ = G__19545.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4796__auto__ || G__19545.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__19545.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__19545);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__19545);
            }
          }();
          if (and__4110__auto____$1) {
            return cljs.core.meta(obj);
          } else {
            return and__4110__auto____$1;
          }
        } else {
          return and__4110__auto__;
        }
      }())) {
        cljs.core._write(writer, "^");
        var G__19546_19556 = cljs.core.meta(obj);
        var G__19547_19557 = writer;
        var G__19548_19558 = opts;
        cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__19546_19556, G__19547_19557, G__19548_19558) : cljs.core.pr_writer.call(null, G__19546_19556, G__19547_19557, G__19548_19558);
        cljs.core._write(writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write(writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__19549 = obj;
            if (G__19549) {
              var bit__4789__auto__ = G__19549.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4789__auto__ || G__19549.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
          } else {
            if (cljs.core.type(obj) === Boolean || typeof obj === "number") {
              return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                var G__19550 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
                }, cljs.core.js_keys(obj));
                var G__19551 = cljs.core.pr_writer;
                var G__19552 = writer;
                var G__19553 = opts;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__19550, G__19551, G__19552, G__19553) : cljs.core.print_map.call(null, G__19550, G__19551, G__19552, G__19553);
              } else {
                if (cljs.core.array_QMARK_(obj)) {
                  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (cljs.core.truth_(function() {
                    var G__19554 = obj;
                    return goog.isString(G__19554);
                  }())) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write(writer, cljs.core.quote_string(obj));
                    } else {
                      return cljs.core._write(writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count(ns) < len) {
                              var G__19559 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__19559;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                      } else {
                        if (cljs.core.regexp_QMARK_(obj)) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                        } else {
                          if (function() {
                            var G__19555 = obj;
                            if (G__19555) {
                              var bit__4796__auto__ = G__19555.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4796__auto__ || G__19555.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__19555.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__19555);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__19555);
                            }
                          }()) {
                            return cljs.core._pr_writer(obj, writer, opts);
                          } else {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4124__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var alt_impl = temp__4124__auto__;
    var G__19563 = obj;
    var G__19564 = writer;
    var G__19565 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__19563, G__19564, G__19565) : alt_impl.call(null, G__19563, G__19564, G__19565);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__19570 = cljs.core.seq(cljs.core.next(objs));
  var chunk__19571 = null;
  var count__19572 = 0;
  var i__19573 = 0;
  while (true) {
    if (i__19573 < count__19572) {
      var obj = chunk__19571.cljs$core$IIndexed$_nth$arity$2(null, i__19573);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__19574 = seq__19570;
      var G__19575 = chunk__19571;
      var G__19576 = count__19572;
      var G__19577 = i__19573 + 1;
      seq__19570 = G__19574;
      chunk__19571 = G__19575;
      count__19572 = G__19576;
      i__19573 = G__19577;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__19570);
      if (temp__4126__auto__) {
        var seq__19570__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19570__$1)) {
          var c__4907__auto__ = cljs.core.chunk_first(seq__19570__$1);
          var G__19578 = cljs.core.chunk_rest(seq__19570__$1);
          var G__19579 = c__4907__auto__;
          var G__19580 = cljs.core.count(c__4907__auto__);
          var G__19581 = 0;
          seq__19570 = G__19578;
          chunk__19571 = G__19579;
          count__19572 = G__19580;
          i__19573 = G__19581;
          continue;
        } else {
          var obj = cljs.core.first(seq__19570__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__19582 = cljs.core.next(seq__19570__$1);
          var G__19583 = null;
          var G__19584 = 0;
          var G__19585 = 0;
          seq__19570 = G__19582;
          chunk__19571 = G__19583;
          count__19572 = G__19584;
          i__19573 = G__19585;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var cljs$core$pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
  };
  var cljs$core$pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__19586__i = 0, G__19586__a = new Array(arguments.length - 0);
      while (G__19586__i < G__19586__a.length) {
        G__19586__a[G__19586__i] = arguments[G__19586__i + 0];
        ++G__19586__i;
      }
      objs = new cljs.core.IndexedSeq(G__19586__a, 0);
    }
    return cljs$core$pr_str__delegate.call(this, objs);
  };
  cljs$core$pr_str.cljs$lang$maxFixedArity = 0;
  cljs$core$pr_str.cljs$lang$applyTo = function(arglist__19587) {
    var objs = cljs.core.seq(arglist__19587);
    return cljs$core$pr_str__delegate(objs);
  };
  cljs$core$pr_str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$pr_str__delegate;
  return cljs$core$pr_str;
}();
cljs.core.prn_str = function() {
  var cljs$core$prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
  };
  var cljs$core$prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__19588__i = 0, G__19588__a = new Array(arguments.length - 0);
      while (G__19588__i < G__19588__a.length) {
        G__19588__a[G__19588__i] = arguments[G__19588__i + 0];
        ++G__19588__i;
      }
      objs = new cljs.core.IndexedSeq(G__19588__a, 0);
    }
    return cljs$core$prn_str__delegate.call(this, objs);
  };
  cljs$core$prn_str.cljs$lang$maxFixedArity = 0;
  cljs$core$prn_str.cljs$lang$applyTo = function(arglist__19589) {
    var objs = cljs.core.seq(arglist__19589);
    return cljs$core$prn_str__delegate(objs);
  };
  cljs$core$prn_str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$prn_str__delegate;
  return cljs$core$prn_str;
}();
cljs.core.pr = function() {
  var cljs$core$pr__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  };
  var cljs$core$pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__19590__i = 0, G__19590__a = new Array(arguments.length - 0);
      while (G__19590__i < G__19590__a.length) {
        G__19590__a[G__19590__i] = arguments[G__19590__i + 0];
        ++G__19590__i;
      }
      objs = new cljs.core.IndexedSeq(G__19590__a, 0);
    }
    return cljs$core$pr__delegate.call(this, objs);
  };
  cljs$core$pr.cljs$lang$maxFixedArity = 0;
  cljs$core$pr.cljs$lang$applyTo = function(arglist__19591) {
    var objs = cljs.core.seq(arglist__19591);
    return cljs$core$pr__delegate(objs);
  };
  cljs$core$pr.cljs$core$IFn$_invoke$arity$variadic = cljs$core$pr__delegate;
  return cljs$core$pr;
}();
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__19592__i = 0, G__19592__a = new Array(arguments.length - 0);
      while (G__19592__i < G__19592__a.length) {
        G__19592__a[G__19592__i] = arguments[G__19592__i + 0];
        ++G__19592__i;
      }
      objs = new cljs.core.IndexedSeq(G__19592__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__19593) {
    var objs = cljs.core.seq(arglist__19593);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function() {
  var cljs$core$print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__19594__i = 0, G__19594__a = new Array(arguments.length - 0);
      while (G__19594__i < G__19594__a.length) {
        G__19594__a[G__19594__i] = arguments[G__19594__i + 0];
        ++G__19594__i;
      }
      objs = new cljs.core.IndexedSeq(G__19594__a, 0);
    }
    return cljs$core$print_str__delegate.call(this, objs);
  };
  cljs$core$print_str.cljs$lang$maxFixedArity = 0;
  cljs$core$print_str.cljs$lang$applyTo = function(arglist__19595) {
    var objs = cljs.core.seq(arglist__19595);
    return cljs$core$print_str__delegate(objs);
  };
  cljs$core$print_str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$print_str__delegate;
  return cljs$core$print_str;
}();
cljs.core.println = function() {
  var cljs$core$println__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var cljs$core$println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__19596__i = 0, G__19596__a = new Array(arguments.length - 0);
      while (G__19596__i < G__19596__a.length) {
        G__19596__a[G__19596__i] = arguments[G__19596__i + 0];
        ++G__19596__i;
      }
      objs = new cljs.core.IndexedSeq(G__19596__a, 0);
    }
    return cljs$core$println__delegate.call(this, objs);
  };
  cljs$core$println.cljs$lang$maxFixedArity = 0;
  cljs$core$println.cljs$lang$applyTo = function(arglist__19597) {
    var objs = cljs.core.seq(arglist__19597);
    return cljs$core$println__delegate(objs);
  };
  cljs$core$println.cljs$core$IFn$_invoke$arity$variadic = cljs$core$println__delegate;
  return cljs$core$println;
}();
cljs.core.println_str = function() {
  var cljs$core$println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__19598__i = 0, G__19598__a = new Array(arguments.length - 0);
      while (G__19598__i < G__19598__a.length) {
        G__19598__a[G__19598__i] = arguments[G__19598__i + 0];
        ++G__19598__i;
      }
      objs = new cljs.core.IndexedSeq(G__19598__a, 0);
    }
    return cljs$core$println_str__delegate.call(this, objs);
  };
  cljs$core$println_str.cljs$lang$maxFixedArity = 0;
  cljs$core$println_str.cljs$lang$applyTo = function(arglist__19599) {
    var objs = cljs.core.seq(arglist__19599);
    return cljs$core$println_str__delegate(objs);
  };
  cljs$core$println_str.cljs$core$IFn$_invoke$arity$variadic = cljs$core$println_str__delegate;
  return cljs$core$println_str;
}();
cljs.core.prn = function() {
  var cljs$core$prn__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var cljs$core$prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__19600__i = 0, G__19600__a = new Array(arguments.length - 0);
      while (G__19600__i < G__19600__a.length) {
        G__19600__a[G__19600__i] = arguments[G__19600__i + 0];
        ++G__19600__i;
      }
      objs = new cljs.core.IndexedSeq(G__19600__a, 0);
    }
    return cljs$core$prn__delegate.call(this, objs);
  };
  cljs$core$prn.cljs$lang$maxFixedArity = 0;
  cljs$core$prn.cljs$lang$applyTo = function(arglist__19601) {
    var objs = cljs.core.seq(arglist__19601);
    return cljs$core$prn__delegate(objs);
  };
  cljs$core$prn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$prn__delegate;
  return cljs$core$prn;
}();
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__19608_19614 = cljs.core.key(e);
    var G__19609_19615 = w;
    var G__19610_19616 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__19608_19614, G__19609_19615, G__19610_19616) : print_one.call(null, G__19608_19614, G__19609_19615, G__19610_19616);
    cljs.core._write(w, " ");
    var G__19611 = cljs.core.val(e);
    var G__19612 = w;
    var G__19613 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__19611, G__19612, G__19613) : print_one.call(null, G__19611, G__19612, G__19613);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cVolatile: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cAtom: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_keywords(x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols(x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var cljs$core$alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
  };
  var cljs$core$alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__19617__i = 0, G__19617__a = new Array(arguments.length - 2);
      while (G__19617__i < G__19617__a.length) {
        G__19617__a[G__19617__i] = arguments[G__19617__i + 2];
        ++G__19617__i;
      }
      args = new cljs.core.IndexedSeq(G__19617__a, 0);
    }
    return cljs$core$alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  cljs$core$alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  cljs$core$alter_meta_BANG_.cljs$lang$applyTo = function(arglist__19618) {
    var iref = cljs.core.first(arglist__19618);
    arglist__19618 = cljs.core.next(arglist__19618);
    var f = cljs.core.first(arglist__19618);
    var args = cljs.core.rest(arglist__19618);
    return cljs$core$alter_meta_BANG___delegate(iref, f, args);
  };
  cljs$core$alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$alter_meta_BANG___delegate;
  return cljs$core$alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var cljs$core$gensym = null;
  var cljs$core$gensym__0 = function() {
    return cljs$core$gensym.cljs$core$IFn$_invoke$arity$1("G__");
  };
  var cljs$core$gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = function() {
        var G__19621 = 0;
        return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__19621) : cljs.core.atom.call(null, G__19621);
      }();
    } else {
    }
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  cljs$core$gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return cljs$core$gensym__0.call(this);
      case 1:
        return cljs$core$gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$gensym.cljs$core$IFn$_invoke$arity$0 = cljs$core$gensym__0;
  cljs$core$gensym.cljs$core$IFn$_invoke$arity$1 = cljs$core$gensym__1;
  return cljs$core$gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = function() {
      return self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    }();
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    var G__19623 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19623) : cljs.core.deref.call(null, G__19623);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__19624_SHARP_, p2__19625_SHARP_) {
    var ret = function() {
      var G__19628 = p1__19624_SHARP_;
      var G__19629 = p2__19625_SHARP_;
      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19628, G__19629) : rf.call(null, G__19628, G__19629);
    }();
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__19632 = null;
      var G__19632__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__19632__1 = function(result) {
        var G__19631 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19631) : rf.call(null, G__19631);
      };
      var G__19632__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__19632 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__19632__0.call(this);
          case 1:
            return G__19632__1.call(this, result);
          case 2:
            return G__19632__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19632.cljs$core$IFn$_invoke$arity$0 = G__19632__0;
      G__19632.cljs$core$IFn$_invoke$arity$1 = G__19632__1;
      G__19632.cljs$core$IFn$_invoke$arity$2 = G__19632__2;
      return G__19632;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var cljs$core$dedupe = null;
  var cljs$core$dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__19641 = null;
          var G__19641__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__19641__1 = function(result) {
            var G__19637 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19637) : rf.call(null, G__19637);
          };
          var G__19641__2 = function(result, input) {
            var prior = function() {
              var G__19638 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19638) : cljs.core.deref.call(null, G__19638);
            }();
            cljs.core.vreset_BANG_(pa, input);
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
              return result;
            } else {
              var G__19639 = result;
              var G__19640 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19639, G__19640) : rf.call(null, G__19639, G__19640);
            }
          };
          G__19641 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__19641__0.call(this);
              case 1:
                return G__19641__1.call(this, result);
              case 2:
                return G__19641__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__19641.cljs$core$IFn$_invoke$arity$0 = G__19641__0;
          G__19641.cljs$core$IFn$_invoke$arity$1 = G__19641__1;
          G__19641.cljs$core$IFn$_invoke$arity$2 = G__19641__2;
          return G__19641;
        }();
      }(pa);
    };
  };
  var cljs$core$dedupe__1 = function(coll) {
    return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs$core$dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
  };
  cljs$core$dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return cljs$core$dedupe__0.call(this);
      case 1:
        return cljs$core$dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$dedupe.cljs$core$IFn$_invoke$arity$0 = cljs$core$dedupe__0;
  cljs$core$dedupe.cljs$core$IFn$_invoke$arity$1 = cljs$core$dedupe__1;
  return cljs$core$dedupe;
}();
cljs.core.random_sample = function() {
  var cljs$core$random_sample = null;
  var cljs$core$random_sample__1 = function(prob) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    });
  };
  var cljs$core$random_sample__2 = function(prob, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    }, coll);
  };
  cljs$core$random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return cljs$core$random_sample__1.call(this, prob);
      case 2:
        return cljs$core$random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$random_sample.cljs$core$IFn$_invoke$arity$1 = cljs$core$random_sample__1;
  cljs$core$random_sample.cljs$core$IFn$_invoke$arity$2 = cljs$core$random_sample__2;
  return cljs$core$random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5098__auto__ = this;
  return cljs.core.es6_iterator(this__5098__auto__);
};
cljs.core.eduction = function cljs$core$eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__19643_SHARP_, p2__19642_SHARP_) {
    var G__19645 = p2__19642_SHARP_;
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(G__19645) : proc.call(null, G__19645);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj19647 = {};
  return obj19647;
}();
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = cljs.core._clj__GT_js[function() {
        var G__19651 = x__4758__auto__;
        return goog.typeOf(G__19651);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = cljs.core._key__GT_js[function() {
        var G__19655 = x__4758__auto__;
        return goog.typeOf(G__19655);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (function() {
    var G__19658 = k;
    if (G__19658) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__19658.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__19658.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__19658);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__19658);
    }
  }()) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      var G__19659 = k;
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(G__19659) : cljs.core.clj__GT_js.call(null, G__19659);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__19675 = x;
      if (G__19675) {
        var bit__4796__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4122__auto__ = bit__4796__auto__;
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return G__19675.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__19675.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__19675);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__19675);
      }
    }()) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = function() {
              var obj19677 = {};
              return obj19677;
            }();
            var seq__19678_19688 = cljs.core.seq(x);
            var chunk__19679_19689 = null;
            var count__19680_19690 = 0;
            var i__19681_19691 = 0;
            while (true) {
              if (i__19681_19691 < count__19680_19690) {
                var vec__19682_19692 = chunk__19679_19689.cljs$core$IIndexed$_nth$arity$2(null, i__19681_19691);
                var k_19693 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19682_19692, 0, null);
                var v_19694 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19682_19692, 1, null);
                m[cljs.core.key__GT_js(k_19693)] = cljs$core$clj__GT_js(v_19694);
                var G__19695 = seq__19678_19688;
                var G__19696 = chunk__19679_19689;
                var G__19697 = count__19680_19690;
                var G__19698 = i__19681_19691 + 1;
                seq__19678_19688 = G__19695;
                chunk__19679_19689 = G__19696;
                count__19680_19690 = G__19697;
                i__19681_19691 = G__19698;
                continue;
              } else {
                var temp__4126__auto___19699 = cljs.core.seq(seq__19678_19688);
                if (temp__4126__auto___19699) {
                  var seq__19678_19700__$1 = temp__4126__auto___19699;
                  if (cljs.core.chunked_seq_QMARK_(seq__19678_19700__$1)) {
                    var c__4907__auto___19701 = cljs.core.chunk_first(seq__19678_19700__$1);
                    var G__19702 = cljs.core.chunk_rest(seq__19678_19700__$1);
                    var G__19703 = c__4907__auto___19701;
                    var G__19704 = cljs.core.count(c__4907__auto___19701);
                    var G__19705 = 0;
                    seq__19678_19688 = G__19702;
                    chunk__19679_19689 = G__19703;
                    count__19680_19690 = G__19704;
                    i__19681_19691 = G__19705;
                    continue;
                  } else {
                    var vec__19683_19706 = cljs.core.first(seq__19678_19700__$1);
                    var k_19707 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19683_19706, 0, null);
                    var v_19708 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19683_19706, 1, null);
                    m[cljs.core.key__GT_js(k_19707)] = cljs$core$clj__GT_js(v_19708);
                    var G__19709 = cljs.core.next(seq__19678_19700__$1);
                    var G__19710 = null;
                    var G__19711 = 0;
                    var G__19712 = 0;
                    seq__19678_19688 = G__19709;
                    chunk__19679_19689 = G__19710;
                    count__19680_19690 = G__19711;
                    i__19681_19691 = G__19712;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__19684_19713 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$clj__GT_js, x));
              var chunk__19685_19714 = null;
              var count__19686_19715 = 0;
              var i__19687_19716 = 0;
              while (true) {
                if (i__19687_19716 < count__19686_19715) {
                  var x_19717__$1 = chunk__19685_19714.cljs$core$IIndexed$_nth$arity$2(null, i__19687_19716);
                  arr.push(x_19717__$1);
                  var G__19718 = seq__19684_19713;
                  var G__19719 = chunk__19685_19714;
                  var G__19720 = count__19686_19715;
                  var G__19721 = i__19687_19716 + 1;
                  seq__19684_19713 = G__19718;
                  chunk__19685_19714 = G__19719;
                  count__19686_19715 = G__19720;
                  i__19687_19716 = G__19721;
                  continue;
                } else {
                  var temp__4126__auto___19722 = cljs.core.seq(seq__19684_19713);
                  if (temp__4126__auto___19722) {
                    var seq__19684_19723__$1 = temp__4126__auto___19722;
                    if (cljs.core.chunked_seq_QMARK_(seq__19684_19723__$1)) {
                      var c__4907__auto___19724 = cljs.core.chunk_first(seq__19684_19723__$1);
                      var G__19725 = cljs.core.chunk_rest(seq__19684_19723__$1);
                      var G__19726 = c__4907__auto___19724;
                      var G__19727 = cljs.core.count(c__4907__auto___19724);
                      var G__19728 = 0;
                      seq__19684_19713 = G__19725;
                      chunk__19685_19714 = G__19726;
                      count__19686_19715 = G__19727;
                      i__19687_19716 = G__19728;
                      continue;
                    } else {
                      var x_19729__$1 = cljs.core.first(seq__19684_19723__$1);
                      arr.push(x_19729__$1);
                      var G__19730 = cljs.core.next(seq__19684_19723__$1);
                      var G__19731 = null;
                      var G__19732 = 0;
                      var G__19733 = 0;
                      seq__19684_19713 = G__19730;
                      chunk__19685_19714 = G__19731;
                      count__19686_19715 = G__19732;
                      i__19687_19716 = G__19733;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj19735 = {};
  return obj19735;
}();
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (function() {
    var and__4110__auto__ = x;
    if (and__4110__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4758__auto__ = x == null ? null : x;
    return function() {
      var or__4122__auto__ = cljs.core._js__GT_clj[function() {
        var G__19739 = x__4758__auto__;
        return goog.typeOf(G__19739);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var cljs$core$js__GT_clj = null;
  var cljs$core$js__GT_clj__1 = function(x) {
    return cljs$core$js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
  };
  var cljs$core$js__GT_clj__2 = function() {
    var G__19796__delegate = function(x, opts) {
      var map__19769 = opts;
      var map__19769__$1 = cljs.core.seq_QMARK_(map__19769) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__19769) : map__19769;
      var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19769__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
      var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
      var f = function(map__19769, map__19769__$1, keywordize_keys, keyfn) {
        return function cljs$core$js__GT_clj_$_thisfn(x__$1) {
          if (function() {
            var G__19785 = x__$1;
            if (G__19785) {
              var bit__4796__auto__ = null;
              if (cljs.core.truth_(function() {
                var or__4122__auto__ = bit__4796__auto__;
                if (cljs.core.truth_(or__4122__auto__)) {
                  return or__4122__auto__;
                } else {
                  return G__19785.cljs$core$IEncodeClojure$;
                }
              }())) {
                return true;
              } else {
                if (!G__19785.cljs$lang$protocol_mask$partition$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__19785);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__19785);
            }
          }()) {
            return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
          } else {
            if (cljs.core.seq_QMARK_(x__$1)) {
              return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$js__GT_clj_$_thisfn, x__$1));
            } else {
              if (cljs.core.coll_QMARK_(x__$1)) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$js__GT_clj_$_thisfn, x__$1));
              } else {
                if (cljs.core.array_QMARK_(x__$1)) {
                  return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$js__GT_clj_$_thisfn, x__$1));
                } else {
                  if (cljs.core.type(x__$1) === Object) {
                    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                      var iter__4876__auto__ = function(map__19769, map__19769__$1, keywordize_keys, keyfn) {
                        return function cljs$core$js__GT_clj_$_thisfn_$_iter__19786(s__19787) {
                          return new cljs.core.LazySeq(null, function(map__19769, map__19769__$1, keywordize_keys, keyfn) {
                            return function() {
                              var s__19787__$1 = s__19787;
                              while (true) {
                                var temp__4126__auto__ = cljs.core.seq(s__19787__$1);
                                if (temp__4126__auto__) {
                                  var s__19787__$2 = temp__4126__auto__;
                                  if (cljs.core.chunked_seq_QMARK_(s__19787__$2)) {
                                    var c__4874__auto__ = cljs.core.chunk_first(s__19787__$2);
                                    var size__4875__auto__ = cljs.core.count(c__4874__auto__);
                                    var b__19789 = cljs.core.chunk_buffer(size__4875__auto__);
                                    if (function() {
                                      var i__19788 = 0;
                                      while (true) {
                                        if (i__19788 < size__4875__auto__) {
                                          var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4874__auto__, i__19788);
                                          cljs.core.chunk_append(b__19789, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                            var G__19794 = k;
                                            return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__19794) : keyfn.call(null, G__19794);
                                          }(), cljs$core$js__GT_clj_$_thisfn(x__$1[k])], null));
                                          var G__19797 = i__19788 + 1;
                                          i__19788 = G__19797;
                                          continue;
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__19789), cljs$core$js__GT_clj_$_thisfn_$_iter__19786(cljs.core.chunk_rest(s__19787__$2)));
                                    } else {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__19789), null);
                                    }
                                  } else {
                                    var k = cljs.core.first(s__19787__$2);
                                    return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                      var G__19795 = k;
                                      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__19795) : keyfn.call(null, G__19795);
                                    }(), cljs$core$js__GT_clj_$_thisfn(x__$1[k])], null), cljs$core$js__GT_clj_$_thisfn_$_iter__19786(cljs.core.rest(s__19787__$2)));
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(map__19769, map__19769__$1, keywordize_keys, keyfn), null, null);
                        };
                      }(map__19769, map__19769__$1, keywordize_keys, keyfn);
                      return iter__4876__auto__(cljs.core.js_keys(x__$1));
                    }());
                  } else {
                    return x__$1;
                  }
                }
              }
            }
          }
        };
      }(map__19769, map__19769__$1, keywordize_keys, keyfn);
      return f(x);
    };
    var G__19796 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        var G__19798__i = 0, G__19798__a = new Array(arguments.length - 1);
        while (G__19798__i < G__19798__a.length) {
          G__19798__a[G__19798__i] = arguments[G__19798__i + 1];
          ++G__19798__i;
        }
        opts = new cljs.core.IndexedSeq(G__19798__a, 0);
      }
      return G__19796__delegate.call(this, x, opts);
    };
    G__19796.cljs$lang$maxFixedArity = 1;
    G__19796.cljs$lang$applyTo = function(arglist__19799) {
      var x = cljs.core.first(arglist__19799);
      var opts = cljs.core.rest(arglist__19799);
      return G__19796__delegate(x, opts);
    };
    G__19796.cljs$core$IFn$_invoke$arity$variadic = G__19796__delegate;
    return G__19796;
  }();
  cljs$core$js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$js__GT_clj__1.call(this, x);
      default:
        var G__19800 = null;
        if (arguments.length > 1) {
          var G__19801__i = 0, G__19801__a = new Array(arguments.length - 1);
          while (G__19801__i < G__19801__a.length) {
            G__19801__a[G__19801__i] = arguments[G__19801__i + 1];
            ++G__19801__i;
          }
          G__19800 = new cljs.core.IndexedSeq(G__19801__a, 0);
        }
        return cljs$core$js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, G__19800);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$js__GT_clj.cljs$lang$maxFixedArity = 1;
  cljs$core$js__GT_clj.cljs$lang$applyTo = cljs$core$js__GT_clj__2.cljs$lang$applyTo;
  cljs$core$js__GT_clj.cljs$core$IFn$_invoke$arity$1 = cljs$core$js__GT_clj__1;
  cljs$core$js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = cljs$core$js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$js__GT_clj;
}();
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__19804 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__19804) : cljs.core.atom.call(null, G__19804);
  }();
  return function(mem) {
    return function() {
      var G__19806__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(function() {
          var G__19805 = mem;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19805) : cljs.core.deref.call(null, G__19805);
        }(), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__19806 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__19807__i = 0, G__19807__a = new Array(arguments.length - 0);
          while (G__19807__i < G__19807__a.length) {
            G__19807__a[G__19807__i] = arguments[G__19807__i + 0];
            ++G__19807__i;
          }
          args = new cljs.core.IndexedSeq(G__19807__a, 0);
        }
        return G__19806__delegate.call(this, args);
      };
      G__19806.cljs$lang$maxFixedArity = 0;
      G__19806.cljs$lang$applyTo = function(arglist__19808) {
        var args = cljs.core.seq(arglist__19808);
        return G__19806__delegate(args);
      };
      G__19806.cljs$core$IFn$_invoke$arity$variadic = G__19806__delegate;
      return G__19806;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var cljs$core$trampoline = null;
  var cljs$core$trampoline__1 = function(f) {
    while (true) {
      var ret = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }();
      if (cljs.core.fn_QMARK_(ret)) {
        var G__19810 = ret;
        f = G__19810;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var cljs$core$trampoline__2 = function() {
    var G__19811__delegate = function(f, args) {
      return cljs$core$trampoline.cljs$core$IFn$_invoke$arity$1(function() {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
      });
    };
    var G__19811 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        var G__19812__i = 0, G__19812__a = new Array(arguments.length - 1);
        while (G__19812__i < G__19812__a.length) {
          G__19812__a[G__19812__i] = arguments[G__19812__i + 1];
          ++G__19812__i;
        }
        args = new cljs.core.IndexedSeq(G__19812__a, 0);
      }
      return G__19811__delegate.call(this, f, args);
    };
    G__19811.cljs$lang$maxFixedArity = 1;
    G__19811.cljs$lang$applyTo = function(arglist__19813) {
      var f = cljs.core.first(arglist__19813);
      var args = cljs.core.rest(arglist__19813);
      return G__19811__delegate(f, args);
    };
    G__19811.cljs$core$IFn$_invoke$arity$variadic = G__19811__delegate;
    return G__19811;
  }();
  cljs$core$trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return cljs$core$trampoline__1.call(this, f);
      default:
        var G__19814 = null;
        if (arguments.length > 1) {
          var G__19815__i = 0, G__19815__a = new Array(arguments.length - 1);
          while (G__19815__i < G__19815__a.length) {
            G__19815__a[G__19815__i] = arguments[G__19815__i + 1];
            ++G__19815__i;
          }
          G__19814 = new cljs.core.IndexedSeq(G__19815__a, 0);
        }
        return cljs$core$trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, G__19814);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$trampoline.cljs$lang$maxFixedArity = 1;
  cljs$core$trampoline.cljs$lang$applyTo = cljs$core$trampoline__2.cljs$lang$applyTo;
  cljs$core$trampoline.cljs$core$IFn$_invoke$arity$1 = cljs$core$trampoline__1;
  cljs$core$trampoline.cljs$core$IFn$_invoke$arity$variadic = cljs$core$trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return cljs$core$trampoline;
}();
cljs.core.rand = function() {
  var cljs$core$rand = null;
  var cljs$core$rand__0 = function() {
    return cljs$core$rand.cljs$core$IFn$_invoke$arity$1(1);
  };
  var cljs$core$rand__1 = function(n) {
    return function() {
      return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
    }() * n;
  };
  cljs$core$rand = function(n) {
    switch(arguments.length) {
      case 0:
        return cljs$core$rand__0.call(this);
      case 1:
        return cljs$core$rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$rand.cljs$core$IFn$_invoke$arity$0 = cljs$core$rand__0;
  cljs$core$rand.cljs$core$IFn$_invoke$arity$1 = cljs$core$rand__1;
  return cljs$core$rand;
}();
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__19818 = function() {
    return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
  }() * n;
  return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__19818) : Math.floor.call(null, G__19818);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = function() {
      var G__19820 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19820) : f.call(null, G__19820);
    }();
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__19822 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__19822) : cljs.core.atom.call(null, G__19822);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var cljs$core$swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
  };
  var cljs$core$swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      var G__19823__i = 0, G__19823__a = new Array(arguments.length - 1);
      while (G__19823__i < G__19823__a.length) {
        G__19823__a[G__19823__i] = arguments[G__19823__i + 1];
        ++G__19823__i;
      }
      args = new cljs.core.IndexedSeq(G__19823__a, 0);
    }
    return cljs$core$swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  cljs$core$swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  cljs$core$swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__19824) {
    var f = cljs.core.first(arglist__19824);
    var args = cljs.core.rest(arglist__19824);
    return cljs$core$swap_global_hierarchy_BANG___delegate(f, args);
  };
  cljs$core$swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$swap_global_hierarchy_BANG___delegate;
  return cljs$core$swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var cljs$core$isa_QMARK_ = null;
  var cljs$core$isa_QMARK___2 = function(child, parent) {
    return cljs$core$isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__19889 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19889) : cljs.core.deref.call(null, G__19889);
    }(), child, parent);
  };
  var cljs$core$isa_QMARK___3 = function(h, child, parent) {
    var or__4122__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
    if (or__4122__auto__) {
      return or__4122__auto__;
    } else {
      var or__4122__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__4122__auto____$1) {
        return or__4122__auto____$1;
      } else {
        var and__4110__auto__ = cljs.core.vector_QMARK_(parent);
        if (and__4110__auto__) {
          var and__4110__auto____$1 = cljs.core.vector_QMARK_(child);
          if (and__4110__auto____$1) {
            var and__4110__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
            if (and__4110__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count(parent)) {
                  return ret;
                } else {
                  var G__19914 = cljs$core$isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, function() {
                    var G__19912 = i;
                    return child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(G__19912) : child.call(null, G__19912);
                  }(), function() {
                    var G__19913 = i;
                    return parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(G__19913) : parent.call(null, G__19913);
                  }());
                  var G__19915 = i + 1;
                  ret = G__19914;
                  i = G__19915;
                  continue;
                }
                break;
              }
            } else {
              return and__4110__auto____$2;
            }
          } else {
            return and__4110__auto____$1;
          }
        } else {
          return and__4110__auto__;
        }
      }
    }
  };
  cljs$core$isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return cljs$core$isa_QMARK___2.call(this, h, child);
      case 3:
        return cljs$core$isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = cljs$core$isa_QMARK___2;
  cljs$core$isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = cljs$core$isa_QMARK___3;
  return cljs$core$isa_QMARK_;
}();
cljs.core.parents = function() {
  var cljs$core$parents = null;
  var cljs$core$parents__1 = function(tag) {
    return cljs$core$parents.cljs$core$IFn$_invoke$arity$2(function() {
      var G__19919 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19919) : cljs.core.deref.call(null, G__19919);
    }(), tag);
  };
  var cljs$core$parents__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  cljs$core$parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return cljs$core$parents__1.call(this, h);
      case 2:
        return cljs$core$parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$parents.cljs$core$IFn$_invoke$arity$1 = cljs$core$parents__1;
  cljs$core$parents.cljs$core$IFn$_invoke$arity$2 = cljs$core$parents__2;
  return cljs$core$parents;
}();
cljs.core.ancestors = function() {
  var cljs$core$ancestors = null;
  var cljs$core$ancestors__1 = function(tag) {
    return cljs$core$ancestors.cljs$core$IFn$_invoke$arity$2(function() {
      var G__19923 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19923) : cljs.core.deref.call(null, G__19923);
    }(), tag);
  };
  var cljs$core$ancestors__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  cljs$core$ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return cljs$core$ancestors__1.call(this, h);
      case 2:
        return cljs$core$ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$ancestors.cljs$core$IFn$_invoke$arity$1 = cljs$core$ancestors__1;
  cljs$core$ancestors.cljs$core$IFn$_invoke$arity$2 = cljs$core$ancestors__2;
  return cljs$core$ancestors;
}();
cljs.core.descendants = function() {
  var cljs$core$descendants = null;
  var cljs$core$descendants__1 = function(tag) {
    return cljs$core$descendants.cljs$core$IFn$_invoke$arity$2(function() {
      var G__19927 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19927) : cljs.core.deref.call(null, G__19927);
    }(), tag);
  };
  var cljs$core$descendants__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  cljs$core$descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return cljs$core$descendants__1.call(this, h);
      case 2:
        return cljs$core$descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$descendants.cljs$core$IFn$_invoke$arity$1 = cljs$core$descendants__1;
  cljs$core$descendants.cljs$core$IFn$_invoke$arity$2 = cljs$core$descendants__2;
  return cljs$core$descendants;
}();
cljs.core.derive = function() {
  var cljs$core$derive = null;
  var cljs$core$derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace(parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs$core$derive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var cljs$core$derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, function() {
              var G__19936 = target;
              return targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(G__19936) : targets.call(null, G__19936);
            }())));
          };
        }(tp, td, ta), m, cljs.core.cons(source, function() {
          var G__19937 = source;
          return sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(G__19937) : sources.call(null, G__19937);
        }()));
      };
    }(tp, td, ta);
    var or__4122__auto__ = cljs.core.contains_QMARK_(function() {
      var G__19941 = tag;
      return tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(G__19941) : tp.call(null, G__19941);
    }(), parent) ? null : function() {
      if (cljs.core.contains_QMARK_(function() {
        var G__19942 = tag;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__19942) : ta.call(null, G__19942);
      }(), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_(function() {
        var G__19943 = parent;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__19943) : ta.call(null, G__19943);
      }(), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
      "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return h;
    }
  };
  cljs$core$derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return cljs$core$derive__2.call(this, h, tag);
      case 3:
        return cljs$core$derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$derive.cljs$core$IFn$_invoke$arity$2 = cljs$core$derive__2;
  cljs$core$derive.cljs$core$IFn$_invoke$arity$3 = cljs$core$derive__3;
  return cljs$core$derive;
}();
cljs.core.underive = function() {
  var cljs$core$underive = null;
  var cljs$core$underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs$core$underive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var cljs$core$underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(function() {
      var G__19950 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__19950) : parentMap.call(null, G__19950);
    }()) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(function() {
      var G__19951 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__19951) : parentMap.call(null, G__19951);
    }(), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
    var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
      return function(p1__19944_SHARP_) {
        return cljs.core.cons(cljs.core.first(p1__19944_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__19944_SHARP_), cljs.core.second(p1__19944_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
    if (cljs.core.contains_QMARK_(function() {
      var G__19952 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__19952) : parentMap.call(null, G__19952);
    }(), parent)) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__19945_SHARP_, p2__19946_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__19945_SHARP_, p2__19946_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
    } else {
      return h;
    }
  };
  cljs$core$underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return cljs$core$underive__2.call(this, h, tag);
      case 3:
        return cljs$core$underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$underive.cljs$core$IFn$_invoke$arity$2 = cljs$core$underive__2;
  cljs$core$underive.cljs$core$IFn$_invoke$arity$3 = cljs$core$underive__3;
  return cljs$core$underive;
}();
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    var G__19955 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19955) : cljs.core.deref.call(null, G__19955);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    var G__19956 = hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19956) : cljs.core.deref.call(null, G__19956);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = function() {
    var G__19972 = prefer_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19972) : cljs.core.deref.call(null, G__19972);
  }().call(null, x);
  var or__4122__auto__ = cljs.core.truth_(function() {
    var and__4110__auto__ = xprefs;
    if (cljs.core.truth_(and__4110__auto__)) {
      var G__19974 = y;
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(G__19974) : xprefs.call(null, G__19974);
    } else {
      return and__4110__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    var or__4122__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(cljs$core$prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__19975 = cljs.core.rest(ps);
          ps = G__19975;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__4122__auto____$1)) {
      return or__4122__auto____$1;
    } else {
      var or__4122__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(cljs$core$prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__19976 = cljs.core.rest(ps);
            ps = G__19976;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__4122__auto____$2)) {
        return or__4122__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table) {
  var or__4122__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__19990) {
    var vec__19991 = p__19990;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19991, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19991, 1, null);
    var e = vec__19991;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__19992 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19992) : cljs.core.deref.call(null, G__19992);
    }(), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__4122__auto__ = be == null;
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, function() {
    var G__19993 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19993) : cljs.core.deref.call(null, G__19993);
  }());
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
      var G__19994 = cached_hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19994) : cljs.core.deref.call(null, G__19994);
    }(), function() {
      var G__19995 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19995) : cljs.core.deref.call(null, G__19995);
    }())) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj19997 = {};
  return obj19997;
}();
cljs.core._reset = function cljs$core$_reset(mf) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._reset[function() {
        var G__20001 = x__4758__auto__;
        return goog.typeOf(G__20001);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._reset["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._add_method[function() {
        var G__20005 = x__4758__auto__;
        return goog.typeOf(G__20005);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._add_method["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._remove_method[function() {
        var G__20009 = x__4758__auto__;
        return goog.typeOf(G__20009);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._remove_method["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._prefer_method[function() {
        var G__20013 = x__4758__auto__;
        return goog.typeOf(G__20013);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._prefer_method["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._get_method[function() {
        var G__20017 = x__4758__auto__;
        return goog.typeOf(G__20017);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._get_method["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._methods[function() {
        var G__20021 = x__4758__auto__;
        return goog.typeOf(G__20021);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._methods["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (function() {
    var and__4110__auto__ = mf;
    if (and__4110__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4758__auto__ = mf == null ? null : mf;
    return function() {
      var or__4122__auto__ = cljs.core._prefers[function() {
        var G__20025 = x__4758__auto__;
        return goog.typeOf(G__20025);
      }()];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core._prefers["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__20027 = this$__$1;
  return goog.getUid(G__20027);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
    var G__20028 = self__.cached_hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20028) : cljs.core.deref.call(null, G__20028);
  }(), function() {
    var G__20029 = self__.hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20029) : cljs.core.deref.call(null, G__20029);
  }())) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = function() {
    var G__20030 = self__.method_cache;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20030) : cljs.core.deref.call(null, G__20030);
  }().call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return function() {
        var G__20031 = self__.method_table;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20031) : cljs.core.deref.call(null, G__20031);
      }().call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__20032 = self__.method_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20032) : cljs.core.deref.call(null, G__20032);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__20033 = self__.prefer_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20033) : cljs.core.deref.call(null, G__20033);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__20874 = null;
  var G__20874__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__20874__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20034 = a;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__20034) : self__.dispatch_fn.call(null, G__20034);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20035 = a;
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__20035) : target_fn.call(null, G__20035);
  };
  var G__20874__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20036 = a;
      var G__20037 = b;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__20036, G__20037) : self__.dispatch_fn.call(null, G__20036, G__20037);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20038 = a;
    var G__20039 = b;
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__20038, G__20039) : target_fn.call(null, G__20038, G__20039);
  };
  var G__20874__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20040 = a;
      var G__20041 = b;
      var G__20042 = c;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__20040, G__20041, G__20042) : self__.dispatch_fn.call(null, G__20040, G__20041, G__20042);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20043 = a;
    var G__20044 = b;
    var G__20045 = c;
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__20043, G__20044, G__20045) : target_fn.call(null, G__20043, G__20044, G__20045);
  };
  var G__20874__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20046 = a;
      var G__20047 = b;
      var G__20048 = c;
      var G__20049 = d;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__20046, G__20047, G__20048, G__20049) : self__.dispatch_fn.call(null, G__20046, G__20047, G__20048, G__20049);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20050 = a;
    var G__20051 = b;
    var G__20052 = c;
    var G__20053 = d;
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__20050, G__20051, G__20052, G__20053) : target_fn.call(null, G__20050, G__20051, G__20052, G__20053);
  };
  var G__20874__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20054 = a;
      var G__20055 = b;
      var G__20056 = c;
      var G__20057 = d;
      var G__20058 = e;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__20054, G__20055, G__20056, G__20057, G__20058) : self__.dispatch_fn.call(null, G__20054, G__20055, G__20056, G__20057, G__20058);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20059 = a;
    var G__20060 = b;
    var G__20061 = c;
    var G__20062 = d;
    var G__20063 = e;
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__20059, G__20060, G__20061, G__20062, G__20063) : target_fn.call(null, G__20059, G__20060, G__20061, G__20062, G__20063);
  };
  var G__20874__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20064 = a;
      var G__20065 = b;
      var G__20066 = c;
      var G__20067 = d;
      var G__20068 = e;
      var G__20069 = f;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__20064, G__20065, G__20066, G__20067, G__20068, G__20069) : self__.dispatch_fn.call(null, G__20064, G__20065, G__20066, G__20067, G__20068, G__20069);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20070 = a;
    var G__20071 = b;
    var G__20072 = c;
    var G__20073 = d;
    var G__20074 = e;
    var G__20075 = f;
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__20070, G__20071, G__20072, G__20073, G__20074, G__20075) : target_fn.call(null, G__20070, G__20071, G__20072, G__20073, G__20074, G__20075);
  };
  var G__20874__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20076 = a;
      var G__20077 = b;
      var G__20078 = c;
      var G__20079 = d;
      var G__20080 = e;
      var G__20081 = f;
      var G__20082 = g;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__20076, G__20077, G__20078, G__20079, G__20080, G__20081, G__20082) : self__.dispatch_fn.call(null, G__20076, G__20077, G__20078, G__20079, G__20080, G__20081, G__20082);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20083 = a;
    var G__20084 = b;
    var G__20085 = c;
    var G__20086 = d;
    var G__20087 = e;
    var G__20088 = f;
    var G__20089 = g;
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__20083, G__20084, G__20085, G__20086, G__20087, G__20088, G__20089) : target_fn.call(null, G__20083, G__20084, G__20085, G__20086, G__20087, G__20088, G__20089);
  };
  var G__20874__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20090 = a;
      var G__20091 = b;
      var G__20092 = c;
      var G__20093 = d;
      var G__20094 = e;
      var G__20095 = f;
      var G__20096 = g;
      var G__20097 = h;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__20090, G__20091, G__20092, G__20093, G__20094, G__20095, G__20096, G__20097) : self__.dispatch_fn.call(null, G__20090, G__20091, G__20092, G__20093, G__20094, G__20095, G__20096, G__20097);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20098 = a;
    var G__20099 = b;
    var G__20100 = c;
    var G__20101 = d;
    var G__20102 = e;
    var G__20103 = f;
    var G__20104 = g;
    var G__20105 = h;
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__20098, G__20099, G__20100, G__20101, G__20102, G__20103, G__20104, G__20105) : target_fn.call(null, G__20098, G__20099, G__20100, G__20101, G__20102, G__20103, G__20104, G__20105);
  };
  var G__20874__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20106 = a;
      var G__20107 = b;
      var G__20108 = c;
      var G__20109 = d;
      var G__20110 = e;
      var G__20111 = f;
      var G__20112 = g;
      var G__20113 = h;
      var G__20114 = i;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__20106, G__20107, G__20108, G__20109, G__20110, G__20111, G__20112, G__20113, G__20114) : self__.dispatch_fn.call(null, G__20106, G__20107, G__20108, G__20109, G__20110, G__20111, G__20112, G__20113, G__20114);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20115 = a;
    var G__20116 = b;
    var G__20117 = c;
    var G__20118 = d;
    var G__20119 = e;
    var G__20120 = f;
    var G__20121 = g;
    var G__20122 = h;
    var G__20123 = i;
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__20115, G__20116, G__20117, G__20118, G__20119, G__20120, G__20121, G__20122, G__20123) : target_fn.call(null, G__20115, G__20116, G__20117, G__20118, G__20119, G__20120, G__20121, G__20122, G__20123);
  };
  var G__20874__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20124 = a;
      var G__20125 = b;
      var G__20126 = c;
      var G__20127 = d;
      var G__20128 = e;
      var G__20129 = f;
      var G__20130 = g;
      var G__20131 = h;
      var G__20132 = i;
      var G__20133 = j;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__20124, G__20125, G__20126, G__20127, G__20128, G__20129, G__20130, G__20131, G__20132, G__20133) : self__.dispatch_fn.call(null, G__20124, G__20125, G__20126, G__20127, G__20128, G__20129, G__20130, G__20131, G__20132, G__20133);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20134 = a;
    var G__20135 = b;
    var G__20136 = c;
    var G__20137 = d;
    var G__20138 = e;
    var G__20139 = f;
    var G__20140 = g;
    var G__20141 = h;
    var G__20142 = i;
    var G__20143 = j;
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__20134, G__20135, G__20136, G__20137, G__20138, G__20139, G__20140, G__20141, G__20142, G__20143) : target_fn.call(null, G__20134, G__20135, G__20136, G__20137, G__20138, G__20139, G__20140, G__20141, G__20142, G__20143);
  };
  var G__20874__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20144 = a;
      var G__20145 = b;
      var G__20146 = c;
      var G__20147 = d;
      var G__20148 = e;
      var G__20149 = f;
      var G__20150 = g;
      var G__20151 = h;
      var G__20152 = i;
      var G__20153 = j;
      var G__20154 = k;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__20144, G__20145, G__20146, G__20147, G__20148, G__20149, G__20150, G__20151, G__20152, G__20153, G__20154) : self__.dispatch_fn.call(null, G__20144, G__20145, G__20146, G__20147, G__20148, G__20149, G__20150, G__20151, G__20152, G__20153, G__20154);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20155 = a;
    var G__20156 = b;
    var G__20157 = c;
    var G__20158 = d;
    var G__20159 = e;
    var G__20160 = f;
    var G__20161 = g;
    var G__20162 = h;
    var G__20163 = i;
    var G__20164 = j;
    var G__20165 = k;
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__20155, G__20156, G__20157, G__20158, G__20159, G__20160, G__20161, G__20162, G__20163, G__20164, G__20165) : target_fn.call(null, G__20155, G__20156, G__20157, G__20158, G__20159, G__20160, G__20161, G__20162, G__20163, G__20164, G__20165);
  };
  var G__20874__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20166 = a;
      var G__20167 = b;
      var G__20168 = c;
      var G__20169 = d;
      var G__20170 = e;
      var G__20171 = f;
      var G__20172 = g;
      var G__20173 = h;
      var G__20174 = i;
      var G__20175 = j;
      var G__20176 = k;
      var G__20177 = l;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__20166, G__20167, G__20168, G__20169, G__20170, G__20171, G__20172, G__20173, G__20174, G__20175, G__20176, G__20177) : self__.dispatch_fn.call(null, G__20166, G__20167, G__20168, G__20169, G__20170, G__20171, G__20172, G__20173, G__20174, G__20175, G__20176, G__20177);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20178 = a;
    var G__20179 = b;
    var G__20180 = c;
    var G__20181 = d;
    var G__20182 = e;
    var G__20183 = f;
    var G__20184 = g;
    var G__20185 = h;
    var G__20186 = i;
    var G__20187 = j;
    var G__20188 = k;
    var G__20189 = l;
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__20178, G__20179, G__20180, G__20181, G__20182, G__20183, G__20184, G__20185, G__20186, G__20187, G__20188, G__20189) : target_fn.call(null, G__20178, G__20179, G__20180, G__20181, G__20182, G__20183, G__20184, G__20185, G__20186, G__20187, G__20188, G__20189);
  };
  var G__20874__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20190 = a;
      var G__20191 = b;
      var G__20192 = c;
      var G__20193 = d;
      var G__20194 = e;
      var G__20195 = f;
      var G__20196 = g;
      var G__20197 = h;
      var G__20198 = i;
      var G__20199 = j;
      var G__20200 = k;
      var G__20201 = l;
      var G__20202 = m;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__20190, G__20191, G__20192, G__20193, G__20194, G__20195, G__20196, G__20197, G__20198, G__20199, G__20200, G__20201, G__20202) : self__.dispatch_fn.call(null, G__20190, G__20191, G__20192, G__20193, G__20194, G__20195, G__20196, G__20197, G__20198, G__20199, G__20200, G__20201, G__20202);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20203 = a;
    var G__20204 = b;
    var G__20205 = c;
    var G__20206 = d;
    var G__20207 = e;
    var G__20208 = f;
    var G__20209 = g;
    var G__20210 = h;
    var G__20211 = i;
    var G__20212 = j;
    var G__20213 = k;
    var G__20214 = l;
    var G__20215 = m;
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__20203, G__20204, G__20205, G__20206, G__20207, G__20208, G__20209, G__20210, G__20211, G__20212, G__20213, G__20214, G__20215) : target_fn.call(null, G__20203, G__20204, G__20205, G__20206, G__20207, G__20208, G__20209, G__20210, G__20211, G__20212, G__20213, G__20214, G__20215);
  };
  var G__20874__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20216 = a;
      var G__20217 = b;
      var G__20218 = c;
      var G__20219 = d;
      var G__20220 = e;
      var G__20221 = f;
      var G__20222 = g;
      var G__20223 = h;
      var G__20224 = i;
      var G__20225 = j;
      var G__20226 = k;
      var G__20227 = l;
      var G__20228 = m;
      var G__20229 = n;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__20216, G__20217, G__20218, G__20219, G__20220, G__20221, G__20222, G__20223, G__20224, G__20225, G__20226, G__20227, G__20228, G__20229) : self__.dispatch_fn.call(null, G__20216, G__20217, G__20218, G__20219, G__20220, G__20221, G__20222, G__20223, G__20224, G__20225, G__20226, G__20227, G__20228, G__20229);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20230 = a;
    var G__20231 = b;
    var G__20232 = c;
    var G__20233 = d;
    var G__20234 = e;
    var G__20235 = f;
    var G__20236 = g;
    var G__20237 = h;
    var G__20238 = i;
    var G__20239 = j;
    var G__20240 = k;
    var G__20241 = l;
    var G__20242 = m;
    var G__20243 = n;
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__20230, G__20231, G__20232, G__20233, G__20234, G__20235, G__20236, G__20237, G__20238, G__20239, G__20240, G__20241, G__20242, G__20243) : target_fn.call(null, G__20230, G__20231, G__20232, G__20233, G__20234, G__20235, G__20236, G__20237, G__20238, G__20239, G__20240, G__20241, G__20242, G__20243);
  };
  var G__20874__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20244 = a;
      var G__20245 = b;
      var G__20246 = c;
      var G__20247 = d;
      var G__20248 = e;
      var G__20249 = f;
      var G__20250 = g;
      var G__20251 = h;
      var G__20252 = i;
      var G__20253 = j;
      var G__20254 = k;
      var G__20255 = l;
      var G__20256 = m;
      var G__20257 = n;
      var G__20258 = o;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__20244, G__20245, G__20246, G__20247, G__20248, G__20249, G__20250, G__20251, G__20252, G__20253, G__20254, G__20255, G__20256, G__20257, G__20258) : self__.dispatch_fn.call(null, G__20244, G__20245, G__20246, G__20247, G__20248, G__20249, G__20250, G__20251, G__20252, G__20253, G__20254, G__20255, G__20256, G__20257, G__20258);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20259 = a;
    var G__20260 = b;
    var G__20261 = c;
    var G__20262 = d;
    var G__20263 = e;
    var G__20264 = f;
    var G__20265 = g;
    var G__20266 = h;
    var G__20267 = i;
    var G__20268 = j;
    var G__20269 = k;
    var G__20270 = l;
    var G__20271 = m;
    var G__20272 = n;
    var G__20273 = o;
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__20259, G__20260, G__20261, G__20262, G__20263, G__20264, G__20265, G__20266, G__20267, G__20268, G__20269, G__20270, G__20271, G__20272, G__20273) : target_fn.call(null, G__20259, G__20260, G__20261, G__20262, G__20263, G__20264, G__20265, G__20266, G__20267, G__20268, G__20269, G__20270, G__20271, G__20272, G__20273);
  };
  var G__20874__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20274 = a;
      var G__20275 = b;
      var G__20276 = c;
      var G__20277 = d;
      var G__20278 = e;
      var G__20279 = f;
      var G__20280 = g;
      var G__20281 = h;
      var G__20282 = i;
      var G__20283 = j;
      var G__20284 = k;
      var G__20285 = l;
      var G__20286 = m;
      var G__20287 = n;
      var G__20288 = o;
      var G__20289 = p;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__20274, G__20275, G__20276, G__20277, G__20278, G__20279, G__20280, G__20281, G__20282, G__20283, G__20284, G__20285, G__20286, G__20287, G__20288, G__20289) : self__.dispatch_fn.call(null, G__20274, G__20275, G__20276, G__20277, G__20278, G__20279, G__20280, G__20281, G__20282, G__20283, G__20284, G__20285, G__20286, G__20287, G__20288, G__20289);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20290 = a;
    var G__20291 = b;
    var G__20292 = c;
    var G__20293 = d;
    var G__20294 = e;
    var G__20295 = f;
    var G__20296 = g;
    var G__20297 = h;
    var G__20298 = i;
    var G__20299 = j;
    var G__20300 = k;
    var G__20301 = l;
    var G__20302 = m;
    var G__20303 = n;
    var G__20304 = o;
    var G__20305 = p;
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__20290, G__20291, G__20292, G__20293, G__20294, G__20295, G__20296, G__20297, G__20298, G__20299, G__20300, G__20301, G__20302, G__20303, G__20304, G__20305) : target_fn.call(null, G__20290, G__20291, G__20292, G__20293, G__20294, G__20295, G__20296, G__20297, G__20298, G__20299, G__20300, G__20301, G__20302, G__20303, G__20304, G__20305);
  };
  var G__20874__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20306 = a;
      var G__20307 = b;
      var G__20308 = c;
      var G__20309 = d;
      var G__20310 = e;
      var G__20311 = f;
      var G__20312 = g;
      var G__20313 = h;
      var G__20314 = i;
      var G__20315 = j;
      var G__20316 = k;
      var G__20317 = l;
      var G__20318 = m;
      var G__20319 = n;
      var G__20320 = o;
      var G__20321 = p;
      var G__20322 = q;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__20306, G__20307, G__20308, G__20309, G__20310, G__20311, G__20312, G__20313, G__20314, G__20315, G__20316, G__20317, G__20318, G__20319, G__20320, G__20321, G__20322) : self__.dispatch_fn.call(null, G__20306, G__20307, G__20308, G__20309, G__20310, G__20311, G__20312, G__20313, G__20314, G__20315, G__20316, G__20317, G__20318, G__20319, G__20320, G__20321, G__20322);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20323 = a;
    var G__20324 = b;
    var G__20325 = c;
    var G__20326 = d;
    var G__20327 = e;
    var G__20328 = f;
    var G__20329 = g;
    var G__20330 = h;
    var G__20331 = i;
    var G__20332 = j;
    var G__20333 = k;
    var G__20334 = l;
    var G__20335 = m;
    var G__20336 = n;
    var G__20337 = o;
    var G__20338 = p;
    var G__20339 = q;
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__20323, G__20324, G__20325, G__20326, G__20327, G__20328, G__20329, G__20330, G__20331, G__20332, G__20333, G__20334, G__20335, G__20336, G__20337, G__20338, G__20339) : target_fn.call(null, G__20323, G__20324, G__20325, G__20326, G__20327, G__20328, G__20329, G__20330, G__20331, G__20332, G__20333, G__20334, G__20335, G__20336, G__20337, G__20338, G__20339);
  };
  var G__20874__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20340 = a;
      var G__20341 = b;
      var G__20342 = c;
      var G__20343 = d;
      var G__20344 = e;
      var G__20345 = f;
      var G__20346 = g;
      var G__20347 = h;
      var G__20348 = i;
      var G__20349 = j;
      var G__20350 = k;
      var G__20351 = l;
      var G__20352 = m;
      var G__20353 = n;
      var G__20354 = o;
      var G__20355 = p;
      var G__20356 = q;
      var G__20357 = r;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__20340, G__20341, G__20342, G__20343, G__20344, G__20345, G__20346, G__20347, G__20348, G__20349, G__20350, G__20351, G__20352, G__20353, G__20354, G__20355, G__20356, G__20357) : self__.dispatch_fn.call(null, G__20340, G__20341, G__20342, G__20343, G__20344, G__20345, G__20346, G__20347, G__20348, G__20349, G__20350, G__20351, G__20352, G__20353, G__20354, G__20355, G__20356, G__20357);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20358 = a;
    var G__20359 = b;
    var G__20360 = c;
    var G__20361 = d;
    var G__20362 = e;
    var G__20363 = f;
    var G__20364 = g;
    var G__20365 = h;
    var G__20366 = i;
    var G__20367 = j;
    var G__20368 = k;
    var G__20369 = l;
    var G__20370 = m;
    var G__20371 = n;
    var G__20372 = o;
    var G__20373 = p;
    var G__20374 = q;
    var G__20375 = r;
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__20358, G__20359, G__20360, G__20361, G__20362, G__20363, G__20364, G__20365, G__20366, G__20367, G__20368, G__20369, G__20370, G__20371, G__20372, G__20373, G__20374, G__20375) : target_fn.call(null, G__20358, G__20359, G__20360, G__20361, G__20362, G__20363, G__20364, G__20365, G__20366, G__20367, G__20368, G__20369, G__20370, G__20371, G__20372, G__20373, G__20374, G__20375);
  };
  var G__20874__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20376 = a;
      var G__20377 = b;
      var G__20378 = c;
      var G__20379 = d;
      var G__20380 = e;
      var G__20381 = f;
      var G__20382 = g;
      var G__20383 = h;
      var G__20384 = i;
      var G__20385 = j;
      var G__20386 = k;
      var G__20387 = l;
      var G__20388 = m;
      var G__20389 = n;
      var G__20390 = o;
      var G__20391 = p;
      var G__20392 = q;
      var G__20393 = r;
      var G__20394 = s;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__20376, G__20377, G__20378, G__20379, G__20380, G__20381, G__20382, G__20383, G__20384, G__20385, G__20386, G__20387, G__20388, G__20389, G__20390, G__20391, G__20392, G__20393, G__20394) : self__.dispatch_fn.call(null, G__20376, G__20377, G__20378, G__20379, G__20380, G__20381, G__20382, G__20383, G__20384, G__20385, G__20386, G__20387, G__20388, G__20389, G__20390, G__20391, G__20392, 
      G__20393, G__20394);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20395 = a;
    var G__20396 = b;
    var G__20397 = c;
    var G__20398 = d;
    var G__20399 = e;
    var G__20400 = f;
    var G__20401 = g;
    var G__20402 = h;
    var G__20403 = i;
    var G__20404 = j;
    var G__20405 = k;
    var G__20406 = l;
    var G__20407 = m;
    var G__20408 = n;
    var G__20409 = o;
    var G__20410 = p;
    var G__20411 = q;
    var G__20412 = r;
    var G__20413 = s;
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__20395, G__20396, G__20397, G__20398, G__20399, G__20400, G__20401, G__20402, G__20403, G__20404, G__20405, G__20406, G__20407, G__20408, G__20409, G__20410, G__20411, G__20412, G__20413) : target_fn.call(null, G__20395, G__20396, G__20397, G__20398, G__20399, G__20400, G__20401, G__20402, G__20403, G__20404, G__20405, G__20406, G__20407, G__20408, G__20409, G__20410, G__20411, G__20412, G__20413);
  };
  var G__20874__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20414 = a;
      var G__20415 = b;
      var G__20416 = c;
      var G__20417 = d;
      var G__20418 = e;
      var G__20419 = f;
      var G__20420 = g;
      var G__20421 = h;
      var G__20422 = i;
      var G__20423 = j;
      var G__20424 = k;
      var G__20425 = l;
      var G__20426 = m;
      var G__20427 = n;
      var G__20428 = o;
      var G__20429 = p;
      var G__20430 = q;
      var G__20431 = r;
      var G__20432 = s;
      var G__20433 = t;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__20414, G__20415, G__20416, G__20417, G__20418, G__20419, G__20420, G__20421, G__20422, G__20423, G__20424, G__20425, G__20426, G__20427, G__20428, G__20429, G__20430, G__20431, G__20432, G__20433) : self__.dispatch_fn.call(null, G__20414, G__20415, G__20416, G__20417, G__20418, G__20419, G__20420, G__20421, G__20422, G__20423, G__20424, G__20425, G__20426, G__20427, G__20428, G__20429, 
      G__20430, G__20431, G__20432, G__20433);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20434 = a;
    var G__20435 = b;
    var G__20436 = c;
    var G__20437 = d;
    var G__20438 = e;
    var G__20439 = f;
    var G__20440 = g;
    var G__20441 = h;
    var G__20442 = i;
    var G__20443 = j;
    var G__20444 = k;
    var G__20445 = l;
    var G__20446 = m;
    var G__20447 = n;
    var G__20448 = o;
    var G__20449 = p;
    var G__20450 = q;
    var G__20451 = r;
    var G__20452 = s;
    var G__20453 = t;
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__20434, G__20435, G__20436, G__20437, G__20438, G__20439, G__20440, G__20441, G__20442, G__20443, G__20444, G__20445, G__20446, G__20447, G__20448, G__20449, G__20450, G__20451, G__20452, G__20453) : target_fn.call(null, G__20434, G__20435, G__20436, G__20437, G__20438, G__20439, G__20440, G__20441, G__20442, G__20443, G__20444, G__20445, G__20446, G__20447, G__20448, G__20449, G__20450, G__20451, G__20452, 
    G__20453);
  };
  var G__20874__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__20874 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__20874__1.call(this, self__);
      case 2:
        return G__20874__2.call(this, self__, a);
      case 3:
        return G__20874__3.call(this, self__, a, b);
      case 4:
        return G__20874__4.call(this, self__, a, b, c);
      case 5:
        return G__20874__5.call(this, self__, a, b, c, d);
      case 6:
        return G__20874__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__20874__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__20874__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__20874__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__20874__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__20874__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__20874__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__20874__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__20874__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__20874__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__20874__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__20874__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__20874__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__20874__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__20874__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__20874__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__20874__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20874.cljs$core$IFn$_invoke$arity$1 = G__20874__1;
  G__20874.cljs$core$IFn$_invoke$arity$2 = G__20874__2;
  G__20874.cljs$core$IFn$_invoke$arity$3 = G__20874__3;
  G__20874.cljs$core$IFn$_invoke$arity$4 = G__20874__4;
  G__20874.cljs$core$IFn$_invoke$arity$5 = G__20874__5;
  G__20874.cljs$core$IFn$_invoke$arity$6 = G__20874__6;
  G__20874.cljs$core$IFn$_invoke$arity$7 = G__20874__7;
  G__20874.cljs$core$IFn$_invoke$arity$8 = G__20874__8;
  G__20874.cljs$core$IFn$_invoke$arity$9 = G__20874__9;
  G__20874.cljs$core$IFn$_invoke$arity$10 = G__20874__10;
  G__20874.cljs$core$IFn$_invoke$arity$11 = G__20874__11;
  G__20874.cljs$core$IFn$_invoke$arity$12 = G__20874__12;
  G__20874.cljs$core$IFn$_invoke$arity$13 = G__20874__13;
  G__20874.cljs$core$IFn$_invoke$arity$14 = G__20874__14;
  G__20874.cljs$core$IFn$_invoke$arity$15 = G__20874__15;
  G__20874.cljs$core$IFn$_invoke$arity$16 = G__20874__16;
  G__20874.cljs$core$IFn$_invoke$arity$17 = G__20874__17;
  G__20874.cljs$core$IFn$_invoke$arity$18 = G__20874__18;
  G__20874.cljs$core$IFn$_invoke$arity$19 = G__20874__19;
  G__20874.cljs$core$IFn$_invoke$arity$20 = G__20874__20;
  G__20874.cljs$core$IFn$_invoke$arity$21 = G__20874__21;
  G__20874.cljs$core$IFn$_invoke$arity$22 = G__20874__22;
  return G__20874;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args20026) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20026)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20454 = a;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__20454) : self__.dispatch_fn.call(null, G__20454);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20455 = a;
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__20455) : target_fn.call(null, G__20455);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20456 = a;
    var G__20457 = b;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__20456, G__20457) : self__.dispatch_fn.call(null, G__20456, G__20457);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20458 = a;
  var G__20459 = b;
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__20458, G__20459) : target_fn.call(null, G__20458, G__20459);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20460 = a;
    var G__20461 = b;
    var G__20462 = c;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__20460, G__20461, G__20462) : self__.dispatch_fn.call(null, G__20460, G__20461, G__20462);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20463 = a;
  var G__20464 = b;
  var G__20465 = c;
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__20463, G__20464, G__20465) : target_fn.call(null, G__20463, G__20464, G__20465);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20466 = a;
    var G__20467 = b;
    var G__20468 = c;
    var G__20469 = d;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__20466, G__20467, G__20468, G__20469) : self__.dispatch_fn.call(null, G__20466, G__20467, G__20468, G__20469);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20470 = a;
  var G__20471 = b;
  var G__20472 = c;
  var G__20473 = d;
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__20470, G__20471, G__20472, G__20473) : target_fn.call(null, G__20470, G__20471, G__20472, G__20473);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20474 = a;
    var G__20475 = b;
    var G__20476 = c;
    var G__20477 = d;
    var G__20478 = e;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__20474, G__20475, G__20476, G__20477, G__20478) : self__.dispatch_fn.call(null, G__20474, G__20475, G__20476, G__20477, G__20478);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20479 = a;
  var G__20480 = b;
  var G__20481 = c;
  var G__20482 = d;
  var G__20483 = e;
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__20479, G__20480, G__20481, G__20482, G__20483) : target_fn.call(null, G__20479, G__20480, G__20481, G__20482, G__20483);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20484 = a;
    var G__20485 = b;
    var G__20486 = c;
    var G__20487 = d;
    var G__20488 = e;
    var G__20489 = f;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__20484, G__20485, G__20486, G__20487, G__20488, G__20489) : self__.dispatch_fn.call(null, G__20484, G__20485, G__20486, G__20487, G__20488, G__20489);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20490 = a;
  var G__20491 = b;
  var G__20492 = c;
  var G__20493 = d;
  var G__20494 = e;
  var G__20495 = f;
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__20490, G__20491, G__20492, G__20493, G__20494, G__20495) : target_fn.call(null, G__20490, G__20491, G__20492, G__20493, G__20494, G__20495);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20496 = a;
    var G__20497 = b;
    var G__20498 = c;
    var G__20499 = d;
    var G__20500 = e;
    var G__20501 = f;
    var G__20502 = g;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__20496, G__20497, G__20498, G__20499, G__20500, G__20501, G__20502) : self__.dispatch_fn.call(null, G__20496, G__20497, G__20498, G__20499, G__20500, G__20501, G__20502);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20503 = a;
  var G__20504 = b;
  var G__20505 = c;
  var G__20506 = d;
  var G__20507 = e;
  var G__20508 = f;
  var G__20509 = g;
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__20503, G__20504, G__20505, G__20506, G__20507, G__20508, G__20509) : target_fn.call(null, G__20503, G__20504, G__20505, G__20506, G__20507, G__20508, G__20509);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20510 = a;
    var G__20511 = b;
    var G__20512 = c;
    var G__20513 = d;
    var G__20514 = e;
    var G__20515 = f;
    var G__20516 = g;
    var G__20517 = h;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__20510, G__20511, G__20512, G__20513, G__20514, G__20515, G__20516, G__20517) : self__.dispatch_fn.call(null, G__20510, G__20511, G__20512, G__20513, G__20514, G__20515, G__20516, G__20517);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20518 = a;
  var G__20519 = b;
  var G__20520 = c;
  var G__20521 = d;
  var G__20522 = e;
  var G__20523 = f;
  var G__20524 = g;
  var G__20525 = h;
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__20518, G__20519, G__20520, G__20521, G__20522, G__20523, G__20524, G__20525) : target_fn.call(null, G__20518, G__20519, G__20520, G__20521, G__20522, G__20523, G__20524, G__20525);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20526 = a;
    var G__20527 = b;
    var G__20528 = c;
    var G__20529 = d;
    var G__20530 = e;
    var G__20531 = f;
    var G__20532 = g;
    var G__20533 = h;
    var G__20534 = i;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__20526, G__20527, G__20528, G__20529, G__20530, G__20531, G__20532, G__20533, G__20534) : self__.dispatch_fn.call(null, G__20526, G__20527, G__20528, G__20529, G__20530, G__20531, G__20532, G__20533, G__20534);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20535 = a;
  var G__20536 = b;
  var G__20537 = c;
  var G__20538 = d;
  var G__20539 = e;
  var G__20540 = f;
  var G__20541 = g;
  var G__20542 = h;
  var G__20543 = i;
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__20535, G__20536, G__20537, G__20538, G__20539, G__20540, G__20541, G__20542, G__20543) : target_fn.call(null, G__20535, G__20536, G__20537, G__20538, G__20539, G__20540, G__20541, G__20542, G__20543);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20544 = a;
    var G__20545 = b;
    var G__20546 = c;
    var G__20547 = d;
    var G__20548 = e;
    var G__20549 = f;
    var G__20550 = g;
    var G__20551 = h;
    var G__20552 = i;
    var G__20553 = j;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__20544, G__20545, G__20546, G__20547, G__20548, G__20549, G__20550, G__20551, G__20552, G__20553) : self__.dispatch_fn.call(null, G__20544, G__20545, G__20546, G__20547, G__20548, G__20549, G__20550, G__20551, G__20552, G__20553);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20554 = a;
  var G__20555 = b;
  var G__20556 = c;
  var G__20557 = d;
  var G__20558 = e;
  var G__20559 = f;
  var G__20560 = g;
  var G__20561 = h;
  var G__20562 = i;
  var G__20563 = j;
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__20554, G__20555, G__20556, G__20557, G__20558, G__20559, G__20560, G__20561, G__20562, G__20563) : target_fn.call(null, G__20554, G__20555, G__20556, G__20557, G__20558, G__20559, G__20560, G__20561, G__20562, G__20563);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20564 = a;
    var G__20565 = b;
    var G__20566 = c;
    var G__20567 = d;
    var G__20568 = e;
    var G__20569 = f;
    var G__20570 = g;
    var G__20571 = h;
    var G__20572 = i;
    var G__20573 = j;
    var G__20574 = k;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__20564, G__20565, G__20566, G__20567, G__20568, G__20569, G__20570, G__20571, G__20572, G__20573, G__20574) : self__.dispatch_fn.call(null, G__20564, G__20565, G__20566, G__20567, G__20568, G__20569, G__20570, G__20571, G__20572, G__20573, G__20574);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20575 = a;
  var G__20576 = b;
  var G__20577 = c;
  var G__20578 = d;
  var G__20579 = e;
  var G__20580 = f;
  var G__20581 = g;
  var G__20582 = h;
  var G__20583 = i;
  var G__20584 = j;
  var G__20585 = k;
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__20575, G__20576, G__20577, G__20578, G__20579, G__20580, G__20581, G__20582, G__20583, G__20584, G__20585) : target_fn.call(null, G__20575, G__20576, G__20577, G__20578, G__20579, G__20580, G__20581, G__20582, G__20583, G__20584, G__20585);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20586 = a;
    var G__20587 = b;
    var G__20588 = c;
    var G__20589 = d;
    var G__20590 = e;
    var G__20591 = f;
    var G__20592 = g;
    var G__20593 = h;
    var G__20594 = i;
    var G__20595 = j;
    var G__20596 = k;
    var G__20597 = l;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__20586, G__20587, G__20588, G__20589, G__20590, G__20591, G__20592, G__20593, G__20594, G__20595, G__20596, G__20597) : self__.dispatch_fn.call(null, G__20586, G__20587, G__20588, G__20589, G__20590, G__20591, G__20592, G__20593, G__20594, G__20595, G__20596, G__20597);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20598 = a;
  var G__20599 = b;
  var G__20600 = c;
  var G__20601 = d;
  var G__20602 = e;
  var G__20603 = f;
  var G__20604 = g;
  var G__20605 = h;
  var G__20606 = i;
  var G__20607 = j;
  var G__20608 = k;
  var G__20609 = l;
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__20598, G__20599, G__20600, G__20601, G__20602, G__20603, G__20604, G__20605, G__20606, G__20607, G__20608, G__20609) : target_fn.call(null, G__20598, G__20599, G__20600, G__20601, G__20602, G__20603, G__20604, G__20605, G__20606, G__20607, G__20608, G__20609);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20610 = a;
    var G__20611 = b;
    var G__20612 = c;
    var G__20613 = d;
    var G__20614 = e;
    var G__20615 = f;
    var G__20616 = g;
    var G__20617 = h;
    var G__20618 = i;
    var G__20619 = j;
    var G__20620 = k;
    var G__20621 = l;
    var G__20622 = m;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__20610, G__20611, G__20612, G__20613, G__20614, G__20615, G__20616, G__20617, G__20618, G__20619, G__20620, G__20621, G__20622) : self__.dispatch_fn.call(null, G__20610, G__20611, G__20612, G__20613, G__20614, G__20615, G__20616, G__20617, G__20618, G__20619, G__20620, G__20621, G__20622);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20623 = a;
  var G__20624 = b;
  var G__20625 = c;
  var G__20626 = d;
  var G__20627 = e;
  var G__20628 = f;
  var G__20629 = g;
  var G__20630 = h;
  var G__20631 = i;
  var G__20632 = j;
  var G__20633 = k;
  var G__20634 = l;
  var G__20635 = m;
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__20623, G__20624, G__20625, G__20626, G__20627, G__20628, G__20629, G__20630, G__20631, G__20632, G__20633, G__20634, G__20635) : target_fn.call(null, G__20623, G__20624, G__20625, G__20626, G__20627, G__20628, G__20629, G__20630, G__20631, G__20632, G__20633, G__20634, G__20635);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20636 = a;
    var G__20637 = b;
    var G__20638 = c;
    var G__20639 = d;
    var G__20640 = e;
    var G__20641 = f;
    var G__20642 = g;
    var G__20643 = h;
    var G__20644 = i;
    var G__20645 = j;
    var G__20646 = k;
    var G__20647 = l;
    var G__20648 = m;
    var G__20649 = n;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__20636, G__20637, G__20638, G__20639, G__20640, G__20641, G__20642, G__20643, G__20644, G__20645, G__20646, G__20647, G__20648, G__20649) : self__.dispatch_fn.call(null, G__20636, G__20637, G__20638, G__20639, G__20640, G__20641, G__20642, G__20643, G__20644, G__20645, G__20646, G__20647, G__20648, G__20649);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20650 = a;
  var G__20651 = b;
  var G__20652 = c;
  var G__20653 = d;
  var G__20654 = e;
  var G__20655 = f;
  var G__20656 = g;
  var G__20657 = h;
  var G__20658 = i;
  var G__20659 = j;
  var G__20660 = k;
  var G__20661 = l;
  var G__20662 = m;
  var G__20663 = n;
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__20650, G__20651, G__20652, G__20653, G__20654, G__20655, G__20656, G__20657, G__20658, G__20659, G__20660, G__20661, G__20662, G__20663) : target_fn.call(null, G__20650, G__20651, G__20652, G__20653, G__20654, G__20655, G__20656, G__20657, G__20658, G__20659, G__20660, G__20661, G__20662, G__20663);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20664 = a;
    var G__20665 = b;
    var G__20666 = c;
    var G__20667 = d;
    var G__20668 = e;
    var G__20669 = f;
    var G__20670 = g;
    var G__20671 = h;
    var G__20672 = i;
    var G__20673 = j;
    var G__20674 = k;
    var G__20675 = l;
    var G__20676 = m;
    var G__20677 = n;
    var G__20678 = o;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__20664, G__20665, G__20666, G__20667, G__20668, G__20669, G__20670, G__20671, G__20672, G__20673, G__20674, G__20675, G__20676, G__20677, G__20678) : self__.dispatch_fn.call(null, G__20664, G__20665, G__20666, G__20667, G__20668, G__20669, G__20670, G__20671, G__20672, G__20673, G__20674, G__20675, G__20676, G__20677, G__20678);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20679 = a;
  var G__20680 = b;
  var G__20681 = c;
  var G__20682 = d;
  var G__20683 = e;
  var G__20684 = f;
  var G__20685 = g;
  var G__20686 = h;
  var G__20687 = i;
  var G__20688 = j;
  var G__20689 = k;
  var G__20690 = l;
  var G__20691 = m;
  var G__20692 = n;
  var G__20693 = o;
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__20679, G__20680, G__20681, G__20682, G__20683, G__20684, G__20685, G__20686, G__20687, G__20688, G__20689, G__20690, G__20691, G__20692, G__20693) : target_fn.call(null, G__20679, G__20680, G__20681, G__20682, G__20683, G__20684, G__20685, G__20686, G__20687, G__20688, G__20689, G__20690, G__20691, G__20692, G__20693);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20694 = a;
    var G__20695 = b;
    var G__20696 = c;
    var G__20697 = d;
    var G__20698 = e;
    var G__20699 = f;
    var G__20700 = g;
    var G__20701 = h;
    var G__20702 = i;
    var G__20703 = j;
    var G__20704 = k;
    var G__20705 = l;
    var G__20706 = m;
    var G__20707 = n;
    var G__20708 = o;
    var G__20709 = p;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__20694, G__20695, G__20696, G__20697, G__20698, G__20699, G__20700, G__20701, G__20702, G__20703, G__20704, G__20705, G__20706, G__20707, G__20708, G__20709) : self__.dispatch_fn.call(null, G__20694, G__20695, G__20696, G__20697, G__20698, G__20699, G__20700, G__20701, G__20702, G__20703, G__20704, G__20705, G__20706, G__20707, G__20708, G__20709);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20710 = a;
  var G__20711 = b;
  var G__20712 = c;
  var G__20713 = d;
  var G__20714 = e;
  var G__20715 = f;
  var G__20716 = g;
  var G__20717 = h;
  var G__20718 = i;
  var G__20719 = j;
  var G__20720 = k;
  var G__20721 = l;
  var G__20722 = m;
  var G__20723 = n;
  var G__20724 = o;
  var G__20725 = p;
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__20710, G__20711, G__20712, G__20713, G__20714, G__20715, G__20716, G__20717, G__20718, G__20719, G__20720, G__20721, G__20722, G__20723, G__20724, G__20725) : target_fn.call(null, G__20710, G__20711, G__20712, G__20713, G__20714, G__20715, G__20716, G__20717, G__20718, G__20719, G__20720, G__20721, G__20722, G__20723, G__20724, G__20725);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20726 = a;
    var G__20727 = b;
    var G__20728 = c;
    var G__20729 = d;
    var G__20730 = e;
    var G__20731 = f;
    var G__20732 = g;
    var G__20733 = h;
    var G__20734 = i;
    var G__20735 = j;
    var G__20736 = k;
    var G__20737 = l;
    var G__20738 = m;
    var G__20739 = n;
    var G__20740 = o;
    var G__20741 = p;
    var G__20742 = q;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__20726, G__20727, G__20728, G__20729, G__20730, G__20731, G__20732, G__20733, G__20734, G__20735, G__20736, G__20737, G__20738, G__20739, G__20740, G__20741, G__20742) : self__.dispatch_fn.call(null, G__20726, G__20727, G__20728, G__20729, G__20730, G__20731, G__20732, G__20733, G__20734, G__20735, G__20736, G__20737, G__20738, G__20739, G__20740, G__20741, G__20742);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20743 = a;
  var G__20744 = b;
  var G__20745 = c;
  var G__20746 = d;
  var G__20747 = e;
  var G__20748 = f;
  var G__20749 = g;
  var G__20750 = h;
  var G__20751 = i;
  var G__20752 = j;
  var G__20753 = k;
  var G__20754 = l;
  var G__20755 = m;
  var G__20756 = n;
  var G__20757 = o;
  var G__20758 = p;
  var G__20759 = q;
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__20743, G__20744, G__20745, G__20746, G__20747, G__20748, G__20749, G__20750, G__20751, G__20752, G__20753, G__20754, G__20755, G__20756, G__20757, G__20758, G__20759) : target_fn.call(null, G__20743, G__20744, G__20745, G__20746, G__20747, G__20748, G__20749, G__20750, G__20751, G__20752, G__20753, G__20754, G__20755, G__20756, G__20757, G__20758, G__20759);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20760 = a;
    var G__20761 = b;
    var G__20762 = c;
    var G__20763 = d;
    var G__20764 = e;
    var G__20765 = f;
    var G__20766 = g;
    var G__20767 = h;
    var G__20768 = i;
    var G__20769 = j;
    var G__20770 = k;
    var G__20771 = l;
    var G__20772 = m;
    var G__20773 = n;
    var G__20774 = o;
    var G__20775 = p;
    var G__20776 = q;
    var G__20777 = r;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__20760, G__20761, G__20762, G__20763, G__20764, G__20765, G__20766, G__20767, G__20768, G__20769, G__20770, G__20771, G__20772, G__20773, G__20774, G__20775, G__20776, G__20777) : self__.dispatch_fn.call(null, G__20760, G__20761, G__20762, G__20763, G__20764, G__20765, G__20766, G__20767, G__20768, G__20769, G__20770, G__20771, G__20772, G__20773, G__20774, G__20775, G__20776, G__20777);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20778 = a;
  var G__20779 = b;
  var G__20780 = c;
  var G__20781 = d;
  var G__20782 = e;
  var G__20783 = f;
  var G__20784 = g;
  var G__20785 = h;
  var G__20786 = i;
  var G__20787 = j;
  var G__20788 = k;
  var G__20789 = l;
  var G__20790 = m;
  var G__20791 = n;
  var G__20792 = o;
  var G__20793 = p;
  var G__20794 = q;
  var G__20795 = r;
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__20778, G__20779, G__20780, G__20781, G__20782, G__20783, G__20784, G__20785, G__20786, G__20787, G__20788, G__20789, G__20790, G__20791, G__20792, G__20793, G__20794, G__20795) : target_fn.call(null, G__20778, G__20779, G__20780, G__20781, G__20782, G__20783, G__20784, G__20785, G__20786, G__20787, G__20788, G__20789, G__20790, G__20791, G__20792, G__20793, G__20794, G__20795);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20796 = a;
    var G__20797 = b;
    var G__20798 = c;
    var G__20799 = d;
    var G__20800 = e;
    var G__20801 = f;
    var G__20802 = g;
    var G__20803 = h;
    var G__20804 = i;
    var G__20805 = j;
    var G__20806 = k;
    var G__20807 = l;
    var G__20808 = m;
    var G__20809 = n;
    var G__20810 = o;
    var G__20811 = p;
    var G__20812 = q;
    var G__20813 = r;
    var G__20814 = s;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__20796, G__20797, G__20798, G__20799, G__20800, G__20801, G__20802, G__20803, G__20804, G__20805, G__20806, G__20807, G__20808, G__20809, G__20810, G__20811, G__20812, G__20813, G__20814) : self__.dispatch_fn.call(null, G__20796, G__20797, G__20798, G__20799, G__20800, G__20801, G__20802, G__20803, G__20804, G__20805, G__20806, G__20807, G__20808, G__20809, G__20810, G__20811, G__20812, 
    G__20813, G__20814);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20815 = a;
  var G__20816 = b;
  var G__20817 = c;
  var G__20818 = d;
  var G__20819 = e;
  var G__20820 = f;
  var G__20821 = g;
  var G__20822 = h;
  var G__20823 = i;
  var G__20824 = j;
  var G__20825 = k;
  var G__20826 = l;
  var G__20827 = m;
  var G__20828 = n;
  var G__20829 = o;
  var G__20830 = p;
  var G__20831 = q;
  var G__20832 = r;
  var G__20833 = s;
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__20815, G__20816, G__20817, G__20818, G__20819, G__20820, G__20821, G__20822, G__20823, G__20824, G__20825, G__20826, G__20827, G__20828, G__20829, G__20830, G__20831, G__20832, G__20833) : target_fn.call(null, G__20815, G__20816, G__20817, G__20818, G__20819, G__20820, G__20821, G__20822, G__20823, G__20824, G__20825, G__20826, G__20827, G__20828, G__20829, G__20830, G__20831, G__20832, G__20833);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20834 = a;
    var G__20835 = b;
    var G__20836 = c;
    var G__20837 = d;
    var G__20838 = e;
    var G__20839 = f;
    var G__20840 = g;
    var G__20841 = h;
    var G__20842 = i;
    var G__20843 = j;
    var G__20844 = k;
    var G__20845 = l;
    var G__20846 = m;
    var G__20847 = n;
    var G__20848 = o;
    var G__20849 = p;
    var G__20850 = q;
    var G__20851 = r;
    var G__20852 = s;
    var G__20853 = t;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__20834, G__20835, G__20836, G__20837, G__20838, G__20839, G__20840, G__20841, G__20842, G__20843, G__20844, G__20845, G__20846, G__20847, G__20848, G__20849, G__20850, G__20851, G__20852, G__20853) : self__.dispatch_fn.call(null, G__20834, G__20835, G__20836, G__20837, G__20838, G__20839, G__20840, G__20841, G__20842, G__20843, G__20844, G__20845, G__20846, G__20847, G__20848, G__20849, 
    G__20850, G__20851, G__20852, G__20853);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20854 = a;
  var G__20855 = b;
  var G__20856 = c;
  var G__20857 = d;
  var G__20858 = e;
  var G__20859 = f;
  var G__20860 = g;
  var G__20861 = h;
  var G__20862 = i;
  var G__20863 = j;
  var G__20864 = k;
  var G__20865 = l;
  var G__20866 = m;
  var G__20867 = n;
  var G__20868 = o;
  var G__20869 = p;
  var G__20870 = q;
  var G__20871 = r;
  var G__20872 = s;
  var G__20873 = t;
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__20854, G__20855, G__20856, G__20857, G__20858, G__20859, G__20860, G__20861, G__20862, G__20863, G__20864, G__20865, G__20866, G__20867, G__20868, G__20869, G__20870, G__20871, G__20872, G__20873) : target_fn.call(null, G__20854, G__20855, G__20856, G__20857, G__20858, G__20859, G__20860, G__20861, G__20862, G__20863, G__20864, G__20865, G__20866, G__20867, G__20868, G__20869, G__20870, G__20871, G__20872, 
  G__20873);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__20875 = self__.uuid;
  var G__20876 = other.uuid;
  return goog.array.defaultCompare(G__20875, G__20876);
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__20877 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([this$__$1], 0));
  return goog.string.hashCode(G__20877);
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write(writer__4702__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#ExceptionInfo{:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error;
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function() {
  var cljs$core$ex_info = null;
  var cljs$core$ex_info__2 = function(msg, data) {
    return cljs$core$ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
  };
  var cljs$core$ex_info__3 = function(msg, data, cause) {
    return new cljs.core.ExceptionInfo(msg, data, cause);
  };
  cljs$core$ex_info = function(msg, data, cause) {
    switch(arguments.length) {
      case 2:
        return cljs$core$ex_info__2.call(this, msg, data);
      case 3:
        return cljs$core$ex_info__3.call(this, msg, data, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$ex_info.cljs$core$IFn$_invoke$arity$2 = cljs$core$ex_info__2;
  cljs$core$ex_info.cljs$core$IFn$_invoke$arity$3 = cljs$core$ex_info__3;
  return cljs$core$ex_info;
}();
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(function() {
      var G__20885 = x;
      var G__20886 = y;
      return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__20885, G__20886) : pred.call(null, G__20885, G__20886);
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(function() {
        var G__20887 = y;
        var G__20888 = x;
        return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__20887, G__20888) : pred.call(null, G__20887, G__20888);
      }())) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
goog.provide("com.cognitect.transit.util");
goog.require("goog.object");
goog.scope(function() {
  var util = com.cognitect.transit.util, gobject = goog.object;
  if (typeof Object.keys != "undefined") {
    util.objectKeys = function(obj) {
      return Object.keys(obj);
    };
  } else {
    util.objectKeys = function(obj) {
      return gobject.getKeys(obj);
    };
  }
  if (typeof Array.isArray != "undefined") {
    util.isArray = function(obj) {
      return Array.isArray(obj);
    };
  } else {
    util.isArray = function(obj) {
      return goog.typeOf(obj) === "array";
    };
  }
  util.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x3d";
  util.randInt = function(ub) {
    return Math.round(Math.random() * ub);
  };
  util.randHex = function() {
    return util.randInt(15).toString(16);
  };
  util.randomUUID = function() {
    var rhex = (8 | 3 & util.randInt(14)).toString(16), ret = util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + "4" + util.randHex() + util.randHex() + util.randHex() + "-" + rhex + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + 
    util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex();
    return ret;
  };
  util.btoa = function(input) {
    if (typeof btoa != "undefined") {
      return btoa(input);
    } else {
      var str = String(input);
      for (var block, charCode, idx = 0, map = util.chars, output = "";str.charAt(idx | 0) || (map = "\x3d", idx % 1);output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
        charCode = str.charCodeAt(idx += 3 / 4);
        if (charCode > 255) {
          throw new Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
        }
        block = block << 8 | charCode;
      }
      return output;
    }
  };
  util.atob = function(input) {
    if (typeof atob != "undefined") {
      return atob(input);
    } else {
      var str = String(input).replace(/=+$/, "");
      if (str.length % 4 == 1) {
        throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
      }
      for (var bc = 0, bs, buffer, idx = 0, output = "";buffer = str.charAt(idx++);~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
        buffer = util.chars.indexOf(buffer);
      }
      return output;
    }
  };
  util.Uint8ToBase64 = function(u8Arr) {
    var CHUNK_SIZE = 32768, index = 0, length = u8Arr.length, result = "", slice = null;
    while (index < length) {
      slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));
      result += String.fromCharCode.apply(null, slice);
      index += CHUNK_SIZE;
    }
    return util.btoa(result);
  };
  util.Base64ToUint8 = function(base64) {
    var binary_string = util.atob(base64), len = binary_string.length, bytes = new Uint8Array(len);
    for (var i = 0;i < len;i++) {
      var ascii = binary_string.charCodeAt(i);
      bytes[i] = ascii;
    }
    return bytes;
  };
});
goog.provide("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.util");
goog.scope(function() {
  var eq = com.cognitect.transit.eq, util = com.cognitect.transit.util;
  eq.hashCodeProperty = "transit$hashCode$";
  eq.hashCodeCounter = 1;
  eq.equals = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      if (x === y) {
        return true;
      } else {
        if (typeof x === "object") {
          if (util.isArray(x)) {
            if (util.isArray(y)) {
              if (x.length === y.length) {
                for (var i = 0;i < x.length;i++) {
                  if (!eq.equals(x[i], y[i])) {
                    return false;
                  }
                }
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          } else {
            if (x.com$cognitect$transit$equals) {
              return x.com$cognitect$transit$equals(y);
            } else {
              if (y != null && typeof y === "object") {
                if (y.com$cognitect$transit$equals) {
                  return y.com$cognitect$transit$equals(x);
                } else {
                  var xklen = 0, yklen = util.objectKeys(y).length;
                  for (var p in x) {
                    if (!x.hasOwnProperty(p)) {
                      continue;
                    }
                    xklen++;
                    if (!y.hasOwnProperty(p)) {
                      return false;
                    } else {
                      if (!eq.equals(x[p], y[p])) {
                        return false;
                      }
                    }
                  }
                  return xklen === yklen;
                }
              } else {
                return false;
              }
            }
          }
        } else {
          return false;
        }
      }
    }
  };
  eq.hashCombine = function(seed, hash) {
    return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
  };
  eq.stringCodeCache = {};
  eq.stringCodeCacheSize = 0;
  eq.STR_CACHE_MAX = 256;
  eq.hashString = function(str) {
    var cached = eq.stringCodeCache[str];
    if (cached != null) {
      return cached;
    }
    var code = 0;
    for (var i = 0;i < str.length;++i) {
      code = 31 * code + str.charCodeAt(i);
      code %= 4294967296;
    }
    eq.stringCodeCacheSize++;
    if (eq.stringCodeCacheSize >= eq.STR_CACHE_MAX) {
      eq.stringCodeCache = {};
      eq.stringCodeCacheSize = 1;
    }
    eq.stringCodeCache[str] = code;
    return code;
  };
  eq.hashMapLike = function(m) {
    var code = 0;
    if (m.forEach != null) {
      m.forEach(function(val, key, m) {
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      });
    } else {
      var keys = util.objectKeys(m);
      for (var i = 0;i < keys.length;i++) {
        var key = keys[i];
        var val = m[key];
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      }
    }
    return code;
  };
  eq.hashArrayLike = function(arr) {
    var code = 0;
    if (util.isArray(arr)) {
      for (var i = 0;i < arr.length;i++) {
        code = eq.hashCombine(code, eq.hashCode(arr[i]));
      }
    } else {
      if (arr.forEach) {
        arr.forEach(function(x, i) {
          code = eq.hashCombine(code, eq.hashCode(x));
        });
      }
    }
    return code;
  };
  eq.hashCode = function(x) {
    if (x == null) {
      return 0;
    } else {
      switch(typeof x) {
        case "number":
          return x;
          break;
        case "boolean":
          return x === true ? 1 : 0;
          break;
        case "string":
          return eq.hashString(x);
          break;
        case "function":
          var code = x[eq.hashCodeProperty];
          if (code) {
            return code;
          } else {
            code = eq.hashCodeCounter;
            if (typeof Object.defineProperty != "undefined") {
              Object.defineProperty(x, eq.hashCodeProperty, {value:code, enumerable:false});
            } else {
              x[eq.hashCodeProperty] = code;
            }
            eq.hashCodeCounter++;
            return code;
          }
          break;
        default:
          if (x instanceof Date) {
            return x.valueOf();
          } else {
            if (util.isArray(x)) {
              return eq.hashArrayLike(x);
            }
          }
          if (x.com$cognitect$transit$hashCode) {
            return x.com$cognitect$transit$hashCode();
          } else {
            return eq.hashMapLike(x);
          }
          break;
      }
    }
  };
  eq.extendToEQ = function(obj, opts) {
    obj.com$cognitect$transit$hashCode = opts["hashCode"];
    obj.com$cognitect$transit$equals = opts["equals"];
    return obj;
  };
});
goog.provide("goog.math.Long");
goog.math.Long = function(low, high) {
  this.low_ = low | 0;
  this.high_ = high | 0;
};
goog.math.Long.IntCache_ = {};
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Long.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }
  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
};
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Long.ZERO;
  } else {
    if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
        return goog.math.Long.MAX_VALUE;
      } else {
        if (value < 0) {
          return goog.math.Long.fromNumber(-value).negate();
        } else {
          return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
        }
      }
    }
  }
};
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Long.ZERO;
  for (var i = 0;i < str.length;i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
goog.math.Long.ZERO = goog.math.Long.fromInt(0);
goog.math.Long.ONE = goog.math.Long.fromInt(1);
goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
goog.math.Long.MAX_VALUE = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 2147483648 | 0);
goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
};
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  }
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31;bit > 0;bit--) {
      if ((val & 1 << bit) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};
goog.math.Long.prototype.isOdd = function() {
  return(this.low_ & 1) == 1;
};
goog.math.Long.prototype.equals = function(other) {
  return this.high_ == other.high_ && this.low_ == other.low_;
};
goog.math.Long.prototype.notEquals = function(other) {
  return this.high_ != other.high_ || this.low_ != other.low_;
};
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }
  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return-1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }
  if (this.subtract(other).isNegative()) {
    return-1;
  } else {
    return 1;
  }
};
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return goog.math.Long.MIN_VALUE;
  } else {
    return this.not().add(goog.math.Long.ONE);
  }
};
goog.math.Long.prototype.add = function(other) {
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.ZERO;
  } else {
    if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Long.TWO_PWR_24_) && other.lessThan(goog.math.Long.TWO_PWR_24_)) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error("division by zero");
  } else {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    if (other.equals(goog.math.Long.ONE) || other.equals(goog.math.Long.NEG_ONE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    }
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
  }
  var res = goog.math.Long.ZERO;
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.ONE;
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
};
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
};
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
};
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
    } else {
      return goog.math.Long.fromBits(0, low << numBits - 32);
    }
  }
};
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
    } else {
      return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
    }
  }
};
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
    } else {
      if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> numBits - 32, 0);
      }
    }
  }
};
goog.provide("com.cognitect.transit.types");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
goog.scope(function() {
  var types = com.cognitect.transit.types, util = com.cognitect.transit.util, eq = com.cognitect.transit.eq, Long = goog.math.Long;
  types.TaggedValue = function(tag, rep) {
    this.tag = tag;
    this.rep = rep;
    this.hashCode = -1;
  };
  types.TaggedValue.prototype.toString = function() {
    return "[TaggedValue: " + this.tag + ", " + this.rep + "]";
  };
  types.TaggedValue.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.TaggedValue.prototype["equiv"] = types.TaggedValue.prototype.equiv;
  types.TaggedValue.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TaggedValue) {
      return this.tag === other.tag && eq.equals(this.rep, other.rep);
    } else {
      return false;
    }
  };
  types.TaggedValue.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCombine(eq.hashCode(this.tag), eq.hashCode(this.rep));
    }
    return this.hashCode;
  };
  types.taggedValue = function(tag, rep) {
    return new types.TaggedValue(tag, rep);
  };
  types.isTaggedValue = function(x) {
    return x instanceof types.TaggedValue;
  };
  types.nullValue = function() {
    return null;
  };
  types.boolValue = function(s) {
    return s === "t";
  };
  types.MAX_INT = Long.fromString("9007199254740992");
  types.MIN_INT = Long.fromString("-9007199254740992");
  types.intValue = function(s) {
    if (typeof s === "number") {
      return s;
    } else {
      if (s instanceof Long) {
        return s;
      } else {
        var n = Long.fromString(s, 10);
        if (n.greaterThan(types.MAX_INT) || n.lessThan(types.MIN_INT)) {
          return n;
        } else {
          return n.toNumber();
        }
      }
    }
  };
  Long.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  Long.prototype["equiv"] = Long.prototype.equiv;
  Long.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof Long && this.equals(other);
  };
  Long.prototype.com$cognitect$transit$hashCode = function() {
    return this.toInt();
  };
  types.isInteger = function(x) {
    if (x instanceof Long) {
      return true;
    } else {
      return typeof x === "number" && !isNaN(x) && !(x === Infinity) && parseFloat(x) === parseInt(x);
    }
  };
  types.floatValue = function(s) {
    return parseFloat(s);
  };
  types.bigInteger = function(s) {
    return types.taggedValue("n", s);
  };
  types.isBigInteger = function(x) {
    return x instanceof types.TaggedValue && x.tag === "n";
  };
  types.bigDecimalValue = function(s) {
    return types.taggedValue("f", s);
  };
  types.isBigDecimal = function(x) {
    return x instanceof types.TaggedValue && x.tag === "f";
  };
  types.charValue = function(s) {
    return s;
  };
  types.Keyword = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Keyword.prototype.toString = function() {
    return ":" + this.name;
  };
  types.Keyword.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Keyword.prototype["equiv"] = types.Keyword.prototype.equiv;
  types.Keyword.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Keyword && this.name == other.name;
  };
  types.Keyword.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.keyword = function(s) {
    return new types.Keyword(s);
  };
  types.isKeyword = function(x) {
    return x instanceof types.Keyword;
  };
  types.Symbol = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Symbol.prototype.toString = function() {
    return "[Symbol: " + this.name + "]";
  };
  types.Symbol.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Symbol.prototype["equiv"] = types.Symbol.prototype.equiv;
  types.Symbol.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Symbol && this.name == other.name;
  };
  types.Symbol.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.symbol = function(s) {
    return new types.Symbol(s);
  };
  types.isSymbol = function(x) {
    return x instanceof types.Symbol;
  };
  types.hexFor = function(aLong, sidx, eidx) {
    var ret = "", eidx = eidx || sidx + 1;
    for (var i = sidx, shift = (7 - i) * 8, mask = Long.fromInt(255).shiftLeft(shift);i < eidx;i++, shift -= 8, mask = mask.shiftRightUnsigned(8)) {
      var s = aLong.and(mask).shiftRightUnsigned(shift).toString(16);
      if (s.length == 1) {
        s = "0" + s;
      }
      ret += s;
    }
    return ret;
  };
  types.UUID = function(high, low) {
    this.high = high;
    this.low = low;
    this.hashCode = -1;
  };
  types.UUID.prototype.getLeastSignificantBits = function() {
    return this.low;
  };
  types.UUID.prototype.getMostSignificantBits = function() {
    return this.high;
  };
  types.UUID.prototype.toString = function(s) {
    var s = "", hi64 = this.high, lo64 = this.low;
    s += types.hexFor(hi64, 0, 4) + "-";
    s += types.hexFor(hi64, 4, 6) + "-";
    s += types.hexFor(hi64, 6, 8) + "-";
    s += types.hexFor(lo64, 0, 2) + "-";
    s += types.hexFor(lo64, 2, 8);
    return s;
  };
  types.UUID.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.UUID.prototype["equiv"] = types.UUID.prototype.equiv;
  types.UUID.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.UUID && this.high.equals(other.high) && this.low.equals(other.low);
  };
  types.UUID.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.toString());
    }
    return this.hashCode;
  };
  types.UUIDfromString = function uuidFromString(s) {
    var s = s.replace(/-/g, ""), hi64 = null, lo64 = null, hi32 = 0, lo32 = 0, off = 24, i = 0;
    for (hi32 = 0, i = 0, off = 24;i < 8;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 8, off = 24;i < 16;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    hi64 = Long.fromBits(lo32, hi32);
    for (hi32 = 0, i = 16, off = 24;i < 24;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 24, off = 24;i < 32;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    lo64 = Long.fromBits(lo32, hi32);
    return new types.UUID(hi64, lo64);
  };
  types.uuid = function(s) {
    return types.UUIDfromString(s);
  };
  types.isUUID = function(x) {
    return x instanceof types.UUID;
  };
  types.date = function(s) {
    s = typeof s === "number" ? s : parseInt(s, 10);
    return new Date(s);
  };
  types.verboseDate = function(s) {
    return new Date(s);
  };
  Date.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof Date) {
      return this.valueOf() === other.valueOf();
    } else {
      return false;
    }
  };
  Date.prototype.com$cognitect$transit$hashCode = function() {
    return this.valueOf();
  };
  types.binary = function(str, decoder) {
    if ((!decoder || decoder.preferBuffers !== false) && typeof Buffer != "undefined") {
      return new Buffer(str, "base64");
    } else {
      if (typeof Uint8Array != "undefined") {
        return util.Base64ToUint8(str);
      } else {
        return types.taggedValue("b", str);
      }
    }
  };
  types.isBinary = function(x) {
    if (typeof Buffer != "undefined" && x instanceof Buffer) {
      return true;
    } else {
      if (typeof Uint8Array != "undefined" && x instanceof Uint8Array) {
        return true;
      } else {
        return x instanceof types.TaggedValue && x.tag === "b";
      }
    }
  };
  types.uri = function(s) {
    return types.taggedValue("r", s);
  };
  types.isURI = function(x) {
    return x instanceof types.TaggedValue && x.tag === "r";
  };
  types.KEYS = 0;
  types.VALUES = 1;
  types.ENTRIES = 2;
  types.TransitArrayMapIterator = function(entries, type) {
    this.entries = entries;
    this.type = type || types.KEYS;
    this.idx = 0;
  };
  types.TransitArrayMapIterator.prototype.next = function(map, type) {
    if (this.idx < this.entries.length) {
      var value = null;
      if (this.type === types.KEYS) {
        value = this.entries[this.idx];
      } else {
        if (this.type === types.VALUES) {
          value = this.entries[this.idx + 1];
        } else {
          value = [this.entries[this.idx], this.entries[this.idx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx += 2;
      return ret;
    } else {
      return{"value":null, "done":true};
    }
  };
  types.TransitArrayMapIterator.prototype["next"] = types.TransitArrayMapIterator.prototype.next;
  types.TransitMapIterator = function(map, type) {
    this.map = map;
    this.type = type || types.KEYS;
    this.keys = this.map.getKeys();
    this.idx = 0;
    this.bucket = null;
    this.bucketIdx = 0;
  };
  types.TransitMapIterator.prototype.next = function() {
    if (this.idx < this.map.size) {
      if (this.bucket == null || !(this.bucketIdx < this.bucket.length)) {
        this.bucket = this.map.map[this.keys[this.idx]];
        this.bucketIdx = 0;
      }
      var value = null;
      if (this.type === types.KEYS) {
        value = this.bucket[this.bucketIdx];
      } else {
        if (this.type === types.VALUES) {
          value = this.bucket[this.bucketIdx + 1];
        } else {
          value = [this.bucket[this.bucketIdx], this.bucket[this.bucketIdx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx++;
      this.bucketIdx += 2;
      return ret;
    } else {
      return{"value":null, "done":true};
    }
  };
  types.TransitMapIterator.prototype["next"] = types.TransitMapIterator.prototype.next;
  types.mapEquals = function(me, you) {
    if ((you instanceof types.TransitMap || you instanceof types.TransitArrayMap) && me.size === you.size) {
      for (var code in me.map) {
        var bucket = me.map[code];
        for (var j = 0;j < bucket.length;j += 2) {
          if (!eq.equals(bucket[j + 1], you.get(bucket[j]))) {
            return false;
          }
        }
      }
      return true;
    } else {
      if (you != null && typeof you === "object") {
        var ks = util.objectKeys(you), kslen = ks.length;
        if (me.size === kslen) {
          for (var i = 0;i < kslen;i++) {
            var k = ks[i];
            if (!me.has(k) || !eq.equals(you[k], me.get(k))) {
              return false;
            }
          }
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  };
  types.SMALL_ARRAY_MAP_THRESHOLD = 8;
  types.ARRAY_MAP_THRESHOLD = 32;
  types.ARRAY_MAP_ACCESS_THRESHOLD = 32;
  types.TransitArrayMap = function(entries) {
    this._entries = entries;
    this.backingMap = null;
    this.hashCode = -1;
    this.size = entries.length / 2;
    this.accesses = 0;
  };
  types.TransitArrayMap.prototype.toString = function() {
    return "[TransitArrayMap]";
  };
  types.TransitArrayMap.prototype.convert = function() {
    if (this.backingMap) {
      throw Error("Invalid operation, already converted");
    }
    if (this.size < types.SMALL_ARRAY_MAP_THRESHOLD) {
      return false;
    }
    this.accesses++;
    if (this.accesses > types.ARRAY_MAP_ACCESS_THRESHOLD) {
      this.backingMap = types.map(this._entries, false, true);
      this._entries = [];
      return true;
    } else {
      return false;
    }
  };
  types.TransitArrayMap.prototype.clear = function() {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.clear();
      this.size = 0;
    } else {
      this._entries = [];
      this.size = 0;
    }
  };
  types.TransitArrayMap.prototype["clear"] = types.TransitArrayMap.prototype.clear;
  types.TransitArrayMap.prototype.keys = function() {
    if (this.backingMap) {
      return this.backingMap.keys();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.KEYS);
    }
  };
  types.TransitArrayMap.prototype["keys"] = types.TransitArrayMap.prototype.keys;
  types.TransitArrayMap.prototype.keySet = function() {
    if (this.backingMap) {
      return this.backingMap.keySet();
    } else {
      var ret = [];
      for (var i = 0, j = 0;j < this._entries.length;i++, j += 2) {
        ret[i] = this._entries[j];
      }
      return ret;
    }
  };
  types.TransitArrayMap.prototype["keySet"] = types.TransitArrayMap.prototype.keySet;
  types.TransitArrayMap.prototype.entries = function() {
    if (this.backingMap) {
      return this.backingMap.entries();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.ENTRIES);
    }
  };
  types.TransitArrayMap.prototype["entries"] = types.TransitArrayMap.prototype.entries;
  types.TransitArrayMap.prototype.values = function() {
    if (this.backingMap) {
      return this.backingMap.values();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.VALUES);
    }
  };
  types.TransitArrayMap.prototype["values"] = types.TransitArrayMap.prototype.values;
  types.TransitArrayMap.prototype.forEach = function(f) {
    if (this.backingMap) {
      this.backingMap.forEach(f);
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        f(this._entries[i + 1], this._entries[i]);
      }
    }
  };
  types.TransitArrayMap.prototype["forEach"] = types.TransitArrayMap.prototype.forEach;
  types.TransitArrayMap.prototype.get = function(k, notFound) {
    if (this.backingMap) {
      return this.backingMap.get(k);
    } else {
      if (this.convert()) {
        return this.get(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return this._entries[i + 1];
          }
        }
        return notFound;
      }
    }
  };
  types.TransitArrayMap.prototype["get"] = types.TransitArrayMap.prototype.get;
  types.TransitArrayMap.prototype.has = function(k) {
    if (this.backingMap) {
      return this.backingMap.has(k);
    } else {
      if (this.convert()) {
        return this.has(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return true;
          }
        }
        return false;
      }
    }
  };
  types.TransitArrayMap.prototype["has"] = types.TransitArrayMap.prototype.has;
  types.TransitArrayMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.set(k, v);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries[i + 1] = v;
          return;
        }
      }
      this._entries.push(k);
      this._entries.push(v);
      this.size++;
      if (this.size > types.ARRAY_MAP_THRESHOLD) {
        this.backingMap = types.map(this._entries, false, true);
        this._entries = null;
      }
    }
  };
  types.TransitArrayMap.prototype["set"] = types.TransitArrayMap.prototype.set;
  types.TransitArrayMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap["delete"](k);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries.splice(i, 2);
          this.size--;
          return;
        }
      }
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.backingMap) {
      return this.backingMap.com$cognitect$transit$hashCode();
    } else {
      if (this.hashCode === -1) {
        this.hashCode = eq.hashMapLike(this);
      }
      return this.hashCode;
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$equals = function(other) {
    if (this.backingMap) {
      return types.mapEquals(this.backingMap, other);
    } else {
      return types.mapEquals(this, other);
    }
  };
  types.TransitMap = function(keys, map, size) {
    this.map = map || {};
    this._keys = keys || [];
    this.size = size || 0;
    this.hashCode = -1;
  };
  types.TransitMap.prototype.toString = function() {
    return "[TransitMap]";
  };
  types.TransitMap.prototype.clear = function() {
    this.hashCode = -1;
    this.map = {};
    this._keys = [];
    this.size = 0;
  };
  types.TransitMap.prototype["clear"] = types.TransitMap.prototype.clear;
  types.TransitMap.prototype.getKeys = function() {
    if (this._keys != null) {
      return this._keys;
    } else {
      return util.objectKeys(this.map);
    }
  };
  types.TransitMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    this._keys = null;
    var code = eq.hashCode(k), bucket = this.map[code];
    for (var i = 0;i < bucket.length;i += 2) {
      if (eq.equals(k, bucket[i])) {
        bucket.splice(i, 2);
        if (bucket.length === 0) {
          delete this.map[code];
        }
        this.size--;
        break;
      }
    }
  };
  types.TransitMap.prototype.entries = function() {
    return new types.TransitMapIterator(this, types.ENTRIES);
  };
  types.TransitMap.prototype["entries"] = types.TransitMap.prototype.entries;
  types.TransitMap.prototype.forEach = function(callback) {
    var ks = this.getKeys();
    for (var i = 0;i < ks.length;i++) {
      var bucket = this.map[ks[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        callback(bucket[j + 1], bucket[j], this);
      }
    }
  };
  types.TransitMap.prototype["forEach"] = types.TransitMap.prototype.forEach;
  types.TransitMap.prototype.get = function(k, notFound) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return bucket[i + 1];
        }
      }
    } else {
      return notFound;
    }
  };
  types.TransitMap.prototype["get"] = types.TransitMap.prototype.get;
  types.TransitMap.prototype.has = function(k) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return true;
        }
      }
      return false;
    } else {
      return false;
    }
  };
  types.TransitMap.prototype["has"] = types.TransitMap.prototype.has;
  types.TransitMap.prototype.keys = function() {
    return new types.TransitMapIterator(this, types.KEYS);
  };
  types.TransitMap.prototype["keys"] = types.TransitMap.prototype.keys;
  types.TransitMap.prototype.keySet = function() {
    var keys = this.getKeys(), ret = [];
    for (var i = 0;i < keys.length;i++) {
      var bucket = this.map[keys[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        ret.push(bucket[j]);
      }
    }
    return ret;
  };
  types.TransitMap.prototype["keySet"] = types.TransitMap.prototype.keySet;
  types.TransitMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket == null) {
      if (this._keys) {
        this._keys.push(code);
      }
      this.map[code] = [k, v];
      this.size++;
    } else {
      var newEntry = true;
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(v, bucket[i])) {
          newEntry = false;
          bucket[i] = v;
          break;
        }
      }
      if (newEntry) {
        bucket.push(k);
        bucket.push(v);
        this.size++;
      }
    }
  };
  types.TransitMap.prototype["set"] = types.TransitMap.prototype.set;
  types.TransitMap.prototype.values = function() {
    return new types.TransitMapIterator(this, types.VALUES);
  };
  types.TransitMap.prototype["values"] = types.TransitMap.prototype.values;
  types.TransitMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashMapLike(this);
    }
    return this.hashCode;
  };
  types.TransitMap.prototype.com$cognitect$transit$equals = function(other) {
    return types.mapEquals(this, other);
  };
  types.map = function(arr, checkDups, hashMap) {
    arr = arr || [];
    checkDups = checkDups === false ? checkDups : true;
    hashMap = hashMap === true ? hashMap : false;
    if (!hashMap && arr.length <= types.ARRAY_MAP_THRESHOLD * 2) {
      if (checkDups) {
        var t = arr;
        arr = [];
        for (var i = 0;i < t.length;i += 2) {
          var seen = false;
          for (var j = 0;j < arr.length;j += 2) {
            if (eq.equals(arr[j], t[i])) {
              arr[j + 1] = t[i + 1];
              seen = true;
              break;
            }
          }
          if (!seen) {
            arr.push(t[i]);
            arr.push(t[i + 1]);
          }
        }
      }
      return new types.TransitArrayMap(arr);
    } else {
      var map = {}, keys = [], size = 0;
      for (var i = 0;i < arr.length;i += 2) {
        var code = eq.hashCode(arr[i]), bucket = map[code];
        if (bucket == null) {
          keys.push(code);
          map[code] = [arr[i], arr[i + 1]];
          size++;
        } else {
          var newEntry = true;
          for (var j = 0;j < bucket.length;j += 2) {
            if (eq.equals(bucket[j], arr[i])) {
              bucket[j + 1] = arr[i + 1];
              newEntry = false;
              break;
            }
          }
          if (newEntry) {
            bucket.push(arr[i]);
            bucket.push(arr[i + 1]);
            size++;
          }
        }
      }
      return new types.TransitMap(keys, map, size);
    }
  };
  types.isArrayMap = function(x) {
    return x instanceof types.TransitArrayMap;
  };
  types.isMap = function(x) {
    return x instanceof types.TransitArrayMap || x instanceof types.TransitMap;
  };
  types.TransitSet = function(map) {
    this.map = map;
    this.size = map.size;
  };
  types.TransitSet.prototype.toString = function() {
    return "[TransitSet]";
  };
  types.TransitSet.prototype.add = function(value) {
    this.map.set(value, value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype["add"] = types.TransitSet.prototype.add;
  types.TransitSet.prototype.clear = function() {
    this.map = new types.TransitMap;
    this.size = 0;
  };
  types.TransitSet.prototype["clear"] = types.TransitSet.prototype.clear;
  types.TransitSet.prototype["delete"] = function(value) {
    this.map["delete"](value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype.entries = function() {
    return this.map.entries();
  };
  types.TransitSet.prototype["entries"] = types.TransitSet.prototype.entries;
  types.TransitSet.prototype.forEach = function(iterator, thisArg) {
    var self = this;
    this.map.forEach(function(v, k, m) {
      iterator(k, self);
    });
  };
  types.TransitSet.prototype["forEach"] = types.TransitSet.prototype.forEach;
  types.TransitSet.prototype.has = function(value) {
    return this.map.has(value);
  };
  types.TransitSet.prototype["has"] = types.TransitSet.prototype.has;
  types.TransitSet.prototype.keys = function() {
    return this.map.keys();
  };
  types.TransitSet.prototype["keys"] = types.TransitSet.prototype.keys;
  types.TransitSet.prototype.keySet = function() {
    return this.map.keySet();
  };
  types.TransitSet.prototype["keySet"] = types.TransitSet.prototype.keySet;
  types.TransitSet.prototype.values = function() {
    return this.map.values();
  };
  types.TransitSet.prototype["values"] = types.TransitSet.prototype.values;
  types.TransitSet.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TransitSet) {
      if (this.size === other.size) {
        return eq.equals(this.map, other.map);
      }
    } else {
      return false;
    }
  };
  types.TransitSet.prototype.com$cognitect$transit$hashCode = function(other) {
    return eq.hashCode(this.map);
  };
  types.set = function(arr) {
    arr = arr || [];
    var map = {}, keys = [], size = 0;
    for (var i = 0;i < arr.length;i++) {
      var code = eq.hashCode(arr[i]), vals = map[code];
      if (vals == null) {
        keys.push(code);
        map[code] = [arr[i], arr[i]];
        size++;
      } else {
        var newEntry = true;
        for (var j = 0;j < vals.length;j += 2) {
          if (eq.equals(vals[j], arr[i])) {
            newEntry = false;
            break;
          }
        }
        if (newEntry) {
          vals.push(arr[i]);
          vals.push(arr[i]);
          size++;
        }
      }
    }
    return new types.TransitSet(new types.TransitMap(keys, map, size));
  };
  types.isSet = function(x) {
    return x instanceof types.TransitSet;
  };
  types.quoted = function(obj) {
    return types.taggedValue("'", obj);
  };
  types.isQuoted = function(x) {
    return x instanceof types.TaggedValue && x.tag === "'";
  };
  types.list = function(xs) {
    return types.taggedValue("list", xs);
  };
  types.isList = function(x) {
    return x instanceof types.List && x.tag === "list";
  };
  types.link = function(rep) {
    return types.taggedValue("link", rep);
  };
  types.isLink = function(x) {
    return x instanceof types.TaggedValue && x.tag === "link";
  };
  types.specialDouble = function(v) {
    switch(v) {
      case "-INF":
        return-Infinity;
      case "INF":
        return Infinity;
      case "NaN":
        return NaN;
      default:
        throw new Error("Invalid special double value " + v);break;
    }
  };
});
goog.provide("com.cognitect.transit.delimiters");
goog.scope(function() {
  var delimiters = com.cognitect.transit.delimiters;
  delimiters.ESC = "~";
  delimiters.TAG = "#";
  delimiters.SUB = "^";
  delimiters.RES = "`";
  delimiters.ESC_TAG = "~#";
});
goog.provide("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.delimiters");
goog.scope(function() {
  var caching = com.cognitect.transit.caching, d = com.cognitect.transit.delimiters;
  caching.MIN_SIZE_CACHEABLE = 3;
  caching.BASE_CHAR_IDX = 48;
  caching.CACHE_CODE_DIGITS = 44;
  caching.MAX_CACHE_ENTRIES = caching.CACHE_CODE_DIGITS * caching.CACHE_CODE_DIGITS;
  caching.MAX_CACHE_SIZE = 4096;
  caching.isCacheable = function(string, asMapKey) {
    if (string.length > caching.MIN_SIZE_CACHEABLE) {
      if (asMapKey) {
        return true;
      } else {
        var c0 = string.charAt(0), c1 = string.charAt(1);
        if (c0 === d.ESC) {
          return c1 === ":" || c1 === "$" || c1 === "#";
        } else {
          return false;
        }
      }
    } else {
      return false;
    }
  };
  caching.idxToCode = function(idx) {
    var hi = Math.floor(idx / caching.CACHE_CODE_DIGITS), lo = idx % caching.CACHE_CODE_DIGITS, loc = String.fromCharCode(lo + caching.BASE_CHAR_IDX);
    if (hi === 0) {
      return d.SUB + loc;
    } else {
      return d.SUB + String.fromCharCode(hi + caching.BASE_CHAR_IDX) + loc;
    }
  };
  caching.WriteCache = function() {
    this.idx = 0;
    this.gen = 0;
    this.cacheSize = 0;
    this.cache = {};
  };
  caching.WriteCache.prototype.write = function(string, asMapKey) {
    if (caching.isCacheable(string, asMapKey)) {
      if (this.cacheSize === caching.MAX_CACHE_SIZE) {
        this.clear();
        this.gen = 0;
        this.cache = {};
      } else {
        if (this.idx === caching.MAX_CACHE_ENTRIES) {
          this.clear();
        }
      }
      var entry = this.cache[string];
      if (entry == null) {
        this.cache[string] = [caching.idxToCode(this.idx), this.gen];
        this.idx++;
        return string;
      } else {
        if (entry[1] != this.gen) {
          entry[1] = this.gen;
          entry[0] = caching.idxToCode(this.idx);
          this.idx++;
          return string;
        } else {
          return entry[0];
        }
      }
    } else {
      return string;
    }
  };
  caching.WriteCache.prototype.clear = function() {
    this.idx = 0;
    this.gen++;
  };
  caching.writeCache = function() {
    return new caching.WriteCache;
  };
  caching.isCacheCode = function(string) {
    return string.charAt(0) === d.SUB && string.charAt(1) !== " ";
  };
  caching.codeToIdx = function(code) {
    if (code.length === 2) {
      return code.charCodeAt(1) - caching.BASE_CHAR_IDX;
    } else {
      var hi = (code.charCodeAt(1) - caching.BASE_CHAR_IDX) * caching.CACHE_CODE_DIGITS, lo = code.charCodeAt(2) - caching.BASE_CHAR_IDX;
      return hi + lo;
    }
  };
  caching.ReadCache = function() {
    this.idx = 0;
    this.cache = [];
  };
  caching.ReadCache.prototype.write = function(obj, asMapKey) {
    if (this.idx == caching.MAX_CACHE_ENTRIES) {
      this.idx = 0;
    }
    this.cache[this.idx] = obj;
    this.idx++;
    return obj;
  };
  caching.ReadCache.prototype.read = function(string, asMapKey) {
    return this.cache[caching.codeToIdx(string)];
  };
  caching.ReadCache.prototype.clear = function() {
    this.idx = 0;
  };
  caching.readCache = function() {
    return new caching.ReadCache;
  };
});
goog.provide("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.delimiters");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.types");
goog.scope(function() {
  var decoder = com.cognitect.transit.impl.decoder, util = com.cognitect.transit.util, d = com.cognitect.transit.delimiters, caching = com.cognitect.transit.caching, types = com.cognitect.transit.types;
  decoder.Tag = function(s) {
    this.str = s;
  };
  decoder.tag = function(s) {
    return new decoder.Tag(s);
  };
  decoder.isTag = function(x) {
    return x && x instanceof decoder.Tag;
  };
  decoder.isGroundHandler = function(handler) {
    switch(handler) {
      case "_":
      ;
      case "s":
      ;
      case "?":
      ;
      case "i":
      ;
      case "d":
      ;
      case "b":
      ;
      case "'":
      ;
      case "array":
      ;
      case "map":
        return true;
    }
    return false;
  };
  decoder.Decoder = function(options) {
    this.options = options || {};
    this.handlers = {};
    for (var h in this.defaults.handlers) {
      this.handlers[h] = this.defaults.handlers[h];
    }
    for (var h in this.options["handlers"]) {
      if (decoder.isGroundHandler(h)) {
        throw new Error('Cannot override handler for ground type "' + h + '"');
      }
      this.handlers[h] = this.options["handlers"][h];
    }
    this.preferStrings = this.options["preferStrings"] != null ? this.options["preferStrings"] : this.defaults.preferStrings;
    this.preferBuffers = this.options["preferBuffers"] != null ? this.options["preferBuffers"] : this.defaults.preferBuffers;
    this.defaultHandler = this.options["defaultHandler"] || this.defaults.defaultHandler;
    this.mapBuilder = this.options["mapBuilder"];
    this.arrayBuilder = this.options["arrayBuilder"];
  };
  decoder.Decoder.prototype.defaults = {handlers:{"_":function(v, d) {
    return types.nullValue();
  }, "?":function(v, d) {
    return types.boolValue(v);
  }, "b":function(v, d) {
    return types.binary(v, d);
  }, "i":function(v, d) {
    return types.intValue(v);
  }, "n":function(v, d) {
    return types.bigInteger(v);
  }, "d":function(v, d) {
    return types.floatValue(v);
  }, "f":function(v, d) {
    return types.bigDecimalValue(v);
  }, "c":function(v, d) {
    return types.charValue(v);
  }, ":":function(v, d) {
    return types.keyword(v);
  }, "$":function(v, d) {
    return types.symbol(v);
  }, "r":function(v, d) {
    return types.uri(v);
  }, "z":function(v, d) {
    return types.specialDouble(v);
  }, "'":function(v, d) {
    return v;
  }, "m":function(v, d) {
    return types.date(v);
  }, "t":function(v, d) {
    return types.verboseDate(v);
  }, "u":function(v, d) {
    return types.uuid(v);
  }, "set":function(v, d) {
    return types.set(v);
  }, "list":function(v, d) {
    return types.list(v);
  }, "link":function(v, d) {
    return types.link(v);
  }, "cmap":function(v, d) {
    return types.map(v, false);
  }}, defaultHandler:function(c, val) {
    return types.taggedValue(c, val);
  }, preferStrings:true, preferBuffers:true};
  decoder.Decoder.prototype.decode = function(node, cache, asMapKey, tagValue) {
    if (node == null) {
      return null;
    }
    var t = typeof node;
    switch(t) {
      case "string":
        return this.decodeString(node, cache, asMapKey, tagValue);
        break;
      case "object":
        if (util.isArray(node)) {
          if (node[0] === "^ ") {
            return this.decodeArrayHash(node, cache, asMapKey, tagValue);
          } else {
            return this.decodeArray(node, cache, asMapKey, tagValue);
          }
        } else {
          return this.decodeHash(node, cache, asMapKey, tagValue);
        }
        break;
    }
    return node;
  };
  decoder.Decoder.prototype["decode"] = decoder.Decoder.prototype.decode;
  decoder.Decoder.prototype.decodeString = function(string, cache, asMapKey, tagValue) {
    if (caching.isCacheable(string, asMapKey)) {
      var val = this.parseString(string, cache, false);
      if (cache) {
        cache.write(val, asMapKey);
      }
      return val;
    } else {
      if (caching.isCacheCode(string)) {
        return cache.read(string, asMapKey);
      } else {
        return this.parseString(string, cache, asMapKey);
      }
    }
  };
  decoder.Decoder.prototype.decodeHash = function(hash, cache, asMapKey, tagValue) {
    var ks = util.objectKeys(hash), key = ks[0], tag = ks.length == 1 ? this.decode(key, cache, false, false) : null;
    if (decoder.isTag(tag)) {
      var val = hash[key], handler = this.handlers[tag.str];
      if (handler != null) {
        return handler(this.decode(val, cache, false, true), this);
      } else {
        return types.taggedValue(tag.str, this.decode(val, cache, false, false));
      }
    } else {
      if (this.mapBuilder) {
        if (ks.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 && this.mapBuilder.fromArray) {
          var nodep = [];
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            nodep.push(this.decode(strKey, cache, true, false));
            nodep.push(this.decode(hash[strKey], cache, false, false));
          }
          return this.mapBuilder.fromArray(nodep, hash);
        } else {
          var ret = this.mapBuilder.init(hash);
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            ret = this.mapBuilder.add(ret, this.decode(strKey, cache, true, false), this.decode(hash[strKey], cache, false, false), hash);
          }
          return this.mapBuilder.finalize(ret, hash);
        }
      } else {
        var nodep = [];
        for (var i = 0;i < ks.length;i++) {
          var strKey = ks[i];
          nodep.push(this.decode(strKey, cache, true, false));
          nodep.push(this.decode(hash[strKey], cache, false, false));
        }
        return types.map(nodep, false);
      }
    }
  };
  decoder.Decoder.prototype.decodeArrayHash = function(node, cache, asMapKey, tagValue) {
    if (this.mapBuilder) {
      if (node.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 + 1 && this.mapBuilder.fromArray) {
        var nodep = [];
        for (var i = 1;i < node.length;i += 2) {
          nodep.push(this.decode(node[i], cache, true, false));
          nodep.push(this.decode(node[i + 1], cache, false, false));
        }
        return this.mapBuilder.fromArray(nodep, node);
      } else {
        var ret = this.mapBuilder.init(node);
        for (var i = 1;i < node.length;i += 2) {
          ret = this.mapBuilder.add(ret, this.decode(node[i], cache, true, false), this.decode(node[i + 1], cache, false, false), node);
        }
        return this.mapBuilder.finalize(ret, node);
      }
    } else {
      var nodep = [];
      for (var i = 1;i < node.length;i += 2) {
        nodep.push(this.decode(node[i], cache, true, false));
        nodep.push(this.decode(node[i + 1], cache, false, false));
      }
      return types.map(nodep, false);
    }
  };
  decoder.Decoder.prototype.decodeArray = function(node, cache, asMapKey, tagValue) {
    if (tagValue) {
      var ret = [];
      for (var i = 0;i < node.length;i++) {
        ret.push(this.decode(node[i], cache, asMapKey, false));
      }
      return ret;
    } else {
      var cacheIdx = cache && cache.idx;
      if (node.length === 2 && typeof node[0] === "string") {
        var tag = this.decode(node[0], cache, false, false);
        if (decoder.isTag(tag)) {
          var val = node[1], handler = this.handlers[tag.str];
          if (handler != null) {
            var ret = handler(this.decode(val, cache, asMapKey, true), this);
            return ret;
          } else {
            return types.taggedValue(tag.str, this.decode(val, cache, asMapKey, false));
          }
        }
      }
      if (cache && cacheIdx != cache.idx) {
        cache.idx = cacheIdx;
      }
      if (this.arrayBuilder) {
        if (node.length <= 32 && this.arrayBuilder.fromArray) {
          var arr = [];
          for (var i = 0;i < node.length;i++) {
            arr.push(this.decode(node[i], cache, asMapKey, false));
          }
          return this.arrayBuilder.fromArray(arr, node);
        } else {
          var ret = this.arrayBuilder.init();
          for (var i = 0;i < node.length;i++) {
            ret = this.arrayBuilder.add(ret, this.decode(node[i], cache, asMapKey, false), node);
          }
          return this.arrayBuilder.finalize(ret, node);
        }
      } else {
        var ret = [];
        for (var i = 0;i < node.length;i++) {
          ret.push(this.decode(node[i], cache, asMapKey, false));
        }
        return ret;
      }
    }
  };
  decoder.Decoder.prototype.parseString = function(string, cache, asMapKey) {
    if (string.charAt(0) === d.ESC) {
      var c = string.charAt(1);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return string.substring(1);
      } else {
        if (c === d.TAG) {
          return decoder.tag(string.substring(2));
        } else {
          var handler = this.handlers[c];
          if (handler == null) {
            return this.defaultHandler(c, string.substring(2));
          } else {
            return handler(string.substring(2), this);
          }
        }
      }
    } else {
      return string;
    }
  };
  decoder.decoder = function(options) {
    return new decoder.Decoder(options);
  };
});
goog.provide("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
goog.scope(function() {
  var reader = com.cognitect.transit.impl.reader, decoder = com.cognitect.transit.impl.decoder, caching = com.cognitect.transit.caching;
  reader.JSONUnmarshaller = function(opts) {
    this.decoder = new decoder.Decoder(opts);
  };
  reader.JSONUnmarshaller.prototype.unmarshal = function(str, cache) {
    return this.decoder.decode(JSON.parse(str), cache);
  };
  reader.Reader = function(unmarshaller, options) {
    this.unmarshaller = unmarshaller;
    this.options = options || {};
    this.cache = this.options["cache"] ? this.options["cache"] : new caching.ReadCache;
  };
  reader.Reader.prototype.read = function(str) {
    var ret = this.unmarshaller.unmarshal(str, this.cache);
    this.cache.clear();
    return ret;
  };
  reader.Reader.prototype["read"] = reader.Reader.prototype.read;
});
goog.provide("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.types");
goog.require("goog.math.Long");
goog.scope(function() {
  var handlers = com.cognitect.transit.handlers, util = com.cognitect.transit.util, types = com.cognitect.transit.types, Long = goog.math.Long;
  handlers.ctorGuid = 0;
  handlers.ctorGuidProperty = "transit$guid$" + util.randomUUID();
  handlers.typeTag = function(ctor) {
    if (ctor == null) {
      return "null";
    } else {
      if (ctor === String) {
        return "string";
      } else {
        if (ctor === Boolean) {
          return "boolean";
        } else {
          if (ctor === Number) {
            return "number";
          } else {
            if (ctor === Array) {
              return "array";
            } else {
              if (ctor === Object) {
                return "map";
              } else {
                var tag = ctor[handlers.ctorGuidProperty];
                if (tag == null) {
                  if (typeof Object.defineProperty != "undefined") {
                    tag = ++handlers.ctorGuid;
                    Object.defineProperty(ctor, handlers.ctorGuidProperty, {value:tag, enumerable:false});
                  } else {
                    ctor[handlers.ctorGuidProperty] = tag = ++handlers.ctorGuid;
                  }
                }
                return tag;
              }
            }
          }
        }
      }
    }
  };
  handlers.constructor = function(x) {
    if (x == null) {
      return null;
    } else {
      return x.constructor;
    }
  };
  handlers.padZeros = function(n, m) {
    var s = n.toString();
    for (var i = s.length;i < m;i++) {
      s = "0" + s;
    }
    return s;
  };
  handlers.stringableKeys = function(m) {
    var stringable = false, ks = util.objectKeys(m);
    for (var i = 0;i < ks.length;i++) {
    }
    return true;
  };
  handlers.NilHandler = function() {
  };
  handlers.NilHandler.prototype.tag = function(v) {
    return "_";
  };
  handlers.NilHandler.prototype.rep = function(v) {
    return null;
  };
  handlers.NilHandler.prototype.stringRep = function(v) {
    return "null";
  };
  handlers.StringHandler = function() {
  };
  handlers.StringHandler.prototype.tag = function(v) {
    return "s";
  };
  handlers.StringHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.StringHandler.prototype.stringRep = function(v) {
    return v;
  };
  handlers.NumberHandler = function() {
  };
  handlers.NumberHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.NumberHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.NumberHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler = function() {
  };
  handlers.IntegerHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.IntegerHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.BooleanHandler = function() {
  };
  handlers.BooleanHandler.prototype.tag = function(v) {
    return "?";
  };
  handlers.BooleanHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.BooleanHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.ArrayHandler = function() {
  };
  handlers.ArrayHandler.prototype.tag = function(v) {
    return "array";
  };
  handlers.ArrayHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.ArrayHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.MapHandler = function() {
  };
  handlers.MapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.MapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.MapHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.VerboseDateHandler = function() {
  };
  handlers.VerboseDateHandler.prototype.tag = function(v) {
    return "t";
  };
  handlers.VerboseDateHandler.prototype.rep = function(v) {
    return v.getUTCFullYear() + "-" + handlers.padZeros(v.getUTCMonth() + 1, 2) + "-" + handlers.padZeros(v.getUTCDate(), 2) + "T" + handlers.padZeros(v.getUTCHours(), 2) + ":" + handlers.padZeros(v.getUTCMinutes(), 2) + ":" + handlers.padZeros(v.getUTCSeconds(), 2) + "." + handlers.padZeros(v.getUTCMilliseconds(), 3) + "Z";
  };
  handlers.VerboseDateHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.DateHandler = function() {
  };
  handlers.DateHandler.prototype.tag = function(v) {
    return "m";
  };
  handlers.DateHandler.prototype.rep = function(v) {
    return v.valueOf();
  };
  handlers.DateHandler.prototype.stringRep = function(v) {
    return v.valueOf().toString();
  };
  handlers.DateHandler.prototype.getVerboseHandler = function(v) {
    return new handlers.VerboseDateHandler;
  };
  handlers.UUIDHandler = function() {
  };
  handlers.UUIDHandler.prototype.tag = function(v) {
    return "u";
  };
  handlers.UUIDHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.UUIDHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.KeywordHandler = function() {
  };
  handlers.KeywordHandler.prototype.tag = function(v) {
    return ":";
  };
  handlers.KeywordHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.KeywordHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.SymbolHandler = function() {
  };
  handlers.SymbolHandler.prototype.tag = function(v) {
    return "$";
  };
  handlers.SymbolHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.SymbolHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.TaggedHandler = function() {
  };
  handlers.TaggedHandler.prototype.tag = function(v) {
    return v.tag;
  };
  handlers.TaggedHandler.prototype.rep = function(v) {
    return v.rep;
  };
  handlers.TaggedHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitSetHandler = function() {
  };
  handlers.TransitSetHandler.prototype.tag = function(v) {
    return "set";
  };
  handlers.TransitSetHandler.prototype.rep = function(v) {
    var arr = [];
    v.forEach(function(key, set) {
      arr.push(key);
    });
    return types.taggedValue("array", arr);
  };
  handlers.TransitSetHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitArrayMapHandler = function() {
  };
  handlers.TransitArrayMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitArrayMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitArrayMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitMapHandler = function() {
  };
  handlers.TransitMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.BufferHandler = function() {
  };
  handlers.BufferHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.BufferHandler.prototype.rep = function(v) {
    return v.toString("base64");
  };
  handlers.BufferHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.Uint8ArrayHandler = function() {
  };
  handlers.Uint8ArrayHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.Uint8ArrayHandler.prototype.rep = function(v) {
    return util.Uint8ToBase64(v);
  };
  handlers.Uint8ArrayHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.defaultHandlers = function(hs) {
    hs.set(null, new handlers.NilHandler);
    hs.set(String, new handlers.StringHandler);
    hs.set(Number, new handlers.NumberHandler);
    hs.set(Long, new handlers.IntegerHandler);
    hs.set(Boolean, new handlers.BooleanHandler);
    hs.set(Array, new handlers.ArrayHandler);
    hs.set(Object, new handlers.MapHandler);
    hs.set(Date, new handlers.DateHandler);
    hs.set(types.UUID, new handlers.UUIDHandler);
    hs.set(types.Keyword, new handlers.KeywordHandler);
    hs.set(types.Symbol, new handlers.SymbolHandler);
    hs.set(types.TaggedValue, new handlers.TaggedHandler);
    hs.set(types.TransitSet, new handlers.TransitSetHandler);
    hs.set(types.TransitArrayMap, new handlers.TransitArrayMapHandler);
    hs.set(types.TransitMap, new handlers.TransitMapHandler);
    if (typeof Buffer != "undefined") {
      hs.set(Buffer, new handlers.BufferHandler);
    }
    if (typeof Uint8Array != "undefined") {
      hs.set(Uint8Array, new handlers.Uint8ArrayHandler);
    }
    return hs;
  };
  handlers.Handlers = function() {
    this.handlers = {};
    handlers.defaultHandlers(this);
  };
  handlers.Handlers.prototype.get = function(ctor) {
    var h = null;
    if (typeof ctor === "string") {
      h = this.handlers[ctor];
    } else {
      h = this.handlers[handlers.typeTag(ctor)];
    }
    if (h != null) {
      return h;
    } else {
      return this.handlers["default"];
    }
  };
  handlers.Handlers.prototype["get"] = handlers.Handlers.prototype.get;
  handlers.validTag = function(tag) {
    switch(tag) {
      case "null":
      ;
      case "string":
      ;
      case "boolean":
      ;
      case "number":
      ;
      case "array":
      ;
      case "map":
        return false;
        break;
    }
    return true;
  };
  handlers.Handlers.prototype.set = function(ctor, handler) {
    if (typeof ctor === "string" && handlers.validTag(ctor)) {
      this.handlers[ctor] = handler;
    } else {
      this.handlers[handlers.typeTag(ctor)] = handler;
    }
  };
});
goog.provide("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.delimiters");
goog.require("goog.math.Long");
goog.scope(function() {
  var writer = com.cognitect.transit.impl.writer, util = com.cognitect.transit.util, caching = com.cognitect.transit.caching, handlers = com.cognitect.transit.handlers, types = com.cognitect.transit.types, d = com.cognitect.transit.delimiters, Long = goog.math.Long;
  writer.escape = function(string) {
    if (string.length > 0) {
      var c = string.charAt(0);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return d.ESC + string;
      } else {
        return string;
      }
    } else {
      return string;
    }
  };
  writer.JSONMarshaller = function(opts) {
    this.opts = opts || {};
    this.preferStrings = this.opts["preferStrings"] != null ? this.opts["preferStrings"] : true;
    this.objectBuilder = this.opts["objectBuilder"] || null;
    this.handlers = new handlers.Handlers;
    var optsHandlers = this.opts["handlers"];
    if (optsHandlers) {
      if (util.isArray(optsHandlers) || !optsHandlers.forEach) {
        throw new Error('transit writer "handlers" option must be a map');
      }
      var self = this;
      optsHandlers.forEach(function(v, k) {
        self.handlers.set(k, v);
      });
    }
    this.handlerForForeign = this.opts["handlerForForeign"];
    this.unpack = this.opts["unpack"] || function(x) {
      if (types.isArrayMap(x) && x.backingMap === null) {
        return x._entries;
      } else {
        return false;
      }
    };
    this.verbose = this.opts && this.opts["verbose"] || false;
  };
  writer.JSONMarshaller.prototype.handler = function(obj) {
    var h = this.handlers.get(handlers.constructor(obj));
    if (h != null) {
      return h;
    } else {
      var tag = obj && obj["transitTag"];
      if (tag) {
        return this.handlers.get(tag);
      } else {
        return null;
      }
    }
  };
  writer.JSONMarshaller.prototype.registerHandler = function(ctor, handler) {
    this.handlers.set(ctor, handler);
  };
  writer.JSONMarshaller.prototype.emitNil = function(asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "_", "", asMapKey, cache);
    } else {
      return null;
    }
  };
  writer.JSONMarshaller.prototype.emitString = function(prefix, tag, s, asMapKey, cache) {
    var string = prefix + tag + s;
    if (cache) {
      return cache.write(string, asMapKey);
    } else {
      return string;
    }
  };
  writer.JSONMarshaller.prototype.emitBoolean = function(b, asMapKey, cache) {
    if (asMapKey) {
      var s = b.toString();
      return this.emitString(d.ESC, "?", s[0], asMapKey, cache);
    } else {
      return b;
    }
  };
  writer.JSONMarshaller.prototype.emitInteger = function(i, asMapKey, cache) {
    if (i === Infinity) {
      return this.emitString(d.ESC, "z", "INF", asMapKey, cache);
    } else {
      if (i === -Infinity) {
        return this.emitString(d.ESC, "z", "-INF", asMapKey, cache);
      } else {
        if (isNaN(i)) {
          return this.emitString(d.ESC, "z", "NaN", asMapKey, cache);
        } else {
          if (asMapKey || typeof i === "string" || i instanceof Long) {
            return this.emitString(d.ESC, "i", i.toString(), asMapKey, cache);
          } else {
            return i;
          }
        }
      }
    }
  };
  writer.JSONMarshaller.prototype.emitDouble = function(d, asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "d", d, asMapKey, cache);
    } else {
      return d;
    }
  };
  writer.JSONMarshaller.prototype.emitBinary = function(b, asMapKey, cache) {
    return this.emitString(d.ESC, "b", b, asMapKey, cache);
  };
  writer.JSONMarshaller.prototype.emitQuoted = function(em, obj, cache) {
    if (em.verbose) {
      var ret = {}, k = this.emitString(d.ESC_TAG, "'", "", true, cache);
      ret[k] = writer.marshal(this, obj, false, cache);
      return ret;
    } else {
      return[this.emitString(d.ESC_TAG, "'", "", true, cache), writer.marshal(this, obj, false, cache)];
    }
  };
  writer.emitObjects = function(em, iterable, cache) {
    var ret = [];
    if (util.isArray(iterable)) {
      for (var i = 0;i < iterable.length;i++) {
        ret.push(writer.marshal(em, iterable[i], false, cache));
      }
    } else {
      iterable.forEach(function(v, i) {
        ret.push(writer.marshal(em, v, false, cache));
      });
    }
    return ret;
  };
  writer.emitArray = function(em, iterable, skip, cache) {
    return writer.emitObjects(em, iterable, cache);
  };
  writer.isStringableKey = function(em, k) {
    if (typeof k !== "string") {
      var h = em.handler(k);
      return h && h.tag(k).length === 1;
    } else {
      return true;
    }
  };
  writer.stringableKeys = function(em, obj) {
    var arr = em.unpack(obj), stringableKeys = true;
    if (arr) {
      for (var i = 0;i < arr.length;i += 2) {
        stringableKeys = writer.isStringableKey(em, arr[i]);
        if (!stringableKeys) {
          break;
        }
      }
      return stringableKeys;
    } else {
      if (obj.keys) {
        var iter = obj.keys(), step = null;
        if (iter.next) {
          step = iter.next();
          while (!step.done) {
            stringableKeys = writer.isStringableKey(em, step.value);
            if (!stringableKeys) {
              break;
            }
            step = iter.next();
          }
          return stringableKeys;
        }
      }
    }
    if (obj.forEach) {
      obj.forEach(function(v, k) {
        stringableKeys = stringableKeys && writer.isStringableKey(em, k);
      });
      return stringableKeys;
    } else {
      throw new Error("Cannot walk keys of object type " + handlers.constructor(obj).name);
    }
  };
  writer.isForeignObject = function(x) {
    if (x.constructor["transit$isObject"]) {
      return true;
    }
    var ret = x.constructor.toString(), ret = ret.substr("function ".length), ret = ret.substr(0, ret.indexOf("(")), isObject = ret == "Object";
    if (typeof Object.defineProperty != "undefined") {
      Object.defineProperty(x.constructor, "transit$isObject", {value:isObject, enumerable:false});
    } else {
      x.constructor["transit$isObject"] = isObject;
    }
    return isObject;
  };
  writer.emitMap = function(em, obj, skip, cache) {
    if (obj.constructor === Object || obj.forEach != null || em.handlerForForeign && writer.isForeignObject(obj)) {
      if (em.verbose) {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var ret = {};
            obj.forEach(function(v, k) {
              ret[writer.marshal(em, k, true, false)] = writer.marshal(em, v, false, cache);
            });
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, false));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, false));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            var ret = {};
            ret[tag] = rep;
            return ret;
          }
        } else {
          var ret = {}, ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret[writer.marshal(em, ks[i], true, false)] = writer.marshal(em, obj[ks[i]], false, cache);
          }
          return ret;
        }
      } else {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var arr = em.unpack(obj), ret = ["^ "];
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                ret.push(writer.marshal(em, arr[i], true, cache));
                ret.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                ret.push(writer.marshal(em, k, true, cache));
                ret.push(writer.marshal(em, v, false, cache));
              });
            }
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, cache));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, cache));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            return[tag, rep];
          }
        } else {
          var ret = ["^ "], ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret.push(writer.marshal(em, ks[i], true, cache));
            ret.push(writer.marshal(em, obj[ks[i]], false, cache));
          }
          return ret;
        }
      }
    } else {
      if (em.objectBuilder != null) {
        return em.objectBuilder(obj, function(k) {
          return writer.marshal(em, k, true, cache);
        }, function(v) {
          return writer.marshal(em, v, false, cache);
        });
      } else {
        var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
        err.data = {obj:obj, type:name};
        throw err;
      }
    }
  };
  writer.emitTaggedMap = function(em, tag, rep, skip, cache) {
    if (em.verbose) {
      var ret = {};
      ret[em.emitString(d.ESC_TAG, tag, "", true, cache)] = writer.marshal(em, rep, false, cache);
      return ret;
    } else {
      return[em.emitString(d.ESC_TAG, tag, "", true, cache), writer.marshal(em, rep, false, cache)];
    }
  };
  writer.emitEncoded = function(em, h, tag, rep, obj, asMapKey, cache) {
    if (tag.length === 1) {
      if (typeof rep === "string") {
        return em.emitString(d.ESC, tag, rep, asMapKey, cache);
      } else {
        if (asMapKey || em.preferStrings) {
          var vh = em.verbose && h.getVerboseHandler();
          if (vh) {
            tag = vh.tag(obj);
            rep = vh.stringRep(obj, vh);
          } else {
            rep = h.stringRep(obj, h);
          }
          if (rep !== null) {
            return em.emitString(d.ESC, tag, rep, asMapKey, cache);
          } else {
            var err = new Error('Tag "' + tag + '" cannot be encoded as string');
            err.data = {tag:tag, rep:rep, obj:obj};
            throw err;
          }
        } else {
          return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
        }
      }
    } else {
      return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
    }
  };
  writer.marshal = function(em, obj, asMapKey, cache) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null), tag = h ? h.tag(obj) : null, rep = h ? h.rep(obj) : null;
    if (h != null && tag != null) {
      switch(tag) {
        case "_":
          return em.emitNil(asMapKey, cache);
          break;
        case "s":
          return em.emitString("", "", writer.escape(rep), asMapKey, cache);
          break;
        case "?":
          return em.emitBoolean(rep, asMapKey, cache);
          break;
        case "i":
          return em.emitInteger(rep, asMapKey, cache);
          break;
        case "d":
          return em.emitDouble(rep, asMapKey, cache);
          break;
        case "b":
          return em.emitBinary(rep, asMapKey, cache);
          break;
        case "'":
          return em.emitQuoted(em, rep, cache);
          break;
        case "array":
          return writer.emitArray(em, rep, asMapKey, cache);
          break;
        case "map":
          return writer.emitMap(em, rep, asMapKey, cache);
          break;
        default:
          return writer.emitEncoded(em, h, tag, rep, obj, asMapKey, cache);
          break;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.maybeQuoted = function(em, obj) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null);
    if (h != null) {
      if (h.tag(obj).length === 1) {
        return types.quoted(obj);
      } else {
        return obj;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.marshalTop = function(em, obj, asMapKey, cache) {
    return JSON.stringify(writer.marshal(em, writer.maybeQuoted(em, obj), asMapKey, cache));
  };
  writer.Writer = function(marshaller, options) {
    this._marshaller = marshaller;
    this.options = options || {};
    if (this.options["cache"] === false) {
      this.cache = null;
    } else {
      this.cache = this.options["cache"] ? this.options["cache"] : new caching.WriteCache;
    }
  };
  writer.Writer.prototype.marshaller = function() {
    return this._marshaller;
  };
  writer.Writer.prototype["marshaller"] = writer.Writer.prototype.marshaller;
  writer.Writer.prototype.write = function(obj, opts) {
    var ret = null, ropts = opts || {}, asMapKey = ropts["asMapKey"] || false, cache = this._marshaller.verbose ? false : this.cache;
    if (ropts["marshalTop"] === false) {
      ret = writer.marshal(this._marshaller, obj, asMapKey, cache);
    } else {
      ret = writer.marshalTop(this._marshaller, obj, asMapKey, cache);
    }
    if (this.cache != null) {
      this.cache.clear();
    }
    return ret;
  };
  writer.Writer.prototype["write"] = writer.Writer.prototype.write;
  writer.Writer.prototype.register = function(type, handler) {
    this._marshaller.registerHandler(type, handler);
  };
  writer.Writer.prototype["register"] = writer.Writer.prototype.register;
});
goog.provide("com.cognitect.transit");
goog.require("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
var TRANSIT_DEV = true;
var TRANSIT_NODE_TARGET = false;
var TRANSIT_BROWSER_TARGET = false;
var TRANSIT_BROWSER_AMD_TARGET = false;
goog.scope(function() {
  var transit = com.cognitect.transit;
  var reader = com.cognitect.transit.impl.reader, writer = com.cognitect.transit.impl.writer, decoder = com.cognitect.transit.impl.decoder, types = com.cognitect.transit.types, eq = com.cognitect.transit.eq, caching = com.cognitect.transit.caching;
  transit.reader = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      type = "json";
      var unmarshaller = new reader.JSONUnmarshaller(opts);
      return new reader.Reader(unmarshaller, opts);
    } else {
      throw new Error("Cannot create reader of type " + type);
    }
  };
  transit.writer = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      if (type === "json-verbose") {
        if (opts == null) {
          opts = {};
        }
        opts["verbose"] = true;
      }
      type = "json";
      var marshaller = new writer.JSONMarshaller(opts);
      return new writer.Writer(marshaller, opts);
    } else {
      var err = new Error('Type must be "json"');
      err.data = {type:type};
      throw err;
    }
  };
  transit.makeWriteHandler = function(obj) {
    var Handler = function() {
    };
    Handler.prototype.tag = obj["tag"];
    Handler.prototype.rep = obj["rep"];
    Handler.prototype.stringRep = obj["stringRep"];
    Handler.prototype.getVerboseHandler = obj["getVerboseHandler"];
    return new Handler;
  };
  transit.makeBuilder = function(obj) {
    var Builder = function() {
    };
    Builder.prototype.init = obj["init"];
    Builder.prototype.add = obj["add"];
    Builder.prototype.finalize = obj["finalize"];
    Builder.prototype.fromArray = obj["fromArray"];
    return new Builder;
  };
  transit.date = types.date;
  transit.integer = types.intValue;
  transit.isInteger = types.isInteger;
  transit.uuid = types.uuid;
  transit.isUUID = types.isUUID;
  transit.bigInt = types.bigInteger;
  transit.isBigInt = types.isBigInteger;
  transit.bigDec = types.bigDecimalValue;
  transit.isBigDec = types.isBigDecimal;
  transit.keyword = types.keyword;
  transit.isKeyword = types.isKeyword;
  transit.symbol = types.symbol;
  transit.isSymbol = types.isSymbol;
  transit.binary = types.binary;
  transit.isBinary = types.isBinary;
  transit.uri = types.uri;
  transit.isURI = types.isURI;
  transit.map = types.map;
  transit.isMap = types.isMap;
  transit.set = types.set;
  transit.isSet = types.isSet;
  transit.list = types.list;
  transit.isList = types.isList;
  transit.quoted = types.quoted;
  transit.isQuoted = types.isQuoted;
  transit.tagged = types.taggedValue;
  transit.isTaggedValue = types.isTaggedValue;
  transit.link = types.link;
  transit.isLink = types.isLink;
  transit.hash = eq.hashCode;
  transit.hashMapLike = eq.hashMapLike;
  transit.hashMapLike = eq.hashArrayLike;
  transit.equals = eq.equals;
  transit.extendToEQ = eq.extendToEQ;
  transit.mapToObject = function(m) {
    var ret = {};
    m.forEach(function(v, k) {
      if (typeof k !== "string") {
        throw Error("Cannot convert map with non-string keys");
      } else {
        ret[k] = v;
      }
    });
    return ret;
  };
  transit.decoder = decoder.decoder;
  transit.readCache = caching.readCache;
  transit.writeCache = caching.writeCache;
  transit.UUIDfromString = types.UUIDfromString;
  transit.randomUUID = types.randomUUID;
  transit.stringableKeys = writer.stringableKeys;
  if (TRANSIT_BROWSER_TARGET) {
    goog.exportSymbol("transit.reader", transit.reader);
    goog.exportSymbol("transit.writer", transit.writer);
    goog.exportSymbol("transit.makeBuilder", transit.makeBuilder);
    goog.exportSymbol("transit.makeWriteHandler", transit.makeWriteHandler);
    goog.exportSymbol("transit.date", types.date);
    goog.exportSymbol("transit.integer", types.intValue);
    goog.exportSymbol("transit.isInteger", types.isInteger);
    goog.exportSymbol("transit.uuid", types.uuid);
    goog.exportSymbol("transit.isUUID", types.isUUID);
    goog.exportSymbol("transit.bigInt", types.bigInteger);
    goog.exportSymbol("transit.isBigInt", types.isBigInteger);
    goog.exportSymbol("transit.bigDec", types.bigDecimalValue);
    goog.exportSymbol("transit.isBigDec", types.isBigDecimal);
    goog.exportSymbol("transit.keyword", types.keyword);
    goog.exportSymbol("transit.isKeyword", types.isKeyword);
    goog.exportSymbol("transit.symbol", types.symbol);
    goog.exportSymbol("transit.isSymbol", types.isSymbol);
    goog.exportSymbol("transit.binary", types.binary);
    goog.exportSymbol("transit.isBinary", types.isBinary);
    goog.exportSymbol("transit.uri", types.uri);
    goog.exportSymbol("transit.isURI", types.isURI);
    goog.exportSymbol("transit.map", types.map);
    goog.exportSymbol("transit.isMap", types.isMap);
    goog.exportSymbol("transit.set", types.set);
    goog.exportSymbol("transit.isSet", types.isSet);
    goog.exportSymbol("transit.list", types.list);
    goog.exportSymbol("transit.isList", types.isList);
    goog.exportSymbol("transit.quoted", types.quoted);
    goog.exportSymbol("transit.isQuoted", types.isQuoted);
    goog.exportSymbol("transit.tagged", types.taggedValue);
    goog.exportSymbol("transit.isTaggedValue", types.isTaggedValue);
    goog.exportSymbol("transit.link", types.link);
    goog.exportSymbol("transit.isLink", types.isLink);
    goog.exportSymbol("transit.hash", eq.hashCode);
    goog.exportSymbol("transit.hashMapLike", eq.hashMapLike);
    goog.exportSymbol("transit.hashArrayLike", eq.hashArrayLike);
    goog.exportSymbol("transit.equals", eq.equals);
    goog.exportSymbol("transit.extendToEQ", eq.extendToEQ);
    goog.exportSymbol("transit.mapToObject", transit.mapToObject);
    goog.exportSymbol("transit.decoder", decoder.decoder);
    goog.exportSymbol("transit.UUIDfromString", types.UUIDfromString);
    goog.exportSymbol("transit.randomUUID", types.randomUUID);
    goog.exportSymbol("transit.stringableKeys", writer.stringableKeys);
    goog.exportSymbol("transit.readCache", caching.readCache);
    goog.exportSymbol("transit.writeCache", caching.writeCache);
  }
  if (TRANSIT_NODE_TARGET) {
    module.exports = {reader:transit.reader, writer:transit.writer, makeBuilder:transit.makeBuilder, makeWriteHandler:transit.makeWriteHandler, date:types.date, integer:types.intValue, isInteger:types.isInteger, uuid:types.uuid, isUUID:types.isUUID, bigInt:types.bigInteger, isBigInt:types.isBigInteger, bigDec:types.bigDecimalValue, isBigDec:types.isBigDecimal, keyword:types.keyword, isKeyword:types.isKeyword, symbol:types.symbol, isSymbol:types.isSymbol, binary:types.binary, isBinary:types.isBinary, 
    uri:types.uri, isURI:types.isURI, map:types.map, isMap:types.isMap, set:types.set, isSet:types.isSet, list:types.list, isList:types.isList, quoted:types.quoted, isQuoted:types.isQuoted, tagged:types.taggedValue, isTaggedValue:types.isTaggedValue, link:types.link, isLink:types.isLink, hash:eq.hashCode, hashArrayLike:eq.hashArrayLike, hashMapLike:eq.hashMapLike, equals:eq.equals, extendToEQ:eq.extendToEQ, mapToObject:transit.mapToObject, decoder:decoder.decoder, UUIDfromString:types.UUIDfromString, 
    randomUUID:types.randomUUID, stringableKeys:writer.stringableKeys, readCache:caching.readCache, writeCache:caching.writeCache};
  }
});
goog.provide("cognitect.transit");
goog.require("cljs.core");
goog.require("goog.math.Long");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit");
cljs.core.UUID.prototype.cljs$core$IEquiv$ = true;
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return this$__$1.uuid === other.uuid;
  } else {
    if (other instanceof com.cognitect.transit.types.UUID) {
      return this$__$1.uuid === other.toString();
    } else {
      return false;
    }
  }
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return cljs.core._equiv.call(null, other, this$__$1);
  } else {
    return this$__$1.equiv(other);
  }
};
goog.math.Long.prototype.cljs$core$IEquiv$ = true;
goog.math.Long.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
goog.math.Long.prototype.cljs$core$IHash$ = true;
goog.math.Long.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(uuid, writer, _) {
  var uuid__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(uuid__$1.toString()), cljs.core.str('"')].join(""));
};
cognitect.transit.opts_merge = function cognitect$transit$opts_merge(a, b) {
  var seq__11118_11122 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, b));
  var chunk__11119_11123 = null;
  var count__11120_11124 = 0;
  var i__11121_11125 = 0;
  while (true) {
    if (i__11121_11125 < count__11120_11124) {
      var k_11126 = cljs.core._nth.call(null, chunk__11119_11123, i__11121_11125);
      var v_11127 = b[k_11126];
      a[k_11126] = v_11127;
      var G__11128 = seq__11118_11122;
      var G__11129 = chunk__11119_11123;
      var G__11130 = count__11120_11124;
      var G__11131 = i__11121_11125 + 1;
      seq__11118_11122 = G__11128;
      chunk__11119_11123 = G__11129;
      count__11120_11124 = G__11130;
      i__11121_11125 = G__11131;
      continue;
    } else {
      var temp__4126__auto___11132 = cljs.core.seq.call(null, seq__11118_11122);
      if (temp__4126__auto___11132) {
        var seq__11118_11133__$1 = temp__4126__auto___11132;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11118_11133__$1)) {
          var c__4907__auto___11134 = cljs.core.chunk_first.call(null, seq__11118_11133__$1);
          var G__11135 = cljs.core.chunk_rest.call(null, seq__11118_11133__$1);
          var G__11136 = c__4907__auto___11134;
          var G__11137 = cljs.core.count.call(null, c__4907__auto___11134);
          var G__11138 = 0;
          seq__11118_11122 = G__11135;
          chunk__11119_11123 = G__11136;
          count__11120_11124 = G__11137;
          i__11121_11125 = G__11138;
          continue;
        } else {
          var k_11139 = cljs.core.first.call(null, seq__11118_11133__$1);
          var v_11140 = b[k_11139];
          a[k_11139] = v_11140;
          var G__11141 = cljs.core.next.call(null, seq__11118_11133__$1);
          var G__11142 = null;
          var G__11143 = 0;
          var G__11144 = 0;
          seq__11118_11122 = G__11141;
          chunk__11119_11123 = G__11142;
          count__11120_11124 = G__11143;
          i__11121_11125 = G__11144;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return a;
};
cognitect.transit.MapBuilder = function() {
};
cognitect.transit.MapBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.MapBuilder.prototype.add = function(m, k, v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.assoc_BANG_.call(null, m, k, v);
};
cognitect.transit.MapBuilder.prototype.finalize = function(m, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, m);
};
cognitect.transit.MapBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentArrayMap.fromArray.call(null, arr, true, true);
};
cognitect.transit.MapBuilder.cljs$lang$type = true;
cognitect.transit.MapBuilder.cljs$lang$ctorStr = "cognitect.transit/MapBuilder";
cognitect.transit.MapBuilder.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/MapBuilder");
};
cognitect.transit.__GT_MapBuilder = function cognitect$transit$__GT_MapBuilder() {
  return new cognitect.transit.MapBuilder;
};
cognitect.transit.VectorBuilder = function() {
};
cognitect.transit.VectorBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
};
cognitect.transit.VectorBuilder.prototype.add = function(v, x, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.conj_BANG_.call(null, v, x);
};
cognitect.transit.VectorBuilder.prototype.finalize = function(v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, v);
};
cognitect.transit.VectorBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentVector.fromArray.call(null, arr, true);
};
cognitect.transit.VectorBuilder.cljs$lang$type = true;
cognitect.transit.VectorBuilder.cljs$lang$ctorStr = "cognitect.transit/VectorBuilder";
cognitect.transit.VectorBuilder.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/VectorBuilder");
};
cognitect.transit.__GT_VectorBuilder = function cognitect$transit$__GT_VectorBuilder() {
  return new cognitect.transit.VectorBuilder;
};
cognitect.transit.reader = function() {
  var cognitect$transit$reader = null;
  var cognitect$transit$reader__1 = function(type) {
    return cognitect$transit$reader.call(null, type, null);
  };
  var cognitect$transit$reader__2 = function(type, opts) {
    return com.cognitect.transit.reader.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"prefersStrings":false, "arrayBuilder":new cognitect.transit.VectorBuilder, "mapBuilder":new cognitect.transit.MapBuilder, "handlers":cljs.core.clj__GT_js.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, ["$", function(v) {
      return cljs.core.symbol.call(null, v);
    }, ":", function(v) {
      return cljs.core.keyword.call(null, v);
    }, "set", function(v) {
      return cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, v);
    }, "list", function(v) {
      return cljs.core.into.call(null, cljs.core.List.EMPTY, v.reverse());
    }, "cmap", function(v) {
      var i = 0;
      var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
      while (true) {
        if (i < v.length) {
          var G__11145 = i + 2;
          var G__11146 = cljs.core.assoc_BANG_.call(null, ret, v[i], v[i + 1]);
          i = G__11145;
          ret = G__11146;
          continue;
        } else {
          return cljs.core.persistent_BANG_.call(null, ret);
        }
        break;
      }
    }], null), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts)))}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
  };
  cognitect$transit$reader = function(type, opts) {
    switch(arguments.length) {
      case 1:
        return cognitect$transit$reader__1.call(this, type);
      case 2:
        return cognitect$transit$reader__2.call(this, type, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cognitect$transit$reader.cljs$core$IFn$_invoke$arity$1 = cognitect$transit$reader__1;
  cognitect$transit$reader.cljs$core$IFn$_invoke$arity$2 = cognitect$transit$reader__2;
  return cognitect$transit$reader;
}();
cognitect.transit.read = function cognitect$transit$read(r, str) {
  return r.read(str);
};
cognitect.transit.KeywordHandler = function() {
};
cognitect.transit.KeywordHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return ":";
};
cognitect.transit.KeywordHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.cljs$lang$type = true;
cognitect.transit.KeywordHandler.cljs$lang$ctorStr = "cognitect.transit/KeywordHandler";
cognitect.transit.KeywordHandler.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/KeywordHandler");
};
cognitect.transit.__GT_KeywordHandler = function cognitect$transit$__GT_KeywordHandler() {
  return new cognitect.transit.KeywordHandler;
};
cognitect.transit.SymbolHandler = function() {
};
cognitect.transit.SymbolHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "$";
};
cognitect.transit.SymbolHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.cljs$lang$type = true;
cognitect.transit.SymbolHandler.cljs$lang$ctorStr = "cognitect.transit/SymbolHandler";
cognitect.transit.SymbolHandler.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/SymbolHandler");
};
cognitect.transit.__GT_SymbolHandler = function cognitect$transit$__GT_SymbolHandler() {
  return new cognitect.transit.SymbolHandler;
};
cognitect.transit.ListHandler = function() {
};
cognitect.transit.ListHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "list";
};
cognitect.transit.ListHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__11147_11151 = cljs.core.seq.call(null, v);
  var chunk__11148_11152 = null;
  var count__11149_11153 = 0;
  var i__11150_11154 = 0;
  while (true) {
    if (i__11150_11154 < count__11149_11153) {
      var x_11155 = cljs.core._nth.call(null, chunk__11148_11152, i__11150_11154);
      ret.push(x_11155);
      var G__11156 = seq__11147_11151;
      var G__11157 = chunk__11148_11152;
      var G__11158 = count__11149_11153;
      var G__11159 = i__11150_11154 + 1;
      seq__11147_11151 = G__11156;
      chunk__11148_11152 = G__11157;
      count__11149_11153 = G__11158;
      i__11150_11154 = G__11159;
      continue;
    } else {
      var temp__4126__auto___11160 = cljs.core.seq.call(null, seq__11147_11151);
      if (temp__4126__auto___11160) {
        var seq__11147_11161__$1 = temp__4126__auto___11160;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11147_11161__$1)) {
          var c__4907__auto___11162 = cljs.core.chunk_first.call(null, seq__11147_11161__$1);
          var G__11163 = cljs.core.chunk_rest.call(null, seq__11147_11161__$1);
          var G__11164 = c__4907__auto___11162;
          var G__11165 = cljs.core.count.call(null, c__4907__auto___11162);
          var G__11166 = 0;
          seq__11147_11151 = G__11163;
          chunk__11148_11152 = G__11164;
          count__11149_11153 = G__11165;
          i__11150_11154 = G__11166;
          continue;
        } else {
          var x_11167 = cljs.core.first.call(null, seq__11147_11161__$1);
          ret.push(x_11167);
          var G__11168 = cljs.core.next.call(null, seq__11147_11161__$1);
          var G__11169 = null;
          var G__11170 = 0;
          var G__11171 = 0;
          seq__11147_11151 = G__11168;
          chunk__11148_11152 = G__11169;
          count__11149_11153 = G__11170;
          i__11150_11154 = G__11171;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.ListHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.ListHandler.cljs$lang$type = true;
cognitect.transit.ListHandler.cljs$lang$ctorStr = "cognitect.transit/ListHandler";
cognitect.transit.ListHandler.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/ListHandler");
};
cognitect.transit.__GT_ListHandler = function cognitect$transit$__GT_ListHandler() {
  return new cognitect.transit.ListHandler;
};
cognitect.transit.MapHandler = function() {
};
cognitect.transit.MapHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "map";
};
cognitect.transit.MapHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v;
};
cognitect.transit.MapHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.MapHandler.cljs$lang$type = true;
cognitect.transit.MapHandler.cljs$lang$ctorStr = "cognitect.transit/MapHandler";
cognitect.transit.MapHandler.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/MapHandler");
};
cognitect.transit.__GT_MapHandler = function cognitect$transit$__GT_MapHandler() {
  return new cognitect.transit.MapHandler;
};
cognitect.transit.SetHandler = function() {
};
cognitect.transit.SetHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "set";
};
cognitect.transit.SetHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__11172_11176 = cljs.core.seq.call(null, v);
  var chunk__11173_11177 = null;
  var count__11174_11178 = 0;
  var i__11175_11179 = 0;
  while (true) {
    if (i__11175_11179 < count__11174_11178) {
      var x_11180 = cljs.core._nth.call(null, chunk__11173_11177, i__11175_11179);
      ret.push(x_11180);
      var G__11181 = seq__11172_11176;
      var G__11182 = chunk__11173_11177;
      var G__11183 = count__11174_11178;
      var G__11184 = i__11175_11179 + 1;
      seq__11172_11176 = G__11181;
      chunk__11173_11177 = G__11182;
      count__11174_11178 = G__11183;
      i__11175_11179 = G__11184;
      continue;
    } else {
      var temp__4126__auto___11185 = cljs.core.seq.call(null, seq__11172_11176);
      if (temp__4126__auto___11185) {
        var seq__11172_11186__$1 = temp__4126__auto___11185;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11172_11186__$1)) {
          var c__4907__auto___11187 = cljs.core.chunk_first.call(null, seq__11172_11186__$1);
          var G__11188 = cljs.core.chunk_rest.call(null, seq__11172_11186__$1);
          var G__11189 = c__4907__auto___11187;
          var G__11190 = cljs.core.count.call(null, c__4907__auto___11187);
          var G__11191 = 0;
          seq__11172_11176 = G__11188;
          chunk__11173_11177 = G__11189;
          count__11174_11178 = G__11190;
          i__11175_11179 = G__11191;
          continue;
        } else {
          var x_11192 = cljs.core.first.call(null, seq__11172_11186__$1);
          ret.push(x_11192);
          var G__11193 = cljs.core.next.call(null, seq__11172_11186__$1);
          var G__11194 = null;
          var G__11195 = 0;
          var G__11196 = 0;
          seq__11172_11176 = G__11193;
          chunk__11173_11177 = G__11194;
          count__11174_11178 = G__11195;
          i__11175_11179 = G__11196;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.SetHandler.prototype.stringRep = function() {
  var self__ = this;
  var v = this;
  return null;
};
cognitect.transit.SetHandler.cljs$lang$type = true;
cognitect.transit.SetHandler.cljs$lang$ctorStr = "cognitect.transit/SetHandler";
cognitect.transit.SetHandler.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/SetHandler");
};
cognitect.transit.__GT_SetHandler = function cognitect$transit$__GT_SetHandler() {
  return new cognitect.transit.SetHandler;
};
cognitect.transit.VectorHandler = function() {
};
cognitect.transit.VectorHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "array";
};
cognitect.transit.VectorHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__11197_11201 = cljs.core.seq.call(null, v);
  var chunk__11198_11202 = null;
  var count__11199_11203 = 0;
  var i__11200_11204 = 0;
  while (true) {
    if (i__11200_11204 < count__11199_11203) {
      var x_11205 = cljs.core._nth.call(null, chunk__11198_11202, i__11200_11204);
      ret.push(x_11205);
      var G__11206 = seq__11197_11201;
      var G__11207 = chunk__11198_11202;
      var G__11208 = count__11199_11203;
      var G__11209 = i__11200_11204 + 1;
      seq__11197_11201 = G__11206;
      chunk__11198_11202 = G__11207;
      count__11199_11203 = G__11208;
      i__11200_11204 = G__11209;
      continue;
    } else {
      var temp__4126__auto___11210 = cljs.core.seq.call(null, seq__11197_11201);
      if (temp__4126__auto___11210) {
        var seq__11197_11211__$1 = temp__4126__auto___11210;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11197_11211__$1)) {
          var c__4907__auto___11212 = cljs.core.chunk_first.call(null, seq__11197_11211__$1);
          var G__11213 = cljs.core.chunk_rest.call(null, seq__11197_11211__$1);
          var G__11214 = c__4907__auto___11212;
          var G__11215 = cljs.core.count.call(null, c__4907__auto___11212);
          var G__11216 = 0;
          seq__11197_11201 = G__11213;
          chunk__11198_11202 = G__11214;
          count__11199_11203 = G__11215;
          i__11200_11204 = G__11216;
          continue;
        } else {
          var x_11217 = cljs.core.first.call(null, seq__11197_11211__$1);
          ret.push(x_11217);
          var G__11218 = cljs.core.next.call(null, seq__11197_11211__$1);
          var G__11219 = null;
          var G__11220 = 0;
          var G__11221 = 0;
          seq__11197_11201 = G__11218;
          chunk__11198_11202 = G__11219;
          count__11199_11203 = G__11220;
          i__11200_11204 = G__11221;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return ret;
};
cognitect.transit.VectorHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.VectorHandler.cljs$lang$type = true;
cognitect.transit.VectorHandler.cljs$lang$ctorStr = "cognitect.transit/VectorHandler";
cognitect.transit.VectorHandler.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/VectorHandler");
};
cognitect.transit.__GT_VectorHandler = function cognitect$transit$__GT_VectorHandler() {
  return new cognitect.transit.VectorHandler;
};
cognitect.transit.UUIDHandler = function() {
};
cognitect.transit.UUIDHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "u";
};
cognitect.transit.UUIDHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.uuid;
};
cognitect.transit.UUIDHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var this$ = this;
  return this$.rep(v);
};
cognitect.transit.UUIDHandler.cljs$lang$type = true;
cognitect.transit.UUIDHandler.cljs$lang$ctorStr = "cognitect.transit/UUIDHandler";
cognitect.transit.UUIDHandler.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/UUIDHandler");
};
cognitect.transit.__GT_UUIDHandler = function cognitect$transit$__GT_UUIDHandler() {
  return new cognitect.transit.UUIDHandler;
};
cognitect.transit.writer = function() {
  var cognitect$transit$writer = null;
  var cognitect$transit$writer__1 = function(type) {
    return cognitect$transit$writer.call(null, type, null);
  };
  var cognitect$transit$writer__2 = function(type, opts) {
    var keyword_handler = new cognitect.transit.KeywordHandler;
    var symbol_handler = new cognitect.transit.SymbolHandler;
    var list_handler = new cognitect.transit.ListHandler;
    var map_handler = new cognitect.transit.MapHandler;
    var set_handler = new cognitect.transit.SetHandler;
    var vector_handler = new cognitect.transit.VectorHandler;
    var uuid_handler = new cognitect.transit.UUIDHandler;
    var handlers = cljs.core.merge.call(null, cljs.core.PersistentHashMap.fromArrays([cljs.core.PersistentHashMap, cljs.core.Cons, cljs.core.PersistentArrayMap, cljs.core.NodeSeq, cljs.core.PersistentQueue, cljs.core.IndexedSeq, cljs.core.Keyword, cljs.core.EmptyList, cljs.core.LazySeq, cljs.core.Subvec, cljs.core.PersistentQueueSeq, cljs.core.ArrayNodeSeq, cljs.core.ValSeq, cljs.core.PersistentArrayMapSeq, cljs.core.PersistentVector, cljs.core.List, cljs.core.RSeq, cljs.core.PersistentHashSet, cljs.core.PersistentTreeMap, 
    cljs.core.KeySeq, cljs.core.ChunkedSeq, cljs.core.PersistentTreeSet, cljs.core.ChunkedCons, cljs.core.Symbol, cljs.core.UUID, cljs.core.Range, cljs.core.PersistentTreeMapSeq], [map_handler, list_handler, map_handler, list_handler, list_handler, list_handler, keyword_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, set_handler, map_handler, list_handler, list_handler, set_handler, list_handler, 
    symbol_handler, uuid_handler, list_handler, list_handler]), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts));
    return com.cognitect.transit.writer.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"unpack":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(x) {
        if (x instanceof cljs.core.PersistentArrayMap) {
          return x.arr;
        } else {
          return false;
        }
      };
    }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), "handlers":function() {
      var x11231 = cljs.core.clone.call(null, handlers);
      x11231.forEach = function(x11231, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
        return function(f) {
          var coll = this;
          var seq__11232 = cljs.core.seq.call(null, coll);
          var chunk__11233 = null;
          var count__11234 = 0;
          var i__11235 = 0;
          while (true) {
            if (i__11235 < count__11234) {
              var vec__11236 = cljs.core._nth.call(null, chunk__11233, i__11235);
              var k = cljs.core.nth.call(null, vec__11236, 0, null);
              var v = cljs.core.nth.call(null, vec__11236, 1, null);
              f.call(null, v, k);
              var G__11238 = seq__11232;
              var G__11239 = chunk__11233;
              var G__11240 = count__11234;
              var G__11241 = i__11235 + 1;
              seq__11232 = G__11238;
              chunk__11233 = G__11239;
              count__11234 = G__11240;
              i__11235 = G__11241;
              continue;
            } else {
              var temp__4126__auto__ = cljs.core.seq.call(null, seq__11232);
              if (temp__4126__auto__) {
                var seq__11232__$1 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__11232__$1)) {
                  var c__4907__auto__ = cljs.core.chunk_first.call(null, seq__11232__$1);
                  var G__11242 = cljs.core.chunk_rest.call(null, seq__11232__$1);
                  var G__11243 = c__4907__auto__;
                  var G__11244 = cljs.core.count.call(null, c__4907__auto__);
                  var G__11245 = 0;
                  seq__11232 = G__11242;
                  chunk__11233 = G__11243;
                  count__11234 = G__11244;
                  i__11235 = G__11245;
                  continue;
                } else {
                  var vec__11237 = cljs.core.first.call(null, seq__11232__$1);
                  var k = cljs.core.nth.call(null, vec__11237, 0, null);
                  var v = cljs.core.nth.call(null, vec__11237, 1, null);
                  f.call(null, v, k);
                  var G__11246 = cljs.core.next.call(null, seq__11232__$1);
                  var G__11247 = null;
                  var G__11248 = 0;
                  var G__11249 = 0;
                  seq__11232 = G__11246;
                  chunk__11233 = G__11247;
                  count__11234 = G__11248;
                  i__11235 = G__11249;
                  continue;
                }
              } else {
                return null;
              }
            }
            break;
          }
        };
      }(x11231, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers);
      return x11231;
    }(), "objectBuilder":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(m, kfn, vfn) {
        return cljs.core.reduce_kv.call(null, function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
          return function(obj, k, v) {
            var G__11230 = obj;
            G__11230.push(kfn.call(null, k), vfn.call(null, v));
            return G__11230;
          };
        }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), ["^ "], m);
      };
    }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers)}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
  };
  cognitect$transit$writer = function(type, opts) {
    switch(arguments.length) {
      case 1:
        return cognitect$transit$writer__1.call(this, type);
      case 2:
        return cognitect$transit$writer__2.call(this, type, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cognitect$transit$writer.cljs$core$IFn$_invoke$arity$1 = cognitect$transit$writer__1;
  cognitect$transit$writer.cljs$core$IFn$_invoke$arity$2 = cognitect$transit$writer__2;
  return cognitect$transit$writer;
}();
cognitect.transit.write = function cognitect$transit$write(w, o) {
  return w.write(o);
};
cognitect.transit.read_handler = function cognitect$transit$read_handler(from_rep) {
  return from_rep;
};
cognitect.transit.write_handler = function() {
  var cognitect$transit$write_handler = null;
  var cognitect$transit$write_handler__2 = function(tag_fn, rep_fn) {
    return cognitect$transit$write_handler.call(null, tag_fn, rep_fn, null, null);
  };
  var cognitect$transit$write_handler__3 = function(tag_fn, rep_fn, str_rep_fn) {
    return cognitect$transit$write_handler.call(null, tag_fn, rep_fn, str_rep_fn, null);
  };
  var cognitect$transit$write_handler__4 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
    if (typeof cognitect.transit.t11253 !== "undefined") {
    } else {
      cognitect.transit.t11253 = function(verbose_handler_fn, str_rep_fn, rep_fn, tag_fn, write_handler, meta11254) {
        this.verbose_handler_fn = verbose_handler_fn;
        this.str_rep_fn = str_rep_fn;
        this.rep_fn = rep_fn;
        this.tag_fn = tag_fn;
        this.write_handler = write_handler;
        this.meta11254 = meta11254;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cognitect.transit.t11253.prototype.tag = function(o) {
        var self__ = this;
        var _ = this;
        return self__.tag_fn.call(null, o);
      };
      cognitect.transit.t11253.prototype.rep = function(o) {
        var self__ = this;
        var _ = this;
        return self__.rep_fn.call(null, o);
      };
      cognitect.transit.t11253.prototype.stringRep = function(o) {
        var self__ = this;
        var _ = this;
        if (cljs.core.truth_(self__.str_rep_fn)) {
          return self__.str_rep_fn.call(null, o);
        } else {
          return null;
        }
      };
      cognitect.transit.t11253.prototype.getVerboseHandler = function() {
        var self__ = this;
        var _ = this;
        if (cljs.core.truth_(self__.verbose_handler_fn)) {
          return self__.verbose_handler_fn.call(null);
        } else {
          return null;
        }
      };
      cognitect.transit.t11253.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11255) {
        var self__ = this;
        var _11255__$1 = this;
        return self__.meta11254;
      };
      cognitect.transit.t11253.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11255, meta11254__$1) {
        var self__ = this;
        var _11255__$1 = this;
        return new cognitect.transit.t11253(self__.verbose_handler_fn, self__.str_rep_fn, self__.rep_fn, self__.tag_fn, self__.write_handler, meta11254__$1);
      };
      cognitect.transit.t11253.cljs$lang$type = true;
      cognitect.transit.t11253.cljs$lang$ctorStr = "cognitect.transit/t11253";
      cognitect.transit.t11253.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
        return cljs.core._write.call(null, writer__4702__auto__, "cognitect.transit/t11253");
      };
      cognitect.transit.__GT_t11253 = function cognitect$transit$write_handler_$___GT_t11253(verbose_handler_fn__$1, str_rep_fn__$1, rep_fn__$1, tag_fn__$1, write_handler__$1, meta11254) {
        return new cognitect.transit.t11253(verbose_handler_fn__$1, str_rep_fn__$1, rep_fn__$1, tag_fn__$1, write_handler__$1, meta11254);
      };
    }
    return new cognitect.transit.t11253(verbose_handler_fn, str_rep_fn, rep_fn, tag_fn, cognitect$transit$write_handler, cljs.core.PersistentArrayMap.EMPTY);
  };
  cognitect$transit$write_handler = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
    switch(arguments.length) {
      case 2:
        return cognitect$transit$write_handler__2.call(this, tag_fn, rep_fn);
      case 3:
        return cognitect$transit$write_handler__3.call(this, tag_fn, rep_fn, str_rep_fn);
      case 4:
        return cognitect$transit$write_handler__4.call(this, tag_fn, rep_fn, str_rep_fn, verbose_handler_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cognitect$transit$write_handler.cljs$core$IFn$_invoke$arity$2 = cognitect$transit$write_handler__2;
  cognitect$transit$write_handler.cljs$core$IFn$_invoke$arity$3 = cognitect$transit$write_handler__3;
  cognitect$transit$write_handler.cljs$core$IFn$_invoke$arity$4 = cognitect$transit$write_handler__4;
  return cognitect$transit$write_handler;
}();
cognitect.transit.tagged_value = function cognitect$transit$tagged_value(tag, rep) {
  return com.cognitect.transit.types.taggedValue.call(null, tag, rep);
};
cognitect.transit.tagged_value_QMARK_ = function cognitect$transit$tagged_value_QMARK_(x) {
  return com.cognitect.transit.types.isTaggedValue.call(null, x);
};
cognitect.transit.integer = function cognitect$transit$integer(s) {
  return com.cognitect.transit.types.integer.call(null, s);
};
cognitect.transit.integer_QMARK_ = function cognitect$transit$integer_QMARK_(x) {
  return com.cognitect.transit.types.isInteger.call(null, x);
};
cognitect.transit.bigint = function cognitect$transit$bigint(s) {
  return com.cognitect.transit.types.bigInteger.call(null, s);
};
cognitect.transit.bigint_QMARK_ = function cognitect$transit$bigint_QMARK_(x) {
  return com.cognitect.transit.types.isBigInteger.call(null, x);
};
cognitect.transit.bigdec = function cognitect$transit$bigdec(s) {
  return com.cognitect.transit.types.bigDecimalValue.call(null, s);
};
cognitect.transit.bigdec_QMARK_ = function cognitect$transit$bigdec_QMARK_(x) {
  return com.cognitect.transit.types.isBigDecimal.call(null, x);
};
cognitect.transit.uri = function cognitect$transit$uri(s) {
  return com.cognitect.transit.types.uri.call(null, s);
};
cognitect.transit.uri_QMARK_ = function cognitect$transit$uri_QMARK_(x) {
  return com.cognitect.transit.types.isURI.call(null, x);
};
cognitect.transit.uuid = function cognitect$transit$uuid(s) {
  return com.cognitect.transit.types.uuid.call(null, s);
};
cognitect.transit.uuid_QMARK_ = function cognitect$transit$uuid_QMARK_(x) {
  return com.cognitect.transit.types.isUUID.call(null, x);
};
cognitect.transit.binary = function cognitect$transit$binary(s) {
  return com.cognitect.transit.types.binary.call(null, s);
};
cognitect.transit.binary_QMARK_ = function cognitect$transit$binary_QMARK_(x) {
  return com.cognitect.transit.types.isBinary.call(null, x);
};
cognitect.transit.quoted = function cognitect$transit$quoted(x) {
  return com.cognitect.transit.types.quoted.call(null, x);
};
cognitect.transit.quoted_QMARK_ = function cognitect$transit$quoted_QMARK_(x) {
  return com.cognitect.transit.types.isQuoted.call(null, x);
};
cognitect.transit.link = function cognitect$transit$link(x) {
  return com.cognitect.transit.types.link.call(null, x);
};
cognitect.transit.link_QMARK_ = function cognitect$transit$link_QMARK_(x) {
  return com.cognitect.transit.types.isLink.call(null, x);
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
clojure.string.seq_reverse = function clojure$string$seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function clojure$string$reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace = function clojure$string$replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (match instanceof RegExp) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function clojure$string$replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var clojure$string$join = null;
  var clojure$string$join__1 = function(coll) {
    var sb = new goog.string.StringBuffer;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var G__11094 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
        var G__11095 = cljs.core.next.call(null, coll__$1);
        sb = G__11094;
        coll__$1 = G__11095;
        continue;
      } else {
        return sb.toString();
      }
      break;
    }
  };
  var clojure$string$join__2 = function(separator, coll) {
    var sb = new goog.string.StringBuffer;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
        var coll__$2 = cljs.core.next.call(null, coll__$1);
        if (coll__$2 == null) {
        } else {
          sb.append(separator);
        }
        var G__11096 = sb;
        var G__11097 = coll__$2;
        sb = G__11096;
        coll__$1 = G__11097;
        continue;
      } else {
        return sb.toString();
      }
      break;
    }
  };
  clojure$string$join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return clojure$string$join__1.call(this, separator);
      case 2:
        return clojure$string$join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clojure$string$join.cljs$core$IFn$_invoke$arity$1 = clojure$string$join__1;
  clojure$string$join.cljs$core$IFn$_invoke$arity$2 = clojure$string$join__2;
  return clojure$string$join;
}();
clojure.string.upper_case = function clojure$string$upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function clojure$string$lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function clojure$string$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function clojure$string$pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__11098 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__11098;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function clojure$string$discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function clojure$string$split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__11102 = cljs.core._EQ_;
    var expr__11103 = limit;
    if (cljs.core.truth_(pred__11102.call(null, 1, expr__11103))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__11102.call(null, 2, expr__11103))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var clojure$string$split = null;
  var clojure$string$split__2 = function(s, re) {
    return clojure$string$split.call(null, s, re, 0);
  };
  var clojure$string$split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__11105 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__11106 = limit__$1 - 1;
            var G__11107 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__11105;
            limit__$1 = G__11106;
            parts = G__11107;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  clojure$string$split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return clojure$string$split__2.call(this, s, re);
      case 3:
        return clojure$string$split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clojure$string$split.cljs$core$IFn$_invoke$arity$2 = clojure$string$split__2;
  clojure$string$split.cljs$core$IFn$_invoke$arity$3 = clojure$string$split__3;
  return clojure$string$split;
}();
clojure.string.split_lines = function clojure$string$split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function clojure$string$trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function clojure$string$triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function clojure$string$trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function clojure$string$trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__11108 = index - 1;
        index = G__11108;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function clojure$string$blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function clojure$string$escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___11109 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___11109)) {
        var replacement_11110 = temp__4124__auto___11109;
        buffer.append([cljs.core.str(replacement_11110)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__11111 = index + 1;
      index = G__11111;
      continue;
    }
    break;
  }
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj10981 = {};
  return obj10981;
}();
cljs.reader.read_char = function cljs$reader$read_char(reader) {
  if (function() {
    var and__4110__auto__ = reader;
    if (and__4110__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4758__auto__ = reader == null ? null : reader;
    return function() {
      var or__4122__auto__ = cljs.reader.read_char[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.reader.read_char["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function cljs$reader$unread(reader, ch) {
  if (function() {
    var and__4110__auto__ = reader;
    if (and__4110__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4758__auto__ = reader == null ? null : reader;
    return function() {
      var or__4122__auto__ = cljs.reader.unread[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.reader.unread["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function cljs$reader$__GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function cljs$reader$push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function cljs$reader$whitespace_QMARK_(ch) {
  var or__4122__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function cljs$reader$numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function cljs$reader$comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function cljs$reader$number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var cljs$reader$reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var cljs$reader$reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      var G__10982__i = 0, G__10982__a = new Array(arguments.length - 1);
      while (G__10982__i < G__10982__a.length) {
        G__10982__a[G__10982__i] = arguments[G__10982__i + 1];
        ++G__10982__i;
      }
      msg = new cljs.core.IndexedSeq(G__10982__a, 0);
    }
    return cljs$reader$reader_error__delegate.call(this, rdr, msg);
  };
  cljs$reader$reader_error.cljs$lang$maxFixedArity = 1;
  cljs$reader$reader_error.cljs$lang$applyTo = function(arglist__10983) {
    var rdr = cljs.core.first(arglist__10983);
    var msg = cljs.core.rest(arglist__10983);
    return cljs$reader$reader_error__delegate(rdr, msg);
  };
  cljs$reader$reader_error.cljs$core$IFn$_invoke$arity$variadic = cljs$reader$reader_error__delegate;
  return cljs$reader$reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function cljs$reader$macro_terminating_QMARK_(ch) {
  var and__4110__auto__ = !(ch === "#");
  if (and__4110__auto__) {
    var and__4110__auto____$1 = !(ch === "'");
    if (and__4110__auto____$1) {
      var and__4110__auto____$2 = !(ch === ":");
      if (and__4110__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__4110__auto____$2;
      }
    } else {
      return and__4110__auto____$1;
    }
  } else {
    return and__4110__auto__;
  }
};
cljs.reader.read_token = function cljs$reader$read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__10984 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__10985 = cljs.reader.read_char.call(null, rdr);
      sb = G__10984;
      ch = G__10985;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function cljs$reader$skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function cljs$reader$re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function cljs$reader$match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function cljs$reader$match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function cljs$reader$match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function cljs$reader$match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function cljs$reader$escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function cljs$reader$read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function cljs$reader$read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function cljs$reader$validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function cljs$reader$make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function cljs$reader$escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function cljs$reader$read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__10986 = cljs.reader.read_char.call(null, rdr);
      ch = G__10986;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function cljs$reader$read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__10987 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__10987;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__10988 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__10988;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function cljs$reader$not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function cljs$reader$read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function cljs$reader$read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function cljs$reader$read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function cljs$reader$read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function cljs$reader$read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function cljs$reader$read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__4122__auto__ = ch == null;
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__4122__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__10989 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__10990 = cljs.reader.read_char.call(null, reader);
      buffer = G__10989;
      ch = G__10990;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function cljs$reader$read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__10991 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__10992 = cljs.reader.read_char.call(null, reader);
        buffer = G__10991;
        ch = G__10992;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__10993 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__10994 = cljs.reader.read_char.call(null, reader);
          buffer = G__10993;
          ch = G__10994;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function cljs$reader$read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__10999 = function() {
            var G__10997 = buffer;
            G__10997.append(nch);
            return G__10997;
          }();
          var G__11000 = cljs.reader.read_char.call(null, reader);
          buffer = G__10999;
          ch = G__11000;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__11001 = function() {
            var G__10998 = buffer;
            G__10998.append(ch);
            return G__10998;
          }();
          var G__11002 = cljs.reader.read_char.call(null, reader);
          buffer = G__11001;
          ch = G__11002;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function cljs$reader$special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function cljs$reader$read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__4110__auto__)) {
      return!(token.length === 1);
    } else {
      return and__4110__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function cljs$reader$read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function cljs$reader$desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function cljs$reader$wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function cljs$reader$throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function cljs$reader$read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__11004 = o;
    if (G__11004) {
      var bit__4796__auto__ = G__11004.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4796__auto__ || G__11004.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__11004.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__11004);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__11004);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function cljs$reader$read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function cljs$reader$read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function cljs$reader$read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function cljs$reader$macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function cljs$reader$dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function cljs$reader$read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__11005 = reader;
        var G__11006 = eof_is_error;
        var G__11007 = sentinel;
        var G__11008 = is_recursive;
        reader = G__11005;
        eof_is_error = G__11006;
        sentinel = G__11007;
        is_recursive = G__11008;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__11009 = cljs.reader.read_comment.call(null, reader, ch);
          var G__11010 = eof_is_error;
          var G__11011 = sentinel;
          var G__11012 = is_recursive;
          reader = G__11009;
          eof_is_error = G__11010;
          sentinel = G__11011;
          is_recursive = G__11012;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__11013 = reader;
            var G__11014 = eof_is_error;
            var G__11015 = sentinel;
            var G__11016 = is_recursive;
            reader = G__11013;
            eof_is_error = G__11014;
            sentinel = G__11015;
            is_recursive = G__11016;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function cljs$reader$read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function cljs$reader$zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__11017 = b.append("0");
          b = G__11017;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function cljs$reader$divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function cljs$reader$indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function cljs$reader$leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function cljs$reader$parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function cljs$reader$check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function cljs$reader$parse_and_validate_timestamp(s) {
  var vec__11019 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__11019, 0, null);
  var years = cljs.core.nth.call(null, vec__11019, 1, null);
  var months = cljs.core.nth.call(null, vec__11019, 2, null);
  var days = cljs.core.nth.call(null, vec__11019, 3, null);
  var hours = cljs.core.nth.call(null, vec__11019, 4, null);
  var minutes = cljs.core.nth.call(null, vec__11019, 5, null);
  var seconds = cljs.core.nth.call(null, vec__11019, 6, null);
  var fraction = cljs.core.nth.call(null, vec__11019, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__11019, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__11019, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__11019, 10, null);
  var v = vec__11019;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__4122__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__4122__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__4122__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__4122__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__4122__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__4122__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__4122__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__4122__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function cljs$reader$parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__11021 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__11021, 0, null);
    var months = cljs.core.nth.call(null, vec__11021, 1, null);
    var days = cljs.core.nth.call(null, vec__11021, 2, null);
    var hours = cljs.core.nth.call(null, vec__11021, 3, null);
    var minutes = cljs.core.nth.call(null, vec__11021, 4, null);
    var seconds = cljs.core.nth.call(null, vec__11021, 5, null);
    var ms = cljs.core.nth.call(null, vec__11021, 6, null);
    var offset = cljs.core.nth.call(null, vec__11021, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function cljs$reader$read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function cljs$reader$read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function cljs$reader$read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__11034_11046 = cljs.core.seq.call(null, form);
    var chunk__11035_11047 = null;
    var count__11036_11048 = 0;
    var i__11037_11049 = 0;
    while (true) {
      if (i__11037_11049 < count__11036_11048) {
        var x_11050 = cljs.core._nth.call(null, chunk__11035_11047, i__11037_11049);
        arr.push(x_11050);
        var G__11051 = seq__11034_11046;
        var G__11052 = chunk__11035_11047;
        var G__11053 = count__11036_11048;
        var G__11054 = i__11037_11049 + 1;
        seq__11034_11046 = G__11051;
        chunk__11035_11047 = G__11052;
        count__11036_11048 = G__11053;
        i__11037_11049 = G__11054;
        continue;
      } else {
        var temp__4126__auto___11055 = cljs.core.seq.call(null, seq__11034_11046);
        if (temp__4126__auto___11055) {
          var seq__11034_11056__$1 = temp__4126__auto___11055;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__11034_11056__$1)) {
            var c__4907__auto___11057 = cljs.core.chunk_first.call(null, seq__11034_11056__$1);
            var G__11058 = cljs.core.chunk_rest.call(null, seq__11034_11056__$1);
            var G__11059 = c__4907__auto___11057;
            var G__11060 = cljs.core.count.call(null, c__4907__auto___11057);
            var G__11061 = 0;
            seq__11034_11046 = G__11058;
            chunk__11035_11047 = G__11059;
            count__11036_11048 = G__11060;
            i__11037_11049 = G__11061;
            continue;
          } else {
            var x_11062 = cljs.core.first.call(null, seq__11034_11056__$1);
            arr.push(x_11062);
            var G__11063 = cljs.core.next.call(null, seq__11034_11056__$1);
            var G__11064 = null;
            var G__11065 = 0;
            var G__11066 = 0;
            seq__11034_11046 = G__11063;
            chunk__11035_11047 = G__11064;
            count__11036_11048 = G__11065;
            i__11037_11049 = G__11066;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj11039 = {};
        return obj11039;
      }();
      var seq__11040_11067 = cljs.core.seq.call(null, form);
      var chunk__11041_11068 = null;
      var count__11042_11069 = 0;
      var i__11043_11070 = 0;
      while (true) {
        if (i__11043_11070 < count__11042_11069) {
          var vec__11044_11071 = cljs.core._nth.call(null, chunk__11041_11068, i__11043_11070);
          var k_11072 = cljs.core.nth.call(null, vec__11044_11071, 0, null);
          var v_11073 = cljs.core.nth.call(null, vec__11044_11071, 1, null);
          obj[cljs.core.name.call(null, k_11072)] = v_11073;
          var G__11074 = seq__11040_11067;
          var G__11075 = chunk__11041_11068;
          var G__11076 = count__11042_11069;
          var G__11077 = i__11043_11070 + 1;
          seq__11040_11067 = G__11074;
          chunk__11041_11068 = G__11075;
          count__11042_11069 = G__11076;
          i__11043_11070 = G__11077;
          continue;
        } else {
          var temp__4126__auto___11078 = cljs.core.seq.call(null, seq__11040_11067);
          if (temp__4126__auto___11078) {
            var seq__11040_11079__$1 = temp__4126__auto___11078;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__11040_11079__$1)) {
              var c__4907__auto___11080 = cljs.core.chunk_first.call(null, seq__11040_11079__$1);
              var G__11081 = cljs.core.chunk_rest.call(null, seq__11040_11079__$1);
              var G__11082 = c__4907__auto___11080;
              var G__11083 = cljs.core.count.call(null, c__4907__auto___11080);
              var G__11084 = 0;
              seq__11040_11067 = G__11081;
              chunk__11041_11068 = G__11082;
              count__11042_11069 = G__11083;
              i__11043_11070 = G__11084;
              continue;
            } else {
              var vec__11045_11085 = cljs.core.first.call(null, seq__11040_11079__$1);
              var k_11086 = cljs.core.nth.call(null, vec__11045_11085, 0, null);
              var v_11087 = cljs.core.nth.call(null, vec__11045_11085, 1, null);
              obj[cljs.core.name.call(null, k_11086)] = v_11087;
              var G__11088 = cljs.core.next.call(null, seq__11040_11079__$1);
              var G__11089 = null;
              var G__11090 = 0;
              var G__11091 = 0;
              seq__11040_11067 = G__11088;
              chunk__11041_11068 = G__11089;
              count__11042_11069 = G__11090;
              i__11043_11070 = G__11091;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function cljs$reader$read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function cljs$reader$maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function cljs$reader$register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function cljs$reader$deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function cljs$reader$register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function cljs$reader$deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("ajax.core");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("cognitect.transit");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrManager");
goog.require("goog.json");
goog.require("goog.Uri.QueryData");
goog.require("goog.net.EventType");
goog.require("goog.events");
goog.require("goog.structs");
goog.require("goog.json.Serializer");
goog.require("clojure.string");
goog.require("cljs.reader");
goog.require("goog.net.ErrorCode");
ajax.core.AjaxImpl = function() {
  var obj10851 = {};
  return obj10851;
}();
ajax.core._js_ajax_request = function ajax$core$_js_ajax_request(this$, uri, method, body, headers, handler, opts) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7(this$, uri, method, body, headers, handler, opts);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = ajax.core._js_ajax_request[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = ajax.core._js_ajax_request["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxImpl.-js-ajax-request", this$);
        }
      }
    }().call(null, this$, uri, method, body, headers, handler, opts);
  }
};
ajax.core.AjaxRequest = function() {
  var obj10853 = {};
  return obj10853;
}();
ajax.core._abort = function ajax$core$_abort(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.ajax$core$AjaxRequest$_abort$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxRequest$_abort$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = ajax.core._abort[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = ajax.core._abort["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxRequest.-abort", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core.DirectlySubmittable = function() {
  var obj10855 = {};
  return obj10855;
}();
ajax.core.AjaxResponse = function() {
  var obj10857 = {};
  return obj10857;
}();
ajax.core._status = function ajax$core$_status(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.ajax$core$AjaxResponse$_status$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_status$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = ajax.core._status[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = ajax.core._status["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-status", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core._status_text = function ajax$core$_status_text(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.ajax$core$AjaxResponse$_status_text$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_status_text$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = ajax.core._status_text[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = ajax.core._status_text["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-status-text", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core._body = function ajax$core$_body(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.ajax$core$AjaxResponse$_body$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_body$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = ajax.core._body[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = ajax.core._body["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-body", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core._get_response_header = function ajax$core$_get_response_header(this$, header) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.ajax$core$AjaxResponse$_get_response_header$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_get_response_header$arity$2(this$, header);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = ajax.core._get_response_header[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = ajax.core._get_response_header["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-get-response-header", this$);
        }
      }
    }().call(null, this$, header);
  }
};
ajax.core._was_aborted = function ajax$core$_was_aborted(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.ajax$core$AjaxResponse$_was_aborted$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_was_aborted$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = ajax.core._was_aborted[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = ajax.core._was_aborted["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-was-aborted", this$);
        }
      }
    }().call(null, this$);
  }
};
if (typeof FormData !== "undefined") {
  FormData.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
if (typeof ArrayBufferView !== "undefined") {
  ArrayBufferView.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
if (typeof Blob !== "undefined") {
  Blob.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
if (typeof Document !== "undefined") {
  Document.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
ajax.core.submittable_QMARK_ = function ajax$core$submittable_QMARK_(params) {
  var or__4122__auto__ = function() {
    var G__10861 = params;
    if (G__10861) {
      var bit__4796__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4122__auto__ = bit__4796__auto__;
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return G__10861.ajax$core$DirectlySubmittable$;
        }
      }())) {
        return true;
      } else {
        if (!G__10861.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, ajax.core.DirectlySubmittable, G__10861);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, ajax.core.DirectlySubmittable, G__10861);
    }
  }();
  if (or__4122__auto__) {
    return or__4122__auto__;
  } else {
    return typeof params === "string";
  }
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_body$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getResponseText();
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_status$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getStatus();
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_status_text$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getStatusText();
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_get_response_header$arity$2 = function(this$, header) {
  var this$__$1 = this;
  return this$__$1.getResponseHeader(header);
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_was_aborted$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._EQ_.call(null, this$__$1.getLastErrorCode(), goog.net.ErrorCode.ABORT);
};
goog.net.XhrIo.prototype.ajax$core$AjaxRequest$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxRequest$_abort$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.abort(goog.net.ErrorCode.ABORT);
};
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__10863) {
  var map__10864 = p__10863;
  var map__10864__$1 = cljs.core.seq_QMARK_.call(null, map__10864) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10864) : map__10864;
  var with_credentials = cljs.core.get.call(null, map__10864__$1, new cljs.core.Keyword(null, "with-credentials", "with-credentials", -1163127235), false);
  var timeout = cljs.core.get.call(null, map__10864__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318), 0);
  var this$__$1 = this;
  var G__10865 = this$__$1;
  goog.events.listen(G__10865, goog.net.EventType.COMPLETE, function(G__10865, this$__$1, map__10864, map__10864__$1, with_credentials, timeout) {
    return function(p1__10862_SHARP_) {
      return handler.call(null, p1__10862_SHARP_.target);
    };
  }(G__10865, this$__$1, map__10864, map__10864__$1, with_credentials, timeout));
  G__10865.setTimeoutInterval(timeout);
  G__10865.setWithCredentials(with_credentials);
  G__10865.send(uri, method, body, cljs.core.clj__GT_js.call(null, headers));
  return G__10865;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$ = true;
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_body$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.response;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_status$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.status;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_status_text$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.statusText;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_get_response_header$arity$2 = function(this$, header) {
  var this$__$1 = this;
  return this$__$1.getResponseHeader(header);
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_was_aborted$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._EQ_.call(null, 0, this$__$1.readyState);
};
XMLHttpRequest.prototype.ajax$core$AjaxRequest$ = true;
XMLHttpRequest.prototype.ajax$core$AjaxRequest$_abort$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.abort();
};
XMLHttpRequest.prototype.ajax$core$AjaxImpl$ = true;
XMLHttpRequest.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__10866) {
  var map__10867 = p__10866;
  var map__10867__$1 = cljs.core.seq_QMARK_.call(null, map__10867) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10867) : map__10867;
  var with_credentials = cljs.core.get.call(null, map__10867__$1, new cljs.core.Keyword(null, "with-credentials", "with-credentials", -1163127235), false);
  var timeout = cljs.core.get.call(null, map__10867__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318), 0);
  var this$__$1 = this;
  this$__$1.timeout = timeout;
  this$__$1.withCredentials = with_credentials;
  this$__$1.onreadystatechange = function(this$__$1, map__10867, map__10867__$1, with_credentials, timeout) {
    return function() {
      return handler.call(null, this$__$1);
    };
  }(this$__$1, map__10867, map__10867__$1, with_credentials, timeout);
  var G__10868 = this$__$1;
  G__10868.open(method, uri, true);
  var t_10875 = G__10868;
  var t_10876__$1 = function() {
    var seq__10869 = cljs.core.seq.call(null, headers);
    var chunk__10870 = null;
    var count__10871 = 0;
    var i__10872 = 0;
    while (true) {
      if (i__10872 < count__10871) {
        var vec__10873 = cljs.core._nth.call(null, chunk__10870, i__10872);
        var k = cljs.core.nth.call(null, vec__10873, 0, null);
        var v = cljs.core.nth.call(null, vec__10873, 1, null);
        t_10875.setRequestHeader(k, v);
        var G__10877 = seq__10869;
        var G__10878 = chunk__10870;
        var G__10879 = count__10871;
        var G__10880 = i__10872 + 1;
        seq__10869 = G__10877;
        chunk__10870 = G__10878;
        count__10871 = G__10879;
        i__10872 = G__10880;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__10869);
        if (temp__4126__auto__) {
          var seq__10869__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__10869__$1)) {
            var c__4907__auto__ = cljs.core.chunk_first.call(null, seq__10869__$1);
            var G__10881 = cljs.core.chunk_rest.call(null, seq__10869__$1);
            var G__10882 = c__4907__auto__;
            var G__10883 = cljs.core.count.call(null, c__4907__auto__);
            var G__10884 = 0;
            seq__10869 = G__10881;
            chunk__10870 = G__10882;
            count__10871 = G__10883;
            i__10872 = G__10884;
            continue;
          } else {
            var vec__10874 = cljs.core.first.call(null, seq__10869__$1);
            var k = cljs.core.nth.call(null, vec__10874, 0, null);
            var v = cljs.core.nth.call(null, vec__10874, 1, null);
            t_10875.setRequestHeader(k, v);
            var G__10885 = cljs.core.next.call(null, seq__10869__$1);
            var G__10886 = null;
            var G__10887 = 0;
            var G__10888 = 0;
            seq__10869 = G__10885;
            chunk__10870 = G__10886;
            count__10871 = G__10887;
            i__10872 = G__10888;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  }();
  G__10868.send(function() {
    var or__4122__auto__ = body;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return "";
    }
  }());
  return G__10868;
};
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__10889) {
  var map__10890 = p__10889;
  var map__10890__$1 = cljs.core.seq_QMARK_.call(null, map__10890) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10890) : map__10890;
  var max_retries = cljs.core.get.call(null, map__10890__$1, new cljs.core.Keyword(null, "max-retries", "max-retries", -1933762121));
  var priority = cljs.core.get.call(null, map__10890__$1, new cljs.core.Keyword(null, "priority", "priority", 1431093715));
  var timeout = cljs.core.get.call(null, map__10890__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
  var id = cljs.core.get.call(null, map__10890__$1, new cljs.core.Keyword(null, "id", "id", -1388402092));
  var this$__$1 = this;
  return this$__$1.send(id, uri, method, body, cljs.core.clj__GT_js.call(null, headers), priority, handler, max_retries);
};
ajax.core.abort = function ajax$core$abort(this$) {
  return ajax.core._abort.call(null, this$);
};
ajax.core.success_QMARK_ = function ajax$core$success_QMARK_(status) {
  return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([status], true), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [200, 201, 202, 204, 205, 206], null));
};
ajax.core.read_edn = function ajax$core$read_edn(xhrio) {
  return cljs.reader.read_string.call(null, ajax.core._body.call(null, xhrio));
};
ajax.core.edn_response_format = function() {
  var ajax$core$edn_response_format = null;
  var ajax$core$edn_response_format__0 = function() {
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.read_edn, new cljs.core.Keyword(null, "description", "description", -1428560544), "EDN", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/edn"], null);
  };
  var ajax$core$edn_response_format__1 = function(opts) {
    return ajax$core$edn_response_format.call(null);
  };
  ajax$core$edn_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return ajax$core$edn_response_format__0.call(this);
      case 1:
        return ajax$core$edn_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$edn_response_format.cljs$core$IFn$_invoke$arity$0 = ajax$core$edn_response_format__0;
  ajax$core$edn_response_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$edn_response_format__1;
  return ajax$core$edn_response_format;
}();
ajax.core.edn_request_format = function ajax$core$edn_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), cljs.core.pr_str, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/edn"], null);
};
ajax.core.transit_content_type = "application/transit+json; charset\x3dutf-8";
ajax.core.transit_write = function() {
  var ajax$core$transit_write = null;
  var ajax$core$transit_write__1 = function(writer) {
    return function(params) {
      return cognitect.transit.write.call(null, writer, params);
    };
  };
  var ajax$core$transit_write__2 = function(writer, params) {
    return cognitect.transit.write.call(null, writer, params);
  };
  ajax$core$transit_write = function(writer, params) {
    switch(arguments.length) {
      case 1:
        return ajax$core$transit_write__1.call(this, writer);
      case 2:
        return ajax$core$transit_write__2.call(this, writer, params);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$transit_write.cljs$core$IFn$_invoke$arity$1 = ajax$core$transit_write__1;
  ajax$core$transit_write.cljs$core$IFn$_invoke$arity$2 = ajax$core$transit_write__2;
  return ajax$core$transit_write;
}();
ajax.core.transit_request_format = function() {
  var ajax$core$transit_request_format = null;
  var ajax$core$transit_request_format__0 = function() {
    return ajax$core$transit_request_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var ajax$core$transit_request_format__1 = function(p__10891) {
    var map__10893 = p__10891;
    var map__10893__$1 = cljs.core.seq_QMARK_.call(null, map__10893) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10893) : map__10893;
    var opts = map__10893__$1;
    var writer = cljs.core.get.call(null, map__10893__$1, new cljs.core.Keyword(null, "writer", "writer", -277568236));
    var type = cljs.core.get.call(null, map__10893__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
    var writer__$1 = function() {
      var or__4122__auto__ = writer;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return cognitect.transit.writer.call(null, function() {
          var or__4122__auto____$1 = type;
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            return new cljs.core.Keyword(null, "json", "json", 1279968570);
          }
        }(), opts);
      }
    }();
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.transit_write.call(null, writer__$1), new cljs.core.Keyword(null, "content-type", "content-type", -508222634), ajax.core.transit_content_type], null);
  };
  ajax$core$transit_request_format = function(p__10891) {
    switch(arguments.length) {
      case 0:
        return ajax$core$transit_request_format__0.call(this);
      case 1:
        return ajax$core$transit_request_format__1.call(this, p__10891);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$transit_request_format.cljs$core$IFn$_invoke$arity$0 = ajax$core$transit_request_format__0;
  ajax$core$transit_request_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$transit_request_format__1;
  return ajax$core$transit_request_format;
}();
ajax.core.transit_read = function() {
  var ajax$core$transit_read = null;
  var ajax$core$transit_read__1 = function(reader) {
    return function(raw, xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var data = cognitect.transit.read.call(null, reader, text);
      if (cljs.core.truth_(raw)) {
        return data;
      } else {
        return cljs.core.js__GT_clj.call(null, data);
      }
    };
  };
  var ajax$core$transit_read__2 = function(reader, raw) {
    return function(xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var data = cognitect.transit.read.call(null, reader, text);
      if (cljs.core.truth_(raw)) {
        return data;
      } else {
        return cljs.core.js__GT_clj.call(null, data);
      }
    };
  };
  var ajax$core$transit_read__3 = function(reader, raw, xhrio) {
    var text = ajax.core._body.call(null, xhrio);
    var data = cognitect.transit.read.call(null, reader, text);
    if (cljs.core.truth_(raw)) {
      return data;
    } else {
      return cljs.core.js__GT_clj.call(null, data);
    }
  };
  ajax$core$transit_read = function(reader, raw, xhrio) {
    switch(arguments.length) {
      case 1:
        return ajax$core$transit_read__1.call(this, reader);
      case 2:
        return ajax$core$transit_read__2.call(this, reader, raw);
      case 3:
        return ajax$core$transit_read__3.call(this, reader, raw, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$transit_read.cljs$core$IFn$_invoke$arity$1 = ajax$core$transit_read__1;
  ajax$core$transit_read.cljs$core$IFn$_invoke$arity$2 = ajax$core$transit_read__2;
  ajax$core$transit_read.cljs$core$IFn$_invoke$arity$3 = ajax$core$transit_read__3;
  return ajax$core$transit_read;
}();
ajax.core.transit_response_format = function() {
  var ajax$core$transit_response_format = null;
  var ajax$core$transit_response_format__0 = function() {
    return ajax$core$transit_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var ajax$core$transit_response_format__1 = function(p__10894) {
    var map__10896 = p__10894;
    var map__10896__$1 = cljs.core.seq_QMARK_.call(null, map__10896) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10896) : map__10896;
    var opts = map__10896__$1;
    var raw = cljs.core.get.call(null, map__10896__$1, new cljs.core.Keyword(null, "raw", "raw", 1604651272));
    var reader = cljs.core.get.call(null, map__10896__$1, new cljs.core.Keyword(null, "reader", "reader", 169660853));
    var type = cljs.core.get.call(null, map__10896__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
    var reader__$1 = function() {
      var or__4122__auto__ = reader;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return cognitect.transit.reader.call(null, function() {
          var or__4122__auto____$1 = type;
          if (cljs.core.truth_(or__4122__auto____$1)) {
            return or__4122__auto____$1;
          } else {
            return new cljs.core.Keyword(null, "json", "json", 1279968570);
          }
        }(), opts);
      }
    }();
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.transit_read.call(null, reader__$1, raw), new cljs.core.Keyword(null, "description", "description", -1428560544), "Transit", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/transit+json"], null);
  };
  ajax$core$transit_response_format = function(p__10894) {
    switch(arguments.length) {
      case 0:
        return ajax$core$transit_response_format__0.call(this);
      case 1:
        return ajax$core$transit_response_format__1.call(this, p__10894);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$transit_response_format.cljs$core$IFn$_invoke$arity$0 = ajax$core$transit_response_format__0;
  ajax$core$transit_response_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$transit_response_format__1;
  return ajax$core$transit_response_format;
}();
ajax.core.params_to_str = function ajax$core$params_to_str(params) {
  if (cljs.core.truth_(params)) {
    return goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, params))).toString();
  } else {
    return null;
  }
};
ajax.core.url_request_format = function ajax$core$url_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.params_to_str, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/x-www-form-urlencoded"], null);
};
ajax.core.raw_response_format = function() {
  var ajax$core$raw_response_format = null;
  var ajax$core$raw_response_format__0 = function() {
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core._body, new cljs.core.Keyword(null, "description", "description", -1428560544), "raw text", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "*/*"], null);
  };
  var ajax$core$raw_response_format__1 = function(opts) {
    return ajax$core$raw_response_format.call(null);
  };
  ajax$core$raw_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return ajax$core$raw_response_format__0.call(this);
      case 1:
        return ajax$core$raw_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$raw_response_format.cljs$core$IFn$_invoke$arity$0 = ajax$core$raw_response_format__0;
  ajax$core$raw_response_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$raw_response_format__1;
  return ajax$core$raw_response_format;
}();
ajax.core.write_json = function ajax$core$write_json(data) {
  return(new goog.json.Serializer).serialize(cljs.core.clj__GT_js.call(null, data));
};
ajax.core.json_request_format = function ajax$core$json_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.write_json, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/json"], null);
};
ajax.core.json_read = function() {
  var ajax$core$json_read = null;
  var ajax$core$json_read__1 = function(prefix) {
    return function(raw, keywords_QMARK_, xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var text__$1 = cljs.core.truth_(function() {
        var and__4110__auto__ = prefix;
        if (cljs.core.truth_(and__4110__auto__)) {
          return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
        } else {
          return and__4110__auto__;
        }
      }()) ? text.substring(prefix.length()) : text;
      var json = goog.json.parse(text__$1);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var ajax$core$json_read__2 = function(prefix, raw) {
    return function(keywords_QMARK_, xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var text__$1 = cljs.core.truth_(function() {
        var and__4110__auto__ = prefix;
        if (cljs.core.truth_(and__4110__auto__)) {
          return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
        } else {
          return and__4110__auto__;
        }
      }()) ? text.substring(prefix.length()) : text;
      var json = goog.json.parse(text__$1);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var ajax$core$json_read__3 = function(prefix, raw, keywords_QMARK_) {
    return function(xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var text__$1 = cljs.core.truth_(function() {
        var and__4110__auto__ = prefix;
        if (cljs.core.truth_(and__4110__auto__)) {
          return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
        } else {
          return and__4110__auto__;
        }
      }()) ? text.substring(prefix.length()) : text;
      var json = goog.json.parse(text__$1);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var ajax$core$json_read__4 = function(prefix, raw, keywords_QMARK_, xhrio) {
    var text = ajax.core._body.call(null, xhrio);
    var text__$1 = cljs.core.truth_(function() {
      var and__4110__auto__ = prefix;
      if (cljs.core.truth_(and__4110__auto__)) {
        return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
      } else {
        return and__4110__auto__;
      }
    }()) ? text.substring(prefix.length()) : text;
    var json = goog.json.parse(text__$1);
    if (cljs.core.truth_(raw)) {
      return json;
    } else {
      return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
    }
  };
  ajax$core$json_read = function(prefix, raw, keywords_QMARK_, xhrio) {
    switch(arguments.length) {
      case 1:
        return ajax$core$json_read__1.call(this, prefix);
      case 2:
        return ajax$core$json_read__2.call(this, prefix, raw);
      case 3:
        return ajax$core$json_read__3.call(this, prefix, raw, keywords_QMARK_);
      case 4:
        return ajax$core$json_read__4.call(this, prefix, raw, keywords_QMARK_, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$json_read.cljs$core$IFn$_invoke$arity$1 = ajax$core$json_read__1;
  ajax$core$json_read.cljs$core$IFn$_invoke$arity$2 = ajax$core$json_read__2;
  ajax$core$json_read.cljs$core$IFn$_invoke$arity$3 = ajax$core$json_read__3;
  ajax$core$json_read.cljs$core$IFn$_invoke$arity$4 = ajax$core$json_read__4;
  return ajax$core$json_read;
}();
ajax.core.json_response_format = function() {
  var ajax$core$json_response_format = null;
  var ajax$core$json_response_format__0 = function() {
    return ajax$core$json_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var ajax$core$json_response_format__1 = function(p__10897) {
    var map__10899 = p__10897;
    var map__10899__$1 = cljs.core.seq_QMARK_.call(null, map__10899) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10899) : map__10899;
    var raw = cljs.core.get.call(null, map__10899__$1, new cljs.core.Keyword(null, "raw", "raw", 1604651272));
    var keywords_QMARK_ = cljs.core.get.call(null, map__10899__$1, new cljs.core.Keyword(null, "keywords?", "keywords?", 764949733));
    var prefix = cljs.core.get.call(null, map__10899__$1, new cljs.core.Keyword(null, "prefix", "prefix", -265908465));
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.json_read.call(null, prefix, raw, keywords_QMARK_), new cljs.core.Keyword(null, "description", "description", -1428560544), [cljs.core.str("JSON"), cljs.core.str(cljs.core.truth_(prefix) ? [cljs.core.str(" prefix '"), cljs.core.str(prefix), cljs.core.str("'")].join("") : null), cljs.core.str(cljs.core.truth_(keywords_QMARK_) ? " keywordize" : null)].join(""), new cljs.core.Keyword(null, 
    "content-type", "content-type", -508222634), "application/json"], null);
  };
  ajax$core$json_response_format = function(p__10897) {
    switch(arguments.length) {
      case 0:
        return ajax$core$json_response_format__0.call(this);
      case 1:
        return ajax$core$json_response_format__1.call(this, p__10897);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$json_response_format.cljs$core$IFn$_invoke$arity$0 = ajax$core$json_response_format__0;
  ajax$core$json_response_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$json_response_format__1;
  return ajax$core$json_response_format;
}();
ajax.core.default_formats = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [ajax.core.json_response_format, ajax.core.edn_response_format, ajax.core.transit_response_format, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["text/plain", ajax.core.raw_response_format], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["text/html", ajax.core.raw_response_format], null), ajax.core.raw_response_format], 
null);
ajax.core.get_format = function() {
  var ajax$core$get_format = null;
  var ajax$core$get_format__1 = function(opts) {
    return function(format_entry) {
      if (cljs.core.vector_QMARK_.call(null, format_entry)) {
        return ajax$core$get_format.call(null, opts, cljs.core.second.call(null, format_entry));
      } else {
        if (cljs.core.map_QMARK_.call(null, format_entry)) {
          return format_entry;
        } else {
          return format_entry.call(null, opts);
        }
      }
    };
  };
  var ajax$core$get_format__2 = function(opts, format_entry) {
    if (cljs.core.vector_QMARK_.call(null, format_entry)) {
      return ajax$core$get_format.call(null, opts, cljs.core.second.call(null, format_entry));
    } else {
      if (cljs.core.map_QMARK_.call(null, format_entry)) {
        return format_entry;
      } else {
        return format_entry.call(null, opts);
      }
    }
  };
  ajax$core$get_format = function(opts, format_entry) {
    switch(arguments.length) {
      case 1:
        return ajax$core$get_format__1.call(this, opts);
      case 2:
        return ajax$core$get_format__2.call(this, opts, format_entry);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$get_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$get_format__1;
  ajax$core$get_format.cljs$core$IFn$_invoke$arity$2 = ajax$core$get_format__2;
  return ajax$core$get_format;
}();
ajax.core.accept_entry = function() {
  var ajax$core$accept_entry = null;
  var ajax$core$accept_entry__1 = function(opts) {
    return function(format_entry) {
      var or__4122__auto__ = cljs.core.vector_QMARK_.call(null, format_entry) ? cljs.core.first.call(null, format_entry) : (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_format.call(null, opts, format_entry));
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return "*/*";
      }
    };
  };
  var ajax$core$accept_entry__2 = function(opts, format_entry) {
    var or__4122__auto__ = cljs.core.vector_QMARK_.call(null, format_entry) ? cljs.core.first.call(null, format_entry) : (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_format.call(null, opts, format_entry));
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return "*/*";
    }
  };
  ajax$core$accept_entry = function(opts, format_entry) {
    switch(arguments.length) {
      case 1:
        return ajax$core$accept_entry__1.call(this, opts);
      case 2:
        return ajax$core$accept_entry__2.call(this, opts, format_entry);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$accept_entry.cljs$core$IFn$_invoke$arity$1 = ajax$core$accept_entry__1;
  ajax$core$accept_entry.cljs$core$IFn$_invoke$arity$2 = ajax$core$accept_entry__2;
  return ajax$core$accept_entry;
}();
ajax.core.detect_content_type = function() {
  var ajax$core$detect_content_type = null;
  var ajax$core$detect_content_type__1 = function(content_type) {
    return function(opts, format_entry) {
      var accept = ajax.core.accept_entry.call(null, opts, format_entry);
      return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
    };
  };
  var ajax$core$detect_content_type__2 = function(content_type, opts) {
    return function(format_entry) {
      var accept = ajax.core.accept_entry.call(null, opts, format_entry);
      return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
    };
  };
  var ajax$core$detect_content_type__3 = function(content_type, opts, format_entry) {
    var accept = ajax.core.accept_entry.call(null, opts, format_entry);
    return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
  };
  ajax$core$detect_content_type = function(content_type, opts, format_entry) {
    switch(arguments.length) {
      case 1:
        return ajax$core$detect_content_type__1.call(this, content_type);
      case 2:
        return ajax$core$detect_content_type__2.call(this, content_type, opts);
      case 3:
        return ajax$core$detect_content_type__3.call(this, content_type, opts, format_entry);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$detect_content_type.cljs$core$IFn$_invoke$arity$1 = ajax$core$detect_content_type__1;
  ajax$core$detect_content_type.cljs$core$IFn$_invoke$arity$2 = ajax$core$detect_content_type__2;
  ajax$core$detect_content_type.cljs$core$IFn$_invoke$arity$3 = ajax$core$detect_content_type__3;
  return ajax$core$detect_content_type;
}();
ajax.core.get_default_format = function ajax$core$get_default_format(xhrio, p__10900) {
  var map__10902 = p__10900;
  var map__10902__$1 = cljs.core.seq_QMARK_.call(null, map__10902) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10902) : map__10902;
  var opts = map__10902__$1;
  var response_format = cljs.core.get.call(null, map__10902__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  var f = ajax.core.detect_content_type.call(null, function() {
    var or__4122__auto__ = ajax.core._get_response_header.call(null, xhrio, "Content-Type");
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return "";
    }
  }(), opts);
  return ajax.core.get_format.call(null, opts, cljs.core.first.call(null, cljs.core.filter.call(null, f, response_format)));
};
ajax.core.detect_response_format_read = function() {
  var ajax$core$detect_response_format_read = null;
  var ajax$core$detect_response_format_read__1 = function(opts) {
    return function(xhrio) {
      return(new cljs.core.Keyword(null, "read", "read", 1140058661)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_default_format.call(null, xhrio, opts)).call(null, xhrio);
    };
  };
  var ajax$core$detect_response_format_read__2 = function(opts, xhrio) {
    return(new cljs.core.Keyword(null, "read", "read", 1140058661)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_default_format.call(null, xhrio, opts)).call(null, xhrio);
  };
  ajax$core$detect_response_format_read = function(opts, xhrio) {
    switch(arguments.length) {
      case 1:
        return ajax$core$detect_response_format_read__1.call(this, opts);
      case 2:
        return ajax$core$detect_response_format_read__2.call(this, opts, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$detect_response_format_read.cljs$core$IFn$_invoke$arity$1 = ajax$core$detect_response_format_read__1;
  ajax$core$detect_response_format_read.cljs$core$IFn$_invoke$arity$2 = ajax$core$detect_response_format_read__2;
  return ajax$core$detect_response_format_read;
}();
ajax.core.accept_header = function ajax$core$accept_header(p__10903) {
  var map__10905 = p__10903;
  var map__10905__$1 = cljs.core.seq_QMARK_.call(null, map__10905) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10905) : map__10905;
  var opts = map__10905__$1;
  var response_format = cljs.core.get.call(null, map__10905__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  if (cljs.core.vector_QMARK_.call(null, response_format)) {
    return clojure.string.join.call(null, ", ", cljs.core.map.call(null, ajax.core.accept_entry.call(null, opts), response_format));
  } else {
    return ajax.core.accept_entry.call(null, opts, response_format);
  }
};
ajax.core.detect_response_format = function() {
  var ajax$core$detect_response_format = null;
  var ajax$core$detect_response_format__0 = function() {
    return ajax$core$detect_response_format.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), ajax.core.default_formats], null));
  };
  var ajax$core$detect_response_format__1 = function(opts) {
    var accept = ajax.core.accept_header.call(null, opts);
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.detect_response_format_read.call(null, opts), new cljs.core.Keyword(null, "format", "format", -1306924766), [cljs.core.str("(from "), cljs.core.str(accept), cljs.core.str(")")].join(""), new cljs.core.Keyword(null, "content-type", "content-type", -508222634), accept], null);
  };
  ajax$core$detect_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return ajax$core$detect_response_format__0.call(this);
      case 1:
        return ajax$core$detect_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$detect_response_format.cljs$core$IFn$_invoke$arity$0 = ajax$core$detect_response_format__0;
  ajax$core$detect_response_format.cljs$core$IFn$_invoke$arity$1 = ajax$core$detect_response_format__1;
  return ajax$core$detect_response_format;
}();
ajax.core.get_response_format = function ajax$core$get_response_format(p__10906) {
  var map__10908 = p__10906;
  var map__10908__$1 = cljs.core.seq_QMARK_.call(null, map__10908) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10908) : map__10908;
  var opts = map__10908__$1;
  var response_format = cljs.core.get.call(null, map__10908__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  if (cljs.core.vector_QMARK_.call(null, response_format)) {
    return ajax.core.detect_response_format.call(null, opts);
  } else {
    if (cljs.core.map_QMARK_.call(null, response_format)) {
      return response_format;
    } else {
      if (cljs.core.ifn_QMARK_.call(null, response_format)) {
        return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), response_format, new cljs.core.Keyword(null, "description", "description", -1428560544), "custom", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "*/*"], null);
      } else {
        throw new Error([cljs.core.str("unrecognized response format: "), cljs.core.str(response_format)].join(""));
      }
    }
  }
};
ajax.core.exception_response = function ajax$core$exception_response(e, status, p__10909, xhrio) {
  var map__10911 = p__10909;
  var map__10911__$1 = cljs.core.seq_QMARK_.call(null, map__10911) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10911) : map__10911;
  var description = cljs.core.get.call(null, map__10911__$1, new cljs.core.Keyword(null, "description", "description", -1428560544));
  var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), status, new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "response", "response", -1068424192), null], null);
  var status_text = [cljs.core.str(e.message), cljs.core.str("  Format should have been "), cljs.core.str(description)].join("");
  var parse_error = cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), status_text, new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "parse", "parse", -1162164619), new cljs.core.Keyword(null, "original-text", "original-text", 744448452), ajax.core._body.call(null, xhrio));
  if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
    return parse_error;
  } else {
    return cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), ajax.core._status_text.call(null, xhrio), new cljs.core.Keyword(null, "parse-error", "parse-error", 255902478), parse_error);
  }
};
ajax.core.fail = function() {
  var ajax$core$fail__delegate = function(status, status_text, failure, params) {
    var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), status, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), status_text, new cljs.core.Keyword(null, "failure", "failure", 720415879), failure], null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, cljs.core.reduce.call(null, cljs.core.conj, response, cljs.core.map.call(null, cljs.core.vec, cljs.core.partition.call(null, 2, params)))], null);
  };
  var ajax$core$fail = function(status, status_text, failure, var_args) {
    var params = null;
    if (arguments.length > 3) {
      var G__10912__i = 0, G__10912__a = new Array(arguments.length - 3);
      while (G__10912__i < G__10912__a.length) {
        G__10912__a[G__10912__i] = arguments[G__10912__i + 3];
        ++G__10912__i;
      }
      params = new cljs.core.IndexedSeq(G__10912__a, 0);
    }
    return ajax$core$fail__delegate.call(this, status, status_text, failure, params);
  };
  ajax$core$fail.cljs$lang$maxFixedArity = 3;
  ajax$core$fail.cljs$lang$applyTo = function(arglist__10913) {
    var status = cljs.core.first(arglist__10913);
    arglist__10913 = cljs.core.next(arglist__10913);
    var status_text = cljs.core.first(arglist__10913);
    arglist__10913 = cljs.core.next(arglist__10913);
    var failure = cljs.core.first(arglist__10913);
    var params = cljs.core.rest(arglist__10913);
    return ajax$core$fail__delegate(status, status_text, failure, params);
  };
  ajax$core$fail.cljs$core$IFn$_invoke$arity$variadic = ajax$core$fail__delegate;
  return ajax$core$fail;
}();
ajax.core.interpret_response = function ajax$core$interpret_response(p__10914, xhrio) {
  var map__10918 = p__10914;
  var map__10918__$1 = cljs.core.seq_QMARK_.call(null, map__10918) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10918) : map__10918;
  var format = map__10918__$1;
  var read = cljs.core.get.call(null, map__10918__$1, new cljs.core.Keyword(null, "read", "read", 1140058661));
  try {
    var status = ajax.core._status.call(null, xhrio);
    var fail = cljs.core.partial.call(null, ajax.core.fail, status);
    if (cljs.core._EQ_.call(null, -1, status)) {
      if (cljs.core.truth_(ajax.core._was_aborted.call(null, xhrio))) {
        return fail.call(null, "Request aborted by client.", new cljs.core.Keyword(null, "aborted", "aborted", 1775972619));
      } else {
        return fail.call(null, "Request timed out.", new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
      }
    } else {
      try {
        var response = read.call(null, xhrio);
        if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, response], null);
        } else {
          return fail.call(null, ajax.core._status_text.call(null, xhrio), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "response", "response", -1068424192), response);
        }
      } catch (e10920) {
        if (e10920 instanceof Object) {
          var e = e10920;
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, ajax.core.exception_response.call(null, e, status, format, xhrio)], null);
        } else {
          throw e10920;
        }
      }
    }
  } catch (e10919) {
    if (e10919 instanceof Object) {
      var e = e10919;
      return ajax.core.fail.call(null, 0, e.message, new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "exception", "exception", -335277064), e);
    } else {
      throw e10919;
    }
  }
};
ajax.core.no_format = function ajax$core$no_format(xhrio) {
  throw new Error("No response format was supplied.");
};
ajax.core.uri_with_params = function ajax$core$uri_with_params(uri, params) {
  if (cljs.core.truth_(params)) {
    return[cljs.core.str(uri), cljs.core.str("?"), cljs.core.str(ajax.core.params_to_str.call(null, params))].join("");
  } else {
    return uri;
  }
};
ajax.core.get_request_format = function ajax$core$get_request_format(format) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.ifn_QMARK_.call(null, format)) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), format, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "text/plain"], null);
    } else {
      return null;
    }
  }
};
ajax.core.normalize_method = function ajax$core$normalize_method(method) {
  if (method instanceof cljs.core.Keyword) {
    return clojure.string.upper_case.call(null, cljs.core.name.call(null, method));
  } else {
    return method;
  }
};
ajax.core.process_inputs = function ajax$core$process_inputs(p__10921, p__10922) {
  var map__10926 = p__10921;
  var map__10926__$1 = cljs.core.seq_QMARK_.call(null, map__10926) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10926) : map__10926;
  var headers = cljs.core.get.call(null, map__10926__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
  var params = cljs.core.get.call(null, map__10926__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var format = cljs.core.get.call(null, map__10926__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
  var method = cljs.core.get.call(null, map__10926__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var uri = cljs.core.get.call(null, map__10926__$1, new cljs.core.Keyword(null, "uri", "uri", -774711847));
  var map__10927 = p__10922;
  var map__10927__$1 = cljs.core.seq_QMARK_.call(null, map__10927) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10927) : map__10927;
  var content_type = cljs.core.get.call(null, map__10927__$1, new cljs.core.Keyword(null, "content-type", "content-type", -508222634));
  var headers__$1 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["Accept", content_type], null), function() {
    var or__4122__auto__ = headers;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }());
  if (cljs.core._EQ_.call(null, ajax.core.normalize_method.call(null, method), "GET")) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ajax.core.uri_with_params.call(null, uri, params), null, headers__$1], null);
  } else {
    var map__10928 = ajax.core.get_request_format.call(null, format);
    var map__10928__$1 = cljs.core.seq_QMARK_.call(null, map__10928) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10928) : map__10928;
    var content_type__$1 = cljs.core.get.call(null, map__10928__$1, new cljs.core.Keyword(null, "content-type", "content-type", -508222634));
    var write = cljs.core.get.call(null, map__10928__$1, new cljs.core.Keyword(null, "write", "write", -1857649168));
    var body = !(write == null) ? write.call(null, params) : ajax.core.submittable_QMARK_.call(null, params) ? params : function() {
      throw new Error([cljs.core.str("unrecognized request format: "), cljs.core.str(format)].join(""));
    }();
    var content_type__$2 = cljs.core.truth_(content_type__$1) ? new cljs.core.PersistentArrayMap(null, 1, ["Content-Type", content_type__$1], null) : null;
    var headers__$2 = cljs.core.merge.call(null, headers__$1, content_type__$2);
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [uri, body, headers__$2], null);
  }
};
ajax.core.js_handler = function() {
  var ajax$core$js_handler = null;
  var ajax$core$js_handler__1 = function(response_format) {
    return function(handler, xhrio) {
      var response = ajax.core.interpret_response.call(null, response_format, xhrio);
      return handler.call(null, response);
    };
  };
  var ajax$core$js_handler__2 = function(response_format, handler) {
    return function(xhrio) {
      var response = ajax.core.interpret_response.call(null, response_format, xhrio);
      return handler.call(null, response);
    };
  };
  var ajax$core$js_handler__3 = function(response_format, handler, xhrio) {
    var response = ajax.core.interpret_response.call(null, response_format, xhrio);
    return handler.call(null, response);
  };
  ajax$core$js_handler = function(response_format, handler, xhrio) {
    switch(arguments.length) {
      case 1:
        return ajax$core$js_handler__1.call(this, response_format);
      case 2:
        return ajax$core$js_handler__2.call(this, response_format, handler);
      case 3:
        return ajax$core$js_handler__3.call(this, response_format, handler, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$js_handler.cljs$core$IFn$_invoke$arity$1 = ajax$core$js_handler__1;
  ajax$core$js_handler.cljs$core$IFn$_invoke$arity$2 = ajax$core$js_handler__2;
  ajax$core$js_handler.cljs$core$IFn$_invoke$arity$3 = ajax$core$js_handler__3;
  return ajax$core$js_handler;
}();
ajax.core.base_handler = function ajax$core$base_handler(response_format, p__10929) {
  var map__10931 = p__10929;
  var map__10931__$1 = cljs.core.seq_QMARK_.call(null, map__10931) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10931) : map__10931;
  var handler = cljs.core.get.call(null, map__10931__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
  if (cljs.core.truth_(handler)) {
    return ajax.core.js_handler.call(null, response_format, handler);
  } else {
    throw new Error("No ajax handler provided.");
  }
};
ajax.core.ajax_request = function ajax$core$ajax_request(p__10932) {
  var map__10935 = p__10932;
  var map__10935__$1 = cljs.core.seq_QMARK_.call(null, map__10935) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10935) : map__10935;
  var opts = map__10935__$1;
  var api = cljs.core.get.call(null, map__10935__$1, new cljs.core.Keyword(null, "api", "api", -899839580));
  var method = cljs.core.get.call(null, map__10935__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var response_format = ajax.core.get_response_format.call(null, opts);
  var method__$1 = ajax.core.normalize_method.call(null, method);
  var vec__10936 = ajax.core.process_inputs.call(null, opts, response_format);
  var uri = cljs.core.nth.call(null, vec__10936, 0, null);
  var body = cljs.core.nth.call(null, vec__10936, 1, null);
  var headers = cljs.core.nth.call(null, vec__10936, 2, null);
  var handler = ajax.core.base_handler.call(null, response_format, opts);
  var api__$1 = function() {
    var or__4122__auto__ = api;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return new goog.net.XhrIo;
    }
  }();
  return ajax.core._js_ajax_request.call(null, api__$1, uri, method__$1, body, headers, handler, opts);
};
ajax.core.keyword_request_format = function ajax$core$keyword_request_format(format, format_params) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.fn_QMARK_.call(null, format)) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "write", "write", -1857649168), format], null);
    } else {
      if (format == null) {
        return ajax.core.transit_request_format.call(null, format_params);
      } else {
        var G__10938 = format instanceof cljs.core.Keyword ? format.fqn : null;
        switch(G__10938) {
          case "url":
            return ajax.core.url_request_format.call(null);
            break;
          case "raw":
            return ajax.core.url_request_format.call(null);
            break;
          case "edn":
            return ajax.core.edn_request_format.call(null);
            break;
          case "json":
            return ajax.core.json_request_format.call(null);
            break;
          case "transit":
            return ajax.core.transit_request_format.call(null, format_params);
            break;
          default:
            return null;
        }
      }
    }
  }
};
ajax.core.keyword_response_format_2 = function ajax$core$keyword_response_format_2(format, format_params) {
  if (cljs.core.vector_QMARK_.call(null, format)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, format), ajax$core$keyword_response_format_2.call(null, cljs.core.second.call(null, format), format_params)], null);
  } else {
    if (cljs.core.map_QMARK_.call(null, format)) {
      return format;
    } else {
      if (cljs.core.fn_QMARK_.call(null, format)) {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1140058661), format, new cljs.core.Keyword(null, "description", "description", -1428560544), "custom"], null);
      } else {
        if (format == null) {
          return ajax.core.detect_response_format.call(null);
        } else {
          var G__10941 = format instanceof cljs.core.Keyword ? format.fqn : null;
          switch(G__10941) {
            case "detect":
              return ajax.core.detect_response_format.call(null);
              break;
            case "raw":
              return ajax.core.raw_response_format.call(null);
              break;
            case "edn":
              return ajax.core.edn_response_format.call(null);
              break;
            case "json":
              return ajax.core.json_response_format.call(null, format_params);
              break;
            case "transit":
              return ajax.core.transit_response_format.call(null, format_params);
              break;
            default:
              return null;
          }
        }
      }
    }
  }
};
ajax.core.keyword_response_format = function ajax$core$keyword_response_format(format, format_params) {
  if (cljs.core.vector_QMARK_.call(null, format)) {
    return cljs.core.apply.call(null, cljs.core.vector, cljs.core.map.call(null, function(p1__10943_SHARP_) {
      return ajax.core.keyword_response_format_2.call(null, p1__10943_SHARP_, format_params);
    }, format));
  } else {
    return ajax.core.keyword_response_format_2.call(null, format, format_params);
  }
};
ajax.core.transform_handler = function() {
  var ajax$core$transform_handler = null;
  var ajax$core$transform_handler__1 = function(p__10946) {
    var map__10954 = p__10946;
    var map__10954__$1 = cljs.core.seq_QMARK_.call(null, map__10954) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10954) : map__10954;
    var finally$ = cljs.core.get.call(null, map__10954__$1, new cljs.core.Keyword(null, "finally", "finally", 1589088705));
    var error_handler = cljs.core.get.call(null, map__10954__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776));
    var handler = cljs.core.get.call(null, map__10954__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
    return function(map__10954, map__10954__$1, finally$, error_handler, handler) {
      return function(p__10955) {
        var vec__10956 = p__10955;
        var ok = cljs.core.nth.call(null, vec__10956, 0, null);
        var result = cljs.core.nth.call(null, vec__10956, 1, null);
        var temp__4124__auto___10957 = cljs.core.truth_(ok) ? handler : error_handler;
        if (cljs.core.truth_(temp__4124__auto___10957)) {
          var h_10958 = temp__4124__auto___10957;
          h_10958.call(null, result);
        } else {
        }
        if (cljs.core.fn_QMARK_.call(null, finally$)) {
          return finally$.call(null);
        } else {
          return null;
        }
      };
    }(map__10954, map__10954__$1, finally$, error_handler, handler);
  };
  var ajax$core$transform_handler__2 = function(p__10944, p__10945) {
    var map__10952 = p__10944;
    var map__10952__$1 = cljs.core.seq_QMARK_.call(null, map__10952) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10952) : map__10952;
    var finally$ = cljs.core.get.call(null, map__10952__$1, new cljs.core.Keyword(null, "finally", "finally", 1589088705));
    var error_handler = cljs.core.get.call(null, map__10952__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776));
    var handler = cljs.core.get.call(null, map__10952__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
    var vec__10953 = p__10945;
    var ok = cljs.core.nth.call(null, vec__10953, 0, null);
    var result = cljs.core.nth.call(null, vec__10953, 1, null);
    var temp__4124__auto___10959 = cljs.core.truth_(ok) ? handler : error_handler;
    if (cljs.core.truth_(temp__4124__auto___10959)) {
      var h_10960 = temp__4124__auto___10959;
      h_10960.call(null, result);
    } else {
    }
    if (cljs.core.fn_QMARK_.call(null, finally$)) {
      return finally$.call(null);
    } else {
      return null;
    }
  };
  ajax$core$transform_handler = function(p__10944, p__10945) {
    switch(arguments.length) {
      case 1:
        return ajax$core$transform_handler__1.call(this, p__10944);
      case 2:
        return ajax$core$transform_handler__2.call(this, p__10944, p__10945);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax$core$transform_handler.cljs$core$IFn$_invoke$arity$1 = ajax$core$transform_handler__1;
  ajax$core$transform_handler.cljs$core$IFn$_invoke$arity$2 = ajax$core$transform_handler__2;
  return ajax$core$transform_handler;
}();
ajax.core.transform_opts = function ajax$core$transform_opts(p__10961) {
  var map__10963 = p__10961;
  var map__10963__$1 = cljs.core.seq_QMARK_.call(null, map__10963) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10963) : map__10963;
  var opts = map__10963__$1;
  var params = cljs.core.get.call(null, map__10963__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var response_format = cljs.core.get.call(null, map__10963__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  var format = cljs.core.get.call(null, map__10963__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
  var method = cljs.core.get.call(null, map__10963__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var needs_format = !(ajax.core.submittable_QMARK_.call(null, params) || cljs.core._EQ_.call(null, method, "GET"));
  var rf = cljs.core.truth_(function() {
    var or__4122__auto__ = format;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return needs_format;
    }
  }()) ? ajax.core.keyword_request_format.call(null, format, opts) : null;
  return cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "handler", "handler", -195596612), ajax.core.transform_handler.call(null, opts), new cljs.core.Keyword(null, "format", "format", -1306924766), rf, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), ajax.core.keyword_response_format.call(null, response_format, opts));
};
ajax.core.easy_ajax_request = function ajax$core$easy_ajax_request(uri, method, opts) {
  return ajax.core.ajax_request.call(null, ajax.core.transform_opts.call(null, cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "uri", "uri", -774711847), uri, new cljs.core.Keyword(null, "method", "method", 55703592), method)));
};
ajax.core.GET = function() {
  var ajax$core$GET__delegate = function(uri, opts) {
    var f__6378__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "GET", f__6378__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6378__auto__);
  };
  var ajax$core$GET = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__10964__i = 0, G__10964__a = new Array(arguments.length - 1);
      while (G__10964__i < G__10964__a.length) {
        G__10964__a[G__10964__i] = arguments[G__10964__i + 1];
        ++G__10964__i;
      }
      opts = new cljs.core.IndexedSeq(G__10964__a, 0);
    }
    return ajax$core$GET__delegate.call(this, uri, opts);
  };
  ajax$core$GET.cljs$lang$maxFixedArity = 1;
  ajax$core$GET.cljs$lang$applyTo = function(arglist__10965) {
    var uri = cljs.core.first(arglist__10965);
    var opts = cljs.core.rest(arglist__10965);
    return ajax$core$GET__delegate(uri, opts);
  };
  ajax$core$GET.cljs$core$IFn$_invoke$arity$variadic = ajax$core$GET__delegate;
  return ajax$core$GET;
}();
ajax.core.HEAD = function() {
  var ajax$core$HEAD__delegate = function(uri, opts) {
    var f__6378__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "HEAD", f__6378__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6378__auto__);
  };
  var ajax$core$HEAD = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__10966__i = 0, G__10966__a = new Array(arguments.length - 1);
      while (G__10966__i < G__10966__a.length) {
        G__10966__a[G__10966__i] = arguments[G__10966__i + 1];
        ++G__10966__i;
      }
      opts = new cljs.core.IndexedSeq(G__10966__a, 0);
    }
    return ajax$core$HEAD__delegate.call(this, uri, opts);
  };
  ajax$core$HEAD.cljs$lang$maxFixedArity = 1;
  ajax$core$HEAD.cljs$lang$applyTo = function(arglist__10967) {
    var uri = cljs.core.first(arglist__10967);
    var opts = cljs.core.rest(arglist__10967);
    return ajax$core$HEAD__delegate(uri, opts);
  };
  ajax$core$HEAD.cljs$core$IFn$_invoke$arity$variadic = ajax$core$HEAD__delegate;
  return ajax$core$HEAD;
}();
ajax.core.POST = function() {
  var ajax$core$POST__delegate = function(uri, opts) {
    var f__6378__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "POST", f__6378__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6378__auto__);
  };
  var ajax$core$POST = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__10968__i = 0, G__10968__a = new Array(arguments.length - 1);
      while (G__10968__i < G__10968__a.length) {
        G__10968__a[G__10968__i] = arguments[G__10968__i + 1];
        ++G__10968__i;
      }
      opts = new cljs.core.IndexedSeq(G__10968__a, 0);
    }
    return ajax$core$POST__delegate.call(this, uri, opts);
  };
  ajax$core$POST.cljs$lang$maxFixedArity = 1;
  ajax$core$POST.cljs$lang$applyTo = function(arglist__10969) {
    var uri = cljs.core.first(arglist__10969);
    var opts = cljs.core.rest(arglist__10969);
    return ajax$core$POST__delegate(uri, opts);
  };
  ajax$core$POST.cljs$core$IFn$_invoke$arity$variadic = ajax$core$POST__delegate;
  return ajax$core$POST;
}();
ajax.core.PUT = function() {
  var ajax$core$PUT__delegate = function(uri, opts) {
    var f__6378__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "PUT", f__6378__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6378__auto__);
  };
  var ajax$core$PUT = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__10970__i = 0, G__10970__a = new Array(arguments.length - 1);
      while (G__10970__i < G__10970__a.length) {
        G__10970__a[G__10970__i] = arguments[G__10970__i + 1];
        ++G__10970__i;
      }
      opts = new cljs.core.IndexedSeq(G__10970__a, 0);
    }
    return ajax$core$PUT__delegate.call(this, uri, opts);
  };
  ajax$core$PUT.cljs$lang$maxFixedArity = 1;
  ajax$core$PUT.cljs$lang$applyTo = function(arglist__10971) {
    var uri = cljs.core.first(arglist__10971);
    var opts = cljs.core.rest(arglist__10971);
    return ajax$core$PUT__delegate(uri, opts);
  };
  ajax$core$PUT.cljs$core$IFn$_invoke$arity$variadic = ajax$core$PUT__delegate;
  return ajax$core$PUT;
}();
ajax.core.DELETE = function() {
  var ajax$core$DELETE__delegate = function(uri, opts) {
    var f__6378__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "DELETE", f__6378__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6378__auto__);
  };
  var ajax$core$DELETE = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__10972__i = 0, G__10972__a = new Array(arguments.length - 1);
      while (G__10972__i < G__10972__a.length) {
        G__10972__a[G__10972__i] = arguments[G__10972__i + 1];
        ++G__10972__i;
      }
      opts = new cljs.core.IndexedSeq(G__10972__a, 0);
    }
    return ajax$core$DELETE__delegate.call(this, uri, opts);
  };
  ajax$core$DELETE.cljs$lang$maxFixedArity = 1;
  ajax$core$DELETE.cljs$lang$applyTo = function(arglist__10973) {
    var uri = cljs.core.first(arglist__10973);
    var opts = cljs.core.rest(arglist__10973);
    return ajax$core$DELETE__delegate(uri, opts);
  };
  ajax$core$DELETE.cljs$core$IFn$_invoke$arity$variadic = ajax$core$DELETE__delegate;
  return ajax$core$DELETE;
}();
ajax.core.OPTIONS = function() {
  var ajax$core$OPTIONS__delegate = function(uri, opts) {
    var f__6378__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "OPTIONS", f__6378__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6378__auto__);
  };
  var ajax$core$OPTIONS = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__10974__i = 0, G__10974__a = new Array(arguments.length - 1);
      while (G__10974__i < G__10974__a.length) {
        G__10974__a[G__10974__i] = arguments[G__10974__i + 1];
        ++G__10974__i;
      }
      opts = new cljs.core.IndexedSeq(G__10974__a, 0);
    }
    return ajax$core$OPTIONS__delegate.call(this, uri, opts);
  };
  ajax$core$OPTIONS.cljs$lang$maxFixedArity = 1;
  ajax$core$OPTIONS.cljs$lang$applyTo = function(arglist__10975) {
    var uri = cljs.core.first(arglist__10975);
    var opts = cljs.core.rest(arglist__10975);
    return ajax$core$OPTIONS__delegate(uri, opts);
  };
  ajax$core$OPTIONS.cljs$core$IFn$_invoke$arity$variadic = ajax$core$OPTIONS__delegate;
  return ajax$core$OPTIONS;
}();
ajax.core.TRACE = function() {
  var ajax$core$TRACE__delegate = function(uri, opts) {
    var f__6378__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "TRACE", f__6378__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6378__auto__);
  };
  var ajax$core$TRACE = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__10976__i = 0, G__10976__a = new Array(arguments.length - 1);
      while (G__10976__i < G__10976__a.length) {
        G__10976__a[G__10976__i] = arguments[G__10976__i + 1];
        ++G__10976__i;
      }
      opts = new cljs.core.IndexedSeq(G__10976__a, 0);
    }
    return ajax$core$TRACE__delegate.call(this, uri, opts);
  };
  ajax$core$TRACE.cljs$lang$maxFixedArity = 1;
  ajax$core$TRACE.cljs$lang$applyTo = function(arglist__10977) {
    var uri = cljs.core.first(arglist__10977);
    var opts = cljs.core.rest(arglist__10977);
    return ajax$core$TRACE__delegate(uri, opts);
  };
  ajax$core$TRACE.cljs$core$IFn$_invoke$arity$variadic = ajax$core$TRACE__delegate;
  return ajax$core$TRACE;
}();
goog.provide("reagent.interop");
goog.require("cljs.core");
goog.provide("reagent.debug");
goog.require("cljs.core");
goog.provide("reagent.impl.util");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("reagent.interop");
goog.require("reagent.debug");
reagent.impl.util.is_client = typeof window !== "undefined" && !(window["document"] == null);
reagent.impl.util.extract_props = function reagent$impl$util$extract_props(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  if (cljs.core.map_QMARK_.call(null, p)) {
    return p;
  } else {
    return null;
  }
};
reagent.impl.util.extract_children = function reagent$impl$util$extract_children(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  var first_child = p == null || cljs.core.map_QMARK_.call(null, p) ? 2 : 1;
  if (cljs.core.count.call(null, v) > first_child) {
    return cljs.core.subvec.call(null, v, first_child);
  } else {
    return null;
  }
};
reagent.impl.util.get_argv = function reagent$impl$util$get_argv(c) {
  return c["props"]["argv"];
};
reagent.impl.util.get_props = function reagent$impl$util$get_props(c) {
  return reagent.impl.util.extract_props.call(null, c["props"]["argv"]);
};
reagent.impl.util.get_children = function reagent$impl$util$get_children(c) {
  return reagent.impl.util.extract_children.call(null, c["props"]["argv"]);
};
reagent.impl.util.reagent_component_QMARK_ = function reagent$impl$util$reagent_component_QMARK_(c) {
  return!(c["props"]["argv"] == null);
};
reagent.impl.util.cached_react_class = function reagent$impl$util$cached_react_class(c) {
  return c["cljsReactClass"];
};
reagent.impl.util.cache_react_class = function reagent$impl$util$cache_react_class(c, constructor) {
  return c["cljsReactClass"] = constructor;
};
reagent.impl.util.memoize_1 = function reagent$impl$util$memoize_1(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function(arg) {
      var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), arg);
      if (!(v == null)) {
        return v;
      } else {
        var ret = f.call(null, arg);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, arg, ret);
        return ret;
      }
    };
  }(mem);
};
reagent.impl.util.dont_camel_case = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["aria", null, "data", null], null), null);
reagent.impl.util.capitalize = function reagent$impl$util$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(cljs.core.subs.call(null, s, 1))].join("");
  }
};
reagent.impl.util.dash_to_camel = function reagent$impl$util$dash_to_camel(dashed) {
  if (typeof dashed === "string") {
    return dashed;
  } else {
    var name_str = cljs.core.name.call(null, dashed);
    var vec__11485 = clojure.string.split.call(null, name_str, /-/);
    var start = cljs.core.nth.call(null, vec__11485, 0, null);
    var parts = cljs.core.nthnext.call(null, vec__11485, 1);
    if (cljs.core.truth_(reagent.impl.util.dont_camel_case.call(null, start))) {
      return name_str;
    } else {
      return cljs.core.apply.call(null, cljs.core.str, start, cljs.core.map.call(null, reagent.impl.util.capitalize, parts));
    }
  }
};
reagent.impl.util.partial_ifn = function(f, args, p) {
  this.f = f;
  this.args = args;
  this.p = p;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 6291457;
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.f, self__.args], null));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._EQ_.call(null, self__.f, other.f) && cljs.core._EQ_.call(null, self__.args, other.args);
};
reagent.impl.util.partial_ifn.prototype.call = function() {
  var G__11487__delegate = function(self__, a) {
    var self____$1 = this;
    var _ = self____$1;
    var or__4122__auto___11488 = self__.p;
    if (cljs.core.truth_(or__4122__auto___11488)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__11487 = function(self__, var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 1) {
      var G__11489__i = 0, G__11489__a = new Array(arguments.length - 1);
      while (G__11489__i < G__11489__a.length) {
        G__11489__a[G__11489__i] = arguments[G__11489__i + 1];
        ++G__11489__i;
      }
      a = new cljs.core.IndexedSeq(G__11489__a, 0);
    }
    return G__11487__delegate.call(this, self__, a);
  };
  G__11487.cljs$lang$maxFixedArity = 1;
  G__11487.cljs$lang$applyTo = function(arglist__11490) {
    var self__ = cljs.core.first(arglist__11490);
    var a = cljs.core.rest(arglist__11490);
    return G__11487__delegate(self__, a);
  };
  G__11487.cljs$core$IFn$_invoke$arity$variadic = G__11487__delegate;
  return G__11487;
}();
reagent.impl.util.partial_ifn.prototype.apply = function(self__, args11486) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11486)));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
  var G__11491__delegate = function(a) {
    var _ = this;
    var or__4122__auto___11492 = self__.p;
    if (cljs.core.truth_(or__4122__auto___11492)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__11491 = function(var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 0) {
      var G__11493__i = 0, G__11493__a = new Array(arguments.length - 0);
      while (G__11493__i < G__11493__a.length) {
        G__11493__a[G__11493__i] = arguments[G__11493__i + 0];
        ++G__11493__i;
      }
      a = new cljs.core.IndexedSeq(G__11493__a, 0);
    }
    return G__11491__delegate.call(this, a);
  };
  G__11491.cljs$lang$maxFixedArity = 0;
  G__11491.cljs$lang$applyTo = function(arglist__11494) {
    var a = cljs.core.seq(arglist__11494);
    return G__11491__delegate(a);
  };
  G__11491.cljs$core$IFn$_invoke$arity$variadic = G__11491__delegate;
  return G__11491;
}();
reagent.impl.util.partial_ifn.cljs$lang$type = true;
reagent.impl.util.partial_ifn.cljs$lang$ctorStr = "reagent.impl.util/partial-ifn";
reagent.impl.util.partial_ifn.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "reagent.impl.util/partial-ifn");
};
reagent.impl.util.__GT_partial_ifn = function reagent$impl$util$__GT_partial_ifn(f, args, p) {
  return new reagent.impl.util.partial_ifn(f, args, p);
};
reagent.impl.util.merge_class = function reagent$impl$util$merge_class(p1, p2) {
  var class$ = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var c1 = temp__4126__auto__;
      var temp__4126__auto____$1 = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var c2 = temp__4126__auto____$1;
        return[cljs.core.str(c1), cljs.core.str(" "), cljs.core.str(c2)].join("");
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (class$ == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "class", "class", -2030961996), class$);
  }
};
reagent.impl.util.merge_style = function reagent$impl$util$merge_style(p1, p2) {
  var style = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var s1 = temp__4126__auto__;
      var temp__4126__auto____$1 = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var s2 = temp__4126__auto____$1;
        return cljs.core.merge.call(null, s1, s2);
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (style == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "style", "style", -496642736), style);
  }
};
reagent.impl.util.merge_props = function reagent$impl$util$merge_props(p1, p2) {
  if (p1 == null) {
    return p2;
  } else {
    if (cljs.core.map_QMARK_.call(null, p1)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "p1", "p1", 703771573, null))))].join(""));
    }
    return reagent.impl.util.merge_style.call(null, p1, reagent.impl.util.merge_class.call(null, p1, cljs.core.merge.call(null, p1, p2)));
  }
};
reagent.impl.util._STAR_always_update_STAR_ = false;
if (typeof reagent.impl.util.roots !== "undefined") {
} else {
  reagent.impl.util.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
}
reagent.impl.util.clear_container = function reagent$impl$util$clear_container(node) {
  try {
    return React["unmountComponentAtNode"](node);
  } catch (e11496) {
    if (e11496 instanceof Object) {
      var e = e11496;
      if (typeof console !== "undefined") {
        console.warn([cljs.core.str("Warning: "), cljs.core.str("Error unmounting:")].join(""));
      } else {
      }
      if (typeof console !== "undefined") {
        return console.log(e);
      } else {
        return null;
      }
    } else {
      throw e11496;
    }
  }
};
reagent.impl.util.render_component = function reagent$impl$util$render_component(comp, container, callback) {
  try {
    var _STAR_always_update_STAR_11501 = reagent.impl.util._STAR_always_update_STAR_;
    reagent.impl.util._STAR_always_update_STAR_ = true;
    try {
      return React["render"](comp.call(null), container, function(_STAR_always_update_STAR_11501) {
        return function() {
          var _STAR_always_update_STAR_11502 = reagent.impl.util._STAR_always_update_STAR_;
          reagent.impl.util._STAR_always_update_STAR_ = false;
          try {
            cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.assoc, container, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp, container], null));
            if (cljs.core.some_QMARK_.call(null, callback)) {
              return callback.call(null);
            } else {
              return null;
            }
          } finally {
            reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_11502;
          }
        };
      }(_STAR_always_update_STAR_11501));
    } finally {
      reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_11501;
    }
  } catch (e11500) {
    if (e11500 instanceof Object) {
      var e = e11500;
      reagent.impl.util.clear_container.call(null, container);
      throw e;
    } else {
      throw e11500;
    }
  }
};
reagent.impl.util.re_render_component = function reagent$impl$util$re_render_component(comp, container) {
  return reagent.impl.util.render_component.call(null, comp, container, null);
};
reagent.impl.util.unmount_component_at_node = function reagent$impl$util$unmount_component_at_node(container) {
  cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.dissoc, container);
  return React["unmountComponentAtNode"](container);
};
reagent.impl.util.force_update_all = function reagent$impl$util$force_update_all() {
  var seq__11507_11511 = cljs.core.seq.call(null, cljs.core.vals.call(null, cljs.core.deref.call(null, reagent.impl.util.roots)));
  var chunk__11508_11512 = null;
  var count__11509_11513 = 0;
  var i__11510_11514 = 0;
  while (true) {
    if (i__11510_11514 < count__11509_11513) {
      var v_11515 = cljs.core._nth.call(null, chunk__11508_11512, i__11510_11514);
      cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_11515);
      var G__11516 = seq__11507_11511;
      var G__11517 = chunk__11508_11512;
      var G__11518 = count__11509_11513;
      var G__11519 = i__11510_11514 + 1;
      seq__11507_11511 = G__11516;
      chunk__11508_11512 = G__11517;
      count__11509_11513 = G__11518;
      i__11510_11514 = G__11519;
      continue;
    } else {
      var temp__4126__auto___11520 = cljs.core.seq.call(null, seq__11507_11511);
      if (temp__4126__auto___11520) {
        var seq__11507_11521__$1 = temp__4126__auto___11520;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11507_11521__$1)) {
          var c__4907__auto___11522 = cljs.core.chunk_first.call(null, seq__11507_11521__$1);
          var G__11523 = cljs.core.chunk_rest.call(null, seq__11507_11521__$1);
          var G__11524 = c__4907__auto___11522;
          var G__11525 = cljs.core.count.call(null, c__4907__auto___11522);
          var G__11526 = 0;
          seq__11507_11511 = G__11523;
          chunk__11508_11512 = G__11524;
          count__11509_11513 = G__11525;
          i__11510_11514 = G__11526;
          continue;
        } else {
          var v_11527 = cljs.core.first.call(null, seq__11507_11521__$1);
          cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_11527);
          var G__11528 = cljs.core.next.call(null, seq__11507_11521__$1);
          var G__11529 = null;
          var G__11530 = 0;
          var G__11531 = 0;
          seq__11507_11511 = G__11528;
          chunk__11508_11512 = G__11529;
          count__11509_11513 = G__11530;
          i__11510_11514 = G__11531;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return "Updated";
};
goog.provide("reagent.ratom");
goog.require("cljs.core");
goog.require("reagent.impl.util");
if (typeof reagent.ratom.debug !== "undefined") {
} else {
  reagent.ratom.debug = false;
}
if (typeof reagent.ratom._running !== "undefined") {
} else {
  reagent.ratom._running = cljs.core.atom.call(null, 0);
}
reagent.ratom.running = function reagent$ratom$running() {
  return cljs.core.deref.call(null, reagent.ratom._running);
};
reagent.ratom.capture_derefed = function reagent$ratom$capture_derefed(f, obj) {
  obj.cljsCaptured = null;
  var _STAR_ratom_context_STAR_11365 = reagent.ratom._STAR_ratom_context_STAR_;
  reagent.ratom._STAR_ratom_context_STAR_ = obj;
  try {
    return f.call(null);
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_11365;
  }
};
reagent.ratom.captured = function reagent$ratom$captured(obj) {
  var c = obj.cljsCaptured;
  obj.cljsCaptured = null;
  return c;
};
reagent.ratom.notify_deref_watcher_BANG_ = function reagent$ratom$notify_deref_watcher_BANG_(derefable) {
  var obj = reagent.ratom._STAR_ratom_context_STAR_;
  if (obj == null) {
    return null;
  } else {
    var captured = obj.cljsCaptured;
    return obj.cljsCaptured = cljs.core.conj.call(null, captured == null ? cljs.core.PersistentHashSet.EMPTY : captured, derefable);
  }
};
reagent.ratom.IReactiveAtom = function() {
  var obj11367 = {};
  return obj11367;
}();
reagent.ratom.RAtom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RAtom.prototype.reagent$ratom$IReactiveAtom$ = true;
reagent.ratom.RAtom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RAtom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
reagent.ratom.RAtom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.RAtom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.RAtom.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  if (self__.validator == null) {
  } else {
    if (cljs.core.truth_(self__.validator.call(null, new_value))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null))))].join(""));
    }
  }
  var old_value = self__.state;
  self__.state = new_value;
  if (self__.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a__$1, old_value, new_value);
  }
  return new_value;
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f) {
      f.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
reagent.ratom.RAtom.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
  return self__.state;
};
reagent.ratom.RAtom.cljs$lang$type = true;
reagent.ratom.RAtom.cljs$lang$ctorStr = "reagent.ratom/RAtom";
reagent.ratom.RAtom.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "reagent.ratom/RAtom");
};
reagent.ratom.__GT_RAtom = function reagent$ratom$__GT_RAtom(state, meta, validator, watches) {
  return new reagent.ratom.RAtom(state, meta, validator, watches);
};
reagent.ratom.atom = function() {
  var reagent$ratom$atom = null;
  var reagent$ratom$atom__1 = function(x) {
    return new reagent.ratom.RAtom(x, null, null, null);
  };
  var reagent$ratom$atom__2 = function() {
    var G__11371__delegate = function(x, p__11368) {
      var map__11370 = p__11368;
      var map__11370__$1 = cljs.core.seq_QMARK_.call(null, map__11370) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11370) : map__11370;
      var validator = cljs.core.get.call(null, map__11370__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__11370__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new reagent.ratom.RAtom(x, meta, validator, null);
    };
    var G__11371 = function(x, var_args) {
      var p__11368 = null;
      if (arguments.length > 1) {
        var G__11372__i = 0, G__11372__a = new Array(arguments.length - 1);
        while (G__11372__i < G__11372__a.length) {
          G__11372__a[G__11372__i] = arguments[G__11372__i + 1];
          ++G__11372__i;
        }
        p__11368 = new cljs.core.IndexedSeq(G__11372__a, 0);
      }
      return G__11371__delegate.call(this, x, p__11368);
    };
    G__11371.cljs$lang$maxFixedArity = 1;
    G__11371.cljs$lang$applyTo = function(arglist__11373) {
      var x = cljs.core.first(arglist__11373);
      var p__11368 = cljs.core.rest(arglist__11373);
      return G__11371__delegate(x, p__11368);
    };
    G__11371.cljs$core$IFn$_invoke$arity$variadic = G__11371__delegate;
    return G__11371;
  }();
  reagent$ratom$atom = function(x, var_args) {
    var p__11368 = var_args;
    switch(arguments.length) {
      case 1:
        return reagent$ratom$atom__1.call(this, x);
      default:
        var G__11374 = null;
        if (arguments.length > 1) {
          var G__11375__i = 0, G__11375__a = new Array(arguments.length - 1);
          while (G__11375__i < G__11375__a.length) {
            G__11375__a[G__11375__i] = arguments[G__11375__i + 1];
            ++G__11375__i;
          }
          G__11374 = new cljs.core.IndexedSeq(G__11375__a, 0);
        }
        return reagent$ratom$atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__11374);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reagent$ratom$atom.cljs$lang$maxFixedArity = 1;
  reagent$ratom$atom.cljs$lang$applyTo = reagent$ratom$atom__2.cljs$lang$applyTo;
  reagent$ratom$atom.cljs$core$IFn$_invoke$arity$1 = reagent$ratom$atom__1;
  reagent$ratom$atom.cljs$core$IFn$_invoke$arity$variadic = reagent$ratom$atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return reagent$ratom$atom;
}();
reagent.ratom.RCursor = function(ratom, path, reaction) {
  this.ratom = ratom;
  this.path = path;
  this.reaction = reaction;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RCursor.prototype._reaction = function() {
  var self__ = this;
  var this$ = this;
  if (self__.reaction == null) {
    return self__.reaction = function() {
      var G__11382 = self__.ratom;
      if (G__11382) {
        var bit__4796__auto__ = G__11382.cljs$lang$protocol_mask$partition0$ & 32768;
        if (bit__4796__auto__ || G__11382.cljs$core$IDeref$) {
          return true;
        } else {
          if (!G__11382.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__11382);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__11382);
      }
    }() ? reagent.ratom.make_reaction.call(null, function(this$) {
      return function() {
        return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.ratom), self__.path);
      };
    }(this$), new cljs.core.Keyword(null, "on-set", "on-set", -140953470), cljs.core._EQ_.call(null, self__.path, cljs.core.PersistentVector.EMPTY) ? function(this$) {
      return function(p1__11377_SHARP_, p2__11376_SHARP_) {
        return cljs.core.reset_BANG_.call(null, self__.ratom, p2__11376_SHARP_);
      };
    }(this$) : function(this$) {
      return function(p1__11379_SHARP_, p2__11378_SHARP_) {
        return cljs.core.swap_BANG_.call(null, self__.ratom, cljs.core.assoc_in, self__.path, p2__11378_SHARP_);
      };
    }(this$)) : reagent.ratom.make_reaction.call(null, function(this$) {
      return function() {
        return self__.ratom.call(null, self__.path);
      };
    }(this$), new cljs.core.Keyword(null, "on-set", "on-set", -140953470), function(this$) {
      return function(p1__11381_SHARP_, p2__11380_SHARP_) {
        return self__.ratom.call(null, self__.path, p2__11380_SHARP_);
      };
    }(this$));
  } else {
    return self__.reaction;
  }
};
reagent.ratom.RCursor.prototype._peek = function() {
  var self__ = this;
  var this$ = this;
  var _STAR_ratom_context_STAR_11383 = reagent.ratom._STAR_ratom_context_STAR_;
  reagent.ratom._STAR_ratom_context_STAR_ = null;
  try {
    return cljs.core._deref.call(null, this$._reaction());
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_11383;
  }
};
reagent.ratom.RCursor.prototype.reagent$ratom$IReactiveAtom$ = true;
reagent.ratom.RCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, [cljs.core.str("#\x3cCursor: "), cljs.core.str(self__.path), cljs.core.str(" ")].join(""));
  cljs.core.pr_writer.call(null, a__$1._peek(), writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.ratom, self__.path], null));
};
reagent.ratom.RCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return other instanceof reagent.ratom.RCursor && cljs.core._EQ_.call(null, self__.path, other.path) && cljs.core._EQ_.call(null, self__.ratom, other.ratom);
};
reagent.ratom.RCursor.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(this$, new_value) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._reset_BANG_.call(null, this$__$1._reaction(), new_value);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f, x);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f, x, y);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f, x, y, more);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._notify_watches.call(null, this$__$1._reaction(), oldval, newval);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._add_watch.call(null, this$__$1._reaction(), key, f);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._remove_watch.call(null, this$__$1._reaction(), key);
};
reagent.ratom.RCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._deref.call(null, this$__$1._reaction());
};
reagent.ratom.RCursor.cljs$lang$type = true;
reagent.ratom.RCursor.cljs$lang$ctorStr = "reagent.ratom/RCursor";
reagent.ratom.RCursor.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "reagent.ratom/RCursor");
};
reagent.ratom.__GT_RCursor = function reagent$ratom$__GT_RCursor(ratom, path, reaction) {
  return new reagent.ratom.RCursor(ratom, path, reaction);
};
reagent.ratom.cursor = function reagent$ratom$cursor(src, path) {
  if (function() {
    var G__11388 = path;
    if (G__11388) {
      var bit__4796__auto__ = G__11388.cljs$lang$protocol_mask$partition0$ & 32768;
      if (bit__4796__auto__ || G__11388.cljs$core$IDeref$) {
        return true;
      } else {
        if (!G__11388.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__11388);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__11388);
    }
  }()) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("Calling cursor with an atom as the second arg is "), cljs.core.str("deprecated, in (cursor "), cljs.core.str(src), cljs.core.str(" "), cljs.core.str(cljs.core.pr_str.call(null, path)), cljs.core.str(")")].join(""));
    } else {
    }
    if (function() {
      var G__11389 = path;
      if (G__11389) {
        var bit__4796__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4122__auto__ = bit__4796__auto__;
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            return G__11389.reagent$ratom$IReactiveAtom$;
          }
        }())) {
          return true;
        } else {
          if (!G__11389.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__11389);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__11389);
      }
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("src must be a reactive atom, not "), cljs.core.str(cljs.core.pr_str.call(null, path))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IReactiveAtom", "IReactiveAtom", -991158427, null), new cljs.core.Symbol(null, "path", "path", 1452340359, null))))].join(""));
    }
    return new reagent.ratom.RCursor(path, src, null);
  } else {
    if (function() {
      var or__4122__auto__ = function() {
        var G__11391 = src;
        if (G__11391) {
          var bit__4796__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4122__auto__ = bit__4796__auto__;
            if (cljs.core.truth_(or__4122__auto__)) {
              return or__4122__auto__;
            } else {
              return G__11391.reagent$ratom$IReactiveAtom$;
            }
          }())) {
            return true;
          } else {
            if (!G__11391.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__11391);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, G__11391);
        }
      }();
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        return cljs.core.ifn_QMARK_.call(null, src) && !cljs.core.vector_QMARK_.call(null, src);
      }
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("src must be a reactive atom or a function, not "), cljs.core.str(cljs.core.pr_str.call(null, src))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IReactiveAtom", "IReactiveAtom", -991158427, null), 
      new cljs.core.Symbol(null, "src", "src", -10544524, null)), cljs.core.list(new cljs.core.Symbol(null, "and", "and", 668631710, null), cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "src", "src", -10544524, null)), cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "vector?", "vector?", -61367869, null), new cljs.core.Symbol(null, "src", "src", -10544524, null)))))))].join(""));
    }
    return new reagent.ratom.RCursor(src, path, null);
  }
};
reagent.ratom.IDisposable = function() {
  var obj11393 = {};
  return obj11393;
}();
reagent.ratom.dispose_BANG_ = function reagent$ratom$dispose_BANG_(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = reagent.ratom.dispose_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = reagent.ratom.dispose_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDisposable.dispose!", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IRunnable = function() {
  var obj11395 = {};
  return obj11395;
}();
reagent.ratom.run = function reagent$ratom$run(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.reagent$ratom$IRunnable$run$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.reagent$ratom$IRunnable$run$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = reagent.ratom.run[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = reagent.ratom.run["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRunnable.run", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.IComputedImpl = function() {
  var obj11397 = {};
  return obj11397;
}();
reagent.ratom._update_watching = function reagent$ratom$_update_watching(this$, derefed) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2(this$, derefed);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = reagent.ratom._update_watching[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = reagent.ratom._update_watching["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-update-watching", this$);
        }
      }
    }().call(null, this$, derefed);
  }
};
reagent.ratom._handle_change = function reagent$ratom$_handle_change(k, sender, oldval, newval) {
  if (function() {
    var and__4110__auto__ = k;
    if (and__4110__auto__) {
      return k.reagent$ratom$IComputedImpl$_handle_change$arity$4;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return k.reagent$ratom$IComputedImpl$_handle_change$arity$4(k, sender, oldval, newval);
  } else {
    var x__4758__auto__ = k == null ? null : k;
    return function() {
      var or__4122__auto__ = reagent.ratom._handle_change[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = reagent.ratom._handle_change["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-handle-change", k);
        }
      }
    }().call(null, k, sender, oldval, newval);
  }
};
reagent.ratom._peek_at = function reagent$ratom$_peek_at(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.reagent$ratom$IComputedImpl$_peek_at$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.reagent$ratom$IComputedImpl$_peek_at$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = reagent.ratom._peek_at[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = reagent.ratom._peek_at["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComputedImpl.-peek-at", this$);
        }
      }
    }().call(null, this$);
  }
};
reagent.ratom.Reaction = function(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  this.f = f;
  this.state = state;
  this.dirty_QMARK_ = dirty_QMARK_;
  this.active_QMARK_ = active_QMARK_;
  this.watching = watching;
  this.watches = watches;
  this.auto_run = auto_run;
  this.on_set = on_set;
  this.on_dispose = on_dispose;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_handle_change$arity$4 = function(this$, sender, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = self__.active_QMARK_;
    if (cljs.core.truth_(and__4110__auto__)) {
      return cljs.core.not.call(null, self__.dirty_QMARK_) && !(oldval === newval);
    } else {
      return and__4110__auto__;
    }
  }())) {
    self__.dirty_QMARK_ = true;
    return function() {
      var or__4122__auto__ = self__.auto_run;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return reagent.ratom.run;
      }
    }().call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_update_watching$arity$2 = function(this$, derefed) {
  var self__ = this;
  var this$__$1 = this;
  var seq__11398_11411 = cljs.core.seq.call(null, derefed);
  var chunk__11399_11412 = null;
  var count__11400_11413 = 0;
  var i__11401_11414 = 0;
  while (true) {
    if (i__11401_11414 < count__11400_11413) {
      var w_11415 = cljs.core._nth.call(null, chunk__11399_11412, i__11401_11414);
      if (cljs.core.contains_QMARK_.call(null, self__.watching, w_11415)) {
      } else {
        cljs.core.add_watch.call(null, w_11415, this$__$1, reagent.ratom._handle_change);
      }
      var G__11416 = seq__11398_11411;
      var G__11417 = chunk__11399_11412;
      var G__11418 = count__11400_11413;
      var G__11419 = i__11401_11414 + 1;
      seq__11398_11411 = G__11416;
      chunk__11399_11412 = G__11417;
      count__11400_11413 = G__11418;
      i__11401_11414 = G__11419;
      continue;
    } else {
      var temp__4126__auto___11420 = cljs.core.seq.call(null, seq__11398_11411);
      if (temp__4126__auto___11420) {
        var seq__11398_11421__$1 = temp__4126__auto___11420;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11398_11421__$1)) {
          var c__4907__auto___11422 = cljs.core.chunk_first.call(null, seq__11398_11421__$1);
          var G__11423 = cljs.core.chunk_rest.call(null, seq__11398_11421__$1);
          var G__11424 = c__4907__auto___11422;
          var G__11425 = cljs.core.count.call(null, c__4907__auto___11422);
          var G__11426 = 0;
          seq__11398_11411 = G__11423;
          chunk__11399_11412 = G__11424;
          count__11400_11413 = G__11425;
          i__11401_11414 = G__11426;
          continue;
        } else {
          var w_11427 = cljs.core.first.call(null, seq__11398_11421__$1);
          if (cljs.core.contains_QMARK_.call(null, self__.watching, w_11427)) {
          } else {
            cljs.core.add_watch.call(null, w_11427, this$__$1, reagent.ratom._handle_change);
          }
          var G__11428 = cljs.core.next.call(null, seq__11398_11421__$1);
          var G__11429 = null;
          var G__11430 = 0;
          var G__11431 = 0;
          seq__11398_11411 = G__11428;
          chunk__11399_11412 = G__11429;
          count__11400_11413 = G__11430;
          i__11401_11414 = G__11431;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__11402_11432 = cljs.core.seq.call(null, self__.watching);
  var chunk__11403_11433 = null;
  var count__11404_11434 = 0;
  var i__11405_11435 = 0;
  while (true) {
    if (i__11405_11435 < count__11404_11434) {
      var w_11436 = cljs.core._nth.call(null, chunk__11403_11433, i__11405_11435);
      if (cljs.core.contains_QMARK_.call(null, derefed, w_11436)) {
      } else {
        cljs.core.remove_watch.call(null, w_11436, this$__$1);
      }
      var G__11437 = seq__11402_11432;
      var G__11438 = chunk__11403_11433;
      var G__11439 = count__11404_11434;
      var G__11440 = i__11405_11435 + 1;
      seq__11402_11432 = G__11437;
      chunk__11403_11433 = G__11438;
      count__11404_11434 = G__11439;
      i__11405_11435 = G__11440;
      continue;
    } else {
      var temp__4126__auto___11441 = cljs.core.seq.call(null, seq__11402_11432);
      if (temp__4126__auto___11441) {
        var seq__11402_11442__$1 = temp__4126__auto___11441;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11402_11442__$1)) {
          var c__4907__auto___11443 = cljs.core.chunk_first.call(null, seq__11402_11442__$1);
          var G__11444 = cljs.core.chunk_rest.call(null, seq__11402_11442__$1);
          var G__11445 = c__4907__auto___11443;
          var G__11446 = cljs.core.count.call(null, c__4907__auto___11443);
          var G__11447 = 0;
          seq__11402_11432 = G__11444;
          chunk__11403_11433 = G__11445;
          count__11404_11434 = G__11446;
          i__11405_11435 = G__11447;
          continue;
        } else {
          var w_11448 = cljs.core.first.call(null, seq__11402_11442__$1);
          if (cljs.core.contains_QMARK_.call(null, derefed, w_11448)) {
          } else {
            cljs.core.remove_watch.call(null, w_11448, this$__$1);
          }
          var G__11449 = cljs.core.next.call(null, seq__11402_11442__$1);
          var G__11450 = null;
          var G__11451 = 0;
          var G__11452 = 0;
          seq__11402_11432 = G__11449;
          chunk__11403_11433 = G__11450;
          count__11404_11434 = G__11451;
          i__11405_11435 = G__11452;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return self__.watching = derefed;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_peek_at$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, self__.dirty_QMARK_)) {
    return self__.state;
  } else {
    var _STAR_ratom_context_STAR_11406 = reagent.ratom._STAR_ratom_context_STAR_;
    reagent.ratom._STAR_ratom_context_STAR_ = null;
    try {
      return cljs.core._deref.call(null, this$__$1);
    } finally {
      reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_11406;
    }
  }
};
reagent.ratom.Reaction.prototype.reagent$ratom$IReactiveAtom$ = true;
reagent.ratom.Reaction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  cljs.core._write.call(null, writer, [cljs.core.str("#\x3cReaction "), cljs.core.str(cljs.core.hash.call(null, this$__$1)), cljs.core.str(": ")].join(""));
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.Reaction.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.Reaction.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$dispose_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var seq__11407_11453 = cljs.core.seq.call(null, self__.watching);
  var chunk__11408_11454 = null;
  var count__11409_11455 = 0;
  var i__11410_11456 = 0;
  while (true) {
    if (i__11410_11456 < count__11409_11455) {
      var w_11457 = cljs.core._nth.call(null, chunk__11408_11454, i__11410_11456);
      cljs.core.remove_watch.call(null, w_11457, this$__$1);
      var G__11458 = seq__11407_11453;
      var G__11459 = chunk__11408_11454;
      var G__11460 = count__11409_11455;
      var G__11461 = i__11410_11456 + 1;
      seq__11407_11453 = G__11458;
      chunk__11408_11454 = G__11459;
      count__11409_11455 = G__11460;
      i__11410_11456 = G__11461;
      continue;
    } else {
      var temp__4126__auto___11462 = cljs.core.seq.call(null, seq__11407_11453);
      if (temp__4126__auto___11462) {
        var seq__11407_11463__$1 = temp__4126__auto___11462;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11407_11463__$1)) {
          var c__4907__auto___11464 = cljs.core.chunk_first.call(null, seq__11407_11463__$1);
          var G__11465 = cljs.core.chunk_rest.call(null, seq__11407_11463__$1);
          var G__11466 = c__4907__auto___11464;
          var G__11467 = cljs.core.count.call(null, c__4907__auto___11464);
          var G__11468 = 0;
          seq__11407_11453 = G__11465;
          chunk__11408_11454 = G__11466;
          count__11409_11455 = G__11467;
          i__11410_11456 = G__11468;
          continue;
        } else {
          var w_11469 = cljs.core.first.call(null, seq__11407_11463__$1);
          cljs.core.remove_watch.call(null, w_11469, this$__$1);
          var G__11470 = cljs.core.next.call(null, seq__11407_11463__$1);
          var G__11471 = null;
          var G__11472 = 0;
          var G__11473 = 0;
          seq__11407_11453 = G__11470;
          chunk__11408_11454 = G__11471;
          count__11409_11455 = G__11472;
          i__11410_11456 = G__11473;
          continue;
        }
      } else {
      }
    }
    break;
  }
  self__.watching = null;
  self__.state = null;
  self__.dirty_QMARK_ = true;
  if (cljs.core.truth_(self__.active_QMARK_)) {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.dec);
    } else {
    }
    self__.active_QMARK_ = false;
  } else {
  }
  if (cljs.core.truth_(self__.on_dispose)) {
    return self__.on_dispose.call(null);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, newval) {
  var self__ = this;
  var a__$1 = this;
  var oldval = self__.state;
  self__.state = newval;
  if (cljs.core.truth_(self__.on_set)) {
    self__.dirty_QMARK_ = true;
    self__.on_set.call(null, oldval, newval);
  } else {
  }
  cljs.core._notify_watches.call(null, a__$1, oldval, newval);
  return newval;
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f__$1) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, reagent.ratom._peek_at.call(null, a__$1)));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f__$1, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, reagent.ratom._peek_at.call(null, a__$1), x));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f__$1, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, reagent.ratom._peek_at.call(null, a__$1), x, y));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f__$1, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f__$1, reagent.ratom._peek_at.call(null, a__$1), x, y, more));
};
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$run$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var oldstate = self__.state;
  var res = reagent.ratom.capture_derefed.call(null, self__.f, this$__$1);
  var derefed = reagent.ratom.captured.call(null, this$__$1);
  if (cljs.core.not_EQ_.call(null, derefed, self__.watching)) {
    reagent.ratom._update_watching.call(null, this$__$1, derefed);
  } else {
  }
  if (cljs.core.truth_(self__.active_QMARK_)) {
  } else {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
    } else {
    }
    self__.active_QMARK_ = true;
  }
  self__.dirty_QMARK_ = false;
  self__.state = res;
  cljs.core._notify_watches.call(null, this$__$1, oldstate, self__.state);
  return res;
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f__$1) {
      f__$1.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, k, wf) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, k, wf);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  self__.watches = cljs.core.dissoc.call(null, self__.watches, k);
  if (cljs.core.empty_QMARK_.call(null, self__.watches) && cljs.core.not.call(null, self__.auto_run)) {
    return reagent.ratom.dispose_BANG_.call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var or__4122__auto__ = self__.auto_run;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return cljs.core.some_QMARK_.call(null, reagent.ratom._STAR_ratom_context_STAR_);
    }
  }())) {
    reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
    if (cljs.core.truth_(self__.dirty_QMARK_)) {
      return reagent.ratom.run.call(null, this$__$1);
    } else {
      return self__.state;
    }
  } else {
    if (cljs.core.truth_(self__.dirty_QMARK_)) {
      var oldstate_11474 = self__.state;
      self__.state = self__.f.call(null);
      if (oldstate_11474 === self__.state) {
      } else {
        cljs.core._notify_watches.call(null, this$__$1, oldstate_11474, self__.state);
      }
    } else {
    }
    return self__.state;
  }
};
reagent.ratom.Reaction.cljs$lang$type = true;
reagent.ratom.Reaction.cljs$lang$ctorStr = "reagent.ratom/Reaction";
reagent.ratom.Reaction.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "reagent.ratom/Reaction");
};
reagent.ratom.__GT_Reaction = function reagent$ratom$__GT_Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  return new reagent.ratom.Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose);
};
reagent.ratom.make_reaction = function() {
  var reagent$ratom$make_reaction__delegate = function(f, p__11475) {
    var map__11477 = p__11475;
    var map__11477__$1 = cljs.core.seq_QMARK_.call(null, map__11477) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11477) : map__11477;
    var derefed = cljs.core.get.call(null, map__11477__$1, new cljs.core.Keyword(null, "derefed", "derefed", 590684583));
    var on_dispose = cljs.core.get.call(null, map__11477__$1, new cljs.core.Keyword(null, "on-dispose", "on-dispose", 2105306360));
    var on_set = cljs.core.get.call(null, map__11477__$1, new cljs.core.Keyword(null, "on-set", "on-set", -140953470));
    var auto_run = cljs.core.get.call(null, map__11477__$1, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437));
    var runner = cljs.core._EQ_.call(null, auto_run, true) ? reagent.ratom.run : auto_run;
    var active = !(derefed == null);
    var dirty = !active;
    var reaction = new reagent.ratom.Reaction(f, null, dirty, active, null, null, runner, on_set, on_dispose);
    if (derefed == null) {
    } else {
      if (cljs.core.truth_(reagent.ratom.debug)) {
        cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
      } else {
      }
      reagent.ratom._update_watching.call(null, reaction, derefed);
    }
    return reaction;
  };
  var reagent$ratom$make_reaction = function(f, var_args) {
    var p__11475 = null;
    if (arguments.length > 1) {
      var G__11478__i = 0, G__11478__a = new Array(arguments.length - 1);
      while (G__11478__i < G__11478__a.length) {
        G__11478__a[G__11478__i] = arguments[G__11478__i + 1];
        ++G__11478__i;
      }
      p__11475 = new cljs.core.IndexedSeq(G__11478__a, 0);
    }
    return reagent$ratom$make_reaction__delegate.call(this, f, p__11475);
  };
  reagent$ratom$make_reaction.cljs$lang$maxFixedArity = 1;
  reagent$ratom$make_reaction.cljs$lang$applyTo = function(arglist__11479) {
    var f = cljs.core.first(arglist__11479);
    var p__11475 = cljs.core.rest(arglist__11479);
    return reagent$ratom$make_reaction__delegate(f, p__11475);
  };
  reagent$ratom$make_reaction.cljs$core$IFn$_invoke$arity$variadic = reagent$ratom$make_reaction__delegate;
  return reagent$ratom$make_reaction;
}();
reagent.ratom.Wrapper = function(state, callback, changed, watches) {
  this.state = state;
  this.callback = callback;
  this.changed = changed;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2149613568;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.Wrapper.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  cljs.core._write.call(null, writer, "#\x3cwrap: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.Wrapper.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f) {
      f.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.Wrapper.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
reagent.ratom.Wrapper.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
reagent.ratom.Wrapper.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof reagent.ratom.Wrapper && cljs.core.not.call(null, self__.changed) && cljs.core.not.call(null, other.changed) && cljs.core._EQ_.call(null, self__.state, other.state) && cljs.core._EQ_.call(null, self__.callback, other.callback);
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.ratom.Wrapper.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(this$, newval) {
  var self__ = this;
  var this$__$1 = this;
  var oldval = self__.state;
  self__.changed = true;
  self__.state = newval;
  if (self__.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, this$__$1, oldval, newval);
  }
  self__.callback.call(null, newval);
  return newval;
};
reagent.ratom.Wrapper.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = self__.changed;
    if (cljs.core.truth_(and__4110__auto__)) {
      return cljs.core.some_QMARK_.call(null, reagent.ratom._STAR_ratom_context_STAR_);
    } else {
      return and__4110__auto__;
    }
  }())) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("derefing stale wrap: "), cljs.core.str(cljs.core.pr_str.call(null, this$__$1))].join(""));
    } else {
    }
  } else {
  }
  return self__.state;
};
reagent.ratom.Wrapper.cljs$lang$type = true;
reagent.ratom.Wrapper.cljs$lang$ctorStr = "reagent.ratom/Wrapper";
reagent.ratom.Wrapper.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "reagent.ratom/Wrapper");
};
reagent.ratom.__GT_Wrapper = function reagent$ratom$__GT_Wrapper(state, callback, changed, watches) {
  return new reagent.ratom.Wrapper(state, callback, changed, watches);
};
reagent.ratom.make_wrapper = function reagent$ratom$make_wrapper(value, callback_fn, args) {
  return new reagent.ratom.Wrapper(value, new reagent.impl.util.partial_ifn(callback_fn, args, null), false, null);
};
goog.provide("reagent.impl.batching");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("reagent.impl.util");
goog.require("reagent.ratom");
goog.require("reagent.interop");
goog.require("reagent.debug");
if (typeof reagent.impl.batching.mount_count !== "undefined") {
} else {
  reagent.impl.batching.mount_count = 0;
}
reagent.impl.batching.next_mount_count = function reagent$impl$batching$next_mount_count() {
  return reagent.impl.batching.mount_count = reagent.impl.batching.mount_count + 1;
};
reagent.impl.batching.fake_raf = function reagent$impl$batching$fake_raf(f) {
  return setTimeout(f, 16);
};
reagent.impl.batching.next_tick = cljs.core.not.call(null, reagent.impl.util.is_client) ? reagent.impl.batching.fake_raf : function() {
  var w = window;
  var or__4122__auto__ = w["requestAnimationFrame"];
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    var or__4122__auto____$1 = w["webkitRequestAnimationFrame"];
    if (cljs.core.truth_(or__4122__auto____$1)) {
      return or__4122__auto____$1;
    } else {
      var or__4122__auto____$2 = w["mozRequestAnimationFrame"];
      if (cljs.core.truth_(or__4122__auto____$2)) {
        return or__4122__auto____$2;
      } else {
        var or__4122__auto____$3 = w["msRequestAnimationFrame"];
        if (cljs.core.truth_(or__4122__auto____$3)) {
          return or__4122__auto____$3;
        } else {
          return reagent.impl.batching.fake_raf;
        }
      }
    }
  }
}();
reagent.impl.batching.compare_mount_order = function reagent$impl$batching$compare_mount_order(c1, c2) {
  return c1["cljsMountOrder"] - c2["cljsMountOrder"];
};
reagent.impl.batching.run_queue = function reagent$impl$batching$run_queue(a) {
  a.sort(reagent.impl.batching.compare_mount_order);
  var n__5007__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__5007__auto__) {
      var c_11319 = a[i];
      if (cljs.core.truth_(c_11319["cljsIsDirty"])) {
        c_11319["forceUpdate"]();
      } else {
      }
      var G__11320 = i + 1;
      i = G__11320;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.run_funs = function reagent$impl$batching$run_funs(a) {
  var n__5007__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__5007__auto__) {
      a[i].call(null);
      var G__11321 = i + 1;
      i = G__11321;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.RenderQueue = function(queue, scheduled_QMARK_, after_render) {
  this.queue = queue;
  this.scheduled_QMARK_ = scheduled_QMARK_;
  this.after_render = after_render;
};
reagent.impl.batching.RenderQueue.prototype.queue_render = function(c) {
  var self__ = this;
  var this$ = this;
  self__.queue.push(c);
  return this$.schedule();
};
reagent.impl.batching.RenderQueue.prototype.add_after_render = function(f) {
  var self__ = this;
  var _ = this;
  return self__.after_render.push(f);
};
reagent.impl.batching.RenderQueue.prototype.schedule = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.truth_(self__.scheduled_QMARK_)) {
    return null;
  } else {
    self__.scheduled_QMARK_ = true;
    return reagent.impl.batching.next_tick.call(null, function(this$) {
      return function() {
        return this$.run_queue();
      };
    }(this$));
  }
};
reagent.impl.batching.RenderQueue.prototype.run_queue = function() {
  var self__ = this;
  var _ = this;
  var q = self__.queue;
  var aq = self__.after_render;
  self__.queue = [];
  self__.after_render = [];
  self__.scheduled_QMARK_ = false;
  reagent.impl.batching.run_queue.call(null, q);
  return reagent.impl.batching.run_funs.call(null, aq);
};
reagent.impl.batching.RenderQueue.cljs$lang$type = true;
reagent.impl.batching.RenderQueue.cljs$lang$ctorStr = "reagent.impl.batching/RenderQueue";
reagent.impl.batching.RenderQueue.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "reagent.impl.batching/RenderQueue");
};
reagent.impl.batching.__GT_RenderQueue = function reagent$impl$batching$__GT_RenderQueue(queue, scheduled_QMARK_, after_render) {
  return new reagent.impl.batching.RenderQueue(queue, scheduled_QMARK_, after_render);
};
reagent.impl.batching.render_queue = new reagent.impl.batching.RenderQueue([], false, []);
reagent.impl.batching.flush = function reagent$impl$batching$flush() {
  return reagent.impl.batching.render_queue.run_queue();
};
reagent.impl.batching.queue_render = function reagent$impl$batching$queue_render(c) {
  c["cljsIsDirty"] = true;
  return reagent.impl.batching.render_queue.queue_render(c);
};
reagent.impl.batching.mark_rendered = function reagent$impl$batching$mark_rendered(c) {
  return c["cljsIsDirty"] = false;
};
reagent.impl.batching.do_after_flush = function reagent$impl$batching$do_after_flush(f) {
  return reagent.impl.batching.render_queue.add_after_render(f);
};
reagent.impl.batching.do_later = function reagent$impl$batching$do_later(f) {
  reagent.impl.batching.do_after_flush.call(null, f);
  return reagent.impl.batching.render_queue.schedule();
};
reagent.impl.batching.is_reagent_component = function reagent$impl$batching$is_reagent_component(c) {
  var G__11323 = c;
  var G__11323__$1 = G__11323 == null ? null : G__11323["props"];
  var G__11323__$2 = G__11323__$1 == null ? null : G__11323__$1["argv"];
  return G__11323__$2;
};
reagent.impl.batching.run_reactively = function reagent$impl$batching$run_reactively(c, run) {
  if (cljs.core.truth_(reagent.impl.batching.is_reagent_component.call(null, c))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "is-reagent-component", "is-reagent-component", -1856228005, null), new cljs.core.Symbol(null, "c", "c", -122660552, null))))].join(""));
  }
  reagent.impl.batching.mark_rendered.call(null, c);
  var rat = c["cljsRatom"];
  if (rat == null) {
    var res = reagent.ratom.capture_derefed.call(null, run, c);
    var derefed = reagent.ratom.captured.call(null, c);
    if (!(derefed == null)) {
      c["cljsRatom"] = reagent.ratom.make_reaction.call(null, run, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437), function(res, derefed, rat) {
        return function() {
          return reagent.impl.batching.queue_render.call(null, c);
        };
      }(res, derefed, rat), new cljs.core.Keyword(null, "derefed", "derefed", 590684583), derefed);
    } else {
    }
    return res;
  } else {
    return reagent.ratom.run.call(null, rat);
  }
};
reagent.impl.batching.dispose = function reagent$impl$batching$dispose(c) {
  var G__11325_11326 = c["cljsRatom"];
  var G__11325_11327__$1 = G__11325_11326 == null ? null : reagent.ratom.dispose_BANG_.call(null, G__11325_11326);
  return reagent.impl.batching.mark_rendered.call(null, c);
};
goog.provide("reagent.impl.component");
goog.require("cljs.core");
goog.require("reagent.debug");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("reagent.impl.util");
reagent.impl.component.state_atom = function reagent$impl$component$state_atom(this$) {
  var sa = this$["cljsState"];
  if (!(sa == null)) {
    return sa;
  } else {
    return this$["cljsState"] = reagent.ratom.atom.call(null, null);
  }
};
reagent.impl.component.as_element = function reagent$impl$component$as_element(x) {
  return reagent.impl.template.as_element(x);
};
reagent.impl.component.do_render = function reagent$impl$component$do_render(c) {
  var _STAR_current_component_STAR_11282 = reagent.impl.component._STAR_current_component_STAR_;
  reagent.impl.component._STAR_current_component_STAR_ = c;
  try {
    var f = c["cljsRender"];
    var _ = cljs.core.ifn_QMARK_.call(null, f) ? null : function() {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }();
    var p = c["props"];
    var res = c["reagentRender"] == null ? f.call(null, c) : function() {
      var argv = p["argv"];
      var n = cljs.core.count.call(null, argv);
      var G__11283 = n;
      switch(G__11283) {
        case 1:
          return f.call(null);
          break;
        case 2:
          return f.call(null, cljs.core.nth.call(null, argv, 1));
          break;
        case 3:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2));
          break;
        case 4:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3));
          break;
        case 5:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3), cljs.core.nth.call(null, argv, 4));
          break;
        default:
          return cljs.core.apply.call(null, f, cljs.core.subvec.call(null, argv, 1));
      }
    }();
    if (cljs.core.vector_QMARK_.call(null, res)) {
      return reagent.impl.component.as_element.call(null, res);
    } else {
      if (cljs.core.ifn_QMARK_.call(null, res)) {
        c["cljsRender"] = res;
        return reagent$impl$component$do_render.call(null, c);
      } else {
        return res;
      }
    }
  } finally {
    reagent.impl.component._STAR_current_component_STAR_ = _STAR_current_component_STAR_11282;
  }
};
reagent.impl.component.static_fns = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "render", "render", -1408033454), function() {
  var c = this;
  if (cljs.core.not.call(null, reagent.impl.component._STAR_non_reactive_STAR_)) {
    return reagent.impl.batching.run_reactively.call(null, c, function(c) {
      return function() {
        return reagent.impl.component.do_render.call(null, c);
      };
    }(c));
  } else {
    return reagent.impl.component.do_render.call(null, c);
  }
}], null);
reagent.impl.component.custom_wrapper = function reagent$impl$component$custom_wrapper(key, f) {
  var G__11286 = key instanceof cljs.core.Keyword ? key.fqn : null;
  switch(G__11286) {
    case "componentWillUnmount":
      return function(G__11286) {
        return function() {
          var c = this;
          reagent.impl.batching.dispose.call(null, c);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__11286);
      break;
    case "componentWillMount":
      return function(G__11286) {
        return function() {
          var c = this;
          c["cljsMountOrder"] = reagent.impl.batching.next_mount_count.call(null);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__11286);
      break;
    case "componentDidUpdate":
      return function(G__11286) {
        return function(oldprops) {
          var c = this;
          return f.call(null, c, oldprops["argv"]);
        };
      }(G__11286);
      break;
    case "componentWillUpdate":
      return function(G__11286) {
        return function(nextprops) {
          var c = this;
          return f.call(null, c, nextprops["argv"]);
        };
      }(G__11286);
      break;
    case "shouldComponentUpdate":
      return function(G__11286) {
        return function(nextprops, nextstate) {
          var or__4122__auto__ = reagent.impl.util._STAR_always_update_STAR_;
          if (cljs.core.truth_(or__4122__auto__)) {
            return or__4122__auto__;
          } else {
            var c = this;
            var old_argv = c["props"]["argv"];
            var new_argv = nextprops["argv"];
            if (f == null) {
              return old_argv == null || new_argv == null || cljs.core.not_EQ_.call(null, old_argv, new_argv);
            } else {
              return f.call(null, c, old_argv, new_argv);
            }
          }
        };
      }(G__11286);
      break;
    case "componentWillReceiveProps":
      return function(G__11286) {
        return function(props) {
          var c = this;
          return f.call(null, c, props["argv"]);
        };
      }(G__11286);
      break;
    case "getInitialState":
      return function(G__11286) {
        return function() {
          var c = this;
          return cljs.core.reset_BANG_.call(null, reagent.impl.component.state_atom.call(null, c), f.call(null, c));
        };
      }(G__11286);
      break;
    case "getDefaultProps":
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("getDefaultProps not supported yet"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, false))].join(""));break;
    default:
      return null;
  }
};
reagent.impl.component.default_wrapper = function reagent$impl$component$default_wrapper(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
    return function() {
      var G__11288__delegate = function(args) {
        var c = this;
        return cljs.core.apply.call(null, f, c, args);
      };
      var G__11288 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__11289__i = 0, G__11289__a = new Array(arguments.length - 0);
          while (G__11289__i < G__11289__a.length) {
            G__11289__a[G__11289__i] = arguments[G__11289__i + 0];
            ++G__11289__i;
          }
          args = new cljs.core.IndexedSeq(G__11289__a, 0);
        }
        return G__11288__delegate.call(this, args);
      };
      G__11288.cljs$lang$maxFixedArity = 0;
      G__11288.cljs$lang$applyTo = function(arglist__11290) {
        var args = cljs.core.seq(arglist__11290);
        return G__11288__delegate(args);
      };
      G__11288.cljs$core$IFn$_invoke$arity$variadic = G__11288__delegate;
      return G__11288;
    }();
  } else {
    return f;
  }
};
reagent.impl.component.dont_wrap = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), null, new cljs.core.Keyword(null, "reagentRender", "reagentRender", -358306383), null, new cljs.core.Keyword(null, "render", "render", -1408033454), null, new cljs.core.Keyword(null, "cljsName", "cljsName", 999824949), null], null), null);
reagent.impl.component.dont_bind = function reagent$impl$component$dont_bind(f) {
  if (cljs.core.fn_QMARK_.call(null, f)) {
    var G__11292 = f;
    G__11292["__reactDontBind"] = true;
    return G__11292;
  } else {
    return f;
  }
};
reagent.impl.component.get_wrapper = function reagent$impl$component$get_wrapper(key, f, name) {
  if (cljs.core.truth_(reagent.impl.component.dont_wrap.call(null, key))) {
    return reagent.impl.component.dont_bind.call(null, f);
  } else {
    var wrap = reagent.impl.component.custom_wrapper.call(null, key, f);
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = wrap;
      if (cljs.core.truth_(and__4110__auto__)) {
        return f;
      } else {
        return and__4110__auto__;
      }
    }())) {
      if (cljs.core.ifn_QMARK_.call(null, f)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Expected function in "), cljs.core.str(name), cljs.core.str(key), cljs.core.str(" but got "), cljs.core.str(f)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
      }
    } else {
    }
    var or__4122__auto__ = wrap;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return reagent.impl.component.default_wrapper.call(null, f);
    }
  }
};
reagent.impl.component.obligatory = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 1795750960), null, new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619), null, new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), null], null);
reagent.impl.component.dash_to_camel = reagent.impl.util.memoize_1.call(null, reagent.impl.util.dash_to_camel);
reagent.impl.component.camelify_map_keys = function reagent$impl$component$camelify_map_keys(fun_map) {
  return cljs.core.reduce_kv.call(null, function(m, k, v) {
    return cljs.core.assoc.call(null, m, cljs.core.keyword.call(null, reagent.impl.component.dash_to_camel.call(null, k)), v);
  }, cljs.core.PersistentArrayMap.EMPTY, fun_map);
};
reagent.impl.component.add_obligatory = function reagent$impl$component$add_obligatory(fun_map) {
  return cljs.core.merge.call(null, reagent.impl.component.obligatory, fun_map);
};
reagent.impl.component.add_render = function reagent$impl$component$add_render(fun_map, render_f, name) {
  var fm = cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), render_f, new cljs.core.Keyword(null, "render", "render", -1408033454), (new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(reagent.impl.component.static_fns));
  return cljs.core.assoc.call(null, fm, new cljs.core.Keyword(null, "cljsName", "cljsName", 999824949), function(fm) {
    return function() {
      return name;
    };
  }(fm));
};
reagent.impl.component.fun_name = function reagent$impl$component$fun_name(f) {
  var or__4122__auto__ = function() {
    var and__4110__auto__ = cljs.core.fn_QMARK_.call(null, f);
    if (and__4110__auto__) {
      var or__4122__auto__ = f["displayName"];
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return f["name"];
      }
    } else {
      return and__4110__auto__;
    }
  }();
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    var or__4122__auto____$1 = function() {
      var and__4110__auto__ = function() {
        var G__11300 = f;
        if (G__11300) {
          var bit__4789__auto__ = G__11300.cljs$lang$protocol_mask$partition1$ & 4096;
          if (bit__4789__auto__ || G__11300.cljs$core$INamed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }();
      if (and__4110__auto__) {
        return cljs.core.name.call(null, f);
      } else {
        return and__4110__auto__;
      }
    }();
    if (cljs.core.truth_(or__4122__auto____$1)) {
      return or__4122__auto____$1;
    } else {
      var m = cljs.core.meta.call(null, f);
      if (cljs.core.map_QMARK_.call(null, m)) {
        return(new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(m);
      } else {
        return null;
      }
    }
  }
};
reagent.impl.component.wrap_funs = function reagent$impl$component$wrap_funs(fmap) {
  var fun_map = function() {
    var temp__4128__auto__ = (new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104)).cljs$core$IFn$_invoke$arity$1(fmap);
    if (temp__4128__auto__ == null) {
      return fmap;
    } else {
      var cf = temp__4128__auto__;
      return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, fmap, new cljs.core.Keyword(null, "reagentRender", "reagentRender", -358306383), cf), new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104));
    }
  }();
  var render_fun = function() {
    var or__4122__auto__ = (new cljs.core.Keyword(null, "reagentRender", "reagentRender", -358306383)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return(new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(fun_map);
    }
  }();
  var _ = cljs.core.ifn_QMARK_.call(null, render_fun) ? null : function() {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Render must be a function, not "), cljs.core.str(cljs.core.pr_str.call(null, render_fun))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "render-fun", "render-fun", -1209513086, null))))].join(""));
  }();
  var name = [cljs.core.str(function() {
    var or__4122__auto__ = (new cljs.core.Keyword(null, "displayName", "displayName", -809144601)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return reagent.impl.component.fun_name.call(null, render_fun);
    }
  }())].join("");
  var name_SINGLEQUOTE_ = cljs.core.empty_QMARK_.call(null, name) ? [cljs.core.str(cljs.core.gensym.call(null, "reagent"))].join("") : name;
  var fmap__$1 = reagent.impl.component.add_render.call(null, cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "displayName", "displayName", -809144601), name_SINGLEQUOTE_), render_fun, name_SINGLEQUOTE_);
  return cljs.core.reduce_kv.call(null, function(fun_map, render_fun, _, name, name_SINGLEQUOTE_, fmap__$1) {
    return function(m, k, v) {
      return cljs.core.assoc.call(null, m, k, reagent.impl.component.get_wrapper.call(null, k, v, name_SINGLEQUOTE_));
    };
  }(fun_map, render_fun, _, name, name_SINGLEQUOTE_, fmap__$1), cljs.core.PersistentArrayMap.EMPTY, fmap__$1);
};
reagent.impl.component.map_to_js = function reagent$impl$component$map_to_js(m) {
  return cljs.core.reduce_kv.call(null, function(o, k, v) {
    var G__11302 = o;
    G__11302[cljs.core.name.call(null, k)] = v;
    return G__11302;
  }, {}, m);
};
reagent.impl.component.cljsify = function reagent$impl$component$cljsify(body) {
  return reagent.impl.component.map_to_js.call(null, reagent.impl.component.wrap_funs.call(null, reagent.impl.component.add_obligatory.call(null, reagent.impl.component.camelify_map_keys.call(null, body))));
};
reagent.impl.component.create_class = function reagent$impl$component$create_class(body) {
  if (cljs.core.map_QMARK_.call(null, body)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "body", "body", -408674142, null))))].join(""));
  }
  var spec = reagent.impl.component.cljsify.call(null, body);
  var res = React["createClass"](spec);
  var f = function(spec, res) {
    return function() {
      var G__11303__delegate = function(args) {
        return reagent.impl.component.as_element.call(null, cljs.core.apply.call(null, cljs.core.vector, res, args));
      };
      var G__11303 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__11304__i = 0, G__11304__a = new Array(arguments.length - 0);
          while (G__11304__i < G__11304__a.length) {
            G__11304__a[G__11304__i] = arguments[G__11304__i + 0];
            ++G__11304__i;
          }
          args = new cljs.core.IndexedSeq(G__11304__a, 0);
        }
        return G__11303__delegate.call(this, args);
      };
      G__11303.cljs$lang$maxFixedArity = 0;
      G__11303.cljs$lang$applyTo = function(arglist__11305) {
        var args = cljs.core.seq(arglist__11305);
        return G__11303__delegate(args);
      };
      G__11303.cljs$core$IFn$_invoke$arity$variadic = G__11303__delegate;
      return G__11303;
    }();
  }(spec, res);
  reagent.impl.util.cache_react_class.call(null, f, res);
  reagent.impl.util.cache_react_class.call(null, res, res);
  return f;
};
reagent.impl.component.comp_name = function reagent$impl$component$comp_name() {
  var n = function() {
    var G__11307 = reagent.impl.component._STAR_current_component_STAR_;
    var G__11307__$1 = G__11307 == null ? null : G__11307["cljsName"]();
    return G__11307__$1;
  }();
  if (!cljs.core.empty_QMARK_.call(null, n)) {
    return[cljs.core.str(" (in "), cljs.core.str(n), cljs.core.str(")")].join("");
  } else {
    return "";
  }
};
reagent.impl.component.shallow_obj_to_map = function reagent$impl$component$shallow_obj_to_map(o) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4876__auto__ = function reagent$impl$component$shallow_obj_to_map_$_iter__11312(s__11313) {
      return new cljs.core.LazySeq(null, function() {
        var s__11313__$1 = s__11313;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__11313__$1);
          if (temp__4126__auto__) {
            var s__11313__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__11313__$2)) {
              var c__4874__auto__ = cljs.core.chunk_first.call(null, s__11313__$2);
              var size__4875__auto__ = cljs.core.count.call(null, c__4874__auto__);
              var b__11315 = cljs.core.chunk_buffer.call(null, size__4875__auto__);
              if (function() {
                var i__11314 = 0;
                while (true) {
                  if (i__11314 < size__4875__auto__) {
                    var k = cljs.core._nth.call(null, c__4874__auto__, i__11314);
                    cljs.core.chunk_append.call(null, b__11315, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), o[k]], null));
                    var G__11316 = i__11314 + 1;
                    i__11314 = G__11316;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11315), reagent$impl$component$shallow_obj_to_map_$_iter__11312.call(null, cljs.core.chunk_rest.call(null, s__11313__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11315), null);
              }
            } else {
              var k = cljs.core.first.call(null, s__11313__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), o[k]], null), reagent$impl$component$shallow_obj_to_map_$_iter__11312.call(null, cljs.core.rest.call(null, s__11313__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4876__auto__.call(null, cljs.core.js_keys.call(null, o));
  }());
};
reagent.impl.component.elem_counter = 0;
reagent.impl.component.reactify_component = function reagent$impl$component$reactify_component(comp) {
  return React["createClass"]({"render":function() {
    var this$ = this;
    return reagent.impl.component.as_element.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp, cljs.core.assoc.call(null, reagent.impl.component.shallow_obj_to_map.call(null, this$["props"]), new cljs.core.Keyword(null, "-elem-count", "-elem-count", 663797079), reagent.impl.component.elem_counter = reagent.impl.component.elem_counter + 1)], null));
  }, "displayName":"react-wrapper"});
};
goog.provide("reagent.impl.template");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("clojure.string");
goog.require("reagent.debug");
reagent.impl.template.re_tag = /([^\s\.#]+)(?:#([^\s\.#]+))?(?:\.([^\s#]+))?/;
reagent.impl.template.NativeWrapper = function(comp) {
  this.comp = comp;
};
reagent.impl.template.NativeWrapper.cljs$lang$type = true;
reagent.impl.template.NativeWrapper.cljs$lang$ctorStr = "reagent.impl.template/NativeWrapper";
reagent.impl.template.NativeWrapper.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "reagent.impl.template/NativeWrapper");
};
reagent.impl.template.__GT_NativeWrapper = function reagent$impl$template$__GT_NativeWrapper(comp) {
  return new reagent.impl.template.NativeWrapper(comp);
};
reagent.impl.template.named_QMARK_ = function reagent$impl$template$named_QMARK_(x) {
  return x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol;
};
reagent.impl.template.hiccup_tag_QMARK_ = function reagent$impl$template$hiccup_tag_QMARK_(x) {
  return reagent.impl.template.named_QMARK_.call(null, x) || typeof x === "string";
};
reagent.impl.template.valid_tag_QMARK_ = function reagent$impl$template$valid_tag_QMARK_(x) {
  return reagent.impl.template.hiccup_tag_QMARK_.call(null, x) || cljs.core.ifn_QMARK_.call(null, x) || x instanceof reagent.impl.template.NativeWrapper;
};
reagent.impl.template.prop_name_cache = {"charset":"charSet", "for":"htmlFor", "class":"className"};
reagent.impl.template.obj_get = function reagent$impl$template$obj_get(o, k) {
  if (cljs.core.truth_(o.hasOwnProperty(k))) {
    return o[k];
  } else {
    return null;
  }
};
reagent.impl.template.cached_prop_name = function reagent$impl$template$cached_prop_name(k) {
  if (reagent.impl.template.named_QMARK_.call(null, k)) {
    var temp__4128__auto__ = reagent.impl.template.obj_get.call(null, reagent.impl.template.prop_name_cache, cljs.core.name.call(null, k));
    if (temp__4128__auto__ == null) {
      return reagent.impl.template.prop_name_cache[cljs.core.name.call(null, k)] = reagent.impl.util.dash_to_camel.call(null, k);
    } else {
      var k_SINGLEQUOTE_ = temp__4128__auto__;
      return k_SINGLEQUOTE_;
    }
  } else {
    return k;
  }
};
reagent.impl.template.convert_prop_value = function reagent$impl$template$convert_prop_value(x) {
  if (typeof x === "string" || typeof x === "number" || cljs.core.fn_QMARK_.call(null, x)) {
    return x;
  } else {
    if (reagent.impl.template.named_QMARK_.call(null, x)) {
      return cljs.core.name.call(null, x);
    } else {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.reduce_kv.call(null, function(o, k, v) {
          var G__11331 = o;
          G__11331[reagent.impl.template.cached_prop_name.call(null, k)] = reagent$impl$template$convert_prop_value.call(null, v);
          return G__11331;
        }, {}, x);
      } else {
        if (cljs.core.coll_QMARK_.call(null, x)) {
          return cljs.core.clj__GT_js.call(null, x);
        } else {
          if (cljs.core.ifn_QMARK_.call(null, x)) {
            return function() {
              var G__11332__delegate = function(args) {
                return cljs.core.apply.call(null, x, args);
              };
              var G__11332 = function(var_args) {
                var args = null;
                if (arguments.length > 0) {
                  var G__11333__i = 0, G__11333__a = new Array(arguments.length - 0);
                  while (G__11333__i < G__11333__a.length) {
                    G__11333__a[G__11333__i] = arguments[G__11333__i + 0];
                    ++G__11333__i;
                  }
                  args = new cljs.core.IndexedSeq(G__11333__a, 0);
                }
                return G__11332__delegate.call(this, args);
              };
              G__11332.cljs$lang$maxFixedArity = 0;
              G__11332.cljs$lang$applyTo = function(arglist__11334) {
                var args = cljs.core.seq(arglist__11334);
                return G__11332__delegate(args);
              };
              G__11332.cljs$core$IFn$_invoke$arity$variadic = G__11332__delegate;
              return G__11332;
            }();
          } else {
            return cljs.core.clj__GT_js.call(null, x);
          }
        }
      }
    }
  }
};
reagent.impl.template.set_id_class = function reagent$impl$template$set_id_class(props, id, class$) {
  var p = props == null ? {} : props;
  if (cljs.core.some_QMARK_.call(null, id) && p["id"] == null) {
    p["id"] = id;
  } else {
  }
  if (cljs.core.some_QMARK_.call(null, class$)) {
    var old_11335 = p["className"];
    p["className"] = cljs.core.some_QMARK_.call(null, old_11335) ? [cljs.core.str(class$), cljs.core.str(" "), cljs.core.str(old_11335)].join("") : class$;
  } else {
  }
  return p;
};
reagent.impl.template.convert_props = function reagent$impl$template$convert_props(props, id_class) {
  var id = id_class["id"];
  var class$ = id_class["className"];
  var no_id_class = id == null && class$ == null;
  if (no_id_class && cljs.core.empty_QMARK_.call(null, props)) {
    return null;
  } else {
    var objprops = reagent.impl.template.convert_prop_value.call(null, props);
    if (no_id_class) {
      return objprops;
    } else {
      return reagent.impl.template.set_id_class.call(null, objprops, id, class$);
    }
  }
};
reagent.impl.template.input_unmount = function reagent$impl$template$input_unmount(this$) {
  return this$["cljsInputValue"] = null;
};
reagent.impl.template.input_set_value = function reagent$impl$template$input_set_value(this$) {
  var temp__4130__auto__ = this$["cljsInputValue"];
  if (temp__4130__auto__ == null) {
    return null;
  } else {
    var value = temp__4130__auto__;
    this$["cljsInputDirty"] = false;
    var node = this$["getDOMNode"]();
    if (cljs.core.not_EQ_.call(null, value, node["value"])) {
      return node["value"] = value;
    } else {
      return null;
    }
  }
};
reagent.impl.template.input_handle_change = function reagent$impl$template$input_handle_change(this$, on_change, e) {
  var res = on_change.call(null, e);
  if (cljs.core.truth_(this$["cljsInputDirty"])) {
  } else {
    this$["cljsInputDirty"] = true;
    reagent.impl.batching.do_later.call(null, function(res) {
      return function() {
        return reagent.impl.template.input_set_value.call(null, this$);
      };
    }(res));
  }
  return res;
};
reagent.impl.template.input_render_setup = function reagent$impl$template$input_render_setup(this$, jsprops) {
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = jsprops["hasOwnProperty"]("onChange");
    if (cljs.core.truth_(and__4110__auto__)) {
      return jsprops["hasOwnProperty"]("value");
    } else {
      return and__4110__auto__;
    }
  }())) {
    var v = jsprops["value"];
    var value = v == null ? "" : v;
    var on_change = jsprops["onChange"];
    this$["cljsInputValue"] = value;
    delete jsprops["value"];
    var G__11338 = jsprops;
    G__11338["defaultValue"] = value;
    G__11338["onChange"] = function(G__11338, v, value, on_change) {
      return function(p1__11336_SHARP_) {
        return reagent.impl.template.input_handle_change.call(null, this$, on_change, p1__11336_SHARP_);
      };
    }(G__11338, v, value, on_change);
    return G__11338;
  } else {
    return this$["cljsInputValue"] = null;
  }
};
reagent.impl.template.input_component_QMARK_ = function reagent$impl$template$input_component_QMARK_(x) {
  return x === "input" || x === "textarea";
};
reagent.impl.template.reagent_input_class = null;
reagent.impl.template.input_spec = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "display-name", "display-name", 694513143), "ReagentInput", new cljs.core.Keyword(null, "component-did-update", "component-did-update", -1468549173), reagent.impl.template.input_set_value, new cljs.core.Keyword(null, "component-will-unmount", "component-will-unmount", -2058314698), reagent.impl.template.input_unmount, new cljs.core.Keyword(null, "reagent-render", "reagent-render", -985383853), 
function(argv, comp, jsprops, first_child) {
  var this$ = reagent.impl.component._STAR_current_component_STAR_;
  reagent.impl.template.input_render_setup.call(null, this$, jsprops);
  return reagent.impl.template.make_element.call(null, argv, comp, jsprops, first_child);
}], null);
reagent.impl.template.reagent_input = function reagent$impl$template$reagent_input(argv, comp, jsprops, first_child) {
  if (reagent.impl.template.reagent_input_class == null) {
    reagent.impl.template.reagent_input_class = reagent.impl.component.create_class.call(null, reagent.impl.template.input_spec);
  } else {
  }
  return reagent.impl.template.reagent_input_class.call(null, argv, comp, jsprops, first_child);
};
reagent.impl.template.parse_tag = function reagent$impl$template$parse_tag(hiccup_tag) {
  var vec__11340 = cljs.core.next.call(null, cljs.core.re_matches.call(null, reagent.impl.template.re_tag, cljs.core.name.call(null, hiccup_tag)));
  var tag = cljs.core.nth.call(null, vec__11340, 0, null);
  var id = cljs.core.nth.call(null, vec__11340, 1, null);
  var class$ = cljs.core.nth.call(null, vec__11340, 2, null);
  var class_SINGLEQUOTE_ = cljs.core.truth_(class$) ? clojure.string.replace.call(null, class$, /\./, " ") : null;
  if (cljs.core.truth_(tag)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid tag: '"), cljs.core.str(hiccup_tag), cljs.core.str("'"), cljs.core.str(reagent.impl.component.comp_name.call(null))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "tag", "tag", 350170304, null)))].join(""));
  }
  return{"className":class_SINGLEQUOTE_, "id":id, "name":tag};
};
reagent.impl.template.fn_to_class = function reagent$impl$template$fn_to_class(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Expected a function, not "), cljs.core.str(cljs.core.pr_str.call(null, f))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  if (!!(cljs.core.fn_QMARK_.call(null, f) && cljs.core.some_QMARK_.call(null, f["type"])) && typeof console !== "undefined") {
    console.warn([cljs.core.str("Warning: "), cljs.core.str("Using native React classes directly in Hiccup forms "), cljs.core.str("is not supported. Use create-element or "), cljs.core.str("adapt-react-class instead: "), cljs.core.str(f["type"]), cljs.core.str(reagent.impl.component.comp_name.call(null))].join(""));
  } else {
  }
  var spec = cljs.core.meta.call(null, f);
  var withrender = cljs.core.assoc.call(null, spec, new cljs.core.Keyword(null, "reagent-render", "reagent-render", -985383853), f);
  var res = reagent.impl.component.create_class.call(null, withrender);
  var wrapf = reagent.impl.util.cached_react_class.call(null, res);
  reagent.impl.util.cache_react_class.call(null, f, wrapf);
  return wrapf;
};
reagent.impl.template.as_class = function reagent$impl$template$as_class(tag) {
  var temp__4128__auto__ = reagent.impl.util.cached_react_class.call(null, tag);
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.fn_to_class.call(null, tag);
  } else {
    var cached_class = temp__4128__auto__;
    return cached_class;
  }
};
reagent.impl.template.get_key = function reagent$impl$template$get_key(x) {
  if (cljs.core.map_QMARK_.call(null, x)) {
    return cljs.core.get.call(null, x, new cljs.core.Keyword(null, "key", "key", -1516042587));
  } else {
    return null;
  }
};
reagent.impl.template.key_from_vec = function reagent$impl$template$key_from_vec(v) {
  var temp__4128__auto__ = function() {
    var G__11342 = cljs.core.meta.call(null, v);
    var G__11342__$1 = G__11342 == null ? null : reagent.impl.template.get_key.call(null, G__11342);
    return G__11342__$1;
  }();
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.get_key.call(null, cljs.core.nth.call(null, v, 1, null));
  } else {
    var k = temp__4128__auto__;
    return k;
  }
};
reagent.impl.template.reag_element = function reagent$impl$template$reag_element(tag, v) {
  var c = reagent.impl.template.as_class.call(null, tag);
  var jsprops = {"argv":v};
  var G__11344_11345 = v;
  var G__11344_11346__$1 = G__11344_11345 == null ? null : reagent.impl.template.key_from_vec.call(null, G__11344_11345);
  var G__11344_11347__$2 = G__11344_11346__$1 == null ? null : jsprops["key"] = G__11344_11346__$1;
  return React["createElement"](c, jsprops);
};
reagent.impl.template.adapt_react_class = function reagent$impl$template$adapt_react_class(c) {
  return new reagent.impl.template.NativeWrapper({"class":null, "id":null, "name":c});
};
reagent.impl.template.tag_name_cache = {};
reagent.impl.template.cached_parse = function reagent$impl$template$cached_parse(x) {
  if (reagent.impl.template.hiccup_tag_QMARK_.call(null, x)) {
    var temp__4128__auto__ = reagent.impl.template.obj_get.call(null, reagent.impl.template.tag_name_cache, cljs.core.name.call(null, x));
    if (temp__4128__auto__ == null) {
      return reagent.impl.template.tag_name_cache[cljs.core.name.call(null, x)] = reagent.impl.template.parse_tag.call(null, x);
    } else {
      var s = temp__4128__auto__;
      return s;
    }
  } else {
    if (x instanceof reagent.impl.template.NativeWrapper) {
      return x.comp;
    } else {
      return null;
    }
  }
};
reagent.impl.template.native_element = function reagent$impl$template$native_element(tag, argv) {
  var temp__4126__auto__ = reagent.impl.template.cached_parse.call(null, tag);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var parsed = temp__4126__auto__;
    var comp = parsed["name"];
    var props = cljs.core.nth.call(null, argv, 1, null);
    var hasprops = props == null || cljs.core.map_QMARK_.call(null, props);
    var jsprops = reagent.impl.template.convert_props.call(null, hasprops ? props : null, parsed);
    var first_child = hasprops ? 2 : 1;
    if (reagent.impl.template.input_component_QMARK_.call(null, comp)) {
      return reagent.impl.template.as_element.call(null, cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagent.impl.template.reagent_input, argv, comp, jsprops, first_child], null), cljs.core.meta.call(null, argv)));
    } else {
      var p = function() {
        var temp__4128__auto__ = function() {
          var G__11350 = cljs.core.meta.call(null, argv);
          var G__11350__$1 = G__11350 == null ? null : reagent.impl.template.get_key.call(null, G__11350);
          return G__11350__$1;
        }();
        if (temp__4128__auto__ == null) {
          return jsprops;
        } else {
          var key = temp__4128__auto__;
          var G__11351 = jsprops == null ? {} : jsprops;
          G__11351["key"] = key;
          return G__11351;
        }
      }();
      return reagent.impl.template.make_element.call(null, argv, comp, p, first_child);
    }
  } else {
    return null;
  }
};
reagent.impl.template.vec_to_elem = function reagent$impl$template$vec_to_elem(v) {
  if (cljs.core.count.call(null, v) > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Hiccup form should not be empty: "), cljs.core.str(cljs.core.pr_str.call(null, v)), cljs.core.str(reagent.impl.component.comp_name.call(null))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "v", "v", 1661996586, 
    null)))))].join(""));
  }
  var tag = cljs.core.nth.call(null, v, 0);
  if (reagent.impl.template.valid_tag_QMARK_.call(null, tag)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid Hiccup form: "), cljs.core.str(cljs.core.pr_str.call(null, v)), cljs.core.str(reagent.impl.component.comp_name.call(null))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-tag?", "valid-tag?", 1243064160, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null))))].join(""));
  }
  var temp__4128__auto__ = reagent.impl.template.native_element.call(null, tag, v);
  if (temp__4128__auto__ == null) {
    return reagent.impl.template.reag_element.call(null, tag, v);
  } else {
    var ne = temp__4128__auto__;
    return ne;
  }
};
reagent.impl.template.as_element = function reagent$impl$template$as_element(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (cljs.core.vector_QMARK_.call(null, x)) {
      return reagent.impl.template.vec_to_elem.call(null, x);
    } else {
      if (cljs.core.seq_QMARK_.call(null, x)) {
        return reagent.impl.template.expand_seq_check.call(null, x);
      } else {
        return x;
      }
    }
  }
};
reagent.impl.template.expand_seq = function reagent$impl$template$expand_seq(s) {
  var a = cljs.core.into_array.call(null, s);
  var n__5007__auto___11352 = a.length;
  var i_11353 = 0;
  while (true) {
    if (i_11353 < n__5007__auto___11352) {
      a[i_11353] = reagent.impl.template.as_element.call(null, a[i_11353]);
      var G__11354 = i_11353 + 1;
      i_11353 = G__11354;
      continue;
    } else {
    }
    break;
  }
  return a;
};
reagent.impl.template.expand_seq_dev = function reagent$impl$template$expand_seq_dev(s, o) {
  var a = cljs.core.into_array.call(null, s);
  var n__5007__auto___11355 = a.length;
  var i_11356 = 0;
  while (true) {
    if (i_11356 < n__5007__auto___11355) {
      var val_11357 = a[i_11356];
      if (cljs.core.vector_QMARK_.call(null, val_11357) && reagent.impl.template.key_from_vec.call(null, val_11357) == null) {
        o["no-key"] = true;
      } else {
      }
      a[i_11356] = reagent.impl.template.as_element.call(null, val_11357);
      var G__11358 = i_11356 + 1;
      i_11356 = G__11358;
      continue;
    } else {
    }
    break;
  }
  return a;
};
reagent.impl.template.expand_seq_check = function reagent$impl$template$expand_seq_check(x) {
  var ctx = {};
  var res = reagent.ratom._STAR_ratom_context_STAR_ == null ? reagent.impl.template.expand_seq_dev.call(null, x, ctx) : reagent.ratom.capture_derefed.call(null, function(ctx) {
    return function() {
      return reagent.impl.template.expand_seq_dev.call(null, x, ctx);
    };
  }(ctx), ctx);
  if (cljs.core.truth_(reagent.ratom.captured.call(null, ctx))) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("Reactive deref not supported in lazy seq, "), cljs.core.str("it should be wrapped in doall"), cljs.core.str(reagent.impl.component.comp_name.call(null)), cljs.core.str(". Value:\n"), cljs.core.str(cljs.core.pr_str.call(null, x))].join(""));
    } else {
    }
  } else {
  }
  if (cljs.core.truth_(ctx["no-key"])) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("Every element in a seq should have a unique "), cljs.core.str(":key"), cljs.core.str(reagent.impl.component.comp_name.call(null)), cljs.core.str(". Value: "), cljs.core.str(cljs.core.pr_str.call(null, x))].join(""));
    } else {
    }
  } else {
  }
  return res;
};
reagent.impl.template.make_element = function reagent$impl$template$make_element(argv, comp, jsprops, first_child) {
  var G__11360 = cljs.core.count.call(null, argv) - first_child;
  switch(G__11360) {
    case 0:
      return React["createElement"](comp, jsprops);
      break;
    case 1:
      return React["createElement"](comp, jsprops, reagent.impl.template.as_element.call(null, cljs.core.nth.call(null, argv, first_child)));
      break;
    default:
      return React["createElement"].apply(null, cljs.core.reduce_kv.call(null, function(G__11360) {
        return function(a, k, v) {
          if (k >= first_child) {
            a.push(reagent.impl.template.as_element.call(null, v));
          } else {
          }
          return a;
        };
      }(G__11360), [comp, jsprops], argv));
  }
};
goog.provide("reagent.core");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.template");
goog.require("reagent.impl.batching");
goog.require("reagent.debug");
reagent.core.is_client = reagent.impl.util.is_client;
reagent.core.create_element = function() {
  var reagent$core$create_element = null;
  var reagent$core$create_element__1 = function(type) {
    return reagent$core$create_element.call(null, type, null);
  };
  var reagent$core$create_element__2 = function(type, props) {
    if (!cljs.core.map_QMARK_.call(null, props)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
    }
    return React.createElement(type, props);
  };
  var reagent$core$create_element__3 = function(type, props, child) {
    if (!cljs.core.map_QMARK_.call(null, props)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
    }
    return React.createElement(type, props, child);
  };
  var reagent$core$create_element__4 = function() {
    var G__11258__delegate = function(type, props, child, children) {
      if (!cljs.core.map_QMARK_.call(null, props)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "props", "props", 2093813254, null)))))].join(""));
      }
      return cljs.core.apply.call(null, React.createElement, type, props, child, children);
    };
    var G__11258 = function(type, props, child, var_args) {
      var children = null;
      if (arguments.length > 3) {
        var G__11259__i = 0, G__11259__a = new Array(arguments.length - 3);
        while (G__11259__i < G__11259__a.length) {
          G__11259__a[G__11259__i] = arguments[G__11259__i + 3];
          ++G__11259__i;
        }
        children = new cljs.core.IndexedSeq(G__11259__a, 0);
      }
      return G__11258__delegate.call(this, type, props, child, children);
    };
    G__11258.cljs$lang$maxFixedArity = 3;
    G__11258.cljs$lang$applyTo = function(arglist__11260) {
      var type = cljs.core.first(arglist__11260);
      arglist__11260 = cljs.core.next(arglist__11260);
      var props = cljs.core.first(arglist__11260);
      arglist__11260 = cljs.core.next(arglist__11260);
      var child = cljs.core.first(arglist__11260);
      var children = cljs.core.rest(arglist__11260);
      return G__11258__delegate(type, props, child, children);
    };
    G__11258.cljs$core$IFn$_invoke$arity$variadic = G__11258__delegate;
    return G__11258;
  }();
  reagent$core$create_element = function(type, props, child, var_args) {
    var children = var_args;
    switch(arguments.length) {
      case 1:
        return reagent$core$create_element__1.call(this, type);
      case 2:
        return reagent$core$create_element__2.call(this, type, props);
      case 3:
        return reagent$core$create_element__3.call(this, type, props, child);
      default:
        var G__11261 = null;
        if (arguments.length > 3) {
          var G__11262__i = 0, G__11262__a = new Array(arguments.length - 3);
          while (G__11262__i < G__11262__a.length) {
            G__11262__a[G__11262__i] = arguments[G__11262__i + 3];
            ++G__11262__i;
          }
          G__11261 = new cljs.core.IndexedSeq(G__11262__a, 0);
        }
        return reagent$core$create_element__4.cljs$core$IFn$_invoke$arity$variadic(type, props, child, G__11261);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reagent$core$create_element.cljs$lang$maxFixedArity = 3;
  reagent$core$create_element.cljs$lang$applyTo = reagent$core$create_element__4.cljs$lang$applyTo;
  reagent$core$create_element.cljs$core$IFn$_invoke$arity$1 = reagent$core$create_element__1;
  reagent$core$create_element.cljs$core$IFn$_invoke$arity$2 = reagent$core$create_element__2;
  reagent$core$create_element.cljs$core$IFn$_invoke$arity$3 = reagent$core$create_element__3;
  reagent$core$create_element.cljs$core$IFn$_invoke$arity$variadic = reagent$core$create_element__4.cljs$core$IFn$_invoke$arity$variadic;
  return reagent$core$create_element;
}();
reagent.core.as_element = function reagent$core$as_element(form) {
  return reagent.impl.template.as_element.call(null, form);
};
reagent.core.adapt_react_class = function reagent$core$adapt_react_class(c) {
  return reagent.impl.template.adapt_react_class.call(null, c);
};
reagent.core.reactify_component = function reagent$core$reactify_component(c) {
  return reagent.impl.component.reactify_component.call(null, c);
};
reagent.core.render = function() {
  var reagent$core$render = null;
  var reagent$core$render__2 = function(comp, container) {
    return reagent$core$render.call(null, comp, container, null);
  };
  var reagent$core$render__3 = function(comp, container, callback) {
    var f = function() {
      return reagent.core.as_element.call(null, cljs.core.fn_QMARK_.call(null, comp) ? comp.call(null) : comp);
    };
    return reagent.impl.util.render_component.call(null, f, container, callback);
  };
  reagent$core$render = function(comp, container, callback) {
    switch(arguments.length) {
      case 2:
        return reagent$core$render__2.call(this, comp, container);
      case 3:
        return reagent$core$render__3.call(this, comp, container, callback);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reagent$core$render.cljs$core$IFn$_invoke$arity$2 = reagent$core$render__2;
  reagent$core$render.cljs$core$IFn$_invoke$arity$3 = reagent$core$render__3;
  return reagent$core$render;
}();
reagent.core.unmount_component_at_node = function reagent$core$unmount_component_at_node(container) {
  return reagent.impl.util.unmount_component_at_node.call(null, container);
};
reagent.core.render_to_string = function reagent$core$render_to_string(component) {
  var _STAR_non_reactive_STAR_11264 = reagent.impl.component._STAR_non_reactive_STAR_;
  reagent.impl.component._STAR_non_reactive_STAR_ = true;
  try {
    return React["renderToString"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_11264;
  }
};
reagent.core.as_component = reagent.core.as_element;
reagent.core.render_component = reagent.core.render;
reagent.core.render_component_to_string = reagent.core.render_to_string;
reagent.core.render_to_static_markup = function reagent$core$render_to_static_markup(component) {
  var _STAR_non_reactive_STAR_11266 = reagent.impl.component._STAR_non_reactive_STAR_;
  reagent.impl.component._STAR_non_reactive_STAR_ = true;
  try {
    return React["renderToStaticMarkup"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_11266;
  }
};
reagent.core.force_update_all = function reagent$core$force_update_all() {
  return reagent.impl.util.force_update_all.call(null);
};
goog.exportSymbol("reagent.core.force_update_all", reagent.core.force_update_all);
reagent.core.create_class = function reagent$core$create_class(spec) {
  return reagent.impl.component.create_class.call(null, spec);
};
reagent.core.current_component = function reagent$core$current_component() {
  return reagent.impl.component._STAR_current_component_STAR_;
};
reagent.core.state_atom = function reagent$core$state_atom(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.component.state_atom.call(null, this$);
};
reagent.core.state = function reagent$core$state(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return cljs.core.deref.call(null, reagent.core.state_atom.call(null, this$));
};
reagent.core.replace_state = function reagent$core$replace_state(this$, new_state) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)))))].join(""));
  }
  return cljs.core.reset_BANG_.call(null, reagent.core.state_atom.call(null, this$), new_state);
};
reagent.core.set_state = function reagent$core$set_state(this$, new_state) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "new-state", "new-state", 1150182315, null)))))].join(""));
  }
  return cljs.core.swap_BANG_.call(null, reagent.core.state_atom.call(null, this$), cljs.core.merge, new_state);
};
reagent.core.props = function reagent$core$props(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_props.call(null, this$);
};
reagent.core.children = function reagent$core$children(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_children.call(null, this$);
};
reagent.core.argv = function reagent$core$argv(this$) {
  if (reagent.impl.util.reagent_component_QMARK_.call(null, this$)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("util", "reagent-component?", "util/reagent-component?", 1508385933, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))].join(""));
  }
  return reagent.impl.util.get_argv.call(null, this$);
};
reagent.core.dom_node = function reagent$core$dom_node(this$) {
  return this$["getDOMNode"]();
};
reagent.core.merge_props = function reagent$core$merge_props(defaults, props) {
  return reagent.impl.util.merge_props.call(null, defaults, props);
};
reagent.core.flush = function reagent$core$flush() {
  return reagent.impl.batching.flush.call(null);
};
reagent.core.atom = function() {
  var reagent$core$atom = null;
  var reagent$core$atom__1 = function(x) {
    return reagent.ratom.atom.call(null, x);
  };
  var reagent$core$atom__2 = function() {
    var G__11267__delegate = function(x, rest) {
      return cljs.core.apply.call(null, reagent.ratom.atom, x, rest);
    };
    var G__11267 = function(x, var_args) {
      var rest = null;
      if (arguments.length > 1) {
        var G__11268__i = 0, G__11268__a = new Array(arguments.length - 1);
        while (G__11268__i < G__11268__a.length) {
          G__11268__a[G__11268__i] = arguments[G__11268__i + 1];
          ++G__11268__i;
        }
        rest = new cljs.core.IndexedSeq(G__11268__a, 0);
      }
      return G__11267__delegate.call(this, x, rest);
    };
    G__11267.cljs$lang$maxFixedArity = 1;
    G__11267.cljs$lang$applyTo = function(arglist__11269) {
      var x = cljs.core.first(arglist__11269);
      var rest = cljs.core.rest(arglist__11269);
      return G__11267__delegate(x, rest);
    };
    G__11267.cljs$core$IFn$_invoke$arity$variadic = G__11267__delegate;
    return G__11267;
  }();
  reagent$core$atom = function(x, var_args) {
    var rest = var_args;
    switch(arguments.length) {
      case 1:
        return reagent$core$atom__1.call(this, x);
      default:
        var G__11270 = null;
        if (arguments.length > 1) {
          var G__11271__i = 0, G__11271__a = new Array(arguments.length - 1);
          while (G__11271__i < G__11271__a.length) {
            G__11271__a[G__11271__i] = arguments[G__11271__i + 1];
            ++G__11271__i;
          }
          G__11270 = new cljs.core.IndexedSeq(G__11271__a, 0);
        }
        return reagent$core$atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__11270);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reagent$core$atom.cljs$lang$maxFixedArity = 1;
  reagent$core$atom.cljs$lang$applyTo = reagent$core$atom__2.cljs$lang$applyTo;
  reagent$core$atom.cljs$core$IFn$_invoke$arity$1 = reagent$core$atom__1;
  reagent$core$atom.cljs$core$IFn$_invoke$arity$variadic = reagent$core$atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return reagent$core$atom;
}();
reagent.core.wrap = function() {
  var reagent$core$wrap__delegate = function(value, reset_fn, args) {
    if (cljs.core.ifn_QMARK_.call(null, reset_fn)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "reset-fn", "reset-fn", 949643977, null))))].join(""));
    }
    return reagent.ratom.make_wrapper.call(null, value, reset_fn, args);
  };
  var reagent$core$wrap = function(value, reset_fn, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__11272__i = 0, G__11272__a = new Array(arguments.length - 2);
      while (G__11272__i < G__11272__a.length) {
        G__11272__a[G__11272__i] = arguments[G__11272__i + 2];
        ++G__11272__i;
      }
      args = new cljs.core.IndexedSeq(G__11272__a, 0);
    }
    return reagent$core$wrap__delegate.call(this, value, reset_fn, args);
  };
  reagent$core$wrap.cljs$lang$maxFixedArity = 2;
  reagent$core$wrap.cljs$lang$applyTo = function(arglist__11273) {
    var value = cljs.core.first(arglist__11273);
    arglist__11273 = cljs.core.next(arglist__11273);
    var reset_fn = cljs.core.first(arglist__11273);
    var args = cljs.core.rest(arglist__11273);
    return reagent$core$wrap__delegate(value, reset_fn, args);
  };
  reagent$core$wrap.cljs$core$IFn$_invoke$arity$variadic = reagent$core$wrap__delegate;
  return reagent$core$wrap;
}();
reagent.core.cursor = function reagent$core$cursor(src, path) {
  return reagent.ratom.cursor.call(null, src, path);
};
reagent.core.next_tick = function reagent$core$next_tick(f) {
  return reagent.impl.batching.next_tick.call(null, f);
};
reagent.core.partial = function() {
  var reagent$core$partial__delegate = function(f, args) {
    return new reagent.impl.util.partial_ifn(f, args, null);
  };
  var reagent$core$partial = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      var G__11274__i = 0, G__11274__a = new Array(arguments.length - 1);
      while (G__11274__i < G__11274__a.length) {
        G__11274__a[G__11274__i] = arguments[G__11274__i + 1];
        ++G__11274__i;
      }
      args = new cljs.core.IndexedSeq(G__11274__a, 0);
    }
    return reagent$core$partial__delegate.call(this, f, args);
  };
  reagent$core$partial.cljs$lang$maxFixedArity = 1;
  reagent$core$partial.cljs$lang$applyTo = function(arglist__11275) {
    var f = cljs.core.first(arglist__11275);
    var args = cljs.core.rest(arglist__11275);
    return reagent$core$partial__delegate(f, args);
  };
  reagent$core$partial.cljs$core$IFn$_invoke$arity$variadic = reagent$core$partial__delegate;
  return reagent$core$partial;
}();
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj14697 = {};
  return obj14697;
}();
cljs.core.async.impl.protocols.take_BANG_ = function cljs$core$async$impl$protocols$take_BANG_(port, fn1_handler) {
  if (function() {
    var and__4110__auto__ = port;
    if (and__4110__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4758__auto__ = port == null ? null : port;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj14699 = {};
  return obj14699;
}();
cljs.core.async.impl.protocols.put_BANG_ = function cljs$core$async$impl$protocols$put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__4110__auto__ = port;
    if (and__4110__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4758__auto__ = port == null ? null : port;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj14701 = {};
  return obj14701;
}();
cljs.core.async.impl.protocols.close_BANG_ = function cljs$core$async$impl$protocols$close_BANG_(chan) {
  if (function() {
    var and__4110__auto__ = chan;
    if (and__4110__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4758__auto__ = chan == null ? null : chan;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function cljs$core$async$impl$protocols$closed_QMARK_(chan) {
  if (function() {
    var and__4110__auto__ = chan;
    if (and__4110__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4758__auto__ = chan == null ? null : chan;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj14703 = {};
  return obj14703;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function cljs$core$async$impl$protocols$active_QMARK_(h) {
  if (function() {
    var and__4110__auto__ = h;
    if (and__4110__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4758__auto__ = h == null ? null : h;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function cljs$core$async$impl$protocols$commit(h) {
  if (function() {
    var and__4110__auto__ = h;
    if (and__4110__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4758__auto__ = h == null ? null : h;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj14705 = {};
  return obj14705;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function cljs$core$async$impl$protocols$full_QMARK_(b) {
  if (function() {
    var and__4110__auto__ = b;
    if (and__4110__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4758__auto__ = b == null ? null : b;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function cljs$core$async$impl$protocols$remove_BANG_(b) {
  if (function() {
    var and__4110__auto__ = b;
    if (and__4110__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4758__auto__ = b == null ? null : b;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function cljs$core$async$impl$protocols$add_BANG__STAR_(b, itm) {
  if (function() {
    var and__4110__auto__ = b;
    if (and__4110__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__4758__auto__ = b == null ? null : b;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function() {
  var cljs$core$async$impl$protocols$add_BANG_ = null;
  var cljs$core$async$impl$protocols$add_BANG___1 = function(b) {
    return b;
  };
  var cljs$core$async$impl$protocols$add_BANG___2 = function(b, itm) {
    if (!(itm == null)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "itm", "itm", -713282527, null)))))].join(""));
    }
    return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
  };
  cljs$core$async$impl$protocols$add_BANG_ = function(b, itm) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$impl$protocols$add_BANG___1.call(this, b);
      case 2:
        return cljs$core$async$impl$protocols$add_BANG___2.call(this, b, itm);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$impl$protocols$add_BANG_.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$impl$protocols$add_BANG___1;
  cljs$core$async$impl$protocols$add_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$impl$protocols$add_BANG___2;
  return cljs$core$async$impl$protocols$add_BANG_;
}();
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj14707 = {};
  return obj14707;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function cljs$core$async$impl$buffers$acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__14710 = cnt + 1;
      cnt = G__14710;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__5007__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__5007__auto__) {
      var v_14711 = this$.pop();
      if (keep_QMARK_.call(null, v_14711)) {
        this$.unshift(v_14711);
      } else {
      }
      var G__14712 = x + 1;
      x = G__14712;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function cljs$core$async$impl$buffers$__GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function cljs$core$async$impl$buffers$ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function cljs$core$async$impl$buffers$__GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function cljs$core$async$impl$buffers$fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function cljs$core$async$impl$buffers$__GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function cljs$core$async$impl$buffers$dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function cljs$core$async$impl$buffers$__GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function cljs$core$async$impl$buffers$sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.functions");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener) {
    Channel = function() {
      var iframe = document.createElement("iframe");
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (e.origin != origin && e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined") {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      head = head.next;
      var cb = head.cb;
      head.cb = null;
      cb();
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement("script")) {
    return function(cb) {
      var script = document.createElement("script");
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("goog.async.nextTick");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function cljs$core$async$impl$dispatch$process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_14715 = 0;
  while (true) {
    var m_14716 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_14716 == null) {
    } else {
      m_14716.call(null);
      if (count_14715 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__14717 = count_14715 + 1;
        count_14715 = G__14717;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function cljs$core$async$impl$dispatch$queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (cljs.core.truth_(and__4110__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__4110__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function cljs$core$async$impl$dispatch$run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function cljs$core$async$impl$dispatch$queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function cljs$core$async$impl$channels$box(val) {
  if (typeof cljs.core.async.impl.channels.t14723 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t14723 = function(val, box, meta14724) {
      this.val = val;
      this.box = box;
      this.meta14724 = meta14724;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t14723.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t14723.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14725) {
      var self__ = this;
      var _14725__$1 = this;
      return self__.meta14724;
    };
    cljs.core.async.impl.channels.t14723.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14725, meta14724__$1) {
      var self__ = this;
      var _14725__$1 = this;
      return new cljs.core.async.impl.channels.t14723(self__.val, self__.box, meta14724__$1);
    };
    cljs.core.async.impl.channels.t14723.cljs$lang$type = true;
    cljs.core.async.impl.channels.t14723.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t14723";
    cljs.core.async.impl.channels.t14723.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.channels/t14723");
    };
    cljs.core.async.impl.channels.__GT_t14723 = function cljs$core$async$impl$channels$box_$___GT_t14723(val__$1, box__$1, meta14724) {
      return new cljs.core.async.impl.channels.t14723(val__$1, box__$1, meta14724);
    };
  }
  return new cljs.core.async.impl.channels.t14723(val, cljs$core$async$impl$channels$box, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function cljs$core$async$impl$channels$__GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function cljs$core$async$impl$channels$put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
  var obj14727 = {};
  return obj14727;
}();
cljs.core.async.impl.channels.abort = function cljs$core$async$impl$channels$abort(this$) {
  if (function() {
    var and__4110__auto__ = this$;
    if (and__4110__auto__) {
      return this$.cljs$core$async$impl$channels$MMC$abort$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__4758__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4122__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.impl.channels.abort["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = self__.buf;
      if (cljs.core.truth_(and__4110__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__4110__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_14728 = self__.takes.pop();
      if (taker_14728 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_14728)) {
          var take_cb_14729 = cljs.core.async.impl.protocols.commit.call(null, taker_14728);
          var val_14730 = cljs.core.truth_(function() {
            var and__4110__auto__ = self__.buf;
            if (cljs.core.truth_(and__4110__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__4110__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_14729, val_14730, taker_14728, this$__$1) {
            return function() {
              return take_cb_14729.call(null, val_14730);
            };
          }(take_cb_14729, val_14730, taker_14728, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_14731 = self__.puts.pop();
          if (putter_14731 == null) {
          } else {
            var put_handler_14732 = putter_14731.handler;
            var val_14733 = putter_14731.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_14732)) {
              var put_cb_14734 = cljs.core.async.impl.protocols.commit.call(null, put_handler_14732);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_14734, put_handler_14732, val_14733, putter_14731, _, retval, this$__$1) {
                return function() {
                  return put_cb_14734.call(null, true);
                };
              }(put_cb_14734, put_handler_14732, val_14733, putter_14731, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_14733))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__4110__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__4110__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__4110__auto__;
            }
          }())) {
            var has_val = function() {
              var and__4110__auto__ = self__.buf;
              if (cljs.core.truth_(and__4110__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__4110__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, "takes", 
            "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
          }
          self__.takes.unbounded_unshift(handler);
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = self__.buf;
      if (cljs.core.truth_(and__4110__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__4110__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_14735 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_14735)) {
            var take_cb_14736 = cljs.core.async.impl.protocols.commit.call(null, taker_14735);
            var val_14737__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_14736, val_14737__$1, taker_14735, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_14736.call(null, val_14737__$1);
              };
            }(take_cb_14736, val_14737__$1, taker_14735, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
        } else {
          throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
          -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
        }
        self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_14738 = self__.puts.pop();
    if (putter_14738 == null) {
    } else {
      var put_handler_14739 = putter_14738.handler;
      var val_14740 = putter_14738.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_14739)) {
        var put_cb_14741 = cljs.core.async.impl.protocols.commit.call(null, put_handler_14739);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_14741, put_handler_14739, val_14740, putter_14738, this$__$1) {
          return function() {
            return put_cb_14741.call(null, true);
          };
        }(put_cb_14741, put_handler_14739, val_14740, putter_14738, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function cljs$core$async$impl$channels$__GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function cljs$core$async$impl$channels$ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function cljs$core$async$impl$channels$handle(buf, exh, t) {
  var else$ = function() {
    var or__4122__auto__ = exh;
    if (cljs.core.truth_(or__4122__auto__)) {
      return or__4122__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function() {
  var cljs$core$async$impl$channels$chan = null;
  var cljs$core$async$impl$channels$chan__1 = function(buf) {
    return cljs$core$async$impl$channels$chan.call(null, buf, null);
  };
  var cljs$core$async$impl$channels$chan__2 = function(buf, xform) {
    return cljs$core$async$impl$channels$chan.call(null, buf, xform, null);
  };
  var cljs$core$async$impl$channels$chan__3 = function(buf, xform, exh) {
    return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
      var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
      return function(add_BANG_) {
        return function() {
          var G__14746 = null;
          var G__14746__1 = function(buf__$1) {
            try {
              return add_BANG_.call(null, buf__$1);
            } catch (e14744) {
              var t = e14744;
              return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
            }
          };
          var G__14746__2 = function(buf__$1, val) {
            try {
              return add_BANG_.call(null, buf__$1, val);
            } catch (e14745) {
              var t = e14745;
              return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
            }
          };
          G__14746 = function(buf__$1, val) {
            switch(arguments.length) {
              case 1:
                return G__14746__1.call(this, buf__$1);
              case 2:
                return G__14746__2.call(this, buf__$1, val);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__14746.cljs$core$IFn$_invoke$arity$1 = G__14746__1;
          G__14746.cljs$core$IFn$_invoke$arity$2 = G__14746__2;
          return G__14746;
        }();
      }(add_BANG_);
    }());
  };
  cljs$core$async$impl$channels$chan = function(buf, xform, exh) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$impl$channels$chan__1.call(this, buf);
      case 2:
        return cljs$core$async$impl$channels$chan__2.call(this, buf, xform);
      case 3:
        return cljs$core$async$impl$channels$chan__3.call(this, buf, xform, exh);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$impl$channels$chan.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$impl$channels$chan__1;
  cljs$core$async$impl$channels$chan.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$impl$channels$chan__2;
  cljs$core$async$impl$channels$chan.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$impl$channels$chan__3;
  return cljs$core$async$impl$channels$chan;
}();
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function cljs$core$async$impl$ioc_helpers$aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function cljs$core$async$impl$ioc_helpers$aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function cljs$core$async$impl$ioc_helpers$finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function cljs$core$async$impl$ioc_helpers$fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t14655 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t14655 = function(f, fn_handler, meta14656) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta14656 = meta14656;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t14655.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t14655.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t14655.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t14655.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14657) {
      var self__ = this;
      var _14657__$1 = this;
      return self__.meta14656;
    };
    cljs.core.async.impl.ioc_helpers.t14655.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14657, meta14656__$1) {
      var self__ = this;
      var _14657__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t14655(self__.f, self__.fn_handler, meta14656__$1);
    };
    cljs.core.async.impl.ioc_helpers.t14655.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t14655.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t14655";
    cljs.core.async.impl.ioc_helpers.t14655.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.ioc-helpers/t14655");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t14655 = function cljs$core$async$impl$ioc_helpers$fn_handler_$___GT_t14655(f__$1, fn_handler__$1, meta14656) {
      return new cljs.core.async.impl.ioc_helpers.t14655(f__$1, fn_handler__$1, meta14656);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t14655(f, cljs$core$async$impl$ioc_helpers$fn_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function cljs$core$async$impl$ioc_helpers$run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function cljs$core$async$impl$ioc_helpers$run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e14659) {
    if (e14659 instanceof Object) {
      var ex = e14659;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e14659;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function cljs$core$async$impl$ioc_helpers$take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_14662_14664 = state;
    statearr_14662_14664[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_14662_14664[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_14663_14665 = state;
    statearr_14663_14665[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_14663_14665[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function cljs$core$async$impl$ioc_helpers$put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_14668_14670 = state;
    statearr_14668_14670[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_14668_14670[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_14669_14671 = state;
    statearr_14669_14671[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_14669_14671[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function cljs$core$async$impl$ioc_helpers$return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap, __hash) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4717__auto__, k__4718__auto__) {
  var self__ = this;
  var this__4717__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4717__auto____$1, k__4718__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4719__auto__, k14673, else__4720__auto__) {
  var self__ = this;
  var this__4719__auto____$1 = this;
  var G__14675 = k14673 instanceof cljs.core.Keyword ? k14673.fqn : null;
  switch(G__14675) {
    case "prev":
      return self__.prev;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "catch-block":
      return self__.catch_block;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k14673, else__4720__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4731__auto__, writer__4732__auto__, opts__4733__auto__) {
  var self__ = this;
  var this__4731__auto____$1 = this;
  var pr_pair__4734__auto__ = function(this__4731__auto____$1) {
    return function(keyval__4735__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4732__auto__, cljs.core.pr_writer, "", " ", "", opts__4733__auto__, keyval__4735__auto__);
    };
  }(this__4731__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4732__auto__, pr_pair__4734__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4733__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4715__auto__) {
  var self__ = this;
  var this__4715__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4711__auto__) {
  var self__ = this;
  var this__4711__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4721__auto__) {
  var self__ = this;
  var this__4721__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4712__auto__) {
  var self__ = this;
  var this__4712__auto____$1 = this;
  var h__4538__auto__ = self__.__hash;
  if (!(h__4538__auto__ == null)) {
    return h__4538__auto__;
  } else {
    var h__4538__auto____$1 = cljs.core.hash_imap.call(null, this__4712__auto____$1);
    self__.__hash = h__4538__auto____$1;
    return h__4538__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4713__auto__, other__4714__auto__) {
  var self__ = this;
  var this__4713__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4110__auto__ = other__4714__auto__;
    if (cljs.core.truth_(and__4110__auto__)) {
      return this__4713__auto____$1.constructor === other__4714__auto__.constructor && cljs.core.equiv_map.call(null, this__4713__auto____$1, other__4714__auto__);
    } else {
      return and__4110__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4726__auto__, k__4727__auto__) {
  var self__ = this;
  var this__4726__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__4727__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4726__auto____$1), self__.__meta), k__4727__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4727__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4724__auto__, k__4725__auto__, G__14672) {
  var self__ = this;
  var this__4724__auto____$1 = this;
  var pred__14676 = cljs.core.keyword_identical_QMARK_;
  var expr__14677 = k__4725__auto__;
  if (cljs.core.truth_(pred__14676.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__14677))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__14672, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__14676.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__14677))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__14672, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__14676.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__14677))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__14672, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__14676.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__14677))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__14672, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__14676.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__14677))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__14672, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4725__auto__, G__14672), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4729__auto__) {
  var self__ = this;
  var this__4729__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4716__auto__, G__14672) {
  var self__ = this;
  var this__4716__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__14672, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4722__auto__, entry__4723__auto__) {
  var self__ = this;
  var this__4722__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4723__auto__)) {
    return cljs.core._assoc.call(null, this__4722__auto____$1, cljs.core._nth.call(null, entry__4723__auto__, 0), cljs.core._nth.call(null, entry__4723__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4722__auto____$1, entry__4723__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4751__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4751__auto__, writer__4752__auto__) {
  return cljs.core._write.call(null, writer__4752__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$__GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev, null, null, null);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$map__GT_ExceptionFrame(G__14674) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__14674), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__14674), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__14674), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__14674), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__14674), null, cljs.core.dissoc.call(null, G__14674, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)), 
  null);
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function cljs$core$async$impl$ioc_helpers$add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_14681 = state;
  statearr_14681[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_14681;
};
cljs.core.async.impl.ioc_helpers.process_exception = function cljs$core$async$impl$ioc_helpers$process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__4110__auto__ = exception;
      if (cljs.core.truth_(and__4110__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__4110__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__4110__auto__ = exception;
        if (cljs.core.truth_(and__4110__auto__)) {
          var and__4110__auto____$1 = catch_block;
          if (cljs.core.truth_(and__4110__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__4110__auto____$1;
          }
        } else {
          return and__4110__auto__;
        }
      }())) {
        var statearr_14687 = state;
        statearr_14687[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_14687[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_14687[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_14687[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_14687;
      } else {
        if (cljs.core.truth_(function() {
          var and__4110__auto__ = exception;
          if (cljs.core.truth_(and__4110__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__4110__auto__;
          }
        }())) {
          var statearr_14688_14692 = state;
          statearr_14688_14692[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__14693 = state;
          state = G__14693;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__4110__auto__ = exception;
            if (cljs.core.truth_(and__4110__auto__)) {
              var and__4110__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__4110__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4110__auto____$1;
              }
            } else {
              return and__4110__auto__;
            }
          }())) {
            var statearr_14689 = state;
            statearr_14689[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_14689[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_14689;
          } else {
            if (cljs.core.truth_(function() {
              var and__4110__auto__ = cljs.core.not.call(null, exception);
              if (and__4110__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4110__auto__;
              }
            }())) {
              var statearr_14690 = state;
              statearr_14690[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_14690[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_14690;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_14691 = state;
                statearr_14691[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_14691[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_14691;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var cljs$core$async$impl$timers$random_level = null;
  var cljs$core$async$impl$timers$random_level__0 = function() {
    return cljs$core$async$impl$timers$random_level.call(null, 0);
  };
  var cljs$core$async$impl$timers$random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__14626 = level + 1;
        level = G__14626;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  cljs$core$async$impl$timers$random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return cljs$core$async$impl$timers$random_level__0.call(this);
      case 1:
        return cljs$core$async$impl$timers$random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$impl$timers$random_level.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$impl$timers$random_level__0;
  cljs$core$async$impl$timers$random_level.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$impl$timers$random_level__1;
  return cljs$core$async$impl$timers$random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function cljs$core$async$impl$timers$__GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var cljs$core$async$impl$timers$skip_list_node = null;
  var cljs$core$async$impl$timers$skip_list_node__1 = function(level) {
    return cljs$core$async$impl$timers$skip_list_node.call(null, null, null, level);
  };
  var cljs$core$async$impl$timers$skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_14627 = 0;
    while (true) {
      if (i_14627 < arr.length) {
        arr[i_14627] = null;
        var G__14628 = i_14627 + 1;
        i_14627 = G__14628;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  cljs$core$async$impl$timers$skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$impl$timers$skip_list_node__1.call(this, k);
      case 3:
        return cljs$core$async$impl$timers$skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$impl$timers$skip_list_node.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$impl$timers$skip_list_node__1;
  cljs$core$async$impl$timers$skip_list_node.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$impl$timers$skip_list_node__3;
  return cljs$core$async$impl$timers$skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var cljs$core$async$impl$timers$least_greater_node = null;
  var cljs$core$async$impl$timers$least_greater_node__3 = function(x, k, level) {
    return cljs$core$async$impl$timers$least_greater_node.call(null, x, k, level, null);
  };
  var cljs$core$async$impl$timers$least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__14629 = x_SINGLEQUOTE_;
                x__$1 = G__14629;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__14630 = x__$1;
        var G__14631 = k;
        var G__14632 = level - 1;
        var G__14633 = update;
        x = G__14630;
        k = G__14631;
        level = G__14632;
        update = G__14633;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  cljs$core$async$impl$timers$least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return cljs$core$async$impl$timers$least_greater_node__3.call(this, x, k, level);
      case 4:
        return cljs$core$async$impl$timers$least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$impl$timers$least_greater_node.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$impl$timers$least_greater_node__3;
  cljs$core$async$impl$timers$least_greater_node.cljs$core$IFn$_invoke$arity$4 = cljs$core$async$impl$timers$least_greater_node__4;
  return cljs$core$async$impl$timers$least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function cljs$core$async$impl$timers$iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), cljs$core$async$impl$timers$iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_14634 = self__.level + 1;
      while (true) {
        if (i_14634 <= new_level + 1) {
          update[i_14634] = self__.header;
          var G__14635 = i_14634 + 1;
          i_14634 = G__14635;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_14636 = 0;
    while (true) {
      if (i_14636 <= self__.level) {
        var links_14637 = update[i_14636].forward;
        if (links_14637[i_14636] === x__$1) {
          links_14637[i_14636] = x__$1.forward[i_14636];
          var G__14638 = i_14636 + 1;
          i_14636 = G__14638;
          continue;
        } else {
          var G__14639 = i_14636 + 1;
          i_14636 = G__14639;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__14640 = x_SINGLEQUOTE_;
              x__$1 = G__14640;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__14641 = nx;
        var G__14642 = level__$1 - 1;
        x = G__14641;
        level__$1 = G__14642;
        continue;
      } else {
        var G__14643 = x;
        var G__14644 = level__$1 - 1;
        x = G__14643;
        level__$1 = G__14644;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__14645 = x_SINGLEQUOTE_;
              x__$1 = G__14645;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__14646 = nx;
        var G__14647 = level__$1 - 1;
        x = G__14646;
        level__$1 = G__14647;
        continue;
      } else {
        var G__14648 = x;
        var G__14649 = level__$1 - 1;
        x = G__14648;
        level__$1 = G__14649;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
  return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function cljs$core$async$impl$timers$__GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function cljs$core$async$impl$timers$skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function cljs$core$async$impl$timers$timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__4122__auto__ = cljs.core.truth_(function() {
    var and__4110__auto__ = me;
    if (cljs.core.truth_(and__4110__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__4110__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__4122__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__4122__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function cljs$core$async$fn_handler(f) {
  if (typeof cljs.core.async.t11537 !== "undefined") {
  } else {
    cljs.core.async.t11537 = function(f, fn_handler, meta11538) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta11538 = meta11538;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t11537.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t11537.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t11537.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t11537.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11539) {
      var self__ = this;
      var _11539__$1 = this;
      return self__.meta11538;
    };
    cljs.core.async.t11537.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11539, meta11538__$1) {
      var self__ = this;
      var _11539__$1 = this;
      return new cljs.core.async.t11537(self__.f, self__.fn_handler, meta11538__$1);
    };
    cljs.core.async.t11537.cljs$lang$type = true;
    cljs.core.async.t11537.cljs$lang$ctorStr = "cljs.core.async/t11537";
    cljs.core.async.t11537.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t11537");
    };
    cljs.core.async.__GT_t11537 = function cljs$core$async$fn_handler_$___GT_t11537(f__$1, fn_handler__$1, meta11538) {
      return new cljs.core.async.t11537(f__$1, fn_handler__$1, meta11538);
    };
  }
  return new cljs.core.async.t11537(f, cljs$core$async$fn_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.buffer = function cljs$core$async$buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function cljs$core$async$dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function cljs$core$async$sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function cljs$core$async$unblocking_buffer_QMARK_(buff) {
  var G__11541 = buff;
  if (G__11541) {
    var bit__4796__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4122__auto__ = bit__4796__auto__;
      if (cljs.core.truth_(or__4122__auto__)) {
        return or__4122__auto__;
      } else {
        return G__11541.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__11541.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__11541);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__11541);
  }
};
cljs.core.async.chan = function() {
  var cljs$core$async$chan = null;
  var cljs$core$async$chan__0 = function() {
    return cljs$core$async$chan.call(null, null);
  };
  var cljs$core$async$chan__1 = function(buf_or_n) {
    return cljs$core$async$chan.call(null, buf_or_n, null, null);
  };
  var cljs$core$async$chan__2 = function(buf_or_n, xform) {
    return cljs$core$async$chan.call(null, buf_or_n, xform, null);
  };
  var cljs$core$async$chan__3 = function(buf_or_n, xform, ex_handler) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    if (cljs.core.truth_(xform)) {
      if (cljs.core.truth_(buf_or_n__$1)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("buffer must be supplied when transducer is"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "buf-or-n", "buf-or-n", -1646815050, null)))].join(""));
      }
    } else {
    }
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
  };
  cljs$core$async$chan = function(buf_or_n, xform, ex_handler) {
    switch(arguments.length) {
      case 0:
        return cljs$core$async$chan__0.call(this);
      case 1:
        return cljs$core$async$chan__1.call(this, buf_or_n);
      case 2:
        return cljs$core$async$chan__2.call(this, buf_or_n, xform);
      case 3:
        return cljs$core$async$chan__3.call(this, buf_or_n, xform, ex_handler);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$chan.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$chan__0;
  cljs$core$async$chan.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$chan__1;
  cljs$core$async$chan.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$chan__2;
  cljs$core$async$chan.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$chan__3;
  return cljs$core$async$chan;
}();
cljs.core.async.timeout = function cljs$core$async$timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function cljs$core$async$_LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function() {
  var cljs$core$async$take_BANG_ = null;
  var cljs$core$async$take_BANG___2 = function(port, fn1) {
    return cljs$core$async$take_BANG_.call(null, port, fn1, true);
  };
  var cljs$core$async$take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_11542 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_11542);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_11542, ret) {
          return function() {
            return fn1.call(null, val_11542);
          };
        }(val_11542, ret));
      }
    } else {
    }
    return null;
  };
  cljs$core$async$take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$take_BANG___2.call(this, port, fn1);
      case 3:
        return cljs$core$async$take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$take_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$take_BANG___2;
  cljs$core$async$take_BANG_.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$take_BANG___3;
  return cljs$core$async$take_BANG_;
}();
cljs.core.async.nop = function cljs$core$async$nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function cljs$core$async$_GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function() {
  var cljs$core$async$put_BANG_ = null;
  var cljs$core$async$put_BANG___2 = function(port, val) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var ret = temp__4124__auto__;
      return cljs.core.deref.call(null, ret);
    } else {
      return true;
    }
  };
  var cljs$core$async$put_BANG___3 = function(port, val, fn1) {
    return cljs$core$async$put_BANG_.call(null, port, val, fn1, true);
  };
  var cljs$core$async$put_BANG___4 = function(port, val, fn1, on_caller_QMARK_) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(temp__4124__auto__)) {
      var retb = temp__4124__auto__;
      var ret = cljs.core.deref.call(null, retb);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, ret);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4124__auto__) {
          return function() {
            return fn1.call(null, ret);
          };
        }(ret, retb, temp__4124__auto__));
      }
      return ret;
    } else {
      return true;
    }
  };
  cljs$core$async$put_BANG_ = function(port, val, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$put_BANG___2.call(this, port, val);
      case 3:
        return cljs$core$async$put_BANG___3.call(this, port, val, fn1);
      case 4:
        return cljs$core$async$put_BANG___4.call(this, port, val, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$put_BANG_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$put_BANG___2;
  cljs$core$async$put_BANG_.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$put_BANG___3;
  cljs$core$async$put_BANG_.cljs$core$IFn$_invoke$arity$4 = cljs$core$async$put_BANG___4;
  return cljs$core$async$put_BANG_;
}();
cljs.core.async.close_BANG_ = function cljs$core$async$close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function cljs$core$async$random_array(n) {
  var a = new Array(n);
  var n__5007__auto___11543 = n;
  var x_11544 = 0;
  while (true) {
    if (x_11544 < n__5007__auto___11543) {
      a[x_11544] = 0;
      var G__11545 = x_11544 + 1;
      x_11544 = G__11545;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__11546 = i + 1;
      i = G__11546;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function cljs$core$async$alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t11550 !== "undefined") {
  } else {
    cljs.core.async.t11550 = function(flag, alt_flag, meta11551) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta11551 = meta11551;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t11550.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t11550.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t11550.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t11550.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_11552) {
        var self__ = this;
        var _11552__$1 = this;
        return self__.meta11551;
      };
    }(flag);
    cljs.core.async.t11550.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_11552, meta11551__$1) {
        var self__ = this;
        var _11552__$1 = this;
        return new cljs.core.async.t11550(self__.flag, self__.alt_flag, meta11551__$1);
      };
    }(flag);
    cljs.core.async.t11550.cljs$lang$type = true;
    cljs.core.async.t11550.cljs$lang$ctorStr = "cljs.core.async/t11550";
    cljs.core.async.t11550.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
        return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t11550");
      };
    }(flag);
    cljs.core.async.__GT_t11550 = function(flag) {
      return function cljs$core$async$alt_flag_$___GT_t11550(flag__$1, alt_flag__$1, meta11551) {
        return new cljs.core.async.t11550(flag__$1, alt_flag__$1, meta11551);
      };
    }(flag);
  }
  return new cljs.core.async.t11550(flag, cljs$core$async$alt_flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function cljs$core$async$alt_handler(flag, cb) {
  if (typeof cljs.core.async.t11556 !== "undefined") {
  } else {
    cljs.core.async.t11556 = function(cb, flag, alt_handler, meta11557) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta11557 = meta11557;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t11556.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t11556.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t11556.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t11556.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11558) {
      var self__ = this;
      var _11558__$1 = this;
      return self__.meta11557;
    };
    cljs.core.async.t11556.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11558, meta11557__$1) {
      var self__ = this;
      var _11558__$1 = this;
      return new cljs.core.async.t11556(self__.cb, self__.flag, self__.alt_handler, meta11557__$1);
    };
    cljs.core.async.t11556.cljs$lang$type = true;
    cljs.core.async.t11556.cljs$lang$ctorStr = "cljs.core.async/t11556";
    cljs.core.async.t11556.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t11556");
    };
    cljs.core.async.__GT_t11556 = function cljs$core$async$alt_handler_$___GT_t11556(cb__$1, flag__$1, alt_handler__$1, meta11557) {
      return new cljs.core.async.t11556(cb__$1, flag__$1, alt_handler__$1, meta11557);
    };
  }
  return new cljs.core.async.t11556(cb, flag, cljs$core$async$alt_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function cljs$core$async$do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__11559_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__11559_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__11560_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__11560_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__4122__auto__ = wport;
            if (cljs.core.truth_(or__4122__auto__)) {
              return or__4122__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__11561 = i + 1;
          i = G__11561;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__4122__auto__ = ret;
  if (cljs.core.truth_(or__4122__auto__)) {
    return or__4122__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__4110__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__4110__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__4110__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var cljs$core$async$alts_BANG___delegate = function(ports, p__11562) {
    var map__11564 = p__11562;
    var map__11564__$1 = cljs.core.seq_QMARK_.call(null, map__11564) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11564) : map__11564;
    var opts = map__11564__$1;
    throw new Error("alts! used not in (go ...) block");
  };
  var cljs$core$async$alts_BANG_ = function(ports, var_args) {
    var p__11562 = null;
    if (arguments.length > 1) {
      var G__11565__i = 0, G__11565__a = new Array(arguments.length - 1);
      while (G__11565__i < G__11565__a.length) {
        G__11565__a[G__11565__i] = arguments[G__11565__i + 1];
        ++G__11565__i;
      }
      p__11562 = new cljs.core.IndexedSeq(G__11565__a, 0);
    }
    return cljs$core$async$alts_BANG___delegate.call(this, ports, p__11562);
  };
  cljs$core$async$alts_BANG_.cljs$lang$maxFixedArity = 1;
  cljs$core$async$alts_BANG_.cljs$lang$applyTo = function(arglist__11566) {
    var ports = cljs.core.first(arglist__11566);
    var p__11562 = cljs.core.rest(arglist__11566);
    return cljs$core$async$alts_BANG___delegate(ports, p__11562);
  };
  cljs$core$async$alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$async$alts_BANG___delegate;
  return cljs$core$async$alts_BANG_;
}();
cljs.core.async.pipe = function() {
  var cljs$core$async$pipe = null;
  var cljs$core$async$pipe__2 = function(from, to) {
    return cljs$core$async$pipe.call(null, from, to, true);
  };
  var cljs$core$async$pipe__3 = function(from, to, close_QMARK_) {
    var c__7954__auto___11661 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto___11661) {
      return function() {
        var f__7955__auto__ = function() {
          var switch__7898__auto__ = function(c__7954__auto___11661) {
            return function(state_11637) {
              var state_val_11638 = state_11637[1];
              if (state_val_11638 === 7) {
                var inst_11633 = state_11637[2];
                var state_11637__$1 = state_11637;
                var statearr_11639_11662 = state_11637__$1;
                statearr_11639_11662[2] = inst_11633;
                statearr_11639_11662[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11638 === 1) {
                  var state_11637__$1 = state_11637;
                  var statearr_11640_11663 = state_11637__$1;
                  statearr_11640_11663[2] = null;
                  statearr_11640_11663[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11638 === 4) {
                    var inst_11616 = state_11637[7];
                    var inst_11616__$1 = state_11637[2];
                    var inst_11617 = inst_11616__$1 == null;
                    var state_11637__$1 = function() {
                      var statearr_11641 = state_11637;
                      statearr_11641[7] = inst_11616__$1;
                      return statearr_11641;
                    }();
                    if (cljs.core.truth_(inst_11617)) {
                      var statearr_11642_11664 = state_11637__$1;
                      statearr_11642_11664[1] = 5;
                    } else {
                      var statearr_11643_11665 = state_11637__$1;
                      statearr_11643_11665[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11638 === 13) {
                      var state_11637__$1 = state_11637;
                      var statearr_11644_11666 = state_11637__$1;
                      statearr_11644_11666[2] = null;
                      statearr_11644_11666[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11638 === 6) {
                        var inst_11616 = state_11637[7];
                        var state_11637__$1 = state_11637;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11637__$1, 11, to, inst_11616);
                      } else {
                        if (state_val_11638 === 3) {
                          var inst_11635 = state_11637[2];
                          var state_11637__$1 = state_11637;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11637__$1, inst_11635);
                        } else {
                          if (state_val_11638 === 12) {
                            var state_11637__$1 = state_11637;
                            var statearr_11645_11667 = state_11637__$1;
                            statearr_11645_11667[2] = null;
                            statearr_11645_11667[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11638 === 2) {
                              var state_11637__$1 = state_11637;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11637__$1, 4, from);
                            } else {
                              if (state_val_11638 === 11) {
                                var inst_11626 = state_11637[2];
                                var state_11637__$1 = state_11637;
                                if (cljs.core.truth_(inst_11626)) {
                                  var statearr_11646_11668 = state_11637__$1;
                                  statearr_11646_11668[1] = 12;
                                } else {
                                  var statearr_11647_11669 = state_11637__$1;
                                  statearr_11647_11669[1] = 13;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11638 === 9) {
                                  var state_11637__$1 = state_11637;
                                  var statearr_11648_11670 = state_11637__$1;
                                  statearr_11648_11670[2] = null;
                                  statearr_11648_11670[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11638 === 5) {
                                    var state_11637__$1 = state_11637;
                                    if (cljs.core.truth_(close_QMARK_)) {
                                      var statearr_11649_11671 = state_11637__$1;
                                      statearr_11649_11671[1] = 8;
                                    } else {
                                      var statearr_11650_11672 = state_11637__$1;
                                      statearr_11650_11672[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11638 === 14) {
                                      var inst_11631 = state_11637[2];
                                      var state_11637__$1 = state_11637;
                                      var statearr_11651_11673 = state_11637__$1;
                                      statearr_11651_11673[2] = inst_11631;
                                      statearr_11651_11673[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11638 === 10) {
                                        var inst_11623 = state_11637[2];
                                        var state_11637__$1 = state_11637;
                                        var statearr_11652_11674 = state_11637__$1;
                                        statearr_11652_11674[2] = inst_11623;
                                        statearr_11652_11674[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_11638 === 8) {
                                          var inst_11620 = cljs.core.async.close_BANG_.call(null, to);
                                          var state_11637__$1 = state_11637;
                                          var statearr_11653_11675 = state_11637__$1;
                                          statearr_11653_11675[2] = inst_11620;
                                          statearr_11653_11675[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7954__auto___11661);
          return function(switch__7898__auto__, c__7954__auto___11661) {
            return function() {
              var cljs$core$async$pipe_$_state_machine__7899__auto__ = null;
              var cljs$core$async$pipe_$_state_machine__7899__auto____0 = function() {
                var statearr_11657 = [null, null, null, null, null, null, null, null];
                statearr_11657[0] = cljs$core$async$pipe_$_state_machine__7899__auto__;
                statearr_11657[1] = 1;
                return statearr_11657;
              };
              var cljs$core$async$pipe_$_state_machine__7899__auto____1 = function(state_11637) {
                while (true) {
                  var ret_value__7900__auto__ = function() {
                    try {
                      while (true) {
                        var result__7901__auto__ = switch__7898__auto__.call(null, state_11637);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7901__auto__;
                        }
                        break;
                      }
                    } catch (e11658) {
                      if (e11658 instanceof Object) {
                        var ex__7902__auto__ = e11658;
                        var statearr_11659_11676 = state_11637;
                        statearr_11659_11676[5] = ex__7902__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11637);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e11658;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__11677 = state_11637;
                    state_11637 = G__11677;
                    continue;
                  } else {
                    return ret_value__7900__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$pipe_$_state_machine__7899__auto__ = function(state_11637) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$pipe_$_state_machine__7899__auto____0.call(this);
                  case 1:
                    return cljs$core$async$pipe_$_state_machine__7899__auto____1.call(this, state_11637);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$pipe_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipe_$_state_machine__7899__auto____0;
              cljs$core$async$pipe_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipe_$_state_machine__7899__auto____1;
              return cljs$core$async$pipe_$_state_machine__7899__auto__;
            }();
          }(switch__7898__auto__, c__7954__auto___11661);
        }();
        var state__7956__auto__ = function() {
          var statearr_11660 = f__7955__auto__.call(null);
          statearr_11660[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto___11661;
          return statearr_11660;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
      };
    }(c__7954__auto___11661));
    return to;
  };
  cljs$core$async$pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$pipe__2.call(this, from, to);
      case 3:
        return cljs$core$async$pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$pipe.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$pipe__2;
  cljs$core$async$pipe.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$pipe__3;
  return cljs$core$async$pipe;
}();
cljs.core.async.pipeline_STAR_ = function cljs$core$async$pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null))))].join(""));
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__11861) {
      var vec__11862 = p__11861;
      var v = cljs.core.nth.call(null, vec__11862, 0, null);
      var p = cljs.core.nth.call(null, vec__11862, 1, null);
      var job = vec__11862;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__7954__auto___12044 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto___12044, res, vec__11862, v, p, job, jobs, results) {
          return function() {
            var f__7955__auto__ = function() {
              var switch__7898__auto__ = function(c__7954__auto___12044, res, vec__11862, v, p, job, jobs, results) {
                return function(state_11867) {
                  var state_val_11868 = state_11867[1];
                  if (state_val_11868 === 2) {
                    var inst_11864 = state_11867[2];
                    var inst_11865 = cljs.core.async.close_BANG_.call(null, res);
                    var state_11867__$1 = function() {
                      var statearr_11869 = state_11867;
                      statearr_11869[7] = inst_11864;
                      return statearr_11869;
                    }();
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11867__$1, inst_11865);
                  } else {
                    if (state_val_11868 === 1) {
                      var state_11867__$1 = state_11867;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11867__$1, 2, res, v);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__7954__auto___12044, res, vec__11862, v, p, job, jobs, results);
              return function(switch__7898__auto__, c__7954__auto___12044, res, vec__11862, v, p, job, jobs, results) {
                return function() {
                  var cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__ = null;
                  var cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____0 = function() {
                    var statearr_11873 = [null, null, null, null, null, null, null, null];
                    statearr_11873[0] = cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__;
                    statearr_11873[1] = 1;
                    return statearr_11873;
                  };
                  var cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____1 = function(state_11867) {
                    while (true) {
                      var ret_value__7900__auto__ = function() {
                        try {
                          while (true) {
                            var result__7901__auto__ = switch__7898__auto__.call(null, state_11867);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__7901__auto__;
                            }
                            break;
                          }
                        } catch (e11874) {
                          if (e11874 instanceof Object) {
                            var ex__7902__auto__ = e11874;
                            var statearr_11875_12045 = state_11867;
                            statearr_11875_12045[5] = ex__7902__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11867);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e11874;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__12046 = state_11867;
                        state_11867 = G__12046;
                        continue;
                      } else {
                        return ret_value__7900__auto__;
                      }
                      break;
                    }
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__ = function(state_11867) {
                    switch(arguments.length) {
                      case 0:
                        return cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____0.call(this);
                      case 1:
                        return cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____1.call(this, state_11867);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____0;
                  cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____1;
                  return cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__;
                }();
              }(switch__7898__auto__, c__7954__auto___12044, res, vec__11862, v, p, job, jobs, results);
            }();
            var state__7956__auto__ = function() {
              var statearr_11876 = f__7955__auto__.call(null);
              statearr_11876[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto___12044;
              return statearr_11876;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
          };
        }(c__7954__auto___12044, res, vec__11862, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__11877) {
      var vec__11878 = p__11877;
      var v = cljs.core.nth.call(null, vec__11878, 0, null);
      var p = cljs.core.nth.call(null, vec__11878, 1, null);
      var job = vec__11878;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__5007__auto___12047 = n;
  var __12048 = 0;
  while (true) {
    if (__12048 < n__5007__auto___12047) {
      var G__11879_12049 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__11879_12049) {
        case "async":
          var c__7954__auto___12051 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__12048, c__7954__auto___12051, G__11879_12049, n__5007__auto___12047, jobs, results, process, async) {
            return function() {
              var f__7955__auto__ = function() {
                var switch__7898__auto__ = function(__12048, c__7954__auto___12051, G__11879_12049, n__5007__auto___12047, jobs, results, process, async) {
                  return function(state_11892) {
                    var state_val_11893 = state_11892[1];
                    if (state_val_11893 === 7) {
                      var inst_11888 = state_11892[2];
                      var state_11892__$1 = state_11892;
                      var statearr_11894_12052 = state_11892__$1;
                      statearr_11894_12052[2] = inst_11888;
                      statearr_11894_12052[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11893 === 6) {
                        var state_11892__$1 = state_11892;
                        var statearr_11895_12053 = state_11892__$1;
                        statearr_11895_12053[2] = null;
                        statearr_11895_12053[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11893 === 5) {
                          var state_11892__$1 = state_11892;
                          var statearr_11896_12054 = state_11892__$1;
                          statearr_11896_12054[2] = null;
                          statearr_11896_12054[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11893 === 4) {
                            var inst_11882 = state_11892[2];
                            var inst_11883 = async.call(null, inst_11882);
                            var state_11892__$1 = state_11892;
                            if (cljs.core.truth_(inst_11883)) {
                              var statearr_11897_12055 = state_11892__$1;
                              statearr_11897_12055[1] = 5;
                            } else {
                              var statearr_11898_12056 = state_11892__$1;
                              statearr_11898_12056[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11893 === 3) {
                              var inst_11890 = state_11892[2];
                              var state_11892__$1 = state_11892;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11892__$1, inst_11890);
                            } else {
                              if (state_val_11893 === 2) {
                                var state_11892__$1 = state_11892;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11892__$1, 4, jobs);
                              } else {
                                if (state_val_11893 === 1) {
                                  var state_11892__$1 = state_11892;
                                  var statearr_11899_12057 = state_11892__$1;
                                  statearr_11899_12057[2] = null;
                                  statearr_11899_12057[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__12048, c__7954__auto___12051, G__11879_12049, n__5007__auto___12047, jobs, results, process, async);
                return function(__12048, switch__7898__auto__, c__7954__auto___12051, G__11879_12049, n__5007__auto___12047, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____0 = function() {
                      var statearr_11903 = [null, null, null, null, null, null, null];
                      statearr_11903[0] = cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__;
                      statearr_11903[1] = 1;
                      return statearr_11903;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____1 = function(state_11892) {
                      while (true) {
                        var ret_value__7900__auto__ = function() {
                          try {
                            while (true) {
                              var result__7901__auto__ = switch__7898__auto__.call(null, state_11892);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__7901__auto__;
                              }
                              break;
                            }
                          } catch (e11904) {
                            if (e11904 instanceof Object) {
                              var ex__7902__auto__ = e11904;
                              var statearr_11905_12058 = state_11892;
                              statearr_11905_12058[5] = ex__7902__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11892);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e11904;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__12059 = state_11892;
                          state_11892 = G__12059;
                          continue;
                        } else {
                          return ret_value__7900__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__ = function(state_11892) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____1.call(this, state_11892);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__;
                  }();
                }(__12048, switch__7898__auto__, c__7954__auto___12051, G__11879_12049, n__5007__auto___12047, jobs, results, process, async);
              }();
              var state__7956__auto__ = function() {
                var statearr_11906 = f__7955__auto__.call(null);
                statearr_11906[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto___12051;
                return statearr_11906;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
            };
          }(__12048, c__7954__auto___12051, G__11879_12049, n__5007__auto___12047, jobs, results, process, async));
          break;
        case "compute":
          var c__7954__auto___12060 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__12048, c__7954__auto___12060, G__11879_12049, n__5007__auto___12047, jobs, results, process, async) {
            return function() {
              var f__7955__auto__ = function() {
                var switch__7898__auto__ = function(__12048, c__7954__auto___12060, G__11879_12049, n__5007__auto___12047, jobs, results, process, async) {
                  return function(state_11919) {
                    var state_val_11920 = state_11919[1];
                    if (state_val_11920 === 7) {
                      var inst_11915 = state_11919[2];
                      var state_11919__$1 = state_11919;
                      var statearr_11921_12061 = state_11919__$1;
                      statearr_11921_12061[2] = inst_11915;
                      statearr_11921_12061[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11920 === 6) {
                        var state_11919__$1 = state_11919;
                        var statearr_11922_12062 = state_11919__$1;
                        statearr_11922_12062[2] = null;
                        statearr_11922_12062[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11920 === 5) {
                          var state_11919__$1 = state_11919;
                          var statearr_11923_12063 = state_11919__$1;
                          statearr_11923_12063[2] = null;
                          statearr_11923_12063[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11920 === 4) {
                            var inst_11909 = state_11919[2];
                            var inst_11910 = process.call(null, inst_11909);
                            var state_11919__$1 = state_11919;
                            if (cljs.core.truth_(inst_11910)) {
                              var statearr_11924_12064 = state_11919__$1;
                              statearr_11924_12064[1] = 5;
                            } else {
                              var statearr_11925_12065 = state_11919__$1;
                              statearr_11925_12065[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11920 === 3) {
                              var inst_11917 = state_11919[2];
                              var state_11919__$1 = state_11919;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11919__$1, inst_11917);
                            } else {
                              if (state_val_11920 === 2) {
                                var state_11919__$1 = state_11919;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11919__$1, 4, jobs);
                              } else {
                                if (state_val_11920 === 1) {
                                  var state_11919__$1 = state_11919;
                                  var statearr_11926_12066 = state_11919__$1;
                                  statearr_11926_12066[2] = null;
                                  statearr_11926_12066[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__12048, c__7954__auto___12060, G__11879_12049, n__5007__auto___12047, jobs, results, process, async);
                return function(__12048, switch__7898__auto__, c__7954__auto___12060, G__11879_12049, n__5007__auto___12047, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____0 = function() {
                      var statearr_11930 = [null, null, null, null, null, null, null];
                      statearr_11930[0] = cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__;
                      statearr_11930[1] = 1;
                      return statearr_11930;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____1 = function(state_11919) {
                      while (true) {
                        var ret_value__7900__auto__ = function() {
                          try {
                            while (true) {
                              var result__7901__auto__ = switch__7898__auto__.call(null, state_11919);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__7901__auto__;
                              }
                              break;
                            }
                          } catch (e11931) {
                            if (e11931 instanceof Object) {
                              var ex__7902__auto__ = e11931;
                              var statearr_11932_12067 = state_11919;
                              statearr_11932_12067[5] = ex__7902__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11919);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e11931;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__12068 = state_11919;
                          state_11919 = G__12068;
                          continue;
                        } else {
                          return ret_value__7900__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__ = function(state_11919) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____1.call(this, state_11919);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__;
                  }();
                }(__12048, switch__7898__auto__, c__7954__auto___12060, G__11879_12049, n__5007__auto___12047, jobs, results, process, async);
              }();
              var state__7956__auto__ = function() {
                var statearr_11933 = f__7955__auto__.call(null);
                statearr_11933[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto___12060;
                return statearr_11933;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
            };
          }(__12048, c__7954__auto___12060, G__11879_12049, n__5007__auto___12047, jobs, results, process, async));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));;
      }
      var G__12069 = __12048 + 1;
      __12048 = G__12069;
      continue;
    } else {
    }
    break;
  }
  var c__7954__auto___12070 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto___12070, jobs, results, process, async) {
    return function() {
      var f__7955__auto__ = function() {
        var switch__7898__auto__ = function(c__7954__auto___12070, jobs, results, process, async) {
          return function(state_11955) {
            var state_val_11956 = state_11955[1];
            if (state_val_11956 === 9) {
              var inst_11948 = state_11955[2];
              var state_11955__$1 = function() {
                var statearr_11957 = state_11955;
                statearr_11957[7] = inst_11948;
                return statearr_11957;
              }();
              var statearr_11958_12071 = state_11955__$1;
              statearr_11958_12071[2] = null;
              statearr_11958_12071[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11956 === 8) {
                var inst_11941 = state_11955[8];
                var inst_11946 = state_11955[2];
                var state_11955__$1 = function() {
                  var statearr_11959 = state_11955;
                  statearr_11959[9] = inst_11946;
                  return statearr_11959;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11955__$1, 9, results, inst_11941);
              } else {
                if (state_val_11956 === 7) {
                  var inst_11951 = state_11955[2];
                  var state_11955__$1 = state_11955;
                  var statearr_11960_12072 = state_11955__$1;
                  statearr_11960_12072[2] = inst_11951;
                  statearr_11960_12072[1] = 3;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11956 === 6) {
                    var inst_11936 = state_11955[10];
                    var inst_11941 = state_11955[8];
                    var inst_11941__$1 = cljs.core.async.chan.call(null, 1);
                    var inst_11942 = cljs.core.PersistentVector.EMPTY_NODE;
                    var inst_11943 = [inst_11936, inst_11941__$1];
                    var inst_11944 = new cljs.core.PersistentVector(null, 2, 5, inst_11942, inst_11943, null);
                    var state_11955__$1 = function() {
                      var statearr_11961 = state_11955;
                      statearr_11961[8] = inst_11941__$1;
                      return statearr_11961;
                    }();
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11955__$1, 8, jobs, inst_11944);
                  } else {
                    if (state_val_11956 === 5) {
                      var inst_11939 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_11955__$1 = state_11955;
                      var statearr_11962_12073 = state_11955__$1;
                      statearr_11962_12073[2] = inst_11939;
                      statearr_11962_12073[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11956 === 4) {
                        var inst_11936 = state_11955[10];
                        var inst_11936__$1 = state_11955[2];
                        var inst_11937 = inst_11936__$1 == null;
                        var state_11955__$1 = function() {
                          var statearr_11963 = state_11955;
                          statearr_11963[10] = inst_11936__$1;
                          return statearr_11963;
                        }();
                        if (cljs.core.truth_(inst_11937)) {
                          var statearr_11964_12074 = state_11955__$1;
                          statearr_11964_12074[1] = 5;
                        } else {
                          var statearr_11965_12075 = state_11955__$1;
                          statearr_11965_12075[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11956 === 3) {
                          var inst_11953 = state_11955[2];
                          var state_11955__$1 = state_11955;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11955__$1, inst_11953);
                        } else {
                          if (state_val_11956 === 2) {
                            var state_11955__$1 = state_11955;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11955__$1, 4, from);
                          } else {
                            if (state_val_11956 === 1) {
                              var state_11955__$1 = state_11955;
                              var statearr_11966_12076 = state_11955__$1;
                              statearr_11966_12076[2] = null;
                              statearr_11966_12076[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7954__auto___12070, jobs, results, process, async);
        return function(switch__7898__auto__, c__7954__auto___12070, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____0 = function() {
              var statearr_11970 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_11970[0] = cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__;
              statearr_11970[1] = 1;
              return statearr_11970;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____1 = function(state_11955) {
              while (true) {
                var ret_value__7900__auto__ = function() {
                  try {
                    while (true) {
                      var result__7901__auto__ = switch__7898__auto__.call(null, state_11955);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7901__auto__;
                      }
                      break;
                    }
                  } catch (e11971) {
                    if (e11971 instanceof Object) {
                      var ex__7902__auto__ = e11971;
                      var statearr_11972_12077 = state_11955;
                      statearr_11972_12077[5] = ex__7902__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11955);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11971;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12078 = state_11955;
                  state_11955 = G__12078;
                  continue;
                } else {
                  return ret_value__7900__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__ = function(state_11955) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____1.call(this, state_11955);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__;
          }();
        }(switch__7898__auto__, c__7954__auto___12070, jobs, results, process, async);
      }();
      var state__7956__auto__ = function() {
        var statearr_11973 = f__7955__auto__.call(null);
        statearr_11973[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto___12070;
        return statearr_11973;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
    };
  }(c__7954__auto___12070, jobs, results, process, async));
  var c__7954__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto__, jobs, results, process, async) {
    return function() {
      var f__7955__auto__ = function() {
        var switch__7898__auto__ = function(c__7954__auto__, jobs, results, process, async) {
          return function(state_12011) {
            var state_val_12012 = state_12011[1];
            if (state_val_12012 === 7) {
              var inst_12007 = state_12011[2];
              var state_12011__$1 = state_12011;
              var statearr_12013_12079 = state_12011__$1;
              statearr_12013_12079[2] = inst_12007;
              statearr_12013_12079[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12012 === 20) {
                var state_12011__$1 = state_12011;
                var statearr_12014_12080 = state_12011__$1;
                statearr_12014_12080[2] = null;
                statearr_12014_12080[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12012 === 1) {
                  var state_12011__$1 = state_12011;
                  var statearr_12015_12081 = state_12011__$1;
                  statearr_12015_12081[2] = null;
                  statearr_12015_12081[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12012 === 4) {
                    var inst_11976 = state_12011[7];
                    var inst_11976__$1 = state_12011[2];
                    var inst_11977 = inst_11976__$1 == null;
                    var state_12011__$1 = function() {
                      var statearr_12016 = state_12011;
                      statearr_12016[7] = inst_11976__$1;
                      return statearr_12016;
                    }();
                    if (cljs.core.truth_(inst_11977)) {
                      var statearr_12017_12082 = state_12011__$1;
                      statearr_12017_12082[1] = 5;
                    } else {
                      var statearr_12018_12083 = state_12011__$1;
                      statearr_12018_12083[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12012 === 15) {
                      var inst_11989 = state_12011[8];
                      var state_12011__$1 = state_12011;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12011__$1, 18, to, inst_11989);
                    } else {
                      if (state_val_12012 === 21) {
                        var inst_12002 = state_12011[2];
                        var state_12011__$1 = state_12011;
                        var statearr_12019_12084 = state_12011__$1;
                        statearr_12019_12084[2] = inst_12002;
                        statearr_12019_12084[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12012 === 13) {
                          var inst_12004 = state_12011[2];
                          var state_12011__$1 = function() {
                            var statearr_12020 = state_12011;
                            statearr_12020[9] = inst_12004;
                            return statearr_12020;
                          }();
                          var statearr_12021_12085 = state_12011__$1;
                          statearr_12021_12085[2] = null;
                          statearr_12021_12085[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12012 === 6) {
                            var inst_11976 = state_12011[7];
                            var state_12011__$1 = state_12011;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12011__$1, 11, inst_11976);
                          } else {
                            if (state_val_12012 === 17) {
                              var inst_11997 = state_12011[2];
                              var state_12011__$1 = state_12011;
                              if (cljs.core.truth_(inst_11997)) {
                                var statearr_12022_12086 = state_12011__$1;
                                statearr_12022_12086[1] = 19;
                              } else {
                                var statearr_12023_12087 = state_12011__$1;
                                statearr_12023_12087[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12012 === 3) {
                                var inst_12009 = state_12011[2];
                                var state_12011__$1 = state_12011;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12011__$1, inst_12009);
                              } else {
                                if (state_val_12012 === 12) {
                                  var inst_11986 = state_12011[10];
                                  var state_12011__$1 = state_12011;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12011__$1, 14, inst_11986);
                                } else {
                                  if (state_val_12012 === 2) {
                                    var state_12011__$1 = state_12011;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12011__$1, 4, results);
                                  } else {
                                    if (state_val_12012 === 19) {
                                      var state_12011__$1 = state_12011;
                                      var statearr_12024_12088 = state_12011__$1;
                                      statearr_12024_12088[2] = null;
                                      statearr_12024_12088[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12012 === 11) {
                                        var inst_11986 = state_12011[2];
                                        var state_12011__$1 = function() {
                                          var statearr_12025 = state_12011;
                                          statearr_12025[10] = inst_11986;
                                          return statearr_12025;
                                        }();
                                        var statearr_12026_12089 = state_12011__$1;
                                        statearr_12026_12089[2] = null;
                                        statearr_12026_12089[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12012 === 9) {
                                          var state_12011__$1 = state_12011;
                                          var statearr_12027_12090 = state_12011__$1;
                                          statearr_12027_12090[2] = null;
                                          statearr_12027_12090[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12012 === 5) {
                                            var state_12011__$1 = state_12011;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_12028_12091 = state_12011__$1;
                                              statearr_12028_12091[1] = 8;
                                            } else {
                                              var statearr_12029_12092 = state_12011__$1;
                                              statearr_12029_12092[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_12012 === 14) {
                                              var inst_11991 = state_12011[11];
                                              var inst_11989 = state_12011[8];
                                              var inst_11989__$1 = state_12011[2];
                                              var inst_11990 = inst_11989__$1 == null;
                                              var inst_11991__$1 = cljs.core.not.call(null, inst_11990);
                                              var state_12011__$1 = function() {
                                                var statearr_12030 = state_12011;
                                                statearr_12030[11] = inst_11991__$1;
                                                statearr_12030[8] = inst_11989__$1;
                                                return statearr_12030;
                                              }();
                                              if (inst_11991__$1) {
                                                var statearr_12031_12093 = state_12011__$1;
                                                statearr_12031_12093[1] = 15;
                                              } else {
                                                var statearr_12032_12094 = state_12011__$1;
                                                statearr_12032_12094[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_12012 === 16) {
                                                var inst_11991 = state_12011[11];
                                                var state_12011__$1 = state_12011;
                                                var statearr_12033_12095 = state_12011__$1;
                                                statearr_12033_12095[2] = inst_11991;
                                                statearr_12033_12095[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_12012 === 10) {
                                                  var inst_11983 = state_12011[2];
                                                  var state_12011__$1 = state_12011;
                                                  var statearr_12034_12096 = state_12011__$1;
                                                  statearr_12034_12096[2] = inst_11983;
                                                  statearr_12034_12096[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_12012 === 18) {
                                                    var inst_11994 = state_12011[2];
                                                    var state_12011__$1 = state_12011;
                                                    var statearr_12035_12097 = state_12011__$1;
                                                    statearr_12035_12097[2] = inst_11994;
                                                    statearr_12035_12097[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_12012 === 8) {
                                                      var inst_11980 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_12011__$1 = state_12011;
                                                      var statearr_12036_12098 = state_12011__$1;
                                                      statearr_12036_12098[2] = inst_11980;
                                                      statearr_12036_12098[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7954__auto__, jobs, results, process, async);
        return function(switch__7898__auto__, c__7954__auto__, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____0 = function() {
              var statearr_12040 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12040[0] = cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__;
              statearr_12040[1] = 1;
              return statearr_12040;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____1 = function(state_12011) {
              while (true) {
                var ret_value__7900__auto__ = function() {
                  try {
                    while (true) {
                      var result__7901__auto__ = switch__7898__auto__.call(null, state_12011);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7901__auto__;
                      }
                      break;
                    }
                  } catch (e12041) {
                    if (e12041 instanceof Object) {
                      var ex__7902__auto__ = e12041;
                      var statearr_12042_12099 = state_12011;
                      statearr_12042_12099[5] = ex__7902__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12011);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12041;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12100 = state_12011;
                  state_12011 = G__12100;
                  continue;
                } else {
                  return ret_value__7900__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__ = function(state_12011) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____1.call(this, state_12011);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7899__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__7899__auto__;
          }();
        }(switch__7898__auto__, c__7954__auto__, jobs, results, process, async);
      }();
      var state__7956__auto__ = function() {
        var statearr_12043 = f__7955__auto__.call(null);
        statearr_12043[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto__;
        return statearr_12043;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
    };
  }(c__7954__auto__, jobs, results, process, async));
  return c__7954__auto__;
};
cljs.core.async.pipeline_async = function() {
  var cljs$core$async$pipeline_async = null;
  var cljs$core$async$pipeline_async__4 = function(n, to, af, from) {
    return cljs$core$async$pipeline_async.call(null, n, to, af, from, true);
  };
  var cljs$core$async$pipeline_async__5 = function(n, to, af, from, close_QMARK_) {
    return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
  };
  cljs$core$async$pipeline_async = function(n, to, af, from, close_QMARK_) {
    switch(arguments.length) {
      case 4:
        return cljs$core$async$pipeline_async__4.call(this, n, to, af, from);
      case 5:
        return cljs$core$async$pipeline_async__5.call(this, n, to, af, from, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$pipeline_async.cljs$core$IFn$_invoke$arity$4 = cljs$core$async$pipeline_async__4;
  cljs$core$async$pipeline_async.cljs$core$IFn$_invoke$arity$5 = cljs$core$async$pipeline_async__5;
  return cljs$core$async$pipeline_async;
}();
cljs.core.async.pipeline = function() {
  var cljs$core$async$pipeline = null;
  var cljs$core$async$pipeline__4 = function(n, to, xf, from) {
    return cljs$core$async$pipeline.call(null, n, to, xf, from, true);
  };
  var cljs$core$async$pipeline__5 = function(n, to, xf, from, close_QMARK_) {
    return cljs$core$async$pipeline.call(null, n, to, xf, from, close_QMARK_, null);
  };
  var cljs$core$async$pipeline__6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
    return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
  };
  cljs$core$async$pipeline = function(n, to, xf, from, close_QMARK_, ex_handler) {
    switch(arguments.length) {
      case 4:
        return cljs$core$async$pipeline__4.call(this, n, to, xf, from);
      case 5:
        return cljs$core$async$pipeline__5.call(this, n, to, xf, from, close_QMARK_);
      case 6:
        return cljs$core$async$pipeline__6.call(this, n, to, xf, from, close_QMARK_, ex_handler);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$pipeline.cljs$core$IFn$_invoke$arity$4 = cljs$core$async$pipeline__4;
  cljs$core$async$pipeline.cljs$core$IFn$_invoke$arity$5 = cljs$core$async$pipeline__5;
  cljs$core$async$pipeline.cljs$core$IFn$_invoke$arity$6 = cljs$core$async$pipeline__6;
  return cljs$core$async$pipeline;
}();
cljs.core.async.split = function() {
  var cljs$core$async$split = null;
  var cljs$core$async$split__2 = function(p, ch) {
    return cljs$core$async$split.call(null, p, ch, null, null);
  };
  var cljs$core$async$split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__7954__auto___12201 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto___12201, tc, fc) {
      return function() {
        var f__7955__auto__ = function() {
          var switch__7898__auto__ = function(c__7954__auto___12201, tc, fc) {
            return function(state_12176) {
              var state_val_12177 = state_12176[1];
              if (state_val_12177 === 7) {
                var inst_12172 = state_12176[2];
                var state_12176__$1 = state_12176;
                var statearr_12178_12202 = state_12176__$1;
                statearr_12178_12202[2] = inst_12172;
                statearr_12178_12202[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12177 === 1) {
                  var state_12176__$1 = state_12176;
                  var statearr_12179_12203 = state_12176__$1;
                  statearr_12179_12203[2] = null;
                  statearr_12179_12203[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12177 === 4) {
                    var inst_12153 = state_12176[7];
                    var inst_12153__$1 = state_12176[2];
                    var inst_12154 = inst_12153__$1 == null;
                    var state_12176__$1 = function() {
                      var statearr_12180 = state_12176;
                      statearr_12180[7] = inst_12153__$1;
                      return statearr_12180;
                    }();
                    if (cljs.core.truth_(inst_12154)) {
                      var statearr_12181_12204 = state_12176__$1;
                      statearr_12181_12204[1] = 5;
                    } else {
                      var statearr_12182_12205 = state_12176__$1;
                      statearr_12182_12205[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12177 === 13) {
                      var state_12176__$1 = state_12176;
                      var statearr_12183_12206 = state_12176__$1;
                      statearr_12183_12206[2] = null;
                      statearr_12183_12206[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12177 === 6) {
                        var inst_12153 = state_12176[7];
                        var inst_12159 = p.call(null, inst_12153);
                        var state_12176__$1 = state_12176;
                        if (cljs.core.truth_(inst_12159)) {
                          var statearr_12184_12207 = state_12176__$1;
                          statearr_12184_12207[1] = 9;
                        } else {
                          var statearr_12185_12208 = state_12176__$1;
                          statearr_12185_12208[1] = 10;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12177 === 3) {
                          var inst_12174 = state_12176[2];
                          var state_12176__$1 = state_12176;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12176__$1, inst_12174);
                        } else {
                          if (state_val_12177 === 12) {
                            var state_12176__$1 = state_12176;
                            var statearr_12186_12209 = state_12176__$1;
                            statearr_12186_12209[2] = null;
                            statearr_12186_12209[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12177 === 2) {
                              var state_12176__$1 = state_12176;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12176__$1, 4, ch);
                            } else {
                              if (state_val_12177 === 11) {
                                var inst_12153 = state_12176[7];
                                var inst_12163 = state_12176[2];
                                var state_12176__$1 = state_12176;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12176__$1, 8, inst_12163, inst_12153);
                              } else {
                                if (state_val_12177 === 9) {
                                  var state_12176__$1 = state_12176;
                                  var statearr_12187_12210 = state_12176__$1;
                                  statearr_12187_12210[2] = tc;
                                  statearr_12187_12210[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12177 === 5) {
                                    var inst_12156 = cljs.core.async.close_BANG_.call(null, tc);
                                    var inst_12157 = cljs.core.async.close_BANG_.call(null, fc);
                                    var state_12176__$1 = function() {
                                      var statearr_12188 = state_12176;
                                      statearr_12188[8] = inst_12156;
                                      return statearr_12188;
                                    }();
                                    var statearr_12189_12211 = state_12176__$1;
                                    statearr_12189_12211[2] = inst_12157;
                                    statearr_12189_12211[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12177 === 14) {
                                      var inst_12170 = state_12176[2];
                                      var state_12176__$1 = state_12176;
                                      var statearr_12190_12212 = state_12176__$1;
                                      statearr_12190_12212[2] = inst_12170;
                                      statearr_12190_12212[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12177 === 10) {
                                        var state_12176__$1 = state_12176;
                                        var statearr_12191_12213 = state_12176__$1;
                                        statearr_12191_12213[2] = fc;
                                        statearr_12191_12213[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12177 === 8) {
                                          var inst_12165 = state_12176[2];
                                          var state_12176__$1 = state_12176;
                                          if (cljs.core.truth_(inst_12165)) {
                                            var statearr_12192_12214 = state_12176__$1;
                                            statearr_12192_12214[1] = 12;
                                          } else {
                                            var statearr_12193_12215 = state_12176__$1;
                                            statearr_12193_12215[1] = 13;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7954__auto___12201, tc, fc);
          return function(switch__7898__auto__, c__7954__auto___12201, tc, fc) {
            return function() {
              var cljs$core$async$split_$_state_machine__7899__auto__ = null;
              var cljs$core$async$split_$_state_machine__7899__auto____0 = function() {
                var statearr_12197 = [null, null, null, null, null, null, null, null, null];
                statearr_12197[0] = cljs$core$async$split_$_state_machine__7899__auto__;
                statearr_12197[1] = 1;
                return statearr_12197;
              };
              var cljs$core$async$split_$_state_machine__7899__auto____1 = function(state_12176) {
                while (true) {
                  var ret_value__7900__auto__ = function() {
                    try {
                      while (true) {
                        var result__7901__auto__ = switch__7898__auto__.call(null, state_12176);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7901__auto__;
                        }
                        break;
                      }
                    } catch (e12198) {
                      if (e12198 instanceof Object) {
                        var ex__7902__auto__ = e12198;
                        var statearr_12199_12216 = state_12176;
                        statearr_12199_12216[5] = ex__7902__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12176);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e12198;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12217 = state_12176;
                    state_12176 = G__12217;
                    continue;
                  } else {
                    return ret_value__7900__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$split_$_state_machine__7899__auto__ = function(state_12176) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$split_$_state_machine__7899__auto____0.call(this);
                  case 1:
                    return cljs$core$async$split_$_state_machine__7899__auto____1.call(this, state_12176);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$split_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$split_$_state_machine__7899__auto____0;
              cljs$core$async$split_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$split_$_state_machine__7899__auto____1;
              return cljs$core$async$split_$_state_machine__7899__auto__;
            }();
          }(switch__7898__auto__, c__7954__auto___12201, tc, fc);
        }();
        var state__7956__auto__ = function() {
          var statearr_12200 = f__7955__auto__.call(null);
          statearr_12200[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto___12201;
          return statearr_12200;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
      };
    }(c__7954__auto___12201, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  cljs$core$async$split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$split__2.call(this, p, ch);
      case 4:
        return cljs$core$async$split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$split.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$split__2;
  cljs$core$async$split.cljs$core$IFn$_invoke$arity$4 = cljs$core$async$split__4;
  return cljs$core$async$split;
}();
cljs.core.async.reduce = function cljs$core$async$reduce(f, init, ch) {
  var c__7954__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto__) {
    return function() {
      var f__7955__auto__ = function() {
        var switch__7898__auto__ = function(c__7954__auto__) {
          return function(state_12264) {
            var state_val_12265 = state_12264[1];
            if (state_val_12265 === 7) {
              var inst_12260 = state_12264[2];
              var state_12264__$1 = state_12264;
              var statearr_12266_12282 = state_12264__$1;
              statearr_12266_12282[2] = inst_12260;
              statearr_12266_12282[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12265 === 6) {
                var inst_12253 = state_12264[7];
                var inst_12250 = state_12264[8];
                var inst_12257 = f.call(null, inst_12250, inst_12253);
                var inst_12250__$1 = inst_12257;
                var state_12264__$1 = function() {
                  var statearr_12267 = state_12264;
                  statearr_12267[8] = inst_12250__$1;
                  return statearr_12267;
                }();
                var statearr_12268_12283 = state_12264__$1;
                statearr_12268_12283[2] = null;
                statearr_12268_12283[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12265 === 5) {
                  var inst_12250 = state_12264[8];
                  var state_12264__$1 = state_12264;
                  var statearr_12269_12284 = state_12264__$1;
                  statearr_12269_12284[2] = inst_12250;
                  statearr_12269_12284[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12265 === 4) {
                    var inst_12253 = state_12264[7];
                    var inst_12253__$1 = state_12264[2];
                    var inst_12254 = inst_12253__$1 == null;
                    var state_12264__$1 = function() {
                      var statearr_12270 = state_12264;
                      statearr_12270[7] = inst_12253__$1;
                      return statearr_12270;
                    }();
                    if (cljs.core.truth_(inst_12254)) {
                      var statearr_12271_12285 = state_12264__$1;
                      statearr_12271_12285[1] = 5;
                    } else {
                      var statearr_12272_12286 = state_12264__$1;
                      statearr_12272_12286[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12265 === 3) {
                      var inst_12262 = state_12264[2];
                      var state_12264__$1 = state_12264;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12264__$1, inst_12262);
                    } else {
                      if (state_val_12265 === 2) {
                        var state_12264__$1 = state_12264;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12264__$1, 4, ch);
                      } else {
                        if (state_val_12265 === 1) {
                          var inst_12250 = init;
                          var state_12264__$1 = function() {
                            var statearr_12273 = state_12264;
                            statearr_12273[8] = inst_12250;
                            return statearr_12273;
                          }();
                          var statearr_12274_12287 = state_12264__$1;
                          statearr_12274_12287[2] = null;
                          statearr_12274_12287[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7954__auto__);
        return function(switch__7898__auto__, c__7954__auto__) {
          return function() {
            var cljs$core$async$reduce_$_state_machine__7899__auto__ = null;
            var cljs$core$async$reduce_$_state_machine__7899__auto____0 = function() {
              var statearr_12278 = [null, null, null, null, null, null, null, null, null];
              statearr_12278[0] = cljs$core$async$reduce_$_state_machine__7899__auto__;
              statearr_12278[1] = 1;
              return statearr_12278;
            };
            var cljs$core$async$reduce_$_state_machine__7899__auto____1 = function(state_12264) {
              while (true) {
                var ret_value__7900__auto__ = function() {
                  try {
                    while (true) {
                      var result__7901__auto__ = switch__7898__auto__.call(null, state_12264);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7901__auto__;
                      }
                      break;
                    }
                  } catch (e12279) {
                    if (e12279 instanceof Object) {
                      var ex__7902__auto__ = e12279;
                      var statearr_12280_12288 = state_12264;
                      statearr_12280_12288[5] = ex__7902__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12264);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12279;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12289 = state_12264;
                  state_12264 = G__12289;
                  continue;
                } else {
                  return ret_value__7900__auto__;
                }
                break;
              }
            };
            cljs$core$async$reduce_$_state_machine__7899__auto__ = function(state_12264) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$reduce_$_state_machine__7899__auto____0.call(this);
                case 1:
                  return cljs$core$async$reduce_$_state_machine__7899__auto____1.call(this, state_12264);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$reduce_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$reduce_$_state_machine__7899__auto____0;
            cljs$core$async$reduce_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$reduce_$_state_machine__7899__auto____1;
            return cljs$core$async$reduce_$_state_machine__7899__auto__;
          }();
        }(switch__7898__auto__, c__7954__auto__);
      }();
      var state__7956__auto__ = function() {
        var statearr_12281 = f__7955__auto__.call(null);
        statearr_12281[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto__;
        return statearr_12281;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
    };
  }(c__7954__auto__));
  return c__7954__auto__;
};
cljs.core.async.onto_chan = function() {
  var cljs$core$async$onto_chan = null;
  var cljs$core$async$onto_chan__2 = function(ch, coll) {
    return cljs$core$async$onto_chan.call(null, ch, coll, true);
  };
  var cljs$core$async$onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__7954__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto__) {
      return function() {
        var f__7955__auto__ = function() {
          var switch__7898__auto__ = function(c__7954__auto__) {
            return function(state_12363) {
              var state_val_12364 = state_12363[1];
              if (state_val_12364 === 7) {
                var inst_12345 = state_12363[2];
                var state_12363__$1 = state_12363;
                var statearr_12365_12388 = state_12363__$1;
                statearr_12365_12388[2] = inst_12345;
                statearr_12365_12388[1] = 6;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12364 === 1) {
                  var inst_12339 = cljs.core.seq.call(null, coll);
                  var inst_12340 = inst_12339;
                  var state_12363__$1 = function() {
                    var statearr_12366 = state_12363;
                    statearr_12366[7] = inst_12340;
                    return statearr_12366;
                  }();
                  var statearr_12367_12389 = state_12363__$1;
                  statearr_12367_12389[2] = null;
                  statearr_12367_12389[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12364 === 4) {
                    var inst_12340 = state_12363[7];
                    var inst_12343 = cljs.core.first.call(null, inst_12340);
                    var state_12363__$1 = state_12363;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12363__$1, 7, ch, inst_12343);
                  } else {
                    if (state_val_12364 === 13) {
                      var inst_12357 = state_12363[2];
                      var state_12363__$1 = state_12363;
                      var statearr_12368_12390 = state_12363__$1;
                      statearr_12368_12390[2] = inst_12357;
                      statearr_12368_12390[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12364 === 6) {
                        var inst_12348 = state_12363[2];
                        var state_12363__$1 = state_12363;
                        if (cljs.core.truth_(inst_12348)) {
                          var statearr_12369_12391 = state_12363__$1;
                          statearr_12369_12391[1] = 8;
                        } else {
                          var statearr_12370_12392 = state_12363__$1;
                          statearr_12370_12392[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12364 === 3) {
                          var inst_12361 = state_12363[2];
                          var state_12363__$1 = state_12363;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12363__$1, inst_12361);
                        } else {
                          if (state_val_12364 === 12) {
                            var state_12363__$1 = state_12363;
                            var statearr_12371_12393 = state_12363__$1;
                            statearr_12371_12393[2] = null;
                            statearr_12371_12393[1] = 13;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12364 === 2) {
                              var inst_12340 = state_12363[7];
                              var state_12363__$1 = state_12363;
                              if (cljs.core.truth_(inst_12340)) {
                                var statearr_12372_12394 = state_12363__$1;
                                statearr_12372_12394[1] = 4;
                              } else {
                                var statearr_12373_12395 = state_12363__$1;
                                statearr_12373_12395[1] = 5;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12364 === 11) {
                                var inst_12354 = cljs.core.async.close_BANG_.call(null, ch);
                                var state_12363__$1 = state_12363;
                                var statearr_12374_12396 = state_12363__$1;
                                statearr_12374_12396[2] = inst_12354;
                                statearr_12374_12396[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12364 === 9) {
                                  var state_12363__$1 = state_12363;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_12375_12397 = state_12363__$1;
                                    statearr_12375_12397[1] = 11;
                                  } else {
                                    var statearr_12376_12398 = state_12363__$1;
                                    statearr_12376_12398[1] = 12;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12364 === 5) {
                                    var inst_12340 = state_12363[7];
                                    var state_12363__$1 = state_12363;
                                    var statearr_12377_12399 = state_12363__$1;
                                    statearr_12377_12399[2] = inst_12340;
                                    statearr_12377_12399[1] = 6;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12364 === 10) {
                                      var inst_12359 = state_12363[2];
                                      var state_12363__$1 = state_12363;
                                      var statearr_12378_12400 = state_12363__$1;
                                      statearr_12378_12400[2] = inst_12359;
                                      statearr_12378_12400[1] = 3;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12364 === 8) {
                                        var inst_12340 = state_12363[7];
                                        var inst_12350 = cljs.core.next.call(null, inst_12340);
                                        var inst_12340__$1 = inst_12350;
                                        var state_12363__$1 = function() {
                                          var statearr_12379 = state_12363;
                                          statearr_12379[7] = inst_12340__$1;
                                          return statearr_12379;
                                        }();
                                        var statearr_12380_12401 = state_12363__$1;
                                        statearr_12380_12401[2] = null;
                                        statearr_12380_12401[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7954__auto__);
          return function(switch__7898__auto__, c__7954__auto__) {
            return function() {
              var cljs$core$async$onto_chan_$_state_machine__7899__auto__ = null;
              var cljs$core$async$onto_chan_$_state_machine__7899__auto____0 = function() {
                var statearr_12384 = [null, null, null, null, null, null, null, null];
                statearr_12384[0] = cljs$core$async$onto_chan_$_state_machine__7899__auto__;
                statearr_12384[1] = 1;
                return statearr_12384;
              };
              var cljs$core$async$onto_chan_$_state_machine__7899__auto____1 = function(state_12363) {
                while (true) {
                  var ret_value__7900__auto__ = function() {
                    try {
                      while (true) {
                        var result__7901__auto__ = switch__7898__auto__.call(null, state_12363);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7901__auto__;
                        }
                        break;
                      }
                    } catch (e12385) {
                      if (e12385 instanceof Object) {
                        var ex__7902__auto__ = e12385;
                        var statearr_12386_12402 = state_12363;
                        statearr_12386_12402[5] = ex__7902__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12363);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e12385;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12403 = state_12363;
                    state_12363 = G__12403;
                    continue;
                  } else {
                    return ret_value__7900__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$onto_chan_$_state_machine__7899__auto__ = function(state_12363) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$onto_chan_$_state_machine__7899__auto____0.call(this);
                  case 1:
                    return cljs$core$async$onto_chan_$_state_machine__7899__auto____1.call(this, state_12363);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$onto_chan_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$onto_chan_$_state_machine__7899__auto____0;
              cljs$core$async$onto_chan_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$onto_chan_$_state_machine__7899__auto____1;
              return cljs$core$async$onto_chan_$_state_machine__7899__auto__;
            }();
          }(switch__7898__auto__, c__7954__auto__);
        }();
        var state__7956__auto__ = function() {
          var statearr_12387 = f__7955__auto__.call(null);
          statearr_12387[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto__;
          return statearr_12387;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
      };
    }(c__7954__auto__));
    return c__7954__auto__;
  };
  cljs$core$async$onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$onto_chan__2.call(this, ch, coll);
      case 3:
        return cljs$core$async$onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$onto_chan.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$onto_chan__2;
  cljs$core$async$onto_chan.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$onto_chan__3;
  return cljs$core$async$onto_chan;
}();
cljs.core.async.to_chan = function cljs$core$async$to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj12405 = {};
  return obj12405;
}();
cljs.core.async.muxch_STAR_ = function cljs$core$async$muxch_STAR_(_) {
  if (function() {
    var and__4110__auto__ = _;
    if (and__4110__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4758__auto__ = _ == null ? null : _;
    return function() {
      var or__4122__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj12407 = {};
  return obj12407;
}();
cljs.core.async.tap_STAR_ = function cljs$core$async$tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__4110__auto__ = m;
    if (and__4110__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4758__auto__ = m == null ? null : m;
    return function() {
      var or__4122__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function cljs$core$async$untap_STAR_(m, ch) {
  if (function() {
    var and__4110__auto__ = m;
    if (and__4110__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4758__auto__ = m == null ? null : m;
    return function() {
      var or__4122__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function cljs$core$async$untap_all_STAR_(m) {
  if (function() {
    var and__4110__auto__ = m;
    if (and__4110__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4758__auto__ = m == null ? null : m;
    return function() {
      var or__4122__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function cljs$core$async$mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t12629 !== "undefined") {
    } else {
      cljs.core.async.t12629 = function(cs, ch, mult, meta12630) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta12630 = meta12630;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t12629.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t12629.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t12629.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t12629.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t12629.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t12629.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t12629.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_12631) {
          var self__ = this;
          var _12631__$1 = this;
          return self__.meta12630;
        };
      }(cs);
      cljs.core.async.t12629.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_12631, meta12630__$1) {
          var self__ = this;
          var _12631__$1 = this;
          return new cljs.core.async.t12629(self__.cs, self__.ch, self__.mult, meta12630__$1);
        };
      }(cs);
      cljs.core.async.t12629.cljs$lang$type = true;
      cljs.core.async.t12629.cljs$lang$ctorStr = "cljs.core.async/t12629";
      cljs.core.async.t12629.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
          return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t12629");
        };
      }(cs);
      cljs.core.async.__GT_t12629 = function(cs) {
        return function cljs$core$async$mult_$___GT_t12629(cs__$1, ch__$1, mult__$1, meta12630) {
          return new cljs.core.async.t12629(cs__$1, ch__$1, mult__$1, meta12630);
        };
      }(cs);
    }
    return new cljs.core.async.t12629(cs, ch, cljs$core$async$mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__7954__auto___12850 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto___12850, cs, m, dchan, dctr, done) {
    return function() {
      var f__7955__auto__ = function() {
        var switch__7898__auto__ = function(c__7954__auto___12850, cs, m, dchan, dctr, done) {
          return function(state_12762) {
            var state_val_12763 = state_12762[1];
            if (state_val_12763 === 7) {
              var inst_12758 = state_12762[2];
              var state_12762__$1 = state_12762;
              var statearr_12764_12851 = state_12762__$1;
              statearr_12764_12851[2] = inst_12758;
              statearr_12764_12851[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12763 === 20) {
                var inst_12663 = state_12762[7];
                var inst_12673 = cljs.core.first.call(null, inst_12663);
                var inst_12674 = cljs.core.nth.call(null, inst_12673, 0, null);
                var inst_12675 = cljs.core.nth.call(null, inst_12673, 1, null);
                var state_12762__$1 = function() {
                  var statearr_12765 = state_12762;
                  statearr_12765[8] = inst_12674;
                  return statearr_12765;
                }();
                if (cljs.core.truth_(inst_12675)) {
                  var statearr_12766_12852 = state_12762__$1;
                  statearr_12766_12852[1] = 22;
                } else {
                  var statearr_12767_12853 = state_12762__$1;
                  statearr_12767_12853[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12763 === 27) {
                  var inst_12710 = state_12762[9];
                  var inst_12705 = state_12762[10];
                  var inst_12634 = state_12762[11];
                  var inst_12703 = state_12762[12];
                  var inst_12710__$1 = cljs.core._nth.call(null, inst_12703, inst_12705);
                  var inst_12711 = cljs.core.async.put_BANG_.call(null, inst_12710__$1, inst_12634, done);
                  var state_12762__$1 = function() {
                    var statearr_12768 = state_12762;
                    statearr_12768[9] = inst_12710__$1;
                    return statearr_12768;
                  }();
                  if (cljs.core.truth_(inst_12711)) {
                    var statearr_12769_12854 = state_12762__$1;
                    statearr_12769_12854[1] = 30;
                  } else {
                    var statearr_12770_12855 = state_12762__$1;
                    statearr_12770_12855[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12763 === 1) {
                    var state_12762__$1 = state_12762;
                    var statearr_12771_12856 = state_12762__$1;
                    statearr_12771_12856[2] = null;
                    statearr_12771_12856[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12763 === 24) {
                      var inst_12663 = state_12762[7];
                      var inst_12680 = state_12762[2];
                      var inst_12681 = cljs.core.next.call(null, inst_12663);
                      var inst_12643 = inst_12681;
                      var inst_12644 = null;
                      var inst_12645 = 0;
                      var inst_12646 = 0;
                      var state_12762__$1 = function() {
                        var statearr_12772 = state_12762;
                        statearr_12772[13] = inst_12643;
                        statearr_12772[14] = inst_12646;
                        statearr_12772[15] = inst_12644;
                        statearr_12772[16] = inst_12645;
                        statearr_12772[17] = inst_12680;
                        return statearr_12772;
                      }();
                      var statearr_12773_12857 = state_12762__$1;
                      statearr_12773_12857[2] = null;
                      statearr_12773_12857[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12763 === 39) {
                        var state_12762__$1 = state_12762;
                        var statearr_12777_12858 = state_12762__$1;
                        statearr_12777_12858[2] = null;
                        statearr_12777_12858[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12763 === 4) {
                          var inst_12634 = state_12762[11];
                          var inst_12634__$1 = state_12762[2];
                          var inst_12635 = inst_12634__$1 == null;
                          var state_12762__$1 = function() {
                            var statearr_12778 = state_12762;
                            statearr_12778[11] = inst_12634__$1;
                            return statearr_12778;
                          }();
                          if (cljs.core.truth_(inst_12635)) {
                            var statearr_12779_12859 = state_12762__$1;
                            statearr_12779_12859[1] = 5;
                          } else {
                            var statearr_12780_12860 = state_12762__$1;
                            statearr_12780_12860[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12763 === 15) {
                            var inst_12643 = state_12762[13];
                            var inst_12646 = state_12762[14];
                            var inst_12644 = state_12762[15];
                            var inst_12645 = state_12762[16];
                            var inst_12659 = state_12762[2];
                            var inst_12660 = inst_12646 + 1;
                            var tmp12774 = inst_12643;
                            var tmp12775 = inst_12644;
                            var tmp12776 = inst_12645;
                            var inst_12643__$1 = tmp12774;
                            var inst_12644__$1 = tmp12775;
                            var inst_12645__$1 = tmp12776;
                            var inst_12646__$1 = inst_12660;
                            var state_12762__$1 = function() {
                              var statearr_12781 = state_12762;
                              statearr_12781[13] = inst_12643__$1;
                              statearr_12781[14] = inst_12646__$1;
                              statearr_12781[15] = inst_12644__$1;
                              statearr_12781[16] = inst_12645__$1;
                              statearr_12781[18] = inst_12659;
                              return statearr_12781;
                            }();
                            var statearr_12782_12861 = state_12762__$1;
                            statearr_12782_12861[2] = null;
                            statearr_12782_12861[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12763 === 21) {
                              var inst_12684 = state_12762[2];
                              var state_12762__$1 = state_12762;
                              var statearr_12786_12862 = state_12762__$1;
                              statearr_12786_12862[2] = inst_12684;
                              statearr_12786_12862[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12763 === 31) {
                                var inst_12710 = state_12762[9];
                                var inst_12714 = done.call(null, null);
                                var inst_12715 = cljs.core.async.untap_STAR_.call(null, m, inst_12710);
                                var state_12762__$1 = function() {
                                  var statearr_12787 = state_12762;
                                  statearr_12787[19] = inst_12714;
                                  return statearr_12787;
                                }();
                                var statearr_12788_12863 = state_12762__$1;
                                statearr_12788_12863[2] = inst_12715;
                                statearr_12788_12863[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12763 === 32) {
                                  var inst_12702 = state_12762[20];
                                  var inst_12704 = state_12762[21];
                                  var inst_12705 = state_12762[10];
                                  var inst_12703 = state_12762[12];
                                  var inst_12717 = state_12762[2];
                                  var inst_12718 = inst_12705 + 1;
                                  var tmp12783 = inst_12702;
                                  var tmp12784 = inst_12704;
                                  var tmp12785 = inst_12703;
                                  var inst_12702__$1 = tmp12783;
                                  var inst_12703__$1 = tmp12785;
                                  var inst_12704__$1 = tmp12784;
                                  var inst_12705__$1 = inst_12718;
                                  var state_12762__$1 = function() {
                                    var statearr_12789 = state_12762;
                                    statearr_12789[22] = inst_12717;
                                    statearr_12789[20] = inst_12702__$1;
                                    statearr_12789[21] = inst_12704__$1;
                                    statearr_12789[10] = inst_12705__$1;
                                    statearr_12789[12] = inst_12703__$1;
                                    return statearr_12789;
                                  }();
                                  var statearr_12790_12864 = state_12762__$1;
                                  statearr_12790_12864[2] = null;
                                  statearr_12790_12864[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12763 === 40) {
                                    var inst_12730 = state_12762[23];
                                    var inst_12734 = done.call(null, null);
                                    var inst_12735 = cljs.core.async.untap_STAR_.call(null, m, inst_12730);
                                    var state_12762__$1 = function() {
                                      var statearr_12791 = state_12762;
                                      statearr_12791[24] = inst_12734;
                                      return statearr_12791;
                                    }();
                                    var statearr_12792_12865 = state_12762__$1;
                                    statearr_12792_12865[2] = inst_12735;
                                    statearr_12792_12865[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12763 === 33) {
                                      var inst_12721 = state_12762[25];
                                      var inst_12723 = cljs.core.chunked_seq_QMARK_.call(null, inst_12721);
                                      var state_12762__$1 = state_12762;
                                      if (inst_12723) {
                                        var statearr_12793_12866 = state_12762__$1;
                                        statearr_12793_12866[1] = 36;
                                      } else {
                                        var statearr_12794_12867 = state_12762__$1;
                                        statearr_12794_12867[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12763 === 13) {
                                        var inst_12653 = state_12762[26];
                                        var inst_12656 = cljs.core.async.close_BANG_.call(null, inst_12653);
                                        var state_12762__$1 = state_12762;
                                        var statearr_12795_12868 = state_12762__$1;
                                        statearr_12795_12868[2] = inst_12656;
                                        statearr_12795_12868[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12763 === 22) {
                                          var inst_12674 = state_12762[8];
                                          var inst_12677 = cljs.core.async.close_BANG_.call(null, inst_12674);
                                          var state_12762__$1 = state_12762;
                                          var statearr_12796_12869 = state_12762__$1;
                                          statearr_12796_12869[2] = inst_12677;
                                          statearr_12796_12869[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12763 === 36) {
                                            var inst_12721 = state_12762[25];
                                            var inst_12725 = cljs.core.chunk_first.call(null, inst_12721);
                                            var inst_12726 = cljs.core.chunk_rest.call(null, inst_12721);
                                            var inst_12727 = cljs.core.count.call(null, inst_12725);
                                            var inst_12702 = inst_12726;
                                            var inst_12703 = inst_12725;
                                            var inst_12704 = inst_12727;
                                            var inst_12705 = 0;
                                            var state_12762__$1 = function() {
                                              var statearr_12797 = state_12762;
                                              statearr_12797[20] = inst_12702;
                                              statearr_12797[21] = inst_12704;
                                              statearr_12797[10] = inst_12705;
                                              statearr_12797[12] = inst_12703;
                                              return statearr_12797;
                                            }();
                                            var statearr_12798_12870 = state_12762__$1;
                                            statearr_12798_12870[2] = null;
                                            statearr_12798_12870[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_12763 === 41) {
                                              var inst_12721 = state_12762[25];
                                              var inst_12737 = state_12762[2];
                                              var inst_12738 = cljs.core.next.call(null, inst_12721);
                                              var inst_12702 = inst_12738;
                                              var inst_12703 = null;
                                              var inst_12704 = 0;
                                              var inst_12705 = 0;
                                              var state_12762__$1 = function() {
                                                var statearr_12799 = state_12762;
                                                statearr_12799[20] = inst_12702;
                                                statearr_12799[27] = inst_12737;
                                                statearr_12799[21] = inst_12704;
                                                statearr_12799[10] = inst_12705;
                                                statearr_12799[12] = inst_12703;
                                                return statearr_12799;
                                              }();
                                              var statearr_12800_12871 = state_12762__$1;
                                              statearr_12800_12871[2] = null;
                                              statearr_12800_12871[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_12763 === 43) {
                                                var state_12762__$1 = state_12762;
                                                var statearr_12801_12872 = state_12762__$1;
                                                statearr_12801_12872[2] = null;
                                                statearr_12801_12872[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_12763 === 29) {
                                                  var inst_12746 = state_12762[2];
                                                  var state_12762__$1 = state_12762;
                                                  var statearr_12802_12873 = state_12762__$1;
                                                  statearr_12802_12873[2] = inst_12746;
                                                  statearr_12802_12873[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_12763 === 44) {
                                                    var inst_12755 = state_12762[2];
                                                    var state_12762__$1 = function() {
                                                      var statearr_12803 = state_12762;
                                                      statearr_12803[28] = inst_12755;
                                                      return statearr_12803;
                                                    }();
                                                    var statearr_12804_12874 = state_12762__$1;
                                                    statearr_12804_12874[2] = null;
                                                    statearr_12804_12874[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_12763 === 6) {
                                                      var inst_12694 = state_12762[29];
                                                      var inst_12693 = cljs.core.deref.call(null, cs);
                                                      var inst_12694__$1 = cljs.core.keys.call(null, inst_12693);
                                                      var inst_12695 = cljs.core.count.call(null, inst_12694__$1);
                                                      var inst_12696 = cljs.core.reset_BANG_.call(null, dctr, inst_12695);
                                                      var inst_12701 = cljs.core.seq.call(null, inst_12694__$1);
                                                      var inst_12702 = inst_12701;
                                                      var inst_12703 = null;
                                                      var inst_12704 = 0;
                                                      var inst_12705 = 0;
                                                      var state_12762__$1 = function() {
                                                        var statearr_12805 = state_12762;
                                                        statearr_12805[20] = inst_12702;
                                                        statearr_12805[21] = inst_12704;
                                                        statearr_12805[29] = inst_12694__$1;
                                                        statearr_12805[10] = inst_12705;
                                                        statearr_12805[30] = inst_12696;
                                                        statearr_12805[12] = inst_12703;
                                                        return statearr_12805;
                                                      }();
                                                      var statearr_12806_12875 = state_12762__$1;
                                                      statearr_12806_12875[2] = null;
                                                      statearr_12806_12875[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_12763 === 28) {
                                                        var inst_12702 = state_12762[20];
                                                        var inst_12721 = state_12762[25];
                                                        var inst_12721__$1 = cljs.core.seq.call(null, inst_12702);
                                                        var state_12762__$1 = function() {
                                                          var statearr_12807 = state_12762;
                                                          statearr_12807[25] = inst_12721__$1;
                                                          return statearr_12807;
                                                        }();
                                                        if (inst_12721__$1) {
                                                          var statearr_12808_12876 = state_12762__$1;
                                                          statearr_12808_12876[1] = 33;
                                                        } else {
                                                          var statearr_12809_12877 = state_12762__$1;
                                                          statearr_12809_12877[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_12763 === 25) {
                                                          var inst_12704 = state_12762[21];
                                                          var inst_12705 = state_12762[10];
                                                          var inst_12707 = inst_12705 < inst_12704;
                                                          var inst_12708 = inst_12707;
                                                          var state_12762__$1 = state_12762;
                                                          if (cljs.core.truth_(inst_12708)) {
                                                            var statearr_12810_12878 = state_12762__$1;
                                                            statearr_12810_12878[1] = 27;
                                                          } else {
                                                            var statearr_12811_12879 = state_12762__$1;
                                                            statearr_12811_12879[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_12763 === 34) {
                                                            var state_12762__$1 = state_12762;
                                                            var statearr_12812_12880 = state_12762__$1;
                                                            statearr_12812_12880[2] = null;
                                                            statearr_12812_12880[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_12763 === 17) {
                                                              var state_12762__$1 = state_12762;
                                                              var statearr_12813_12881 = state_12762__$1;
                                                              statearr_12813_12881[2] = null;
                                                              statearr_12813_12881[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_12763 === 3) {
                                                                var inst_12760 = state_12762[2];
                                                                var state_12762__$1 = state_12762;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12762__$1, inst_12760);
                                                              } else {
                                                                if (state_val_12763 === 12) {
                                                                  var inst_12689 = state_12762[2];
                                                                  var state_12762__$1 = state_12762;
                                                                  var statearr_12814_12882 = state_12762__$1;
                                                                  statearr_12814_12882[2] = inst_12689;
                                                                  statearr_12814_12882[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_12763 === 2) {
                                                                    var state_12762__$1 = state_12762;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12762__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_12763 === 23) {
                                                                      var state_12762__$1 = state_12762;
                                                                      var statearr_12815_12883 = state_12762__$1;
                                                                      statearr_12815_12883[2] = null;
                                                                      statearr_12815_12883[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_12763 === 35) {
                                                                        var inst_12744 = state_12762[2];
                                                                        var state_12762__$1 = state_12762;
                                                                        var statearr_12816_12884 = state_12762__$1;
                                                                        statearr_12816_12884[2] = inst_12744;
                                                                        statearr_12816_12884[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_12763 === 19) {
                                                                          var inst_12663 = state_12762[7];
                                                                          var inst_12667 = cljs.core.chunk_first.call(null, inst_12663);
                                                                          var inst_12668 = cljs.core.chunk_rest.call(null, inst_12663);
                                                                          var inst_12669 = cljs.core.count.call(null, inst_12667);
                                                                          var inst_12643 = inst_12668;
                                                                          var inst_12644 = inst_12667;
                                                                          var inst_12645 = inst_12669;
                                                                          var inst_12646 = 0;
                                                                          var state_12762__$1 = function() {
                                                                            var statearr_12817 = state_12762;
                                                                            statearr_12817[13] = inst_12643;
                                                                            statearr_12817[14] = inst_12646;
                                                                            statearr_12817[15] = inst_12644;
                                                                            statearr_12817[16] = inst_12645;
                                                                            return statearr_12817;
                                                                          }();
                                                                          var statearr_12818_12885 = state_12762__$1;
                                                                          statearr_12818_12885[2] = null;
                                                                          statearr_12818_12885[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_12763 === 11) {
                                                                            var inst_12643 = state_12762[13];
                                                                            var inst_12663 = state_12762[7];
                                                                            var inst_12663__$1 = cljs.core.seq.call(null, inst_12643);
                                                                            var state_12762__$1 = function() {
                                                                              var statearr_12819 = state_12762;
                                                                              statearr_12819[7] = inst_12663__$1;
                                                                              return statearr_12819;
                                                                            }();
                                                                            if (inst_12663__$1) {
                                                                              var statearr_12820_12886 = state_12762__$1;
                                                                              statearr_12820_12886[1] = 16;
                                                                            } else {
                                                                              var statearr_12821_12887 = state_12762__$1;
                                                                              statearr_12821_12887[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_12763 === 9) {
                                                                              var inst_12691 = state_12762[2];
                                                                              var state_12762__$1 = state_12762;
                                                                              var statearr_12822_12888 = state_12762__$1;
                                                                              statearr_12822_12888[2] = inst_12691;
                                                                              statearr_12822_12888[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_12763 === 5) {
                                                                                var inst_12641 = cljs.core.deref.call(null, cs);
                                                                                var inst_12642 = cljs.core.seq.call(null, inst_12641);
                                                                                var inst_12643 = inst_12642;
                                                                                var inst_12644 = null;
                                                                                var inst_12645 = 0;
                                                                                var inst_12646 = 0;
                                                                                var state_12762__$1 = function() {
                                                                                  var statearr_12823 = state_12762;
                                                                                  statearr_12823[13] = inst_12643;
                                                                                  statearr_12823[14] = inst_12646;
                                                                                  statearr_12823[15] = inst_12644;
                                                                                  statearr_12823[16] = inst_12645;
                                                                                  return statearr_12823;
                                                                                }();
                                                                                var statearr_12824_12889 = state_12762__$1;
                                                                                statearr_12824_12889[2] = null;
                                                                                statearr_12824_12889[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_12763 === 14) {
                                                                                  var state_12762__$1 = state_12762;
                                                                                  var statearr_12825_12890 = state_12762__$1;
                                                                                  statearr_12825_12890[2] = null;
                                                                                  statearr_12825_12890[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_12763 === 45) {
                                                                                    var inst_12752 = state_12762[2];
                                                                                    var state_12762__$1 = state_12762;
                                                                                    var statearr_12826_12891 = state_12762__$1;
                                                                                    statearr_12826_12891[2] = inst_12752;
                                                                                    statearr_12826_12891[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_12763 === 26) {
                                                                                      var inst_12694 = state_12762[29];
                                                                                      var inst_12748 = state_12762[2];
                                                                                      var inst_12749 = cljs.core.seq.call(null, inst_12694);
                                                                                      var state_12762__$1 = function() {
                                                                                        var statearr_12827 = state_12762;
                                                                                        statearr_12827[31] = inst_12748;
                                                                                        return statearr_12827;
                                                                                      }();
                                                                                      if (inst_12749) {
                                                                                        var statearr_12828_12892 = state_12762__$1;
                                                                                        statearr_12828_12892[1] = 42;
                                                                                      } else {
                                                                                        var statearr_12829_12893 = state_12762__$1;
                                                                                        statearr_12829_12893[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_12763 === 16) {
                                                                                        var inst_12663 = state_12762[7];
                                                                                        var inst_12665 = cljs.core.chunked_seq_QMARK_.call(null, inst_12663);
                                                                                        var state_12762__$1 = state_12762;
                                                                                        if (inst_12665) {
                                                                                          var statearr_12830_12894 = state_12762__$1;
                                                                                          statearr_12830_12894[1] = 19;
                                                                                        } else {
                                                                                          var statearr_12831_12895 = state_12762__$1;
                                                                                          statearr_12831_12895[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_12763 === 38) {
                                                                                          var inst_12741 = state_12762[2];
                                                                                          var state_12762__$1 = state_12762;
                                                                                          var statearr_12832_12896 = state_12762__$1;
                                                                                          statearr_12832_12896[2] = inst_12741;
                                                                                          statearr_12832_12896[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_12763 === 30) {
                                                                                            var state_12762__$1 = state_12762;
                                                                                            var statearr_12833_12897 = state_12762__$1;
                                                                                            statearr_12833_12897[2] = null;
                                                                                            statearr_12833_12897[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_12763 === 10) {
                                                                                              var inst_12646 = state_12762[14];
                                                                                              var inst_12644 = state_12762[15];
                                                                                              var inst_12652 = cljs.core._nth.call(null, inst_12644, inst_12646);
                                                                                              var inst_12653 = cljs.core.nth.call(null, inst_12652, 0, null);
                                                                                              var inst_12654 = cljs.core.nth.call(null, inst_12652, 1, null);
                                                                                              var state_12762__$1 = function() {
                                                                                                var statearr_12834 = state_12762;
                                                                                                statearr_12834[26] = inst_12653;
                                                                                                return statearr_12834;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_12654)) {
                                                                                                var statearr_12835_12898 = state_12762__$1;
                                                                                                statearr_12835_12898[1] = 13;
                                                                                              } else {
                                                                                                var statearr_12836_12899 = state_12762__$1;
                                                                                                statearr_12836_12899[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_12763 === 18) {
                                                                                                var inst_12687 = state_12762[2];
                                                                                                var state_12762__$1 = state_12762;
                                                                                                var statearr_12837_12900 = state_12762__$1;
                                                                                                statearr_12837_12900[2] = inst_12687;
                                                                                                statearr_12837_12900[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_12763 === 42) {
                                                                                                  var state_12762__$1 = state_12762;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12762__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_12763 === 37) {
                                                                                                    var inst_12721 = state_12762[25];
                                                                                                    var inst_12730 = state_12762[23];
                                                                                                    var inst_12634 = state_12762[11];
                                                                                                    var inst_12730__$1 = cljs.core.first.call(null, inst_12721);
                                                                                                    var inst_12731 = cljs.core.async.put_BANG_.call(null, inst_12730__$1, inst_12634, done);
                                                                                                    var state_12762__$1 = function() {
                                                                                                      var statearr_12838 = state_12762;
                                                                                                      statearr_12838[23] = inst_12730__$1;
                                                                                                      return statearr_12838;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_12731)) {
                                                                                                      var statearr_12839_12901 = state_12762__$1;
                                                                                                      statearr_12839_12901[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_12840_12902 = state_12762__$1;
                                                                                                      statearr_12840_12902[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_12763 === 8) {
                                                                                                      var inst_12646 = state_12762[14];
                                                                                                      var inst_12645 = state_12762[16];
                                                                                                      var inst_12648 = inst_12646 < inst_12645;
                                                                                                      var inst_12649 = inst_12648;
                                                                                                      var state_12762__$1 = state_12762;
                                                                                                      if (cljs.core.truth_(inst_12649)) {
                                                                                                        var statearr_12841_12903 = state_12762__$1;
                                                                                                        statearr_12841_12903[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_12842_12904 = state_12762__$1;
                                                                                                        statearr_12842_12904[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7954__auto___12850, cs, m, dchan, dctr, done);
        return function(switch__7898__auto__, c__7954__auto___12850, cs, m, dchan, dctr, done) {
          return function() {
            var cljs$core$async$mult_$_state_machine__7899__auto__ = null;
            var cljs$core$async$mult_$_state_machine__7899__auto____0 = function() {
              var statearr_12846 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12846[0] = cljs$core$async$mult_$_state_machine__7899__auto__;
              statearr_12846[1] = 1;
              return statearr_12846;
            };
            var cljs$core$async$mult_$_state_machine__7899__auto____1 = function(state_12762) {
              while (true) {
                var ret_value__7900__auto__ = function() {
                  try {
                    while (true) {
                      var result__7901__auto__ = switch__7898__auto__.call(null, state_12762);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7901__auto__;
                      }
                      break;
                    }
                  } catch (e12847) {
                    if (e12847 instanceof Object) {
                      var ex__7902__auto__ = e12847;
                      var statearr_12848_12905 = state_12762;
                      statearr_12848_12905[5] = ex__7902__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12762);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12847;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12906 = state_12762;
                  state_12762 = G__12906;
                  continue;
                } else {
                  return ret_value__7900__auto__;
                }
                break;
              }
            };
            cljs$core$async$mult_$_state_machine__7899__auto__ = function(state_12762) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mult_$_state_machine__7899__auto____0.call(this);
                case 1:
                  return cljs$core$async$mult_$_state_machine__7899__auto____1.call(this, state_12762);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mult_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mult_$_state_machine__7899__auto____0;
            cljs$core$async$mult_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mult_$_state_machine__7899__auto____1;
            return cljs$core$async$mult_$_state_machine__7899__auto__;
          }();
        }(switch__7898__auto__, c__7954__auto___12850, cs, m, dchan, dctr, done);
      }();
      var state__7956__auto__ = function() {
        var statearr_12849 = f__7955__auto__.call(null);
        statearr_12849[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto___12850;
        return statearr_12849;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
    };
  }(c__7954__auto___12850, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var cljs$core$async$tap = null;
  var cljs$core$async$tap__2 = function(mult, ch) {
    return cljs$core$async$tap.call(null, mult, ch, true);
  };
  var cljs$core$async$tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  cljs$core$async$tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$tap__2.call(this, mult, ch);
      case 3:
        return cljs$core$async$tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$tap.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$tap__2;
  cljs$core$async$tap.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$tap__3;
  return cljs$core$async$tap;
}();
cljs.core.async.untap = function cljs$core$async$untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function cljs$core$async$untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj12908 = {};
  return obj12908;
}();
cljs.core.async.admix_STAR_ = function cljs$core$async$admix_STAR_(m, ch) {
  if (function() {
    var and__4110__auto__ = m;
    if (and__4110__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4758__auto__ = m == null ? null : m;
    return function() {
      var or__4122__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function cljs$core$async$unmix_STAR_(m, ch) {
  if (function() {
    var and__4110__auto__ = m;
    if (and__4110__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4758__auto__ = m == null ? null : m;
    return function() {
      var or__4122__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function cljs$core$async$unmix_all_STAR_(m) {
  if (function() {
    var and__4110__auto__ = m;
    if (and__4110__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4758__auto__ = m == null ? null : m;
    return function() {
      var or__4122__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function cljs$core$async$toggle_STAR_(m, state_map) {
  if (function() {
    var and__4110__auto__ = m;
    if (and__4110__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4758__auto__ = m == null ? null : m;
    return function() {
      var or__4122__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function cljs$core$async$solo_mode_STAR_(m, mode) {
  if (function() {
    var and__4110__auto__ = m;
    if (and__4110__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4758__auto__ = m == null ? null : m;
    return function() {
      var or__4122__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.ioc_alts_BANG_ = function() {
  var cljs$core$async$ioc_alts_BANG___delegate = function(state, cont_block, ports, p__12909) {
    var map__12914 = p__12909;
    var map__12914__$1 = cljs.core.seq_QMARK_.call(null, map__12914) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12914) : map__12914;
    var opts = map__12914__$1;
    var statearr_12915_12918 = state;
    statearr_12915_12918[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__12914, map__12914__$1, opts) {
      return function(val) {
        var statearr_12916_12919 = state;
        statearr_12916_12919[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__12914, map__12914__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_12917_12920 = state;
      statearr_12917_12920[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
    } else {
      return null;
    }
  };
  var cljs$core$async$ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__12909 = null;
    if (arguments.length > 3) {
      var G__12921__i = 0, G__12921__a = new Array(arguments.length - 3);
      while (G__12921__i < G__12921__a.length) {
        G__12921__a[G__12921__i] = arguments[G__12921__i + 3];
        ++G__12921__i;
      }
      p__12909 = new cljs.core.IndexedSeq(G__12921__a, 0);
    }
    return cljs$core$async$ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__12909);
  };
  cljs$core$async$ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  cljs$core$async$ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__12922) {
    var state = cljs.core.first(arglist__12922);
    arglist__12922 = cljs.core.next(arglist__12922);
    var cont_block = cljs.core.first(arglist__12922);
    arglist__12922 = cljs.core.next(arglist__12922);
    var ports = cljs.core.first(arglist__12922);
    var p__12909 = cljs.core.rest(arglist__12922);
    return cljs$core$async$ioc_alts_BANG___delegate(state, cont_block, ports, p__12909);
  };
  cljs$core$async$ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = cljs$core$async$ioc_alts_BANG___delegate;
  return cljs$core$async$ioc_alts_BANG_;
}();
cljs.core.async.mix = function cljs$core$async$mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t13042 !== "undefined") {
    } else {
      cljs.core.async.t13042 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta13043) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta13043 = meta13043;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t13042.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t13042.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13042.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13042.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13042.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13042.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13042.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t13042.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13042.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_13044) {
          var self__ = this;
          var _13044__$1 = this;
          return self__.meta13043;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13042.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_13044, meta13043__$1) {
          var self__ = this;
          var _13044__$1 = this;
          return new cljs.core.async.t13042(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta13043__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t13042.cljs$lang$type = true;
      cljs.core.async.t13042.cljs$lang$ctorStr = "cljs.core.async/t13042";
      cljs.core.async.t13042.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
          return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t13042");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t13042 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function cljs$core$async$mix_$___GT_t13042(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta13043) {
          return new cljs.core.async.t13042(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta13043);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t13042(change, cljs$core$async$mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__7954__auto___13161 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto___13161, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__7955__auto__ = function() {
        var switch__7898__auto__ = function(c__7954__auto___13161, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_13114) {
            var state_val_13115 = state_13114[1];
            if (state_val_13115 === 7) {
              var inst_13058 = state_13114[7];
              var inst_13063 = cljs.core.apply.call(null, cljs.core.hash_map, inst_13058);
              var state_13114__$1 = state_13114;
              var statearr_13116_13162 = state_13114__$1;
              statearr_13116_13162[2] = inst_13063;
              statearr_13116_13162[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13115 === 20) {
                var inst_13073 = state_13114[8];
                var state_13114__$1 = state_13114;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13114__$1, 23, out, inst_13073);
              } else {
                if (state_val_13115 === 1) {
                  var inst_13048 = state_13114[9];
                  var inst_13048__$1 = calc_state.call(null);
                  var inst_13049 = cljs.core.seq_QMARK_.call(null, inst_13048__$1);
                  var state_13114__$1 = function() {
                    var statearr_13117 = state_13114;
                    statearr_13117[9] = inst_13048__$1;
                    return statearr_13117;
                  }();
                  if (inst_13049) {
                    var statearr_13118_13163 = state_13114__$1;
                    statearr_13118_13163[1] = 2;
                  } else {
                    var statearr_13119_13164 = state_13114__$1;
                    statearr_13119_13164[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13115 === 24) {
                    var inst_13066 = state_13114[10];
                    var inst_13058 = inst_13066;
                    var state_13114__$1 = function() {
                      var statearr_13120 = state_13114;
                      statearr_13120[7] = inst_13058;
                      return statearr_13120;
                    }();
                    var statearr_13121_13165 = state_13114__$1;
                    statearr_13121_13165[2] = null;
                    statearr_13121_13165[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13115 === 4) {
                      var inst_13048 = state_13114[9];
                      var inst_13054 = state_13114[2];
                      var inst_13055 = cljs.core.get.call(null, inst_13054, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_13056 = cljs.core.get.call(null, inst_13054, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_13057 = cljs.core.get.call(null, inst_13054, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_13058 = inst_13048;
                      var state_13114__$1 = function() {
                        var statearr_13122 = state_13114;
                        statearr_13122[7] = inst_13058;
                        statearr_13122[11] = inst_13057;
                        statearr_13122[12] = inst_13055;
                        statearr_13122[13] = inst_13056;
                        return statearr_13122;
                      }();
                      var statearr_13123_13166 = state_13114__$1;
                      statearr_13123_13166[2] = null;
                      statearr_13123_13166[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13115 === 15) {
                        var state_13114__$1 = state_13114;
                        var statearr_13124_13167 = state_13114__$1;
                        statearr_13124_13167[2] = null;
                        statearr_13124_13167[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13115 === 21) {
                          var inst_13066 = state_13114[10];
                          var inst_13058 = inst_13066;
                          var state_13114__$1 = function() {
                            var statearr_13125 = state_13114;
                            statearr_13125[7] = inst_13058;
                            return statearr_13125;
                          }();
                          var statearr_13126_13168 = state_13114__$1;
                          statearr_13126_13168[2] = null;
                          statearr_13126_13168[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13115 === 13) {
                            var inst_13110 = state_13114[2];
                            var state_13114__$1 = state_13114;
                            var statearr_13127_13169 = state_13114__$1;
                            statearr_13127_13169[2] = inst_13110;
                            statearr_13127_13169[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13115 === 22) {
                              var inst_13108 = state_13114[2];
                              var state_13114__$1 = state_13114;
                              var statearr_13128_13170 = state_13114__$1;
                              statearr_13128_13170[2] = inst_13108;
                              statearr_13128_13170[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13115 === 6) {
                                var inst_13112 = state_13114[2];
                                var state_13114__$1 = state_13114;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13114__$1, inst_13112);
                              } else {
                                if (state_val_13115 === 25) {
                                  var state_13114__$1 = state_13114;
                                  var statearr_13129_13171 = state_13114__$1;
                                  statearr_13129_13171[2] = null;
                                  statearr_13129_13171[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13115 === 17) {
                                    var inst_13088 = state_13114[14];
                                    var state_13114__$1 = state_13114;
                                    var statearr_13130_13172 = state_13114__$1;
                                    statearr_13130_13172[2] = inst_13088;
                                    statearr_13130_13172[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13115 === 3) {
                                      var inst_13048 = state_13114[9];
                                      var state_13114__$1 = state_13114;
                                      var statearr_13131_13173 = state_13114__$1;
                                      statearr_13131_13173[2] = inst_13048;
                                      statearr_13131_13173[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13115 === 12) {
                                        var inst_13074 = state_13114[15];
                                        var inst_13069 = state_13114[16];
                                        var inst_13088 = state_13114[14];
                                        var inst_13088__$1 = inst_13069.call(null, inst_13074);
                                        var state_13114__$1 = function() {
                                          var statearr_13132 = state_13114;
                                          statearr_13132[14] = inst_13088__$1;
                                          return statearr_13132;
                                        }();
                                        if (cljs.core.truth_(inst_13088__$1)) {
                                          var statearr_13133_13174 = state_13114__$1;
                                          statearr_13133_13174[1] = 17;
                                        } else {
                                          var statearr_13134_13175 = state_13114__$1;
                                          statearr_13134_13175[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13115 === 2) {
                                          var inst_13048 = state_13114[9];
                                          var inst_13051 = cljs.core.apply.call(null, cljs.core.hash_map, inst_13048);
                                          var state_13114__$1 = state_13114;
                                          var statearr_13135_13176 = state_13114__$1;
                                          statearr_13135_13176[2] = inst_13051;
                                          statearr_13135_13176[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13115 === 23) {
                                            var inst_13099 = state_13114[2];
                                            var state_13114__$1 = state_13114;
                                            if (cljs.core.truth_(inst_13099)) {
                                              var statearr_13136_13177 = state_13114__$1;
                                              statearr_13136_13177[1] = 24;
                                            } else {
                                              var statearr_13137_13178 = state_13114__$1;
                                              statearr_13137_13178[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13115 === 19) {
                                              var inst_13096 = state_13114[2];
                                              var state_13114__$1 = state_13114;
                                              if (cljs.core.truth_(inst_13096)) {
                                                var statearr_13138_13179 = state_13114__$1;
                                                statearr_13138_13179[1] = 20;
                                              } else {
                                                var statearr_13139_13180 = state_13114__$1;
                                                statearr_13139_13180[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_13115 === 11) {
                                                var inst_13073 = state_13114[8];
                                                var inst_13079 = inst_13073 == null;
                                                var state_13114__$1 = state_13114;
                                                if (cljs.core.truth_(inst_13079)) {
                                                  var statearr_13140_13181 = state_13114__$1;
                                                  statearr_13140_13181[1] = 14;
                                                } else {
                                                  var statearr_13141_13182 = state_13114__$1;
                                                  statearr_13141_13182[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13115 === 9) {
                                                  var inst_13066 = state_13114[10];
                                                  var inst_13066__$1 = state_13114[2];
                                                  var inst_13067 = cljs.core.get.call(null, inst_13066__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var inst_13068 = cljs.core.get.call(null, inst_13066__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_13069 = cljs.core.get.call(null, inst_13066__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var state_13114__$1 = function() {
                                                    var statearr_13142 = state_13114;
                                                    statearr_13142[10] = inst_13066__$1;
                                                    statearr_13142[17] = inst_13068;
                                                    statearr_13142[16] = inst_13069;
                                                    return statearr_13142;
                                                  }();
                                                  return cljs.core.async.ioc_alts_BANG_.call(null, state_13114__$1, 10, inst_13067);
                                                } else {
                                                  if (state_val_13115 === 5) {
                                                    var inst_13058 = state_13114[7];
                                                    var inst_13061 = cljs.core.seq_QMARK_.call(null, inst_13058);
                                                    var state_13114__$1 = state_13114;
                                                    if (inst_13061) {
                                                      var statearr_13143_13183 = state_13114__$1;
                                                      statearr_13143_13183[1] = 7;
                                                    } else {
                                                      var statearr_13144_13184 = state_13114__$1;
                                                      statearr_13144_13184[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13115 === 14) {
                                                      var inst_13074 = state_13114[15];
                                                      var inst_13081 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_13074);
                                                      var state_13114__$1 = state_13114;
                                                      var statearr_13145_13185 = state_13114__$1;
                                                      statearr_13145_13185[2] = inst_13081;
                                                      statearr_13145_13185[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_13115 === 26) {
                                                        var inst_13104 = state_13114[2];
                                                        var state_13114__$1 = state_13114;
                                                        var statearr_13146_13186 = state_13114__$1;
                                                        statearr_13146_13186[2] = inst_13104;
                                                        statearr_13146_13186[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_13115 === 16) {
                                                          var inst_13084 = state_13114[2];
                                                          var inst_13085 = calc_state.call(null);
                                                          var inst_13058 = inst_13085;
                                                          var state_13114__$1 = function() {
                                                            var statearr_13147 = state_13114;
                                                            statearr_13147[7] = inst_13058;
                                                            statearr_13147[18] = inst_13084;
                                                            return statearr_13147;
                                                          }();
                                                          var statearr_13148_13187 = state_13114__$1;
                                                          statearr_13148_13187[2] = null;
                                                          statearr_13148_13187[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_13115 === 10) {
                                                            var inst_13074 = state_13114[15];
                                                            var inst_13073 = state_13114[8];
                                                            var inst_13072 = state_13114[2];
                                                            var inst_13073__$1 = cljs.core.nth.call(null, inst_13072, 0, null);
                                                            var inst_13074__$1 = cljs.core.nth.call(null, inst_13072, 1, null);
                                                            var inst_13075 = inst_13073__$1 == null;
                                                            var inst_13076 = cljs.core._EQ_.call(null, inst_13074__$1, change);
                                                            var inst_13077 = inst_13075 || inst_13076;
                                                            var state_13114__$1 = function() {
                                                              var statearr_13149 = state_13114;
                                                              statearr_13149[15] = inst_13074__$1;
                                                              statearr_13149[8] = inst_13073__$1;
                                                              return statearr_13149;
                                                            }();
                                                            if (cljs.core.truth_(inst_13077)) {
                                                              var statearr_13150_13188 = state_13114__$1;
                                                              statearr_13150_13188[1] = 11;
                                                            } else {
                                                              var statearr_13151_13189 = state_13114__$1;
                                                              statearr_13151_13189[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_13115 === 18) {
                                                              var inst_13068 = state_13114[17];
                                                              var inst_13074 = state_13114[15];
                                                              var inst_13069 = state_13114[16];
                                                              var inst_13091 = cljs.core.empty_QMARK_.call(null, inst_13069);
                                                              var inst_13092 = inst_13068.call(null, inst_13074);
                                                              var inst_13093 = cljs.core.not.call(null, inst_13092);
                                                              var inst_13094 = inst_13091 && inst_13093;
                                                              var state_13114__$1 = state_13114;
                                                              var statearr_13152_13190 = state_13114__$1;
                                                              statearr_13152_13190[2] = inst_13094;
                                                              statearr_13152_13190[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_13115 === 8) {
                                                                var inst_13058 = state_13114[7];
                                                                var state_13114__$1 = state_13114;
                                                                var statearr_13153_13191 = state_13114__$1;
                                                                statearr_13153_13191[2] = inst_13058;
                                                                statearr_13153_13191[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7954__auto___13161, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__7898__auto__, c__7954__auto___13161, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var cljs$core$async$mix_$_state_machine__7899__auto__ = null;
            var cljs$core$async$mix_$_state_machine__7899__auto____0 = function() {
              var statearr_13157 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13157[0] = cljs$core$async$mix_$_state_machine__7899__auto__;
              statearr_13157[1] = 1;
              return statearr_13157;
            };
            var cljs$core$async$mix_$_state_machine__7899__auto____1 = function(state_13114) {
              while (true) {
                var ret_value__7900__auto__ = function() {
                  try {
                    while (true) {
                      var result__7901__auto__ = switch__7898__auto__.call(null, state_13114);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7901__auto__;
                      }
                      break;
                    }
                  } catch (e13158) {
                    if (e13158 instanceof Object) {
                      var ex__7902__auto__ = e13158;
                      var statearr_13159_13192 = state_13114;
                      statearr_13159_13192[5] = ex__7902__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13114);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13158;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13193 = state_13114;
                  state_13114 = G__13193;
                  continue;
                } else {
                  return ret_value__7900__auto__;
                }
                break;
              }
            };
            cljs$core$async$mix_$_state_machine__7899__auto__ = function(state_13114) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mix_$_state_machine__7899__auto____0.call(this);
                case 1:
                  return cljs$core$async$mix_$_state_machine__7899__auto____1.call(this, state_13114);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mix_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mix_$_state_machine__7899__auto____0;
            cljs$core$async$mix_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mix_$_state_machine__7899__auto____1;
            return cljs$core$async$mix_$_state_machine__7899__auto__;
          }();
        }(switch__7898__auto__, c__7954__auto___13161, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__7956__auto__ = function() {
        var statearr_13160 = f__7955__auto__.call(null);
        statearr_13160[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto___13161;
        return statearr_13160;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
    };
  }(c__7954__auto___13161, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function cljs$core$async$admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function cljs$core$async$unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function cljs$core$async$unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function cljs$core$async$toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function cljs$core$async$solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj13195 = {};
  return obj13195;
}();
cljs.core.async.sub_STAR_ = function cljs$core$async$sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__4110__auto__ = p;
    if (and__4110__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4758__auto__ = p == null ? null : p;
    return function() {
      var or__4122__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function cljs$core$async$unsub_STAR_(p, v, ch) {
  if (function() {
    var and__4110__auto__ = p;
    if (and__4110__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__4110__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4758__auto__ = p == null ? null : p;
    return function() {
      var or__4122__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4758__auto__)];
      if (or__4122__auto__) {
        return or__4122__auto__;
      } else {
        var or__4122__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__4122__auto____$1) {
          return or__4122__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var cljs$core$async$unsub_all_STAR_ = null;
  var cljs$core$async$unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__4110__auto__ = p;
      if (and__4110__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4758__auto__ = p == null ? null : p;
      return function() {
        var or__4122__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4758__auto__)];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var cljs$core$async$unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__4110__auto__ = p;
      if (and__4110__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__4110__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4758__auto__ = p == null ? null : p;
      return function() {
        var or__4122__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4758__auto__)];
        if (or__4122__auto__) {
          return or__4122__auto__;
        } else {
          var or__4122__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__4122__auto____$1) {
            return or__4122__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  cljs$core$async$unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$unsub_all_STAR___1.call(this, p);
      case 2:
        return cljs$core$async$unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$unsub_all_STAR___1;
  cljs$core$async$unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$unsub_all_STAR___2;
  return cljs$core$async$unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var cljs$core$async$pub = null;
  var cljs$core$async$pub__2 = function(ch, topic_fn) {
    return cljs$core$async$pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var cljs$core$async$pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__4122__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__4122__auto__)) {
          return or__4122__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__4122__auto__, mults) {
            return function(p1__13196_SHARP_) {
              if (cljs.core.truth_(p1__13196_SHARP_.call(null, topic))) {
                return p1__13196_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__13196_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__4122__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t13319 !== "undefined") {
      } else {
        cljs.core.async.t13319 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta13320) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta13320 = meta13320;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t13319.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t13319.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$1, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t13319.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$1) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$1);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t13319.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t13319.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t13319.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t13319.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t13319.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_13321) {
            var self__ = this;
            var _13321__$1 = this;
            return self__.meta13320;
          };
        }(mults, ensure_mult);
        cljs.core.async.t13319.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_13321, meta13320__$1) {
            var self__ = this;
            var _13321__$1 = this;
            return new cljs.core.async.t13319(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta13320__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.t13319.cljs$lang$type = true;
        cljs.core.async.t13319.cljs$lang$ctorStr = "cljs.core.async/t13319";
        cljs.core.async.t13319.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
            return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t13319");
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t13319 = function(mults, ensure_mult) {
          return function cljs$core$async$pub_$___GT_t13319(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta13320) {
            return new cljs.core.async.t13319(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta13320);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t13319(ensure_mult, mults, buf_fn, topic_fn, ch, cljs$core$async$pub, cljs.core.PersistentArrayMap.EMPTY);
    }();
    var c__7954__auto___13441 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto___13441, mults, ensure_mult, p) {
      return function() {
        var f__7955__auto__ = function() {
          var switch__7898__auto__ = function(c__7954__auto___13441, mults, ensure_mult, p) {
            return function(state_13393) {
              var state_val_13394 = state_13393[1];
              if (state_val_13394 === 7) {
                var inst_13389 = state_13393[2];
                var state_13393__$1 = state_13393;
                var statearr_13395_13442 = state_13393__$1;
                statearr_13395_13442[2] = inst_13389;
                statearr_13395_13442[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13394 === 20) {
                  var state_13393__$1 = state_13393;
                  var statearr_13396_13443 = state_13393__$1;
                  statearr_13396_13443[2] = null;
                  statearr_13396_13443[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13394 === 1) {
                    var state_13393__$1 = state_13393;
                    var statearr_13397_13444 = state_13393__$1;
                    statearr_13397_13444[2] = null;
                    statearr_13397_13444[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13394 === 24) {
                      var inst_13372 = state_13393[7];
                      var inst_13381 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_13372);
                      var state_13393__$1 = state_13393;
                      var statearr_13398_13445 = state_13393__$1;
                      statearr_13398_13445[2] = inst_13381;
                      statearr_13398_13445[1] = 25;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13394 === 4) {
                        var inst_13324 = state_13393[8];
                        var inst_13324__$1 = state_13393[2];
                        var inst_13325 = inst_13324__$1 == null;
                        var state_13393__$1 = function() {
                          var statearr_13399 = state_13393;
                          statearr_13399[8] = inst_13324__$1;
                          return statearr_13399;
                        }();
                        if (cljs.core.truth_(inst_13325)) {
                          var statearr_13400_13446 = state_13393__$1;
                          statearr_13400_13446[1] = 5;
                        } else {
                          var statearr_13401_13447 = state_13393__$1;
                          statearr_13401_13447[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13394 === 15) {
                          var inst_13366 = state_13393[2];
                          var state_13393__$1 = state_13393;
                          var statearr_13402_13448 = state_13393__$1;
                          statearr_13402_13448[2] = inst_13366;
                          statearr_13402_13448[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13394 === 21) {
                            var inst_13386 = state_13393[2];
                            var state_13393__$1 = function() {
                              var statearr_13403 = state_13393;
                              statearr_13403[9] = inst_13386;
                              return statearr_13403;
                            }();
                            var statearr_13404_13449 = state_13393__$1;
                            statearr_13404_13449[2] = null;
                            statearr_13404_13449[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13394 === 13) {
                              var inst_13348 = state_13393[10];
                              var inst_13350 = cljs.core.chunked_seq_QMARK_.call(null, inst_13348);
                              var state_13393__$1 = state_13393;
                              if (inst_13350) {
                                var statearr_13405_13450 = state_13393__$1;
                                statearr_13405_13450[1] = 16;
                              } else {
                                var statearr_13406_13451 = state_13393__$1;
                                statearr_13406_13451[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13394 === 22) {
                                var inst_13378 = state_13393[2];
                                var state_13393__$1 = state_13393;
                                if (cljs.core.truth_(inst_13378)) {
                                  var statearr_13407_13452 = state_13393__$1;
                                  statearr_13407_13452[1] = 23;
                                } else {
                                  var statearr_13408_13453 = state_13393__$1;
                                  statearr_13408_13453[1] = 24;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13394 === 6) {
                                  var inst_13374 = state_13393[11];
                                  var inst_13372 = state_13393[7];
                                  var inst_13324 = state_13393[8];
                                  var inst_13372__$1 = topic_fn.call(null, inst_13324);
                                  var inst_13373 = cljs.core.deref.call(null, mults);
                                  var inst_13374__$1 = cljs.core.get.call(null, inst_13373, inst_13372__$1);
                                  var state_13393__$1 = function() {
                                    var statearr_13409 = state_13393;
                                    statearr_13409[11] = inst_13374__$1;
                                    statearr_13409[7] = inst_13372__$1;
                                    return statearr_13409;
                                  }();
                                  if (cljs.core.truth_(inst_13374__$1)) {
                                    var statearr_13410_13454 = state_13393__$1;
                                    statearr_13410_13454[1] = 19;
                                  } else {
                                    var statearr_13411_13455 = state_13393__$1;
                                    statearr_13411_13455[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13394 === 25) {
                                    var inst_13383 = state_13393[2];
                                    var state_13393__$1 = state_13393;
                                    var statearr_13412_13456 = state_13393__$1;
                                    statearr_13412_13456[2] = inst_13383;
                                    statearr_13412_13456[1] = 21;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13394 === 17) {
                                      var inst_13348 = state_13393[10];
                                      var inst_13357 = cljs.core.first.call(null, inst_13348);
                                      var inst_13358 = cljs.core.async.muxch_STAR_.call(null, inst_13357);
                                      var inst_13359 = cljs.core.async.close_BANG_.call(null, inst_13358);
                                      var inst_13360 = cljs.core.next.call(null, inst_13348);
                                      var inst_13334 = inst_13360;
                                      var inst_13335 = null;
                                      var inst_13336 = 0;
                                      var inst_13337 = 0;
                                      var state_13393__$1 = function() {
                                        var statearr_13413 = state_13393;
                                        statearr_13413[12] = inst_13337;
                                        statearr_13413[13] = inst_13335;
                                        statearr_13413[14] = inst_13359;
                                        statearr_13413[15] = inst_13336;
                                        statearr_13413[16] = inst_13334;
                                        return statearr_13413;
                                      }();
                                      var statearr_13414_13457 = state_13393__$1;
                                      statearr_13414_13457[2] = null;
                                      statearr_13414_13457[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13394 === 3) {
                                        var inst_13391 = state_13393[2];
                                        var state_13393__$1 = state_13393;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13393__$1, inst_13391);
                                      } else {
                                        if (state_val_13394 === 12) {
                                          var inst_13368 = state_13393[2];
                                          var state_13393__$1 = state_13393;
                                          var statearr_13415_13458 = state_13393__$1;
                                          statearr_13415_13458[2] = inst_13368;
                                          statearr_13415_13458[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13394 === 2) {
                                            var state_13393__$1 = state_13393;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13393__$1, 4, ch);
                                          } else {
                                            if (state_val_13394 === 23) {
                                              var state_13393__$1 = state_13393;
                                              var statearr_13416_13459 = state_13393__$1;
                                              statearr_13416_13459[2] = null;
                                              statearr_13416_13459[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_13394 === 19) {
                                                var inst_13374 = state_13393[11];
                                                var inst_13324 = state_13393[8];
                                                var inst_13376 = cljs.core.async.muxch_STAR_.call(null, inst_13374);
                                                var state_13393__$1 = state_13393;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13393__$1, 22, inst_13376, inst_13324);
                                              } else {
                                                if (state_val_13394 === 11) {
                                                  var inst_13348 = state_13393[10];
                                                  var inst_13334 = state_13393[16];
                                                  var inst_13348__$1 = cljs.core.seq.call(null, inst_13334);
                                                  var state_13393__$1 = function() {
                                                    var statearr_13417 = state_13393;
                                                    statearr_13417[10] = inst_13348__$1;
                                                    return statearr_13417;
                                                  }();
                                                  if (inst_13348__$1) {
                                                    var statearr_13418_13460 = state_13393__$1;
                                                    statearr_13418_13460[1] = 13;
                                                  } else {
                                                    var statearr_13419_13461 = state_13393__$1;
                                                    statearr_13419_13461[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13394 === 9) {
                                                    var inst_13370 = state_13393[2];
                                                    var state_13393__$1 = state_13393;
                                                    var statearr_13420_13462 = state_13393__$1;
                                                    statearr_13420_13462[2] = inst_13370;
                                                    statearr_13420_13462[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13394 === 5) {
                                                      var inst_13331 = cljs.core.deref.call(null, mults);
                                                      var inst_13332 = cljs.core.vals.call(null, inst_13331);
                                                      var inst_13333 = cljs.core.seq.call(null, inst_13332);
                                                      var inst_13334 = inst_13333;
                                                      var inst_13335 = null;
                                                      var inst_13336 = 0;
                                                      var inst_13337 = 0;
                                                      var state_13393__$1 = function() {
                                                        var statearr_13421 = state_13393;
                                                        statearr_13421[12] = inst_13337;
                                                        statearr_13421[13] = inst_13335;
                                                        statearr_13421[15] = inst_13336;
                                                        statearr_13421[16] = inst_13334;
                                                        return statearr_13421;
                                                      }();
                                                      var statearr_13422_13463 = state_13393__$1;
                                                      statearr_13422_13463[2] = null;
                                                      statearr_13422_13463[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_13394 === 14) {
                                                        var state_13393__$1 = state_13393;
                                                        var statearr_13426_13464 = state_13393__$1;
                                                        statearr_13426_13464[2] = null;
                                                        statearr_13426_13464[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_13394 === 16) {
                                                          var inst_13348 = state_13393[10];
                                                          var inst_13352 = cljs.core.chunk_first.call(null, inst_13348);
                                                          var inst_13353 = cljs.core.chunk_rest.call(null, inst_13348);
                                                          var inst_13354 = cljs.core.count.call(null, inst_13352);
                                                          var inst_13334 = inst_13353;
                                                          var inst_13335 = inst_13352;
                                                          var inst_13336 = inst_13354;
                                                          var inst_13337 = 0;
                                                          var state_13393__$1 = function() {
                                                            var statearr_13427 = state_13393;
                                                            statearr_13427[12] = inst_13337;
                                                            statearr_13427[13] = inst_13335;
                                                            statearr_13427[15] = inst_13336;
                                                            statearr_13427[16] = inst_13334;
                                                            return statearr_13427;
                                                          }();
                                                          var statearr_13428_13465 = state_13393__$1;
                                                          statearr_13428_13465[2] = null;
                                                          statearr_13428_13465[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_13394 === 10) {
                                                            var inst_13337 = state_13393[12];
                                                            var inst_13335 = state_13393[13];
                                                            var inst_13336 = state_13393[15];
                                                            var inst_13334 = state_13393[16];
                                                            var inst_13342 = cljs.core._nth.call(null, inst_13335, inst_13337);
                                                            var inst_13343 = cljs.core.async.muxch_STAR_.call(null, inst_13342);
                                                            var inst_13344 = cljs.core.async.close_BANG_.call(null, inst_13343);
                                                            var inst_13345 = inst_13337 + 1;
                                                            var tmp13423 = inst_13335;
                                                            var tmp13424 = inst_13336;
                                                            var tmp13425 = inst_13334;
                                                            var inst_13334__$1 = tmp13425;
                                                            var inst_13335__$1 = tmp13423;
                                                            var inst_13336__$1 = tmp13424;
                                                            var inst_13337__$1 = inst_13345;
                                                            var state_13393__$1 = function() {
                                                              var statearr_13429 = state_13393;
                                                              statearr_13429[12] = inst_13337__$1;
                                                              statearr_13429[13] = inst_13335__$1;
                                                              statearr_13429[17] = inst_13344;
                                                              statearr_13429[15] = inst_13336__$1;
                                                              statearr_13429[16] = inst_13334__$1;
                                                              return statearr_13429;
                                                            }();
                                                            var statearr_13430_13466 = state_13393__$1;
                                                            statearr_13430_13466[2] = null;
                                                            statearr_13430_13466[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_13394 === 18) {
                                                              var inst_13363 = state_13393[2];
                                                              var state_13393__$1 = state_13393;
                                                              var statearr_13431_13467 = state_13393__$1;
                                                              statearr_13431_13467[2] = inst_13363;
                                                              statearr_13431_13467[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_13394 === 8) {
                                                                var inst_13337 = state_13393[12];
                                                                var inst_13336 = state_13393[15];
                                                                var inst_13339 = inst_13337 < inst_13336;
                                                                var inst_13340 = inst_13339;
                                                                var state_13393__$1 = state_13393;
                                                                if (cljs.core.truth_(inst_13340)) {
                                                                  var statearr_13432_13468 = state_13393__$1;
                                                                  statearr_13432_13468[1] = 10;
                                                                } else {
                                                                  var statearr_13433_13469 = state_13393__$1;
                                                                  statearr_13433_13469[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7954__auto___13441, mults, ensure_mult, p);
          return function(switch__7898__auto__, c__7954__auto___13441, mults, ensure_mult, p) {
            return function() {
              var cljs$core$async$pub_$_state_machine__7899__auto__ = null;
              var cljs$core$async$pub_$_state_machine__7899__auto____0 = function() {
                var statearr_13437 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_13437[0] = cljs$core$async$pub_$_state_machine__7899__auto__;
                statearr_13437[1] = 1;
                return statearr_13437;
              };
              var cljs$core$async$pub_$_state_machine__7899__auto____1 = function(state_13393) {
                while (true) {
                  var ret_value__7900__auto__ = function() {
                    try {
                      while (true) {
                        var result__7901__auto__ = switch__7898__auto__.call(null, state_13393);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7901__auto__;
                        }
                        break;
                      }
                    } catch (e13438) {
                      if (e13438 instanceof Object) {
                        var ex__7902__auto__ = e13438;
                        var statearr_13439_13470 = state_13393;
                        statearr_13439_13470[5] = ex__7902__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13393);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e13438;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__13471 = state_13393;
                    state_13393 = G__13471;
                    continue;
                  } else {
                    return ret_value__7900__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$pub_$_state_machine__7899__auto__ = function(state_13393) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$pub_$_state_machine__7899__auto____0.call(this);
                  case 1:
                    return cljs$core$async$pub_$_state_machine__7899__auto____1.call(this, state_13393);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$pub_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pub_$_state_machine__7899__auto____0;
              cljs$core$async$pub_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pub_$_state_machine__7899__auto____1;
              return cljs$core$async$pub_$_state_machine__7899__auto__;
            }();
          }(switch__7898__auto__, c__7954__auto___13441, mults, ensure_mult, p);
        }();
        var state__7956__auto__ = function() {
          var statearr_13440 = f__7955__auto__.call(null);
          statearr_13440[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto___13441;
          return statearr_13440;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
      };
    }(c__7954__auto___13441, mults, ensure_mult, p));
    return p;
  };
  cljs$core$async$pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$pub__2.call(this, ch, topic_fn);
      case 3:
        return cljs$core$async$pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$pub.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$pub__2;
  cljs$core$async$pub.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$pub__3;
  return cljs$core$async$pub;
}();
cljs.core.async.sub = function() {
  var cljs$core$async$sub = null;
  var cljs$core$async$sub__3 = function(p, topic, ch) {
    return cljs$core$async$sub.call(null, p, topic, ch, true);
  };
  var cljs$core$async$sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  cljs$core$async$sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return cljs$core$async$sub__3.call(this, p, topic, ch);
      case 4:
        return cljs$core$async$sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$sub.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$sub__3;
  cljs$core$async$sub.cljs$core$IFn$_invoke$arity$4 = cljs$core$async$sub__4;
  return cljs$core$async$sub;
}();
cljs.core.async.unsub = function cljs$core$async$unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var cljs$core$async$unsub_all = null;
  var cljs$core$async$unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var cljs$core$async$unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  cljs$core$async$unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$unsub_all__1.call(this, p);
      case 2:
        return cljs$core$async$unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$unsub_all.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$unsub_all__1;
  cljs$core$async$unsub_all.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$unsub_all__2;
  return cljs$core$async$unsub_all;
}();
cljs.core.async.map = function() {
  var cljs$core$async$map = null;
  var cljs$core$async$map__2 = function(f, chs) {
    return cljs$core$async$map.call(null, f, chs, null);
  };
  var cljs$core$async$map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__7954__auto___13608 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto___13608, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__7955__auto__ = function() {
          var switch__7898__auto__ = function(c__7954__auto___13608, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_13578) {
              var state_val_13579 = state_13578[1];
              if (state_val_13579 === 7) {
                var state_13578__$1 = state_13578;
                var statearr_13580_13609 = state_13578__$1;
                statearr_13580_13609[2] = null;
                statearr_13580_13609[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13579 === 1) {
                  var state_13578__$1 = state_13578;
                  var statearr_13581_13610 = state_13578__$1;
                  statearr_13581_13610[2] = null;
                  statearr_13581_13610[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13579 === 4) {
                    var inst_13542 = state_13578[7];
                    var inst_13544 = inst_13542 < cnt;
                    var state_13578__$1 = state_13578;
                    if (cljs.core.truth_(inst_13544)) {
                      var statearr_13582_13611 = state_13578__$1;
                      statearr_13582_13611[1] = 6;
                    } else {
                      var statearr_13583_13612 = state_13578__$1;
                      statearr_13583_13612[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13579 === 15) {
                      var inst_13574 = state_13578[2];
                      var state_13578__$1 = state_13578;
                      var statearr_13584_13613 = state_13578__$1;
                      statearr_13584_13613[2] = inst_13574;
                      statearr_13584_13613[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13579 === 13) {
                        var inst_13567 = cljs.core.async.close_BANG_.call(null, out);
                        var state_13578__$1 = state_13578;
                        var statearr_13585_13614 = state_13578__$1;
                        statearr_13585_13614[2] = inst_13567;
                        statearr_13585_13614[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13579 === 6) {
                          var state_13578__$1 = state_13578;
                          var statearr_13586_13615 = state_13578__$1;
                          statearr_13586_13615[2] = null;
                          statearr_13586_13615[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13579 === 3) {
                            var inst_13576 = state_13578[2];
                            var state_13578__$1 = state_13578;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13578__$1, inst_13576);
                          } else {
                            if (state_val_13579 === 12) {
                              var inst_13564 = state_13578[8];
                              var inst_13564__$1 = state_13578[2];
                              var inst_13565 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_13564__$1);
                              var state_13578__$1 = function() {
                                var statearr_13587 = state_13578;
                                statearr_13587[8] = inst_13564__$1;
                                return statearr_13587;
                              }();
                              if (cljs.core.truth_(inst_13565)) {
                                var statearr_13588_13616 = state_13578__$1;
                                statearr_13588_13616[1] = 13;
                              } else {
                                var statearr_13589_13617 = state_13578__$1;
                                statearr_13589_13617[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13579 === 2) {
                                var inst_13541 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_13542 = 0;
                                var state_13578__$1 = function() {
                                  var statearr_13590 = state_13578;
                                  statearr_13590[7] = inst_13542;
                                  statearr_13590[9] = inst_13541;
                                  return statearr_13590;
                                }();
                                var statearr_13591_13618 = state_13578__$1;
                                statearr_13591_13618[2] = null;
                                statearr_13591_13618[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13579 === 11) {
                                  var inst_13542 = state_13578[7];
                                  var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_13578, 10, Object, null, 9);
                                  var inst_13551 = chs__$1.call(null, inst_13542);
                                  var inst_13552 = done.call(null, inst_13542);
                                  var inst_13553 = cljs.core.async.take_BANG_.call(null, inst_13551, inst_13552);
                                  var state_13578__$1 = state_13578;
                                  var statearr_13592_13619 = state_13578__$1;
                                  statearr_13592_13619[2] = inst_13553;
                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13578__$1);
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13579 === 9) {
                                    var inst_13542 = state_13578[7];
                                    var inst_13555 = state_13578[2];
                                    var inst_13556 = inst_13542 + 1;
                                    var inst_13542__$1 = inst_13556;
                                    var state_13578__$1 = function() {
                                      var statearr_13593 = state_13578;
                                      statearr_13593[7] = inst_13542__$1;
                                      statearr_13593[10] = inst_13555;
                                      return statearr_13593;
                                    }();
                                    var statearr_13594_13620 = state_13578__$1;
                                    statearr_13594_13620[2] = null;
                                    statearr_13594_13620[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13579 === 5) {
                                      var inst_13562 = state_13578[2];
                                      var state_13578__$1 = function() {
                                        var statearr_13595 = state_13578;
                                        statearr_13595[11] = inst_13562;
                                        return statearr_13595;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13578__$1, 12, dchan);
                                    } else {
                                      if (state_val_13579 === 14) {
                                        var inst_13564 = state_13578[8];
                                        var inst_13569 = cljs.core.apply.call(null, f, inst_13564);
                                        var state_13578__$1 = state_13578;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13578__$1, 16, out, inst_13569);
                                      } else {
                                        if (state_val_13579 === 16) {
                                          var inst_13571 = state_13578[2];
                                          var state_13578__$1 = function() {
                                            var statearr_13596 = state_13578;
                                            statearr_13596[12] = inst_13571;
                                            return statearr_13596;
                                          }();
                                          var statearr_13597_13621 = state_13578__$1;
                                          statearr_13597_13621[2] = null;
                                          statearr_13597_13621[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13579 === 10) {
                                            var inst_13546 = state_13578[2];
                                            var inst_13547 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_13578__$1 = function() {
                                              var statearr_13598 = state_13578;
                                              statearr_13598[13] = inst_13546;
                                              return statearr_13598;
                                            }();
                                            var statearr_13599_13622 = state_13578__$1;
                                            statearr_13599_13622[2] = inst_13547;
                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13578__$1);
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13579 === 8) {
                                              var inst_13560 = state_13578[2];
                                              var state_13578__$1 = state_13578;
                                              var statearr_13600_13623 = state_13578__$1;
                                              statearr_13600_13623[2] = inst_13560;
                                              statearr_13600_13623[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7954__auto___13608, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__7898__auto__, c__7954__auto___13608, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var cljs$core$async$map_$_state_machine__7899__auto__ = null;
              var cljs$core$async$map_$_state_machine__7899__auto____0 = function() {
                var statearr_13604 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_13604[0] = cljs$core$async$map_$_state_machine__7899__auto__;
                statearr_13604[1] = 1;
                return statearr_13604;
              };
              var cljs$core$async$map_$_state_machine__7899__auto____1 = function(state_13578) {
                while (true) {
                  var ret_value__7900__auto__ = function() {
                    try {
                      while (true) {
                        var result__7901__auto__ = switch__7898__auto__.call(null, state_13578);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7901__auto__;
                        }
                        break;
                      }
                    } catch (e13605) {
                      if (e13605 instanceof Object) {
                        var ex__7902__auto__ = e13605;
                        var statearr_13606_13624 = state_13578;
                        statearr_13606_13624[5] = ex__7902__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13578);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e13605;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__13625 = state_13578;
                    state_13578 = G__13625;
                    continue;
                  } else {
                    return ret_value__7900__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$map_$_state_machine__7899__auto__ = function(state_13578) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$map_$_state_machine__7899__auto____0.call(this);
                  case 1:
                    return cljs$core$async$map_$_state_machine__7899__auto____1.call(this, state_13578);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$map_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$map_$_state_machine__7899__auto____0;
              cljs$core$async$map_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$map_$_state_machine__7899__auto____1;
              return cljs$core$async$map_$_state_machine__7899__auto__;
            }();
          }(switch__7898__auto__, c__7954__auto___13608, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__7956__auto__ = function() {
          var statearr_13607 = f__7955__auto__.call(null);
          statearr_13607[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto___13608;
          return statearr_13607;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
      };
    }(c__7954__auto___13608, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  cljs$core$async$map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$map__2.call(this, f, chs);
      case 3:
        return cljs$core$async$map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$map.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$map__2;
  cljs$core$async$map.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$map__3;
  return cljs$core$async$map;
}();
cljs.core.async.merge = function() {
  var cljs$core$async$merge = null;
  var cljs$core$async$merge__1 = function(chs) {
    return cljs$core$async$merge.call(null, chs, null);
  };
  var cljs$core$async$merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__7954__auto___13733 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto___13733, out) {
      return function() {
        var f__7955__auto__ = function() {
          var switch__7898__auto__ = function(c__7954__auto___13733, out) {
            return function(state_13709) {
              var state_val_13710 = state_13709[1];
              if (state_val_13710 === 7) {
                var inst_13688 = state_13709[7];
                var inst_13689 = state_13709[8];
                var inst_13688__$1 = state_13709[2];
                var inst_13689__$1 = cljs.core.nth.call(null, inst_13688__$1, 0, null);
                var inst_13690 = cljs.core.nth.call(null, inst_13688__$1, 1, null);
                var inst_13691 = inst_13689__$1 == null;
                var state_13709__$1 = function() {
                  var statearr_13711 = state_13709;
                  statearr_13711[9] = inst_13690;
                  statearr_13711[7] = inst_13688__$1;
                  statearr_13711[8] = inst_13689__$1;
                  return statearr_13711;
                }();
                if (cljs.core.truth_(inst_13691)) {
                  var statearr_13712_13734 = state_13709__$1;
                  statearr_13712_13734[1] = 8;
                } else {
                  var statearr_13713_13735 = state_13709__$1;
                  statearr_13713_13735[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13710 === 1) {
                  var inst_13680 = cljs.core.vec.call(null, chs);
                  var inst_13681 = inst_13680;
                  var state_13709__$1 = function() {
                    var statearr_13714 = state_13709;
                    statearr_13714[10] = inst_13681;
                    return statearr_13714;
                  }();
                  var statearr_13715_13736 = state_13709__$1;
                  statearr_13715_13736[2] = null;
                  statearr_13715_13736[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13710 === 4) {
                    var inst_13681 = state_13709[10];
                    var state_13709__$1 = state_13709;
                    return cljs.core.async.ioc_alts_BANG_.call(null, state_13709__$1, 7, inst_13681);
                  } else {
                    if (state_val_13710 === 6) {
                      var inst_13705 = state_13709[2];
                      var state_13709__$1 = state_13709;
                      var statearr_13716_13737 = state_13709__$1;
                      statearr_13716_13737[2] = inst_13705;
                      statearr_13716_13737[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13710 === 3) {
                        var inst_13707 = state_13709[2];
                        var state_13709__$1 = state_13709;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13709__$1, inst_13707);
                      } else {
                        if (state_val_13710 === 2) {
                          var inst_13681 = state_13709[10];
                          var inst_13683 = cljs.core.count.call(null, inst_13681);
                          var inst_13684 = inst_13683 > 0;
                          var state_13709__$1 = state_13709;
                          if (cljs.core.truth_(inst_13684)) {
                            var statearr_13718_13738 = state_13709__$1;
                            statearr_13718_13738[1] = 4;
                          } else {
                            var statearr_13719_13739 = state_13709__$1;
                            statearr_13719_13739[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13710 === 11) {
                            var inst_13681 = state_13709[10];
                            var inst_13698 = state_13709[2];
                            var tmp13717 = inst_13681;
                            var inst_13681__$1 = tmp13717;
                            var state_13709__$1 = function() {
                              var statearr_13720 = state_13709;
                              statearr_13720[11] = inst_13698;
                              statearr_13720[10] = inst_13681__$1;
                              return statearr_13720;
                            }();
                            var statearr_13721_13740 = state_13709__$1;
                            statearr_13721_13740[2] = null;
                            statearr_13721_13740[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13710 === 9) {
                              var inst_13689 = state_13709[8];
                              var state_13709__$1 = state_13709;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13709__$1, 11, out, inst_13689);
                            } else {
                              if (state_val_13710 === 5) {
                                var inst_13703 = cljs.core.async.close_BANG_.call(null, out);
                                var state_13709__$1 = state_13709;
                                var statearr_13722_13741 = state_13709__$1;
                                statearr_13722_13741[2] = inst_13703;
                                statearr_13722_13741[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13710 === 10) {
                                  var inst_13701 = state_13709[2];
                                  var state_13709__$1 = state_13709;
                                  var statearr_13723_13742 = state_13709__$1;
                                  statearr_13723_13742[2] = inst_13701;
                                  statearr_13723_13742[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13710 === 8) {
                                    var inst_13690 = state_13709[9];
                                    var inst_13688 = state_13709[7];
                                    var inst_13689 = state_13709[8];
                                    var inst_13681 = state_13709[10];
                                    var inst_13693 = function() {
                                      var c = inst_13690;
                                      var v = inst_13689;
                                      var vec__13686 = inst_13688;
                                      var cs = inst_13681;
                                      return function(c, v, vec__13686, cs, inst_13690, inst_13688, inst_13689, inst_13681, state_val_13710, c__7954__auto___13733, out) {
                                        return function(p1__13626_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__13626_SHARP_);
                                        };
                                      }(c, v, vec__13686, cs, inst_13690, inst_13688, inst_13689, inst_13681, state_val_13710, c__7954__auto___13733, out);
                                    }();
                                    var inst_13694 = cljs.core.filterv.call(null, inst_13693, inst_13681);
                                    var inst_13681__$1 = inst_13694;
                                    var state_13709__$1 = function() {
                                      var statearr_13724 = state_13709;
                                      statearr_13724[10] = inst_13681__$1;
                                      return statearr_13724;
                                    }();
                                    var statearr_13725_13743 = state_13709__$1;
                                    statearr_13725_13743[2] = null;
                                    statearr_13725_13743[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7954__auto___13733, out);
          return function(switch__7898__auto__, c__7954__auto___13733, out) {
            return function() {
              var cljs$core$async$merge_$_state_machine__7899__auto__ = null;
              var cljs$core$async$merge_$_state_machine__7899__auto____0 = function() {
                var statearr_13729 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_13729[0] = cljs$core$async$merge_$_state_machine__7899__auto__;
                statearr_13729[1] = 1;
                return statearr_13729;
              };
              var cljs$core$async$merge_$_state_machine__7899__auto____1 = function(state_13709) {
                while (true) {
                  var ret_value__7900__auto__ = function() {
                    try {
                      while (true) {
                        var result__7901__auto__ = switch__7898__auto__.call(null, state_13709);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7901__auto__;
                        }
                        break;
                      }
                    } catch (e13730) {
                      if (e13730 instanceof Object) {
                        var ex__7902__auto__ = e13730;
                        var statearr_13731_13744 = state_13709;
                        statearr_13731_13744[5] = ex__7902__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13709);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e13730;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__13745 = state_13709;
                    state_13709 = G__13745;
                    continue;
                  } else {
                    return ret_value__7900__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$merge_$_state_machine__7899__auto__ = function(state_13709) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$merge_$_state_machine__7899__auto____0.call(this);
                  case 1:
                    return cljs$core$async$merge_$_state_machine__7899__auto____1.call(this, state_13709);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$merge_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$merge_$_state_machine__7899__auto____0;
              cljs$core$async$merge_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$merge_$_state_machine__7899__auto____1;
              return cljs$core$async$merge_$_state_machine__7899__auto__;
            }();
          }(switch__7898__auto__, c__7954__auto___13733, out);
        }();
        var state__7956__auto__ = function() {
          var statearr_13732 = f__7955__auto__.call(null);
          statearr_13732[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto___13733;
          return statearr_13732;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
      };
    }(c__7954__auto___13733, out));
    return out;
  };
  cljs$core$async$merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$merge__1.call(this, chs);
      case 2:
        return cljs$core$async$merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$merge.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$merge__1;
  cljs$core$async$merge.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$merge__2;
  return cljs$core$async$merge;
}();
cljs.core.async.into = function cljs$core$async$into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var cljs$core$async$take = null;
  var cljs$core$async$take__2 = function(n, ch) {
    return cljs$core$async$take.call(null, n, ch, null);
  };
  var cljs$core$async$take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__7954__auto___13838 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto___13838, out) {
      return function() {
        var f__7955__auto__ = function() {
          var switch__7898__auto__ = function(c__7954__auto___13838, out) {
            return function(state_13815) {
              var state_val_13816 = state_13815[1];
              if (state_val_13816 === 7) {
                var inst_13797 = state_13815[7];
                var inst_13797__$1 = state_13815[2];
                var inst_13798 = inst_13797__$1 == null;
                var inst_13799 = cljs.core.not.call(null, inst_13798);
                var state_13815__$1 = function() {
                  var statearr_13817 = state_13815;
                  statearr_13817[7] = inst_13797__$1;
                  return statearr_13817;
                }();
                if (inst_13799) {
                  var statearr_13818_13839 = state_13815__$1;
                  statearr_13818_13839[1] = 8;
                } else {
                  var statearr_13819_13840 = state_13815__$1;
                  statearr_13819_13840[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13816 === 1) {
                  var inst_13792 = 0;
                  var state_13815__$1 = function() {
                    var statearr_13820 = state_13815;
                    statearr_13820[8] = inst_13792;
                    return statearr_13820;
                  }();
                  var statearr_13821_13841 = state_13815__$1;
                  statearr_13821_13841[2] = null;
                  statearr_13821_13841[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13816 === 4) {
                    var state_13815__$1 = state_13815;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13815__$1, 7, ch);
                  } else {
                    if (state_val_13816 === 6) {
                      var inst_13810 = state_13815[2];
                      var state_13815__$1 = state_13815;
                      var statearr_13822_13842 = state_13815__$1;
                      statearr_13822_13842[2] = inst_13810;
                      statearr_13822_13842[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13816 === 3) {
                        var inst_13812 = state_13815[2];
                        var inst_13813 = cljs.core.async.close_BANG_.call(null, out);
                        var state_13815__$1 = function() {
                          var statearr_13823 = state_13815;
                          statearr_13823[9] = inst_13812;
                          return statearr_13823;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13815__$1, inst_13813);
                      } else {
                        if (state_val_13816 === 2) {
                          var inst_13792 = state_13815[8];
                          var inst_13794 = inst_13792 < n;
                          var state_13815__$1 = state_13815;
                          if (cljs.core.truth_(inst_13794)) {
                            var statearr_13824_13843 = state_13815__$1;
                            statearr_13824_13843[1] = 4;
                          } else {
                            var statearr_13825_13844 = state_13815__$1;
                            statearr_13825_13844[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13816 === 11) {
                            var inst_13792 = state_13815[8];
                            var inst_13802 = state_13815[2];
                            var inst_13803 = inst_13792 + 1;
                            var inst_13792__$1 = inst_13803;
                            var state_13815__$1 = function() {
                              var statearr_13826 = state_13815;
                              statearr_13826[10] = inst_13802;
                              statearr_13826[8] = inst_13792__$1;
                              return statearr_13826;
                            }();
                            var statearr_13827_13845 = state_13815__$1;
                            statearr_13827_13845[2] = null;
                            statearr_13827_13845[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13816 === 9) {
                              var state_13815__$1 = state_13815;
                              var statearr_13828_13846 = state_13815__$1;
                              statearr_13828_13846[2] = null;
                              statearr_13828_13846[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13816 === 5) {
                                var state_13815__$1 = state_13815;
                                var statearr_13829_13847 = state_13815__$1;
                                statearr_13829_13847[2] = null;
                                statearr_13829_13847[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13816 === 10) {
                                  var inst_13807 = state_13815[2];
                                  var state_13815__$1 = state_13815;
                                  var statearr_13830_13848 = state_13815__$1;
                                  statearr_13830_13848[2] = inst_13807;
                                  statearr_13830_13848[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13816 === 8) {
                                    var inst_13797 = state_13815[7];
                                    var state_13815__$1 = state_13815;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13815__$1, 11, out, inst_13797);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7954__auto___13838, out);
          return function(switch__7898__auto__, c__7954__auto___13838, out) {
            return function() {
              var cljs$core$async$take_$_state_machine__7899__auto__ = null;
              var cljs$core$async$take_$_state_machine__7899__auto____0 = function() {
                var statearr_13834 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_13834[0] = cljs$core$async$take_$_state_machine__7899__auto__;
                statearr_13834[1] = 1;
                return statearr_13834;
              };
              var cljs$core$async$take_$_state_machine__7899__auto____1 = function(state_13815) {
                while (true) {
                  var ret_value__7900__auto__ = function() {
                    try {
                      while (true) {
                        var result__7901__auto__ = switch__7898__auto__.call(null, state_13815);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7901__auto__;
                        }
                        break;
                      }
                    } catch (e13835) {
                      if (e13835 instanceof Object) {
                        var ex__7902__auto__ = e13835;
                        var statearr_13836_13849 = state_13815;
                        statearr_13836_13849[5] = ex__7902__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13815);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e13835;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__13850 = state_13815;
                    state_13815 = G__13850;
                    continue;
                  } else {
                    return ret_value__7900__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$take_$_state_machine__7899__auto__ = function(state_13815) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$take_$_state_machine__7899__auto____0.call(this);
                  case 1:
                    return cljs$core$async$take_$_state_machine__7899__auto____1.call(this, state_13815);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$take_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$take_$_state_machine__7899__auto____0;
              cljs$core$async$take_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$take_$_state_machine__7899__auto____1;
              return cljs$core$async$take_$_state_machine__7899__auto__;
            }();
          }(switch__7898__auto__, c__7954__auto___13838, out);
        }();
        var state__7956__auto__ = function() {
          var statearr_13837 = f__7955__auto__.call(null);
          statearr_13837[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto___13838;
          return statearr_13837;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
      };
    }(c__7954__auto___13838, out));
    return out;
  };
  cljs$core$async$take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$take__2.call(this, n, ch);
      case 3:
        return cljs$core$async$take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$take.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$take__2;
  cljs$core$async$take.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$take__3;
  return cljs$core$async$take;
}();
cljs.core.async.map_LT_ = function cljs$core$async$map_LT_(f, ch) {
  if (typeof cljs.core.async.t13858 !== "undefined") {
  } else {
    cljs.core.async.t13858 = function(ch, f, map_LT_, meta13859) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta13859 = meta13859;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t13858.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t13858.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t13858.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t13858.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t13861 !== "undefined") {
        } else {
          cljs.core.async.t13861 = function(fn1, _, meta13859, map_LT_, f, ch, meta13862) {
            this.fn1 = fn1;
            this._ = _;
            this.meta13859 = meta13859;
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta13862 = meta13862;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t13861.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t13861.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t13861.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__13851_SHARP_) {
                  return f1.call(null, p1__13851_SHARP_ == null ? null : self__.f.call(null, p1__13851_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t13861.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_13863) {
              var self__ = this;
              var _13863__$1 = this;
              return self__.meta13862;
            };
          }(___$1);
          cljs.core.async.t13861.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_13863, meta13862__$1) {
              var self__ = this;
              var _13863__$1 = this;
              return new cljs.core.async.t13861(self__.fn1, self__._, self__.meta13859, self__.map_LT_, self__.f, self__.ch, meta13862__$1);
            };
          }(___$1);
          cljs.core.async.t13861.cljs$lang$type = true;
          cljs.core.async.t13861.cljs$lang$ctorStr = "cljs.core.async/t13861";
          cljs.core.async.t13861.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
              return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t13861");
            };
          }(___$1);
          cljs.core.async.__GT_t13861 = function(___$1) {
            return function cljs$core$async$map_LT__$___GT_t13861(fn1__$1, ___$2, meta13859__$1, map_LT___$1, f__$1, ch__$1, meta13862) {
              return new cljs.core.async.t13861(fn1__$1, ___$2, meta13859__$1, map_LT___$1, f__$1, ch__$1, meta13862);
            };
          }(___$1);
        }
        return new cljs.core.async.t13861(fn1, ___$1, self__.meta13859, self__.map_LT_, self__.f, self__.ch, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__4110__auto__ = ret;
        if (cljs.core.truth_(and__4110__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__4110__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t13858.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t13858.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t13858.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t13858.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13860) {
      var self__ = this;
      var _13860__$1 = this;
      return self__.meta13859;
    };
    cljs.core.async.t13858.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13860, meta13859__$1) {
      var self__ = this;
      var _13860__$1 = this;
      return new cljs.core.async.t13858(self__.ch, self__.f, self__.map_LT_, meta13859__$1);
    };
    cljs.core.async.t13858.cljs$lang$type = true;
    cljs.core.async.t13858.cljs$lang$ctorStr = "cljs.core.async/t13858";
    cljs.core.async.t13858.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t13858");
    };
    cljs.core.async.__GT_t13858 = function cljs$core$async$map_LT__$___GT_t13858(ch__$1, f__$1, map_LT___$1, meta13859) {
      return new cljs.core.async.t13858(ch__$1, f__$1, map_LT___$1, meta13859);
    };
  }
  return new cljs.core.async.t13858(ch, f, cljs$core$async$map_LT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function cljs$core$async$map_GT_(f, ch) {
  if (typeof cljs.core.async.t13867 !== "undefined") {
  } else {
    cljs.core.async.t13867 = function(ch, f, map_GT_, meta13868) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta13868 = meta13868;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t13867.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t13867.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t13867.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t13867.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t13867.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t13867.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t13867.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13869) {
      var self__ = this;
      var _13869__$1 = this;
      return self__.meta13868;
    };
    cljs.core.async.t13867.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13869, meta13868__$1) {
      var self__ = this;
      var _13869__$1 = this;
      return new cljs.core.async.t13867(self__.ch, self__.f, self__.map_GT_, meta13868__$1);
    };
    cljs.core.async.t13867.cljs$lang$type = true;
    cljs.core.async.t13867.cljs$lang$ctorStr = "cljs.core.async/t13867";
    cljs.core.async.t13867.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t13867");
    };
    cljs.core.async.__GT_t13867 = function cljs$core$async$map_GT__$___GT_t13867(ch__$1, f__$1, map_GT___$1, meta13868) {
      return new cljs.core.async.t13867(ch__$1, f__$1, map_GT___$1, meta13868);
    };
  }
  return new cljs.core.async.t13867(ch, f, cljs$core$async$map_GT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function cljs$core$async$filter_GT_(p, ch) {
  if (typeof cljs.core.async.t13873 !== "undefined") {
  } else {
    cljs.core.async.t13873 = function(ch, p, filter_GT_, meta13874) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta13874 = meta13874;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t13873.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t13873.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t13873.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t13873.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t13873.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t13873.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t13873.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t13873.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13875) {
      var self__ = this;
      var _13875__$1 = this;
      return self__.meta13874;
    };
    cljs.core.async.t13873.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13875, meta13874__$1) {
      var self__ = this;
      var _13875__$1 = this;
      return new cljs.core.async.t13873(self__.ch, self__.p, self__.filter_GT_, meta13874__$1);
    };
    cljs.core.async.t13873.cljs$lang$type = true;
    cljs.core.async.t13873.cljs$lang$ctorStr = "cljs.core.async/t13873";
    cljs.core.async.t13873.cljs$lang$ctorPrWriter = function(this__4701__auto__, writer__4702__auto__, opt__4703__auto__) {
      return cljs.core._write.call(null, writer__4702__auto__, "cljs.core.async/t13873");
    };
    cljs.core.async.__GT_t13873 = function cljs$core$async$filter_GT__$___GT_t13873(ch__$1, p__$1, filter_GT___$1, meta13874) {
      return new cljs.core.async.t13873(ch__$1, p__$1, filter_GT___$1, meta13874);
    };
  }
  return new cljs.core.async.t13873(ch, p, cljs$core$async$filter_GT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function cljs$core$async$remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var cljs$core$async$filter_LT_ = null;
  var cljs$core$async$filter_LT___2 = function(p, ch) {
    return cljs$core$async$filter_LT_.call(null, p, ch, null);
  };
  var cljs$core$async$filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__7954__auto___13958 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto___13958, out) {
      return function() {
        var f__7955__auto__ = function() {
          var switch__7898__auto__ = function(c__7954__auto___13958, out) {
            return function(state_13937) {
              var state_val_13938 = state_13937[1];
              if (state_val_13938 === 7) {
                var inst_13933 = state_13937[2];
                var state_13937__$1 = state_13937;
                var statearr_13939_13959 = state_13937__$1;
                statearr_13939_13959[2] = inst_13933;
                statearr_13939_13959[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13938 === 1) {
                  var state_13937__$1 = state_13937;
                  var statearr_13940_13960 = state_13937__$1;
                  statearr_13940_13960[2] = null;
                  statearr_13940_13960[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13938 === 4) {
                    var inst_13919 = state_13937[7];
                    var inst_13919__$1 = state_13937[2];
                    var inst_13920 = inst_13919__$1 == null;
                    var state_13937__$1 = function() {
                      var statearr_13941 = state_13937;
                      statearr_13941[7] = inst_13919__$1;
                      return statearr_13941;
                    }();
                    if (cljs.core.truth_(inst_13920)) {
                      var statearr_13942_13961 = state_13937__$1;
                      statearr_13942_13961[1] = 5;
                    } else {
                      var statearr_13943_13962 = state_13937__$1;
                      statearr_13943_13962[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13938 === 6) {
                      var inst_13919 = state_13937[7];
                      var inst_13924 = p.call(null, inst_13919);
                      var state_13937__$1 = state_13937;
                      if (cljs.core.truth_(inst_13924)) {
                        var statearr_13944_13963 = state_13937__$1;
                        statearr_13944_13963[1] = 8;
                      } else {
                        var statearr_13945_13964 = state_13937__$1;
                        statearr_13945_13964[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13938 === 3) {
                        var inst_13935 = state_13937[2];
                        var state_13937__$1 = state_13937;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13937__$1, inst_13935);
                      } else {
                        if (state_val_13938 === 2) {
                          var state_13937__$1 = state_13937;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13937__$1, 4, ch);
                        } else {
                          if (state_val_13938 === 11) {
                            var inst_13927 = state_13937[2];
                            var state_13937__$1 = state_13937;
                            var statearr_13946_13965 = state_13937__$1;
                            statearr_13946_13965[2] = inst_13927;
                            statearr_13946_13965[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13938 === 9) {
                              var state_13937__$1 = state_13937;
                              var statearr_13947_13966 = state_13937__$1;
                              statearr_13947_13966[2] = null;
                              statearr_13947_13966[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13938 === 5) {
                                var inst_13922 = cljs.core.async.close_BANG_.call(null, out);
                                var state_13937__$1 = state_13937;
                                var statearr_13948_13967 = state_13937__$1;
                                statearr_13948_13967[2] = inst_13922;
                                statearr_13948_13967[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13938 === 10) {
                                  var inst_13930 = state_13937[2];
                                  var state_13937__$1 = function() {
                                    var statearr_13949 = state_13937;
                                    statearr_13949[8] = inst_13930;
                                    return statearr_13949;
                                  }();
                                  var statearr_13950_13968 = state_13937__$1;
                                  statearr_13950_13968[2] = null;
                                  statearr_13950_13968[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13938 === 8) {
                                    var inst_13919 = state_13937[7];
                                    var state_13937__$1 = state_13937;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13937__$1, 11, out, inst_13919);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7954__auto___13958, out);
          return function(switch__7898__auto__, c__7954__auto___13958, out) {
            return function() {
              var cljs$core$async$filter_LT__$_state_machine__7899__auto__ = null;
              var cljs$core$async$filter_LT__$_state_machine__7899__auto____0 = function() {
                var statearr_13954 = [null, null, null, null, null, null, null, null, null];
                statearr_13954[0] = cljs$core$async$filter_LT__$_state_machine__7899__auto__;
                statearr_13954[1] = 1;
                return statearr_13954;
              };
              var cljs$core$async$filter_LT__$_state_machine__7899__auto____1 = function(state_13937) {
                while (true) {
                  var ret_value__7900__auto__ = function() {
                    try {
                      while (true) {
                        var result__7901__auto__ = switch__7898__auto__.call(null, state_13937);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7901__auto__;
                        }
                        break;
                      }
                    } catch (e13955) {
                      if (e13955 instanceof Object) {
                        var ex__7902__auto__ = e13955;
                        var statearr_13956_13969 = state_13937;
                        statearr_13956_13969[5] = ex__7902__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13937);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e13955;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__13970 = state_13937;
                    state_13937 = G__13970;
                    continue;
                  } else {
                    return ret_value__7900__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$filter_LT__$_state_machine__7899__auto__ = function(state_13937) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$filter_LT__$_state_machine__7899__auto____0.call(this);
                  case 1:
                    return cljs$core$async$filter_LT__$_state_machine__7899__auto____1.call(this, state_13937);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$filter_LT__$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$filter_LT__$_state_machine__7899__auto____0;
              cljs$core$async$filter_LT__$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$filter_LT__$_state_machine__7899__auto____1;
              return cljs$core$async$filter_LT__$_state_machine__7899__auto__;
            }();
          }(switch__7898__auto__, c__7954__auto___13958, out);
        }();
        var state__7956__auto__ = function() {
          var statearr_13957 = f__7955__auto__.call(null);
          statearr_13957[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto___13958;
          return statearr_13957;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
      };
    }(c__7954__auto___13958, out));
    return out;
  };
  cljs$core$async$filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$filter_LT___2.call(this, p, ch);
      case 3:
        return cljs$core$async$filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$filter_LT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$filter_LT___2;
  cljs$core$async$filter_LT_.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$filter_LT___3;
  return cljs$core$async$filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var cljs$core$async$remove_LT_ = null;
  var cljs$core$async$remove_LT___2 = function(p, ch) {
    return cljs$core$async$remove_LT_.call(null, p, ch, null);
  };
  var cljs$core$async$remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  cljs$core$async$remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$remove_LT___2.call(this, p, ch);
      case 3:
        return cljs$core$async$remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$remove_LT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$remove_LT___2;
  cljs$core$async$remove_LT_.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$remove_LT___3;
  return cljs$core$async$remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function cljs$core$async$mapcat_STAR_(f, in$, out) {
  var c__7954__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto__) {
    return function() {
      var f__7955__auto__ = function() {
        var switch__7898__auto__ = function(c__7954__auto__) {
          return function(state_14136) {
            var state_val_14137 = state_14136[1];
            if (state_val_14137 === 7) {
              var inst_14132 = state_14136[2];
              var state_14136__$1 = state_14136;
              var statearr_14138_14179 = state_14136__$1;
              statearr_14138_14179[2] = inst_14132;
              statearr_14138_14179[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14137 === 20) {
                var inst_14102 = state_14136[7];
                var inst_14113 = state_14136[2];
                var inst_14114 = cljs.core.next.call(null, inst_14102);
                var inst_14088 = inst_14114;
                var inst_14089 = null;
                var inst_14090 = 0;
                var inst_14091 = 0;
                var state_14136__$1 = function() {
                  var statearr_14139 = state_14136;
                  statearr_14139[8] = inst_14088;
                  statearr_14139[9] = inst_14091;
                  statearr_14139[10] = inst_14090;
                  statearr_14139[11] = inst_14089;
                  statearr_14139[12] = inst_14113;
                  return statearr_14139;
                }();
                var statearr_14140_14180 = state_14136__$1;
                statearr_14140_14180[2] = null;
                statearr_14140_14180[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14137 === 1) {
                  var state_14136__$1 = state_14136;
                  var statearr_14141_14181 = state_14136__$1;
                  statearr_14141_14181[2] = null;
                  statearr_14141_14181[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14137 === 4) {
                    var inst_14077 = state_14136[13];
                    var inst_14077__$1 = state_14136[2];
                    var inst_14078 = inst_14077__$1 == null;
                    var state_14136__$1 = function() {
                      var statearr_14142 = state_14136;
                      statearr_14142[13] = inst_14077__$1;
                      return statearr_14142;
                    }();
                    if (cljs.core.truth_(inst_14078)) {
                      var statearr_14143_14182 = state_14136__$1;
                      statearr_14143_14182[1] = 5;
                    } else {
                      var statearr_14144_14183 = state_14136__$1;
                      statearr_14144_14183[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14137 === 15) {
                      var state_14136__$1 = state_14136;
                      var statearr_14148_14184 = state_14136__$1;
                      statearr_14148_14184[2] = null;
                      statearr_14148_14184[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14137 === 21) {
                        var state_14136__$1 = state_14136;
                        var statearr_14149_14185 = state_14136__$1;
                        statearr_14149_14185[2] = null;
                        statearr_14149_14185[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14137 === 13) {
                          var inst_14088 = state_14136[8];
                          var inst_14091 = state_14136[9];
                          var inst_14090 = state_14136[10];
                          var inst_14089 = state_14136[11];
                          var inst_14098 = state_14136[2];
                          var inst_14099 = inst_14091 + 1;
                          var tmp14145 = inst_14088;
                          var tmp14146 = inst_14090;
                          var tmp14147 = inst_14089;
                          var inst_14088__$1 = tmp14145;
                          var inst_14089__$1 = tmp14147;
                          var inst_14090__$1 = tmp14146;
                          var inst_14091__$1 = inst_14099;
                          var state_14136__$1 = function() {
                            var statearr_14150 = state_14136;
                            statearr_14150[14] = inst_14098;
                            statearr_14150[8] = inst_14088__$1;
                            statearr_14150[9] = inst_14091__$1;
                            statearr_14150[10] = inst_14090__$1;
                            statearr_14150[11] = inst_14089__$1;
                            return statearr_14150;
                          }();
                          var statearr_14151_14186 = state_14136__$1;
                          statearr_14151_14186[2] = null;
                          statearr_14151_14186[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14137 === 22) {
                            var state_14136__$1 = state_14136;
                            var statearr_14152_14187 = state_14136__$1;
                            statearr_14152_14187[2] = null;
                            statearr_14152_14187[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14137 === 6) {
                              var inst_14077 = state_14136[13];
                              var inst_14086 = f.call(null, inst_14077);
                              var inst_14087 = cljs.core.seq.call(null, inst_14086);
                              var inst_14088 = inst_14087;
                              var inst_14089 = null;
                              var inst_14090 = 0;
                              var inst_14091 = 0;
                              var state_14136__$1 = function() {
                                var statearr_14153 = state_14136;
                                statearr_14153[8] = inst_14088;
                                statearr_14153[9] = inst_14091;
                                statearr_14153[10] = inst_14090;
                                statearr_14153[11] = inst_14089;
                                return statearr_14153;
                              }();
                              var statearr_14154_14188 = state_14136__$1;
                              statearr_14154_14188[2] = null;
                              statearr_14154_14188[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14137 === 17) {
                                var inst_14102 = state_14136[7];
                                var inst_14106 = cljs.core.chunk_first.call(null, inst_14102);
                                var inst_14107 = cljs.core.chunk_rest.call(null, inst_14102);
                                var inst_14108 = cljs.core.count.call(null, inst_14106);
                                var inst_14088 = inst_14107;
                                var inst_14089 = inst_14106;
                                var inst_14090 = inst_14108;
                                var inst_14091 = 0;
                                var state_14136__$1 = function() {
                                  var statearr_14155 = state_14136;
                                  statearr_14155[8] = inst_14088;
                                  statearr_14155[9] = inst_14091;
                                  statearr_14155[10] = inst_14090;
                                  statearr_14155[11] = inst_14089;
                                  return statearr_14155;
                                }();
                                var statearr_14156_14189 = state_14136__$1;
                                statearr_14156_14189[2] = null;
                                statearr_14156_14189[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14137 === 3) {
                                  var inst_14134 = state_14136[2];
                                  var state_14136__$1 = state_14136;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14136__$1, inst_14134);
                                } else {
                                  if (state_val_14137 === 12) {
                                    var inst_14122 = state_14136[2];
                                    var state_14136__$1 = state_14136;
                                    var statearr_14157_14190 = state_14136__$1;
                                    statearr_14157_14190[2] = inst_14122;
                                    statearr_14157_14190[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14137 === 2) {
                                      var state_14136__$1 = state_14136;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14136__$1, 4, in$);
                                    } else {
                                      if (state_val_14137 === 23) {
                                        var inst_14130 = state_14136[2];
                                        var state_14136__$1 = state_14136;
                                        var statearr_14158_14191 = state_14136__$1;
                                        statearr_14158_14191[2] = inst_14130;
                                        statearr_14158_14191[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14137 === 19) {
                                          var inst_14117 = state_14136[2];
                                          var state_14136__$1 = state_14136;
                                          var statearr_14159_14192 = state_14136__$1;
                                          statearr_14159_14192[2] = inst_14117;
                                          statearr_14159_14192[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14137 === 11) {
                                            var inst_14102 = state_14136[7];
                                            var inst_14088 = state_14136[8];
                                            var inst_14102__$1 = cljs.core.seq.call(null, inst_14088);
                                            var state_14136__$1 = function() {
                                              var statearr_14160 = state_14136;
                                              statearr_14160[7] = inst_14102__$1;
                                              return statearr_14160;
                                            }();
                                            if (inst_14102__$1) {
                                              var statearr_14161_14193 = state_14136__$1;
                                              statearr_14161_14193[1] = 14;
                                            } else {
                                              var statearr_14162_14194 = state_14136__$1;
                                              statearr_14162_14194[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_14137 === 9) {
                                              var inst_14124 = state_14136[2];
                                              var inst_14125 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_14136__$1 = function() {
                                                var statearr_14163 = state_14136;
                                                statearr_14163[15] = inst_14124;
                                                return statearr_14163;
                                              }();
                                              if (cljs.core.truth_(inst_14125)) {
                                                var statearr_14164_14195 = state_14136__$1;
                                                statearr_14164_14195[1] = 21;
                                              } else {
                                                var statearr_14165_14196 = state_14136__$1;
                                                statearr_14165_14196[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_14137 === 5) {
                                                var inst_14080 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_14136__$1 = state_14136;
                                                var statearr_14166_14197 = state_14136__$1;
                                                statearr_14166_14197[2] = inst_14080;
                                                statearr_14166_14197[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_14137 === 14) {
                                                  var inst_14102 = state_14136[7];
                                                  var inst_14104 = cljs.core.chunked_seq_QMARK_.call(null, inst_14102);
                                                  var state_14136__$1 = state_14136;
                                                  if (inst_14104) {
                                                    var statearr_14167_14198 = state_14136__$1;
                                                    statearr_14167_14198[1] = 17;
                                                  } else {
                                                    var statearr_14168_14199 = state_14136__$1;
                                                    statearr_14168_14199[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_14137 === 16) {
                                                    var inst_14120 = state_14136[2];
                                                    var state_14136__$1 = state_14136;
                                                    var statearr_14169_14200 = state_14136__$1;
                                                    statearr_14169_14200[2] = inst_14120;
                                                    statearr_14169_14200[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_14137 === 10) {
                                                      var inst_14091 = state_14136[9];
                                                      var inst_14089 = state_14136[11];
                                                      var inst_14096 = cljs.core._nth.call(null, inst_14089, inst_14091);
                                                      var state_14136__$1 = state_14136;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14136__$1, 13, out, inst_14096);
                                                    } else {
                                                      if (state_val_14137 === 18) {
                                                        var inst_14102 = state_14136[7];
                                                        var inst_14111 = cljs.core.first.call(null, inst_14102);
                                                        var state_14136__$1 = state_14136;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14136__$1, 20, out, inst_14111);
                                                      } else {
                                                        if (state_val_14137 === 8) {
                                                          var inst_14091 = state_14136[9];
                                                          var inst_14090 = state_14136[10];
                                                          var inst_14093 = inst_14091 < inst_14090;
                                                          var inst_14094 = inst_14093;
                                                          var state_14136__$1 = state_14136;
                                                          if (cljs.core.truth_(inst_14094)) {
                                                            var statearr_14170_14201 = state_14136__$1;
                                                            statearr_14170_14201[1] = 10;
                                                          } else {
                                                            var statearr_14171_14202 = state_14136__$1;
                                                            statearr_14171_14202[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7954__auto__);
        return function(switch__7898__auto__, c__7954__auto__) {
          return function() {
            var cljs$core$async$mapcat_STAR__$_state_machine__7899__auto__ = null;
            var cljs$core$async$mapcat_STAR__$_state_machine__7899__auto____0 = function() {
              var statearr_14175 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14175[0] = cljs$core$async$mapcat_STAR__$_state_machine__7899__auto__;
              statearr_14175[1] = 1;
              return statearr_14175;
            };
            var cljs$core$async$mapcat_STAR__$_state_machine__7899__auto____1 = function(state_14136) {
              while (true) {
                var ret_value__7900__auto__ = function() {
                  try {
                    while (true) {
                      var result__7901__auto__ = switch__7898__auto__.call(null, state_14136);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7901__auto__;
                      }
                      break;
                    }
                  } catch (e14176) {
                    if (e14176 instanceof Object) {
                      var ex__7902__auto__ = e14176;
                      var statearr_14177_14203 = state_14136;
                      statearr_14177_14203[5] = ex__7902__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14136);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14176;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14204 = state_14136;
                  state_14136 = G__14204;
                  continue;
                } else {
                  return ret_value__7900__auto__;
                }
                break;
              }
            };
            cljs$core$async$mapcat_STAR__$_state_machine__7899__auto__ = function(state_14136) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mapcat_STAR__$_state_machine__7899__auto____0.call(this);
                case 1:
                  return cljs$core$async$mapcat_STAR__$_state_machine__7899__auto____1.call(this, state_14136);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mapcat_STAR__$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mapcat_STAR__$_state_machine__7899__auto____0;
            cljs$core$async$mapcat_STAR__$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mapcat_STAR__$_state_machine__7899__auto____1;
            return cljs$core$async$mapcat_STAR__$_state_machine__7899__auto__;
          }();
        }(switch__7898__auto__, c__7954__auto__);
      }();
      var state__7956__auto__ = function() {
        var statearr_14178 = f__7955__auto__.call(null);
        statearr_14178[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto__;
        return statearr_14178;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
    };
  }(c__7954__auto__));
  return c__7954__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var cljs$core$async$mapcat_LT_ = null;
  var cljs$core$async$mapcat_LT___2 = function(f, in$) {
    return cljs$core$async$mapcat_LT_.call(null, f, in$, null);
  };
  var cljs$core$async$mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  cljs$core$async$mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$mapcat_LT___2.call(this, f, in$);
      case 3:
        return cljs$core$async$mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$mapcat_LT___2;
  cljs$core$async$mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$mapcat_LT___3;
  return cljs$core$async$mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var cljs$core$async$mapcat_GT_ = null;
  var cljs$core$async$mapcat_GT___2 = function(f, out) {
    return cljs$core$async$mapcat_GT_.call(null, f, out, null);
  };
  var cljs$core$async$mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  cljs$core$async$mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$mapcat_GT___2.call(this, f, out);
      case 3:
        return cljs$core$async$mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$mapcat_GT___2;
  cljs$core$async$mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$mapcat_GT___3;
  return cljs$core$async$mapcat_GT_;
}();
cljs.core.async.unique = function() {
  var cljs$core$async$unique = null;
  var cljs$core$async$unique__1 = function(ch) {
    return cljs$core$async$unique.call(null, ch, null);
  };
  var cljs$core$async$unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__7954__auto___14301 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto___14301, out) {
      return function() {
        var f__7955__auto__ = function() {
          var switch__7898__auto__ = function(c__7954__auto___14301, out) {
            return function(state_14276) {
              var state_val_14277 = state_14276[1];
              if (state_val_14277 === 7) {
                var inst_14271 = state_14276[2];
                var state_14276__$1 = state_14276;
                var statearr_14278_14302 = state_14276__$1;
                statearr_14278_14302[2] = inst_14271;
                statearr_14278_14302[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14277 === 1) {
                  var inst_14253 = null;
                  var state_14276__$1 = function() {
                    var statearr_14279 = state_14276;
                    statearr_14279[7] = inst_14253;
                    return statearr_14279;
                  }();
                  var statearr_14280_14303 = state_14276__$1;
                  statearr_14280_14303[2] = null;
                  statearr_14280_14303[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14277 === 4) {
                    var inst_14256 = state_14276[8];
                    var inst_14256__$1 = state_14276[2];
                    var inst_14257 = inst_14256__$1 == null;
                    var inst_14258 = cljs.core.not.call(null, inst_14257);
                    var state_14276__$1 = function() {
                      var statearr_14281 = state_14276;
                      statearr_14281[8] = inst_14256__$1;
                      return statearr_14281;
                    }();
                    if (inst_14258) {
                      var statearr_14282_14304 = state_14276__$1;
                      statearr_14282_14304[1] = 5;
                    } else {
                      var statearr_14283_14305 = state_14276__$1;
                      statearr_14283_14305[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14277 === 6) {
                      var state_14276__$1 = state_14276;
                      var statearr_14284_14306 = state_14276__$1;
                      statearr_14284_14306[2] = null;
                      statearr_14284_14306[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14277 === 3) {
                        var inst_14273 = state_14276[2];
                        var inst_14274 = cljs.core.async.close_BANG_.call(null, out);
                        var state_14276__$1 = function() {
                          var statearr_14285 = state_14276;
                          statearr_14285[9] = inst_14273;
                          return statearr_14285;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14276__$1, inst_14274);
                      } else {
                        if (state_val_14277 === 2) {
                          var state_14276__$1 = state_14276;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14276__$1, 4, ch);
                        } else {
                          if (state_val_14277 === 11) {
                            var inst_14256 = state_14276[8];
                            var inst_14265 = state_14276[2];
                            var inst_14253 = inst_14256;
                            var state_14276__$1 = function() {
                              var statearr_14286 = state_14276;
                              statearr_14286[10] = inst_14265;
                              statearr_14286[7] = inst_14253;
                              return statearr_14286;
                            }();
                            var statearr_14287_14307 = state_14276__$1;
                            statearr_14287_14307[2] = null;
                            statearr_14287_14307[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14277 === 9) {
                              var inst_14256 = state_14276[8];
                              var state_14276__$1 = state_14276;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14276__$1, 11, out, inst_14256);
                            } else {
                              if (state_val_14277 === 5) {
                                var inst_14253 = state_14276[7];
                                var inst_14256 = state_14276[8];
                                var inst_14260 = cljs.core._EQ_.call(null, inst_14256, inst_14253);
                                var state_14276__$1 = state_14276;
                                if (inst_14260) {
                                  var statearr_14289_14308 = state_14276__$1;
                                  statearr_14289_14308[1] = 8;
                                } else {
                                  var statearr_14290_14309 = state_14276__$1;
                                  statearr_14290_14309[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14277 === 10) {
                                  var inst_14268 = state_14276[2];
                                  var state_14276__$1 = state_14276;
                                  var statearr_14291_14310 = state_14276__$1;
                                  statearr_14291_14310[2] = inst_14268;
                                  statearr_14291_14310[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14277 === 8) {
                                    var inst_14253 = state_14276[7];
                                    var tmp14288 = inst_14253;
                                    var inst_14253__$1 = tmp14288;
                                    var state_14276__$1 = function() {
                                      var statearr_14292 = state_14276;
                                      statearr_14292[7] = inst_14253__$1;
                                      return statearr_14292;
                                    }();
                                    var statearr_14293_14311 = state_14276__$1;
                                    statearr_14293_14311[2] = null;
                                    statearr_14293_14311[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7954__auto___14301, out);
          return function(switch__7898__auto__, c__7954__auto___14301, out) {
            return function() {
              var cljs$core$async$unique_$_state_machine__7899__auto__ = null;
              var cljs$core$async$unique_$_state_machine__7899__auto____0 = function() {
                var statearr_14297 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_14297[0] = cljs$core$async$unique_$_state_machine__7899__auto__;
                statearr_14297[1] = 1;
                return statearr_14297;
              };
              var cljs$core$async$unique_$_state_machine__7899__auto____1 = function(state_14276) {
                while (true) {
                  var ret_value__7900__auto__ = function() {
                    try {
                      while (true) {
                        var result__7901__auto__ = switch__7898__auto__.call(null, state_14276);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7901__auto__;
                        }
                        break;
                      }
                    } catch (e14298) {
                      if (e14298 instanceof Object) {
                        var ex__7902__auto__ = e14298;
                        var statearr_14299_14312 = state_14276;
                        statearr_14299_14312[5] = ex__7902__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14276);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e14298;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__14313 = state_14276;
                    state_14276 = G__14313;
                    continue;
                  } else {
                    return ret_value__7900__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$unique_$_state_machine__7899__auto__ = function(state_14276) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$unique_$_state_machine__7899__auto____0.call(this);
                  case 1:
                    return cljs$core$async$unique_$_state_machine__7899__auto____1.call(this, state_14276);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$unique_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$unique_$_state_machine__7899__auto____0;
              cljs$core$async$unique_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$unique_$_state_machine__7899__auto____1;
              return cljs$core$async$unique_$_state_machine__7899__auto__;
            }();
          }(switch__7898__auto__, c__7954__auto___14301, out);
        }();
        var state__7956__auto__ = function() {
          var statearr_14300 = f__7955__auto__.call(null);
          statearr_14300[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto___14301;
          return statearr_14300;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
      };
    }(c__7954__auto___14301, out));
    return out;
  };
  cljs$core$async$unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return cljs$core$async$unique__1.call(this, ch);
      case 2:
        return cljs$core$async$unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$unique.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$unique__1;
  cljs$core$async$unique.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$unique__2;
  return cljs$core$async$unique;
}();
cljs.core.async.partition = function() {
  var cljs$core$async$partition = null;
  var cljs$core$async$partition__2 = function(n, ch) {
    return cljs$core$async$partition.call(null, n, ch, null);
  };
  var cljs$core$async$partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__7954__auto___14448 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto___14448, out) {
      return function() {
        var f__7955__auto__ = function() {
          var switch__7898__auto__ = function(c__7954__auto___14448, out) {
            return function(state_14418) {
              var state_val_14419 = state_14418[1];
              if (state_val_14419 === 7) {
                var inst_14414 = state_14418[2];
                var state_14418__$1 = state_14418;
                var statearr_14420_14449 = state_14418__$1;
                statearr_14420_14449[2] = inst_14414;
                statearr_14420_14449[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14419 === 1) {
                  var inst_14381 = new Array(n);
                  var inst_14382 = inst_14381;
                  var inst_14383 = 0;
                  var state_14418__$1 = function() {
                    var statearr_14421 = state_14418;
                    statearr_14421[7] = inst_14382;
                    statearr_14421[8] = inst_14383;
                    return statearr_14421;
                  }();
                  var statearr_14422_14450 = state_14418__$1;
                  statearr_14422_14450[2] = null;
                  statearr_14422_14450[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14419 === 4) {
                    var inst_14386 = state_14418[9];
                    var inst_14386__$1 = state_14418[2];
                    var inst_14387 = inst_14386__$1 == null;
                    var inst_14388 = cljs.core.not.call(null, inst_14387);
                    var state_14418__$1 = function() {
                      var statearr_14423 = state_14418;
                      statearr_14423[9] = inst_14386__$1;
                      return statearr_14423;
                    }();
                    if (inst_14388) {
                      var statearr_14424_14451 = state_14418__$1;
                      statearr_14424_14451[1] = 5;
                    } else {
                      var statearr_14425_14452 = state_14418__$1;
                      statearr_14425_14452[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14419 === 15) {
                      var inst_14408 = state_14418[2];
                      var state_14418__$1 = state_14418;
                      var statearr_14426_14453 = state_14418__$1;
                      statearr_14426_14453[2] = inst_14408;
                      statearr_14426_14453[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14419 === 13) {
                        var state_14418__$1 = state_14418;
                        var statearr_14427_14454 = state_14418__$1;
                        statearr_14427_14454[2] = null;
                        statearr_14427_14454[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14419 === 6) {
                          var inst_14383 = state_14418[8];
                          var inst_14404 = inst_14383 > 0;
                          var state_14418__$1 = state_14418;
                          if (cljs.core.truth_(inst_14404)) {
                            var statearr_14428_14455 = state_14418__$1;
                            statearr_14428_14455[1] = 12;
                          } else {
                            var statearr_14429_14456 = state_14418__$1;
                            statearr_14429_14456[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14419 === 3) {
                            var inst_14416 = state_14418[2];
                            var state_14418__$1 = state_14418;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14418__$1, inst_14416);
                          } else {
                            if (state_val_14419 === 12) {
                              var inst_14382 = state_14418[7];
                              var inst_14406 = cljs.core.vec.call(null, inst_14382);
                              var state_14418__$1 = state_14418;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14418__$1, 15, out, inst_14406);
                            } else {
                              if (state_val_14419 === 2) {
                                var state_14418__$1 = state_14418;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14418__$1, 4, ch);
                              } else {
                                if (state_val_14419 === 11) {
                                  var inst_14398 = state_14418[2];
                                  var inst_14399 = new Array(n);
                                  var inst_14382 = inst_14399;
                                  var inst_14383 = 0;
                                  var state_14418__$1 = function() {
                                    var statearr_14430 = state_14418;
                                    statearr_14430[7] = inst_14382;
                                    statearr_14430[10] = inst_14398;
                                    statearr_14430[8] = inst_14383;
                                    return statearr_14430;
                                  }();
                                  var statearr_14431_14457 = state_14418__$1;
                                  statearr_14431_14457[2] = null;
                                  statearr_14431_14457[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14419 === 9) {
                                    var inst_14382 = state_14418[7];
                                    var inst_14396 = cljs.core.vec.call(null, inst_14382);
                                    var state_14418__$1 = state_14418;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14418__$1, 11, out, inst_14396);
                                  } else {
                                    if (state_val_14419 === 5) {
                                      var inst_14382 = state_14418[7];
                                      var inst_14391 = state_14418[11];
                                      var inst_14386 = state_14418[9];
                                      var inst_14383 = state_14418[8];
                                      var inst_14390 = inst_14382[inst_14383] = inst_14386;
                                      var inst_14391__$1 = inst_14383 + 1;
                                      var inst_14392 = inst_14391__$1 < n;
                                      var state_14418__$1 = function() {
                                        var statearr_14432 = state_14418;
                                        statearr_14432[11] = inst_14391__$1;
                                        statearr_14432[12] = inst_14390;
                                        return statearr_14432;
                                      }();
                                      if (cljs.core.truth_(inst_14392)) {
                                        var statearr_14433_14458 = state_14418__$1;
                                        statearr_14433_14458[1] = 8;
                                      } else {
                                        var statearr_14434_14459 = state_14418__$1;
                                        statearr_14434_14459[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14419 === 14) {
                                        var inst_14411 = state_14418[2];
                                        var inst_14412 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_14418__$1 = function() {
                                          var statearr_14436 = state_14418;
                                          statearr_14436[13] = inst_14411;
                                          return statearr_14436;
                                        }();
                                        var statearr_14437_14460 = state_14418__$1;
                                        statearr_14437_14460[2] = inst_14412;
                                        statearr_14437_14460[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14419 === 10) {
                                          var inst_14402 = state_14418[2];
                                          var state_14418__$1 = state_14418;
                                          var statearr_14438_14461 = state_14418__$1;
                                          statearr_14438_14461[2] = inst_14402;
                                          statearr_14438_14461[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14419 === 8) {
                                            var inst_14382 = state_14418[7];
                                            var inst_14391 = state_14418[11];
                                            var tmp14435 = inst_14382;
                                            var inst_14382__$1 = tmp14435;
                                            var inst_14383 = inst_14391;
                                            var state_14418__$1 = function() {
                                              var statearr_14439 = state_14418;
                                              statearr_14439[7] = inst_14382__$1;
                                              statearr_14439[8] = inst_14383;
                                              return statearr_14439;
                                            }();
                                            var statearr_14440_14462 = state_14418__$1;
                                            statearr_14440_14462[2] = null;
                                            statearr_14440_14462[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7954__auto___14448, out);
          return function(switch__7898__auto__, c__7954__auto___14448, out) {
            return function() {
              var cljs$core$async$partition_$_state_machine__7899__auto__ = null;
              var cljs$core$async$partition_$_state_machine__7899__auto____0 = function() {
                var statearr_14444 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_14444[0] = cljs$core$async$partition_$_state_machine__7899__auto__;
                statearr_14444[1] = 1;
                return statearr_14444;
              };
              var cljs$core$async$partition_$_state_machine__7899__auto____1 = function(state_14418) {
                while (true) {
                  var ret_value__7900__auto__ = function() {
                    try {
                      while (true) {
                        var result__7901__auto__ = switch__7898__auto__.call(null, state_14418);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7901__auto__;
                        }
                        break;
                      }
                    } catch (e14445) {
                      if (e14445 instanceof Object) {
                        var ex__7902__auto__ = e14445;
                        var statearr_14446_14463 = state_14418;
                        statearr_14446_14463[5] = ex__7902__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14418);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e14445;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__14464 = state_14418;
                    state_14418 = G__14464;
                    continue;
                  } else {
                    return ret_value__7900__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$partition_$_state_machine__7899__auto__ = function(state_14418) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$partition_$_state_machine__7899__auto____0.call(this);
                  case 1:
                    return cljs$core$async$partition_$_state_machine__7899__auto____1.call(this, state_14418);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$partition_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$partition_$_state_machine__7899__auto____0;
              cljs$core$async$partition_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$partition_$_state_machine__7899__auto____1;
              return cljs$core$async$partition_$_state_machine__7899__auto__;
            }();
          }(switch__7898__auto__, c__7954__auto___14448, out);
        }();
        var state__7956__auto__ = function() {
          var statearr_14447 = f__7955__auto__.call(null);
          statearr_14447[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto___14448;
          return statearr_14447;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
      };
    }(c__7954__auto___14448, out));
    return out;
  };
  cljs$core$async$partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$partition__2.call(this, n, ch);
      case 3:
        return cljs$core$async$partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$partition.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$partition__2;
  cljs$core$async$partition.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$partition__3;
  return cljs$core$async$partition;
}();
cljs.core.async.partition_by = function() {
  var cljs$core$async$partition_by = null;
  var cljs$core$async$partition_by__2 = function(f, ch) {
    return cljs$core$async$partition_by.call(null, f, ch, null);
  };
  var cljs$core$async$partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__7954__auto___14607 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto___14607, out) {
      return function() {
        var f__7955__auto__ = function() {
          var switch__7898__auto__ = function(c__7954__auto___14607, out) {
            return function(state_14577) {
              var state_val_14578 = state_14577[1];
              if (state_val_14578 === 7) {
                var inst_14573 = state_14577[2];
                var state_14577__$1 = state_14577;
                var statearr_14579_14608 = state_14577__$1;
                statearr_14579_14608[2] = inst_14573;
                statearr_14579_14608[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14578 === 1) {
                  var inst_14536 = [];
                  var inst_14537 = inst_14536;
                  var inst_14538 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                  var state_14577__$1 = function() {
                    var statearr_14580 = state_14577;
                    statearr_14580[7] = inst_14537;
                    statearr_14580[8] = inst_14538;
                    return statearr_14580;
                  }();
                  var statearr_14581_14609 = state_14577__$1;
                  statearr_14581_14609[2] = null;
                  statearr_14581_14609[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14578 === 4) {
                    var inst_14541 = state_14577[9];
                    var inst_14541__$1 = state_14577[2];
                    var inst_14542 = inst_14541__$1 == null;
                    var inst_14543 = cljs.core.not.call(null, inst_14542);
                    var state_14577__$1 = function() {
                      var statearr_14582 = state_14577;
                      statearr_14582[9] = inst_14541__$1;
                      return statearr_14582;
                    }();
                    if (inst_14543) {
                      var statearr_14583_14610 = state_14577__$1;
                      statearr_14583_14610[1] = 5;
                    } else {
                      var statearr_14584_14611 = state_14577__$1;
                      statearr_14584_14611[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14578 === 15) {
                      var inst_14567 = state_14577[2];
                      var state_14577__$1 = state_14577;
                      var statearr_14585_14612 = state_14577__$1;
                      statearr_14585_14612[2] = inst_14567;
                      statearr_14585_14612[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14578 === 13) {
                        var state_14577__$1 = state_14577;
                        var statearr_14586_14613 = state_14577__$1;
                        statearr_14586_14613[2] = null;
                        statearr_14586_14613[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14578 === 6) {
                          var inst_14537 = state_14577[7];
                          var inst_14562 = inst_14537.length;
                          var inst_14563 = inst_14562 > 0;
                          var state_14577__$1 = state_14577;
                          if (cljs.core.truth_(inst_14563)) {
                            var statearr_14587_14614 = state_14577__$1;
                            statearr_14587_14614[1] = 12;
                          } else {
                            var statearr_14588_14615 = state_14577__$1;
                            statearr_14588_14615[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14578 === 3) {
                            var inst_14575 = state_14577[2];
                            var state_14577__$1 = state_14577;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14577__$1, inst_14575);
                          } else {
                            if (state_val_14578 === 12) {
                              var inst_14537 = state_14577[7];
                              var inst_14565 = cljs.core.vec.call(null, inst_14537);
                              var state_14577__$1 = state_14577;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14577__$1, 15, out, inst_14565);
                            } else {
                              if (state_val_14578 === 2) {
                                var state_14577__$1 = state_14577;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14577__$1, 4, ch);
                              } else {
                                if (state_val_14578 === 11) {
                                  var inst_14545 = state_14577[10];
                                  var inst_14541 = state_14577[9];
                                  var inst_14555 = state_14577[2];
                                  var inst_14556 = [];
                                  var inst_14557 = inst_14556.push(inst_14541);
                                  var inst_14537 = inst_14556;
                                  var inst_14538 = inst_14545;
                                  var state_14577__$1 = function() {
                                    var statearr_14589 = state_14577;
                                    statearr_14589[11] = inst_14557;
                                    statearr_14589[7] = inst_14537;
                                    statearr_14589[12] = inst_14555;
                                    statearr_14589[8] = inst_14538;
                                    return statearr_14589;
                                  }();
                                  var statearr_14590_14616 = state_14577__$1;
                                  statearr_14590_14616[2] = null;
                                  statearr_14590_14616[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14578 === 9) {
                                    var inst_14537 = state_14577[7];
                                    var inst_14553 = cljs.core.vec.call(null, inst_14537);
                                    var state_14577__$1 = state_14577;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14577__$1, 11, out, inst_14553);
                                  } else {
                                    if (state_val_14578 === 5) {
                                      var inst_14545 = state_14577[10];
                                      var inst_14541 = state_14577[9];
                                      var inst_14538 = state_14577[8];
                                      var inst_14545__$1 = f.call(null, inst_14541);
                                      var inst_14546 = cljs.core._EQ_.call(null, inst_14545__$1, inst_14538);
                                      var inst_14547 = cljs.core.keyword_identical_QMARK_.call(null, inst_14538, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                      var inst_14548 = inst_14546 || inst_14547;
                                      var state_14577__$1 = function() {
                                        var statearr_14591 = state_14577;
                                        statearr_14591[10] = inst_14545__$1;
                                        return statearr_14591;
                                      }();
                                      if (cljs.core.truth_(inst_14548)) {
                                        var statearr_14592_14617 = state_14577__$1;
                                        statearr_14592_14617[1] = 8;
                                      } else {
                                        var statearr_14593_14618 = state_14577__$1;
                                        statearr_14593_14618[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14578 === 14) {
                                        var inst_14570 = state_14577[2];
                                        var inst_14571 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_14577__$1 = function() {
                                          var statearr_14595 = state_14577;
                                          statearr_14595[13] = inst_14570;
                                          return statearr_14595;
                                        }();
                                        var statearr_14596_14619 = state_14577__$1;
                                        statearr_14596_14619[2] = inst_14571;
                                        statearr_14596_14619[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14578 === 10) {
                                          var inst_14560 = state_14577[2];
                                          var state_14577__$1 = state_14577;
                                          var statearr_14597_14620 = state_14577__$1;
                                          statearr_14597_14620[2] = inst_14560;
                                          statearr_14597_14620[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14578 === 8) {
                                            var inst_14545 = state_14577[10];
                                            var inst_14537 = state_14577[7];
                                            var inst_14541 = state_14577[9];
                                            var inst_14550 = inst_14537.push(inst_14541);
                                            var tmp14594 = inst_14537;
                                            var inst_14537__$1 = tmp14594;
                                            var inst_14538 = inst_14545;
                                            var state_14577__$1 = function() {
                                              var statearr_14598 = state_14577;
                                              statearr_14598[7] = inst_14537__$1;
                                              statearr_14598[14] = inst_14550;
                                              statearr_14598[8] = inst_14538;
                                              return statearr_14598;
                                            }();
                                            var statearr_14599_14621 = state_14577__$1;
                                            statearr_14599_14621[2] = null;
                                            statearr_14599_14621[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__7954__auto___14607, out);
          return function(switch__7898__auto__, c__7954__auto___14607, out) {
            return function() {
              var cljs$core$async$partition_by_$_state_machine__7899__auto__ = null;
              var cljs$core$async$partition_by_$_state_machine__7899__auto____0 = function() {
                var statearr_14603 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_14603[0] = cljs$core$async$partition_by_$_state_machine__7899__auto__;
                statearr_14603[1] = 1;
                return statearr_14603;
              };
              var cljs$core$async$partition_by_$_state_machine__7899__auto____1 = function(state_14577) {
                while (true) {
                  var ret_value__7900__auto__ = function() {
                    try {
                      while (true) {
                        var result__7901__auto__ = switch__7898__auto__.call(null, state_14577);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7901__auto__;
                        }
                        break;
                      }
                    } catch (e14604) {
                      if (e14604 instanceof Object) {
                        var ex__7902__auto__ = e14604;
                        var statearr_14605_14622 = state_14577;
                        statearr_14605_14622[5] = ex__7902__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14577);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e14604;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__14623 = state_14577;
                    state_14577 = G__14623;
                    continue;
                  } else {
                    return ret_value__7900__auto__;
                  }
                  break;
                }
              };
              cljs$core$async$partition_by_$_state_machine__7899__auto__ = function(state_14577) {
                switch(arguments.length) {
                  case 0:
                    return cljs$core$async$partition_by_$_state_machine__7899__auto____0.call(this);
                  case 1:
                    return cljs$core$async$partition_by_$_state_machine__7899__auto____1.call(this, state_14577);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs$core$async$partition_by_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$partition_by_$_state_machine__7899__auto____0;
              cljs$core$async$partition_by_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$partition_by_$_state_machine__7899__auto____1;
              return cljs$core$async$partition_by_$_state_machine__7899__auto__;
            }();
          }(switch__7898__auto__, c__7954__auto___14607, out);
        }();
        var state__7956__auto__ = function() {
          var statearr_14606 = f__7955__auto__.call(null);
          statearr_14606[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto___14607;
          return statearr_14606;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
      };
    }(c__7954__auto___14607, out));
    return out;
  };
  cljs$core$async$partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return cljs$core$async$partition_by__2.call(this, f, ch);
      case 3:
        return cljs$core$async$partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cljs$core$async$partition_by.cljs$core$IFn$_invoke$arity$2 = cljs$core$async$partition_by__2;
  cljs$core$async$partition_by.cljs$core$IFn$_invoke$arity$3 = cljs$core$async$partition_by__3;
  return cljs$core$async$partition_by;
}();
goog.provide("forum.core");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("ajax.core");
goog.require("reagent.core");
cljs.core.enable_console_print_BANG_.call(null);
forum.core.backend_request = function forum$core$backend_request(uri, params, func) {
  return ajax.core.ajax_request.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "uri", "uri", -774711847), uri, new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "get", "get", 1683182755), new cljs.core.Keyword(null, "params", "params", 710516235), params, new cljs.core.Keyword(null, "handler", "handler", -195596612), func, new cljs.core.Keyword(null, "format", "format", -1306924766), ajax.core.url_request_format.call(null), new cljs.core.Keyword(null, 
  "response-format", "response-format", 1664465322), ajax.core.json_response_format.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywords?", "keywords?", 764949733), true], null))], null));
};
forum.core.request_child_comments = function forum$core$request_child_comments(comment_id, store, cache) {
  return forum.core.backend_request.call(null, "/child_comments", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "parent_id", "parent_id", -1999171020), comment_id], null), function(p__28164) {
    var vec__28165 = p__28164;
    var ok = cljs.core.nth.call(null, vec__28165, 0, null);
    var response = cljs.core.nth.call(null, vec__28165, 1, null);
    if (cljs.core.truth_(ok)) {
      cljs.core.reset_BANG_.call(null, store, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "children", "children", -940561982), response], null));
      return cljs.core.swap_BANG_.call(null, cache, cljs.core.assoc, comment_id, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "children", "children", -940561982), response], null));
    } else {
      return console.error([cljs.core.str(response)].join(""));
    }
  });
};
forum.core.add_comment = function forum$core$add_comment(question_id, parent_id, user_id, parent_box_toggle, text, error_store) {
  return forum.core.backend_request.call(null, "/add_comment", new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "question_id", "question_id", 174030811), question_id, new cljs.core.Keyword(null, "parent_id", "parent_id", -1999171020), parent_id, new cljs.core.Keyword(null, "user_id", "user_id", 993497112), user_id, new cljs.core.Keyword(null, "text", "text", -1790561697), text], null), function(p__28168) {
    var vec__28169 = p__28168;
    var ok = cljs.core.nth.call(null, vec__28169, 0, null);
    var response = cljs.core.nth.call(null, vec__28169, 1, null);
    if (cljs.core.truth_(ok)) {
      return cljs.core.reset_BANG_.call(null, parent_box_toggle, false);
    } else {
      return cljs.core.reset_BANG_.call(null, error_store, [cljs.core.str(response)].join(""));
    }
  });
};
forum.core.start_resource_provider = function forum$core$start_resource_provider(request_chan) {
  var c = request_chan;
  var cache = reagent.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var c__7954__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto__, c, cache) {
    return function() {
      var f__7955__auto__ = function() {
        var switch__7898__auto__ = function(c__7954__auto__, c, cache) {
          return function(state_28233) {
            var state_val_28234 = state_28233[1];
            if (state_val_28234 === 7) {
              var inst_28219 = state_28233[7];
              var inst_28216 = state_28233[8];
              var inst_28215 = state_28233[2];
              var inst_28216__$1 = (new cljs.core.Keyword(null, "comment-id", "comment-id", -1387285800)).cljs$core$IFn$_invoke$arity$1(inst_28215);
              var inst_28217 = (new cljs.core.Keyword(null, "atom", "atom", -397043653)).cljs$core$IFn$_invoke$arity$1(inst_28215);
              var inst_28218 = cljs.core.deref.call(null, cache);
              var inst_28219__$1 = cljs.core.get.call(null, inst_28218, inst_28216__$1);
              var state_28233__$1 = function() {
                var statearr_28235 = state_28233;
                statearr_28235[7] = inst_28219__$1;
                statearr_28235[9] = inst_28217;
                statearr_28235[8] = inst_28216__$1;
                return statearr_28235;
              }();
              if (cljs.core.truth_(inst_28219__$1)) {
                var statearr_28236_28254 = state_28233__$1;
                statearr_28236_28254[1] = 8;
              } else {
                var statearr_28237_28255 = state_28233__$1;
                statearr_28237_28255[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_28234 === 1) {
                var state_28233__$1 = state_28233;
                var statearr_28238_28256 = state_28233__$1;
                statearr_28238_28256[2] = null;
                statearr_28238_28256[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_28234 === 4) {
                  var state_28233__$1 = state_28233;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_28233__$1, 7, c);
                } else {
                  if (state_val_28234 === 6) {
                    var inst_28229 = state_28233[2];
                    var state_28233__$1 = state_28233;
                    var statearr_28239_28257 = state_28233__$1;
                    statearr_28239_28257[2] = inst_28229;
                    statearr_28239_28257[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_28234 === 3) {
                      var inst_28231 = state_28233[2];
                      var state_28233__$1 = state_28233;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_28233__$1, inst_28231);
                    } else {
                      if (state_val_28234 === 2) {
                        var state_28233__$1 = state_28233;
                        var statearr_28240_28258 = state_28233__$1;
                        statearr_28240_28258[1] = 4;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_28234 === 9) {
                          var inst_28217 = state_28233[9];
                          var inst_28216 = state_28233[8];
                          var inst_28223 = forum.core.request_child_comments.call(null, inst_28216, inst_28217, cache);
                          var state_28233__$1 = state_28233;
                          var statearr_28242_28259 = state_28233__$1;
                          statearr_28242_28259[2] = inst_28223;
                          statearr_28242_28259[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_28234 === 5) {
                            var state_28233__$1 = state_28233;
                            var statearr_28243_28260 = state_28233__$1;
                            statearr_28243_28260[2] = null;
                            statearr_28243_28260[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_28234 === 10) {
                              var inst_28225 = state_28233[2];
                              var state_28233__$1 = function() {
                                var statearr_28244 = state_28233;
                                statearr_28244[10] = inst_28225;
                                return statearr_28244;
                              }();
                              var statearr_28245_28261 = state_28233__$1;
                              statearr_28245_28261[2] = null;
                              statearr_28245_28261[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_28234 === 8) {
                                var inst_28219 = state_28233[7];
                                var inst_28217 = state_28233[9];
                                var inst_28221 = cljs.core.reset_BANG_.call(null, inst_28217, inst_28219);
                                var state_28233__$1 = state_28233;
                                var statearr_28246_28262 = state_28233__$1;
                                statearr_28246_28262[2] = inst_28221;
                                statearr_28246_28262[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7954__auto__, c, cache);
        return function(switch__7898__auto__, c__7954__auto__, c, cache) {
          return function() {
            var forum$core$start_resource_provider_$_state_machine__7899__auto__ = null;
            var forum$core$start_resource_provider_$_state_machine__7899__auto____0 = function() {
              var statearr_28250 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_28250[0] = forum$core$start_resource_provider_$_state_machine__7899__auto__;
              statearr_28250[1] = 1;
              return statearr_28250;
            };
            var forum$core$start_resource_provider_$_state_machine__7899__auto____1 = function(state_28233) {
              while (true) {
                var ret_value__7900__auto__ = function() {
                  try {
                    while (true) {
                      var result__7901__auto__ = switch__7898__auto__.call(null, state_28233);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7901__auto__;
                      }
                      break;
                    }
                  } catch (e28251) {
                    if (e28251 instanceof Object) {
                      var ex__7902__auto__ = e28251;
                      var statearr_28252_28263 = state_28233;
                      statearr_28252_28263[5] = ex__7902__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_28233);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e28251;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__28264 = state_28233;
                  state_28233 = G__28264;
                  continue;
                } else {
                  return ret_value__7900__auto__;
                }
                break;
              }
            };
            forum$core$start_resource_provider_$_state_machine__7899__auto__ = function(state_28233) {
              switch(arguments.length) {
                case 0:
                  return forum$core$start_resource_provider_$_state_machine__7899__auto____0.call(this);
                case 1:
                  return forum$core$start_resource_provider_$_state_machine__7899__auto____1.call(this, state_28233);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            forum$core$start_resource_provider_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = forum$core$start_resource_provider_$_state_machine__7899__auto____0;
            forum$core$start_resource_provider_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = forum$core$start_resource_provider_$_state_machine__7899__auto____1;
            return forum$core$start_resource_provider_$_state_machine__7899__auto__;
          }();
        }(switch__7898__auto__, c__7954__auto__, c, cache);
      }();
      var state__7956__auto__ = function() {
        var statearr_28253 = f__7955__auto__.call(null);
        statearr_28253[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto__;
        return statearr_28253;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
    };
  }(c__7954__auto__, c, cache));
  return c__7954__auto__;
};
forum.core.request_chan = cljs.core.async.chan.call(null);
forum.core.start_resource_provider.call(null, forum.core.request_chan);
forum.core.comment_entry_box = function forum$core$comment_entry_box(p__28266) {
  var map__28268 = p__28266;
  var map__28268__$1 = cljs.core.seq_QMARK_.call(null, map__28268) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28268) : map__28268;
  var error_store = cljs.core.get.call(null, map__28268__$1, new cljs.core.Keyword(null, "error-store", "error-store", -984020518));
  var parent_box_toggle = cljs.core.get.call(null, map__28268__$1, new cljs.core.Keyword(null, "parent-box-toggle", "parent-box-toggle", -1182132907));
  var question_id = cljs.core.get.call(null, map__28268__$1, new cljs.core.Keyword(null, "question-id", "question-id", 529146980));
  var user_id = cljs.core.get.call(null, map__28268__$1, new cljs.core.Keyword(null, "user-id", "user-id", -206822291));
  var parent_id = cljs.core.get.call(null, map__28268__$1, new cljs.core.Keyword(null, "parent-id", "parent-id", -1400729131));
  var txt = reagent.core.atom.call(null, "");
  return function(txt, map__28268, map__28268__$1, error_store, parent_box_toggle, question_id, user_id, parent_id) {
    return function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.comment-entry-box", "div.comment-entry-box", 598106899), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), "text", new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083), 
      "Enter a comment...", new cljs.core.Keyword(null, "value", "value", 305978217), cljs.core.deref.call(null, txt), new cljs.core.Keyword(null, "on-change", "on-change", -732046149), function(txt, map__28268, map__28268__$1, error_store, parent_box_toggle, question_id, user_id, parent_id) {
        return function(p1__28265_SHARP_) {
          return cljs.core.reset_BANG_.call(null, txt, p1__28265_SHARP_.target.value);
        };
      }(txt, map__28268, map__28268__$1, error_store, parent_box_toggle, question_id, user_id, parent_id)], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "button", "button", 1456579943), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function(txt, map__28268, map__28268__$1, error_store, parent_box_toggle, question_id, user_id, parent_id) {
        return function() {
          return forum.core.add_comment.call(null, question_id, parent_id, user_id, parent_box_toggle, cljs.core.deref.call(null, txt), error_store);
        };
      }(txt, map__28268, map__28268__$1, error_store, parent_box_toggle, question_id, user_id, parent_id)], null), "Submit"], null)], null);
    };
  }(txt, map__28268, map__28268__$1, error_store, parent_box_toggle, question_id, user_id, parent_id);
};
forum.core.display_comment = function forum$core$display_comment(req_c, p__28269) {
  var map__28287 = p__28269;
  var map__28287__$1 = cljs.core.seq_QMARK_.call(null, map__28287) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28287) : map__28287;
  var questionid = cljs.core.get.call(null, map__28287__$1, new cljs.core.Keyword(null, "questionid", "questionid", -274916981));
  var commentid = cljs.core.get.call(null, map__28287__$1, new cljs.core.Keyword(null, "commentid", "commentid", 1114919753));
  var text = cljs.core.get.call(null, map__28287__$1, new cljs.core.Keyword(null, "text", "text", -1790561697));
  var userid = cljs.core.get.call(null, map__28287__$1, new cljs.core.Keyword(null, "userid", "userid", 1974246085));
  var expanded = reagent.core.atom.call(null, false);
  var child_comment_atom = reagent.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var showing_comment_entry = reagent.core.atom.call(null, false);
  var error_atom = reagent.core.atom.call(null, "");
  var children_req = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "comment-id", "comment-id", -1387285800), commentid, new cljs.core.Keyword(null, "atom", "atom", -397043653), child_comment_atom], null);
  return function(expanded, child_comment_atom, showing_comment_entry, error_atom, children_req, map__28287, map__28287__$1, questionid, commentid, text, userid) {
    return function() {
      return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.comment-region", "div.comment-region", 1998535834), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.comment-text", "div.comment-text", 968011177), [cljs.core.str("Comment by user id: "), cljs.core.str(userid), cljs.core.str(" with comment id: "), cljs.core.str(commentid)].join("")], null), new cljs.core.PersistentVector(null, 
      2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.comment-text", "div.comment-text", 968011177), text], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.comment-child-toggle", "div.comment-child-toggle", 248589594), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function(expanded, child_comment_atom, showing_comment_entry, error_atom, 
      children_req, map__28287, map__28287__$1, questionid, commentid, text, userid) {
        return function() {
          return cljs.core.swap_BANG_.call(null, expanded, cljs.core.not);
        };
      }(expanded, child_comment_atom, showing_comment_entry, error_atom, children_req, map__28287, map__28287__$1, questionid, commentid, text, userid)], null), cljs.core.truth_(cljs.core.deref.call(null, expanded)) ? "-" : "+"], null), cljs.core.truth_(cljs.core.deref.call(null, expanded)) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.comment-entry-box-toggle", "div.comment-entry-box-toggle", -2130945345), new cljs.core.PersistentArrayMap(null, 
      1, [new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function(expanded, child_comment_atom, showing_comment_entry, error_atom, children_req, map__28287, map__28287__$1, questionid, commentid, text, userid) {
        return function() {
          return cljs.core.swap_BANG_.call(null, showing_comment_entry, cljs.core.not);
        };
      }(expanded, child_comment_atom, showing_comment_entry, error_atom, children_req, map__28287, map__28287__$1, questionid, commentid, text, userid)], null), cljs.core.truth_(cljs.core.deref.call(null, showing_comment_entry)) ? "Abort comment" : "Enter Comment"], null) : null, cljs.core.truth_(cljs.core.deref.call(null, showing_comment_entry)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [forum.core.comment_entry_box, new cljs.core.PersistentArrayMap(null, 
      5, [new cljs.core.Keyword(null, "parent-id", "parent-id", -1400729131), commentid, new cljs.core.Keyword(null, "user-id", "user-id", -206822291), userid, new cljs.core.Keyword(null, "question-id", "question-id", 529146980), questionid, new cljs.core.Keyword(null, "parent-box-toggle", "parent-box-toggle", -1182132907), showing_comment_entry, new cljs.core.Keyword(null, "error-store", "error-store", -984020518), error_atom], null)], null) : null, cljs.core.not_EQ_.call(null, cljs.core.deref.call(null, 
      error_atom), "") ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.error-text", "div.error-text", -1928114148), cljs.core.deref.call(null, error_atom)], null) : null, cljs.core.truth_(cljs.core.deref.call(null, expanded)) ? function() {
        var c__7954__auto___28304 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__7954__auto___28304, expanded, child_comment_atom, showing_comment_entry, error_atom, children_req, map__28287, map__28287__$1, questionid, commentid, text, userid) {
          return function() {
            var f__7955__auto__ = function() {
              var switch__7898__auto__ = function(c__7954__auto___28304, expanded, child_comment_atom, showing_comment_entry, error_atom, children_req, map__28287, map__28287__$1, questionid, commentid, text, userid) {
                return function(state_28291) {
                  var state_val_28292 = state_28291[1];
                  if (state_val_28292 === 2) {
                    var inst_28289 = state_28291[2];
                    var state_28291__$1 = state_28291;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_28291__$1, inst_28289);
                  } else {
                    if (state_val_28292 === 1) {
                      var state_28291__$1 = state_28291;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_28291__$1, 2, req_c, children_req);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__7954__auto___28304, expanded, child_comment_atom, showing_comment_entry, error_atom, children_req, map__28287, map__28287__$1, questionid, commentid, text, userid);
              return function(switch__7898__auto__, c__7954__auto___28304, expanded, child_comment_atom, showing_comment_entry, error_atom, children_req, map__28287, map__28287__$1, questionid, commentid, text, userid) {
                return function() {
                  var forum$core$display_comment_$_state_machine__7899__auto__ = null;
                  var forum$core$display_comment_$_state_machine__7899__auto____0 = function() {
                    var statearr_28296 = [null, null, null, null, null, null, null];
                    statearr_28296[0] = forum$core$display_comment_$_state_machine__7899__auto__;
                    statearr_28296[1] = 1;
                    return statearr_28296;
                  };
                  var forum$core$display_comment_$_state_machine__7899__auto____1 = function(state_28291) {
                    while (true) {
                      var ret_value__7900__auto__ = function() {
                        try {
                          while (true) {
                            var result__7901__auto__ = switch__7898__auto__.call(null, state_28291);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__7901__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__7901__auto__;
                            }
                            break;
                          }
                        } catch (e28297) {
                          if (e28297 instanceof Object) {
                            var ex__7902__auto__ = e28297;
                            var statearr_28298_28305 = state_28291;
                            statearr_28298_28305[5] = ex__7902__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_28291);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e28297;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7900__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__28306 = state_28291;
                        state_28291 = G__28306;
                        continue;
                      } else {
                        return ret_value__7900__auto__;
                      }
                      break;
                    }
                  };
                  forum$core$display_comment_$_state_machine__7899__auto__ = function(state_28291) {
                    switch(arguments.length) {
                      case 0:
                        return forum$core$display_comment_$_state_machine__7899__auto____0.call(this);
                      case 1:
                        return forum$core$display_comment_$_state_machine__7899__auto____1.call(this, state_28291);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  forum$core$display_comment_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$0 = forum$core$display_comment_$_state_machine__7899__auto____0;
                  forum$core$display_comment_$_state_machine__7899__auto__.cljs$core$IFn$_invoke$arity$1 = forum$core$display_comment_$_state_machine__7899__auto____1;
                  return forum$core$display_comment_$_state_machine__7899__auto__;
                }();
              }(switch__7898__auto__, c__7954__auto___28304, expanded, child_comment_atom, showing_comment_entry, error_atom, children_req, map__28287, map__28287__$1, questionid, commentid, text, userid);
            }();
            var state__7956__auto__ = function() {
              var statearr_28299 = f__7955__auto__.call(null);
              statearr_28299[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7954__auto___28304;
              return statearr_28299;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7956__auto__);
          };
        }(c__7954__auto___28304, expanded, child_comment_atom, showing_comment_entry, error_atom, children_req, map__28287, map__28287__$1, questionid, commentid, text, userid));
        var iter__4876__auto__ = function(expanded, child_comment_atom, showing_comment_entry, error_atom, children_req, map__28287, map__28287__$1, questionid, commentid, text, userid) {
          return function forum$core$display_comment_$_iter__28300(s__28301) {
            return new cljs.core.LazySeq(null, function(expanded, child_comment_atom, showing_comment_entry, error_atom, children_req, map__28287, map__28287__$1, questionid, commentid, text, userid) {
              return function() {
                var s__28301__$1 = s__28301;
                while (true) {
                  var temp__4126__auto__ = cljs.core.seq.call(null, s__28301__$1);
                  if (temp__4126__auto__) {
                    var s__28301__$2 = temp__4126__auto__;
                    if (cljs.core.chunked_seq_QMARK_.call(null, s__28301__$2)) {
                      var c__4874__auto__ = cljs.core.chunk_first.call(null, s__28301__$2);
                      var size__4875__auto__ = cljs.core.count.call(null, c__4874__auto__);
                      var b__28303 = cljs.core.chunk_buffer.call(null, size__4875__auto__);
                      if (function() {
                        var i__28302 = 0;
                        while (true) {
                          if (i__28302 < size__4875__auto__) {
                            var child_comment = cljs.core._nth.call(null, c__4874__auto__, i__28302);
                            cljs.core.chunk_append.call(null, b__28303, cljs.core.with_meta(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [forum$core$display_comment, req_c, child_comment], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", -1516042587), (new cljs.core.Keyword(null, "commentid", "commentid", 1114919753)).cljs$core$IFn$_invoke$arity$1(child_comment)], null)));
                            var G__28307 = i__28302 + 1;
                            i__28302 = G__28307;
                            continue;
                          } else {
                            return true;
                          }
                          break;
                        }
                      }()) {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__28303), forum$core$display_comment_$_iter__28300.call(null, cljs.core.chunk_rest.call(null, s__28301__$2)));
                      } else {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__28303), null);
                      }
                    } else {
                      var child_comment = cljs.core.first.call(null, s__28301__$2);
                      return cljs.core.cons.call(null, cljs.core.with_meta(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [forum$core$display_comment, req_c, child_comment], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", -1516042587), (new cljs.core.Keyword(null, "commentid", "commentid", 1114919753)).cljs$core$IFn$_invoke$arity$1(child_comment)], null)), forum$core$display_comment_$_iter__28300.call(null, cljs.core.rest.call(null, 
                      s__28301__$2)));
                    }
                  } else {
                    return null;
                  }
                  break;
                }
              };
            }(expanded, child_comment_atom, showing_comment_entry, error_atom, children_req, map__28287, map__28287__$1, questionid, commentid, text, userid), null, null);
          };
        }(expanded, child_comment_atom, showing_comment_entry, error_atom, children_req, map__28287, map__28287__$1, questionid, commentid, text, userid);
        return iter__4876__auto__.call(null, (new cljs.core.Keyword(null, "children", "children", -940561982)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, child_comment_atom)));
      }() : null], null);
    };
  }(expanded, child_comment_atom, showing_comment_entry, error_atom, children_req, map__28287, map__28287__$1, questionid, commentid, text, userid);
};
forum.core.hello = function forum$core$hello(name) {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), "hello ", name, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [forum.core.display_comment, forum.core.request_chan], null)], null);
};
reagent.core.render.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [forum.core.display_comment, forum.core.request_chan, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "userid", "userid", 1974246085), 0, new cljs.core.Keyword(null, "text", "text", -1790561697), "test comment", new cljs.core.Keyword(null, "commentid", "commentid", 1114919753), 0, new cljs.core.Keyword(null, "questionid", "questionid", -274916981), 0], null)], null), 
document.body);
